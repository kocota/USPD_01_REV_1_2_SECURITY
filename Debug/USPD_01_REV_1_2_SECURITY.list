
USPD_01_REV_1_2_SECURITY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a054  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0802a1e4  0802a1e4  0002a1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a94c  0802a94c  000300d4  2**0
                  CONTENTS
  4 .ARM          00000008  0802a94c  0802a94c  0002a94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a954  0802a954  000300d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a954  0802a954  0002a954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a958  0802a958  0002a958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0802a95c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300d4  2**0
                  CONTENTS
 10 .bss          0000a164  200000d8  200000d8  000300d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000a23c  2000a23c  000300d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003749f  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a50  00000000  00000000  000675a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e00  00000000  00000000  0006dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b38  00000000  00000000  0006fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be55  00000000  00000000  00071930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ec53  00000000  00000000  0009d785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeb63  00000000  00000000  000cc3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001baf3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007fa0  00000000  00000000  001baf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	200000d8 	.word	0x200000d8
 80101ac:	00000000 	.word	0x00000000
 80101b0:	0802a1cc 	.word	0x0802a1cc

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	200000dc 	.word	0x200000dc
 80101cc:	0802a1cc 	.word	0x0802a1cc

080101d0 <strlen>:
 80101d0:	4603      	mov	r3, r0
 80101d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	d1fb      	bne.n	80101d2 <strlen+0x2>
 80101da:	1a18      	subs	r0, r3, r0
 80101dc:	3801      	subs	r0, #1
 80101de:	4770      	bx	lr

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <__aeabi_uldivmod>:
 8010280:	b953      	cbnz	r3, 8010298 <__aeabi_uldivmod+0x18>
 8010282:	b94a      	cbnz	r2, 8010298 <__aeabi_uldivmod+0x18>
 8010284:	2900      	cmp	r1, #0
 8010286:	bf08      	it	eq
 8010288:	2800      	cmpeq	r0, #0
 801028a:	bf1c      	itt	ne
 801028c:	f04f 31ff 	movne.w	r1, #4294967295
 8010290:	f04f 30ff 	movne.w	r0, #4294967295
 8010294:	f000 b96e 	b.w	8010574 <__aeabi_idiv0>
 8010298:	f1ad 0c08 	sub.w	ip, sp, #8
 801029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80102a0:	f000 f806 	bl	80102b0 <__udivmoddi4>
 80102a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80102a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102ac:	b004      	add	sp, #16
 80102ae:	4770      	bx	lr

080102b0 <__udivmoddi4>:
 80102b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b4:	9d08      	ldr	r5, [sp, #32]
 80102b6:	4604      	mov	r4, r0
 80102b8:	468c      	mov	ip, r1
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	f040 8083 	bne.w	80103c6 <__udivmoddi4+0x116>
 80102c0:	428a      	cmp	r2, r1
 80102c2:	4617      	mov	r7, r2
 80102c4:	d947      	bls.n	8010356 <__udivmoddi4+0xa6>
 80102c6:	fab2 f282 	clz	r2, r2
 80102ca:	b142      	cbz	r2, 80102de <__udivmoddi4+0x2e>
 80102cc:	f1c2 0020 	rsb	r0, r2, #32
 80102d0:	fa24 f000 	lsr.w	r0, r4, r0
 80102d4:	4091      	lsls	r1, r2
 80102d6:	4097      	lsls	r7, r2
 80102d8:	ea40 0c01 	orr.w	ip, r0, r1
 80102dc:	4094      	lsls	r4, r2
 80102de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80102e2:	0c23      	lsrs	r3, r4, #16
 80102e4:	fbbc f6f8 	udiv	r6, ip, r8
 80102e8:	fa1f fe87 	uxth.w	lr, r7
 80102ec:	fb08 c116 	mls	r1, r8, r6, ip
 80102f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80102f4:	fb06 f10e 	mul.w	r1, r6, lr
 80102f8:	4299      	cmp	r1, r3
 80102fa:	d909      	bls.n	8010310 <__udivmoddi4+0x60>
 80102fc:	18fb      	adds	r3, r7, r3
 80102fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8010302:	f080 8119 	bcs.w	8010538 <__udivmoddi4+0x288>
 8010306:	4299      	cmp	r1, r3
 8010308:	f240 8116 	bls.w	8010538 <__udivmoddi4+0x288>
 801030c:	3e02      	subs	r6, #2
 801030e:	443b      	add	r3, r7
 8010310:	1a5b      	subs	r3, r3, r1
 8010312:	b2a4      	uxth	r4, r4
 8010314:	fbb3 f0f8 	udiv	r0, r3, r8
 8010318:	fb08 3310 	mls	r3, r8, r0, r3
 801031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010320:	fb00 fe0e 	mul.w	lr, r0, lr
 8010324:	45a6      	cmp	lr, r4
 8010326:	d909      	bls.n	801033c <__udivmoddi4+0x8c>
 8010328:	193c      	adds	r4, r7, r4
 801032a:	f100 33ff 	add.w	r3, r0, #4294967295
 801032e:	f080 8105 	bcs.w	801053c <__udivmoddi4+0x28c>
 8010332:	45a6      	cmp	lr, r4
 8010334:	f240 8102 	bls.w	801053c <__udivmoddi4+0x28c>
 8010338:	3802      	subs	r0, #2
 801033a:	443c      	add	r4, r7
 801033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010340:	eba4 040e 	sub.w	r4, r4, lr
 8010344:	2600      	movs	r6, #0
 8010346:	b11d      	cbz	r5, 8010350 <__udivmoddi4+0xa0>
 8010348:	40d4      	lsrs	r4, r2
 801034a:	2300      	movs	r3, #0
 801034c:	e9c5 4300 	strd	r4, r3, [r5]
 8010350:	4631      	mov	r1, r6
 8010352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010356:	b902      	cbnz	r2, 801035a <__udivmoddi4+0xaa>
 8010358:	deff      	udf	#255	; 0xff
 801035a:	fab2 f282 	clz	r2, r2
 801035e:	2a00      	cmp	r2, #0
 8010360:	d150      	bne.n	8010404 <__udivmoddi4+0x154>
 8010362:	1bcb      	subs	r3, r1, r7
 8010364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010368:	fa1f f887 	uxth.w	r8, r7
 801036c:	2601      	movs	r6, #1
 801036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8010372:	0c21      	lsrs	r1, r4, #16
 8010374:	fb0e 331c 	mls	r3, lr, ip, r3
 8010378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801037c:	fb08 f30c 	mul.w	r3, r8, ip
 8010380:	428b      	cmp	r3, r1
 8010382:	d907      	bls.n	8010394 <__udivmoddi4+0xe4>
 8010384:	1879      	adds	r1, r7, r1
 8010386:	f10c 30ff 	add.w	r0, ip, #4294967295
 801038a:	d202      	bcs.n	8010392 <__udivmoddi4+0xe2>
 801038c:	428b      	cmp	r3, r1
 801038e:	f200 80e9 	bhi.w	8010564 <__udivmoddi4+0x2b4>
 8010392:	4684      	mov	ip, r0
 8010394:	1ac9      	subs	r1, r1, r3
 8010396:	b2a3      	uxth	r3, r4
 8010398:	fbb1 f0fe 	udiv	r0, r1, lr
 801039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80103a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80103a4:	fb08 f800 	mul.w	r8, r8, r0
 80103a8:	45a0      	cmp	r8, r4
 80103aa:	d907      	bls.n	80103bc <__udivmoddi4+0x10c>
 80103ac:	193c      	adds	r4, r7, r4
 80103ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80103b2:	d202      	bcs.n	80103ba <__udivmoddi4+0x10a>
 80103b4:	45a0      	cmp	r8, r4
 80103b6:	f200 80d9 	bhi.w	801056c <__udivmoddi4+0x2bc>
 80103ba:	4618      	mov	r0, r3
 80103bc:	eba4 0408 	sub.w	r4, r4, r8
 80103c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80103c4:	e7bf      	b.n	8010346 <__udivmoddi4+0x96>
 80103c6:	428b      	cmp	r3, r1
 80103c8:	d909      	bls.n	80103de <__udivmoddi4+0x12e>
 80103ca:	2d00      	cmp	r5, #0
 80103cc:	f000 80b1 	beq.w	8010532 <__udivmoddi4+0x282>
 80103d0:	2600      	movs	r6, #0
 80103d2:	e9c5 0100 	strd	r0, r1, [r5]
 80103d6:	4630      	mov	r0, r6
 80103d8:	4631      	mov	r1, r6
 80103da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103de:	fab3 f683 	clz	r6, r3
 80103e2:	2e00      	cmp	r6, #0
 80103e4:	d14a      	bne.n	801047c <__udivmoddi4+0x1cc>
 80103e6:	428b      	cmp	r3, r1
 80103e8:	d302      	bcc.n	80103f0 <__udivmoddi4+0x140>
 80103ea:	4282      	cmp	r2, r0
 80103ec:	f200 80b8 	bhi.w	8010560 <__udivmoddi4+0x2b0>
 80103f0:	1a84      	subs	r4, r0, r2
 80103f2:	eb61 0103 	sbc.w	r1, r1, r3
 80103f6:	2001      	movs	r0, #1
 80103f8:	468c      	mov	ip, r1
 80103fa:	2d00      	cmp	r5, #0
 80103fc:	d0a8      	beq.n	8010350 <__udivmoddi4+0xa0>
 80103fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8010402:	e7a5      	b.n	8010350 <__udivmoddi4+0xa0>
 8010404:	f1c2 0320 	rsb	r3, r2, #32
 8010408:	fa20 f603 	lsr.w	r6, r0, r3
 801040c:	4097      	lsls	r7, r2
 801040e:	fa01 f002 	lsl.w	r0, r1, r2
 8010412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010416:	40d9      	lsrs	r1, r3
 8010418:	4330      	orrs	r0, r6
 801041a:	0c03      	lsrs	r3, r0, #16
 801041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8010420:	fa1f f887 	uxth.w	r8, r7
 8010424:	fb0e 1116 	mls	r1, lr, r6, r1
 8010428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801042c:	fb06 f108 	mul.w	r1, r6, r8
 8010430:	4299      	cmp	r1, r3
 8010432:	fa04 f402 	lsl.w	r4, r4, r2
 8010436:	d909      	bls.n	801044c <__udivmoddi4+0x19c>
 8010438:	18fb      	adds	r3, r7, r3
 801043a:	f106 3cff 	add.w	ip, r6, #4294967295
 801043e:	f080 808d 	bcs.w	801055c <__udivmoddi4+0x2ac>
 8010442:	4299      	cmp	r1, r3
 8010444:	f240 808a 	bls.w	801055c <__udivmoddi4+0x2ac>
 8010448:	3e02      	subs	r6, #2
 801044a:	443b      	add	r3, r7
 801044c:	1a5b      	subs	r3, r3, r1
 801044e:	b281      	uxth	r1, r0
 8010450:	fbb3 f0fe 	udiv	r0, r3, lr
 8010454:	fb0e 3310 	mls	r3, lr, r0, r3
 8010458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801045c:	fb00 f308 	mul.w	r3, r0, r8
 8010460:	428b      	cmp	r3, r1
 8010462:	d907      	bls.n	8010474 <__udivmoddi4+0x1c4>
 8010464:	1879      	adds	r1, r7, r1
 8010466:	f100 3cff 	add.w	ip, r0, #4294967295
 801046a:	d273      	bcs.n	8010554 <__udivmoddi4+0x2a4>
 801046c:	428b      	cmp	r3, r1
 801046e:	d971      	bls.n	8010554 <__udivmoddi4+0x2a4>
 8010470:	3802      	subs	r0, #2
 8010472:	4439      	add	r1, r7
 8010474:	1acb      	subs	r3, r1, r3
 8010476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 801047a:	e778      	b.n	801036e <__udivmoddi4+0xbe>
 801047c:	f1c6 0c20 	rsb	ip, r6, #32
 8010480:	fa03 f406 	lsl.w	r4, r3, r6
 8010484:	fa22 f30c 	lsr.w	r3, r2, ip
 8010488:	431c      	orrs	r4, r3
 801048a:	fa20 f70c 	lsr.w	r7, r0, ip
 801048e:	fa01 f306 	lsl.w	r3, r1, r6
 8010492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8010496:	fa21 f10c 	lsr.w	r1, r1, ip
 801049a:	431f      	orrs	r7, r3
 801049c:	0c3b      	lsrs	r3, r7, #16
 801049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80104a2:	fa1f f884 	uxth.w	r8, r4
 80104a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80104aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80104ae:	fb09 fa08 	mul.w	sl, r9, r8
 80104b2:	458a      	cmp	sl, r1
 80104b4:	fa02 f206 	lsl.w	r2, r2, r6
 80104b8:	fa00 f306 	lsl.w	r3, r0, r6
 80104bc:	d908      	bls.n	80104d0 <__udivmoddi4+0x220>
 80104be:	1861      	adds	r1, r4, r1
 80104c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80104c4:	d248      	bcs.n	8010558 <__udivmoddi4+0x2a8>
 80104c6:	458a      	cmp	sl, r1
 80104c8:	d946      	bls.n	8010558 <__udivmoddi4+0x2a8>
 80104ca:	f1a9 0902 	sub.w	r9, r9, #2
 80104ce:	4421      	add	r1, r4
 80104d0:	eba1 010a 	sub.w	r1, r1, sl
 80104d4:	b2bf      	uxth	r7, r7
 80104d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80104da:	fb0e 1110 	mls	r1, lr, r0, r1
 80104de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80104e2:	fb00 f808 	mul.w	r8, r0, r8
 80104e6:	45b8      	cmp	r8, r7
 80104e8:	d907      	bls.n	80104fa <__udivmoddi4+0x24a>
 80104ea:	19e7      	adds	r7, r4, r7
 80104ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80104f0:	d22e      	bcs.n	8010550 <__udivmoddi4+0x2a0>
 80104f2:	45b8      	cmp	r8, r7
 80104f4:	d92c      	bls.n	8010550 <__udivmoddi4+0x2a0>
 80104f6:	3802      	subs	r0, #2
 80104f8:	4427      	add	r7, r4
 80104fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80104fe:	eba7 0708 	sub.w	r7, r7, r8
 8010502:	fba0 8902 	umull	r8, r9, r0, r2
 8010506:	454f      	cmp	r7, r9
 8010508:	46c6      	mov	lr, r8
 801050a:	4649      	mov	r1, r9
 801050c:	d31a      	bcc.n	8010544 <__udivmoddi4+0x294>
 801050e:	d017      	beq.n	8010540 <__udivmoddi4+0x290>
 8010510:	b15d      	cbz	r5, 801052a <__udivmoddi4+0x27a>
 8010512:	ebb3 020e 	subs.w	r2, r3, lr
 8010516:	eb67 0701 	sbc.w	r7, r7, r1
 801051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 801051e:	40f2      	lsrs	r2, r6
 8010520:	ea4c 0202 	orr.w	r2, ip, r2
 8010524:	40f7      	lsrs	r7, r6
 8010526:	e9c5 2700 	strd	r2, r7, [r5]
 801052a:	2600      	movs	r6, #0
 801052c:	4631      	mov	r1, r6
 801052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010532:	462e      	mov	r6, r5
 8010534:	4628      	mov	r0, r5
 8010536:	e70b      	b.n	8010350 <__udivmoddi4+0xa0>
 8010538:	4606      	mov	r6, r0
 801053a:	e6e9      	b.n	8010310 <__udivmoddi4+0x60>
 801053c:	4618      	mov	r0, r3
 801053e:	e6fd      	b.n	801033c <__udivmoddi4+0x8c>
 8010540:	4543      	cmp	r3, r8
 8010542:	d2e5      	bcs.n	8010510 <__udivmoddi4+0x260>
 8010544:	ebb8 0e02 	subs.w	lr, r8, r2
 8010548:	eb69 0104 	sbc.w	r1, r9, r4
 801054c:	3801      	subs	r0, #1
 801054e:	e7df      	b.n	8010510 <__udivmoddi4+0x260>
 8010550:	4608      	mov	r0, r1
 8010552:	e7d2      	b.n	80104fa <__udivmoddi4+0x24a>
 8010554:	4660      	mov	r0, ip
 8010556:	e78d      	b.n	8010474 <__udivmoddi4+0x1c4>
 8010558:	4681      	mov	r9, r0
 801055a:	e7b9      	b.n	80104d0 <__udivmoddi4+0x220>
 801055c:	4666      	mov	r6, ip
 801055e:	e775      	b.n	801044c <__udivmoddi4+0x19c>
 8010560:	4630      	mov	r0, r6
 8010562:	e74a      	b.n	80103fa <__udivmoddi4+0x14a>
 8010564:	f1ac 0c02 	sub.w	ip, ip, #2
 8010568:	4439      	add	r1, r7
 801056a:	e713      	b.n	8010394 <__udivmoddi4+0xe4>
 801056c:	3802      	subs	r0, #2
 801056e:	443c      	add	r4, r7
 8010570:	e724      	b.n	80103bc <__udivmoddi4+0x10c>
 8010572:	bf00      	nop

08010574 <__aeabi_idiv0>:
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop

08010578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	4a07      	ldr	r2, [pc, #28]	; (80105a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8010588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	4a06      	ldr	r2, [pc, #24]	; (80105a8 <vApplicationGetIdleTaskMemory+0x30>)
 801058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2280      	movs	r2, #128	; 0x80
 8010594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8010596:	bf00      	nop
 8010598:	3714      	adds	r7, #20
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	200000f4 	.word	0x200000f4
 80105a8:	200001a8 	.word	0x200001a8

080105ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	4a07      	ldr	r2, [pc, #28]	; (80105d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80105bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	4a06      	ldr	r2, [pc, #24]	; (80105dc <vApplicationGetTimerTaskMemory+0x30>)
 80105c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80105ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80105cc:	bf00      	nop
 80105ce:	3714      	adds	r7, #20
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr
 80105d8:	200003a8 	.word	0x200003a8
 80105dc:	2000045c 	.word	0x2000045c

080105e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80105e0:	b480      	push	{r7}
 80105e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80105e4:	f3bf 8f4f 	dsb	sy
}
 80105e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80105ea:	4b06      	ldr	r3, [pc, #24]	; (8010604 <__NVIC_SystemReset+0x24>)
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80105f2:	4904      	ldr	r1, [pc, #16]	; (8010604 <__NVIC_SystemReset+0x24>)
 80105f4:	4b04      	ldr	r3, [pc, #16]	; (8010608 <__NVIC_SystemReset+0x28>)
 80105f6:	4313      	orrs	r3, r2
 80105f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80105fa:	f3bf 8f4f 	dsb	sy
}
 80105fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8010600:	bf00      	nop
 8010602:	e7fd      	b.n	8010600 <__NVIC_SystemReset+0x20>
 8010604:	e000ed00 	.word	0xe000ed00
 8010608:	05fa0004 	.word	0x05fa0004

0801060c <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4a10      	ldr	r2, [pc, #64]	; (801065c <HAL_UART_TxCpltCallback+0x50>)
 801061a:	4293      	cmp	r3, r2
 801061c:	d104      	bne.n	8010628 <HAL_UART_TxCpltCallback+0x1c>
	  {
		  osSemaphoreRelease(TransmissionStateHandle);
 801061e:	4b10      	ldr	r3, [pc, #64]	; (8010660 <HAL_UART_TxCpltCallback+0x54>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4618      	mov	r0, r3
 8010624:	f006 fc4e 	bl	8016ec4 <osSemaphoreRelease>
	  }

	  if (huart->Instance == USART6)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a0d      	ldr	r2, [pc, #52]	; (8010664 <HAL_UART_TxCpltCallback+0x58>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d10f      	bne.n	8010652 <HAL_UART_TxCpltCallback+0x46>
	  {
		  //LED8_TOGGLE();
		  osSemaphoreRelease(RS485TransmissionStateHandle);
 8010632:	4b0d      	ldr	r3, [pc, #52]	; (8010668 <HAL_UART_TxCpltCallback+0x5c>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	4618      	mov	r0, r3
 8010638:	f006 fc44 	bl	8016ec4 <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET); // устанавливаем микросхему на прием
 801063c:	2200      	movs	r2, #0
 801063e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010642:	480a      	ldr	r0, [pc, #40]	; (801066c <HAL_UART_TxCpltCallback+0x60>)
 8010644:	f002 fdc6 	bl	80131d4 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart6, &meter_data[0], 1); // включаем прием со счетчика
 8010648:	2201      	movs	r2, #1
 801064a:	4909      	ldr	r1, [pc, #36]	; (8010670 <HAL_UART_TxCpltCallback+0x64>)
 801064c:	4809      	ldr	r0, [pc, #36]	; (8010674 <HAL_UART_TxCpltCallback+0x68>)
 801064e:	f005 f8f7 	bl	8015840 <HAL_UART_Receive_DMA>

	  }

}
 8010652:	bf00      	nop
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	40004800 	.word	0x40004800
 8010660:	20009cb8 	.word	0x20009cb8
 8010664:	40011400 	.word	0x40011400
 8010668:	20009a50 	.word	0x20009a50
 801066c:	40021800 	.word	0x40021800
 8010670:	20009730 	.word	0x20009730
 8010674:	20009c70 	.word	0x20009c70

08010678 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART3)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a21      	ldr	r2, [pc, #132]	; (801070c <HAL_UART_RxCpltCallback+0x94>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d119      	bne.n	80106be <HAL_UART_RxCpltCallback+0x46>
	  {
		  //LED_VD5_TOGGLE();
		  modem_rx_buffer[modem_rx_number++] = modem_rx_data[0];
 801068a:	4b21      	ldr	r3, [pc, #132]	; (8010710 <HAL_UART_RxCpltCallback+0x98>)
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	b2d1      	uxtb	r1, r2
 8010692:	4a1f      	ldr	r2, [pc, #124]	; (8010710 <HAL_UART_RxCpltCallback+0x98>)
 8010694:	7011      	strb	r1, [r2, #0]
 8010696:	461a      	mov	r2, r3
 8010698:	4b1e      	ldr	r3, [pc, #120]	; (8010714 <HAL_UART_RxCpltCallback+0x9c>)
 801069a:	7819      	ldrb	r1, [r3, #0]
 801069c:	4b1e      	ldr	r3, [pc, #120]	; (8010718 <HAL_UART_RxCpltCallback+0xa0>)
 801069e:	5499      	strb	r1, [r3, r2]
		  osMessagePut(ModbusQueueHandle, (uint32_t)modem_rx_data[0], 2000);
 80106a0:	4b1e      	ldr	r3, [pc, #120]	; (801071c <HAL_UART_RxCpltCallback+0xa4>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4a1b      	ldr	r2, [pc, #108]	; (8010714 <HAL_UART_RxCpltCallback+0x9c>)
 80106a6:	7812      	ldrb	r2, [r2, #0]
 80106a8:	4611      	mov	r1, r2
 80106aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80106ae:	4618      	mov	r0, r3
 80106b0:	f006 fc66 	bl	8016f80 <osMessagePut>
		  HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 80106b4:	2201      	movs	r2, #1
 80106b6:	4917      	ldr	r1, [pc, #92]	; (8010714 <HAL_UART_RxCpltCallback+0x9c>)
 80106b8:	4819      	ldr	r0, [pc, #100]	; (8010720 <HAL_UART_RxCpltCallback+0xa8>)
 80106ba:	f005 f8c1 	bl	8015840 <HAL_UART_Receive_DMA>
	  }

	  if (huart->Instance == USART6)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	4a18      	ldr	r2, [pc, #96]	; (8010724 <HAL_UART_RxCpltCallback+0xac>)
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d11c      	bne.n	8010702 <HAL_UART_RxCpltCallback+0x8a>
	  {
		  //LED7_TOGGLE();
		  meter_data[0] = meter_data[0]&0x7F;
 80106c8:	4b17      	ldr	r3, [pc, #92]	; (8010728 <HAL_UART_RxCpltCallback+0xb0>)
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106d0:	b2da      	uxtb	r2, r3
 80106d2:	4b15      	ldr	r3, [pc, #84]	; (8010728 <HAL_UART_RxCpltCallback+0xb0>)
 80106d4:	701a      	strb	r2, [r3, #0]
		  meter_rx_buffer[meter_rx_number++] = meter_data[0];
 80106d6:	4b15      	ldr	r3, [pc, #84]	; (801072c <HAL_UART_RxCpltCallback+0xb4>)
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	1c5a      	adds	r2, r3, #1
 80106dc:	b2d1      	uxtb	r1, r2
 80106de:	4a13      	ldr	r2, [pc, #76]	; (801072c <HAL_UART_RxCpltCallback+0xb4>)
 80106e0:	7011      	strb	r1, [r2, #0]
 80106e2:	461a      	mov	r2, r3
 80106e4:	4b10      	ldr	r3, [pc, #64]	; (8010728 <HAL_UART_RxCpltCallback+0xb0>)
 80106e6:	7819      	ldrb	r1, [r3, #0]
 80106e8:	4b11      	ldr	r3, [pc, #68]	; (8010730 <HAL_UART_RxCpltCallback+0xb8>)
 80106ea:	5499      	strb	r1, [r3, r2]
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET); // устанавливаем микросхему на прием
 80106ec:	2200      	movs	r2, #0
 80106ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80106f2:	4810      	ldr	r0, [pc, #64]	; (8010734 <HAL_UART_RxCpltCallback+0xbc>)
 80106f4:	f002 fd6e 	bl	80131d4 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart6, &meter_data[0], 1); // включаем прием со счетчика
 80106f8:	2201      	movs	r2, #1
 80106fa:	490b      	ldr	r1, [pc, #44]	; (8010728 <HAL_UART_RxCpltCallback+0xb0>)
 80106fc:	480e      	ldr	r0, [pc, #56]	; (8010738 <HAL_UART_RxCpltCallback+0xc0>)
 80106fe:	f005 f89f 	bl	8015840 <HAL_UART_Receive_DMA>

		  //if(meter_rx_number>10){meter_rx_number=0;}

	  }

}
 8010702:	bf00      	nop
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	40004800 	.word	0x40004800
 8010710:	2000085c 	.word	0x2000085c
 8010714:	20009a70 	.word	0x20009a70
 8010718:	20009b70 	.word	0x20009b70
 801071c:	20008294 	.word	0x20008294
 8010720:	20008238 	.word	0x20008238
 8010724:	40011400 	.word	0x40011400
 8010728:	20009730 	.word	0x20009730
 801072c:	2000085d 	.word	0x2000085d
 8010730:	200098e4 	.word	0x200098e4
 8010734:	40021800 	.word	0x40021800
 8010738:	20009c70 	.word	0x20009c70

0801073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801073c:	b5b0      	push	{r4, r5, r7, lr}
 801073e:	b0f6      	sub	sp, #472	; 0x1d8
 8010740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010742:	f001 fa51 	bl	8011be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010746:	f000 fa13 	bl	8010b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801074a:	f000 fc67 	bl	801101c <MX_GPIO_Init>
  MX_DMA_Init();
 801074e:	f000 fc1f 	bl	8010f90 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8010752:	f000 fb9f 	bl	8010e94 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8010756:	f000 fbc7 	bl	8010ee8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 801075a:	f000 fbef 	bl	8010f3c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 801075e:	f000 fa75 	bl	8010c4c <MX_ADC1_Init>
  MX_IWDG_Init();
 8010762:	f000 fb03 	bl	8010d6c <MX_IWDG_Init>
  MX_RTC_Init();
 8010766:	f000 fb1b 	bl	8010da0 <MX_RTC_Init>
  MX_SPI2_Init();
 801076a:	f000 fb5d 	bl	8010e28 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  BUZ_ON();
 801076e:	f014 ff17 	bl	80255a0 <BUZ_ON>
  HAL_Delay(50);
 8010772:	2032      	movs	r0, #50	; 0x32
 8010774:	f001 fa7a 	bl	8011c6c <HAL_Delay>
  BUZ_OFF();
 8010778:	f014 ff1e 	bl	80255b8 <BUZ_OFF>

  if( ((RCC->BDCR)&0x02) != 0 ) // Проверяем, запустился ли часовой кварц, если запустился включаем светодиод
 801077c:	4bcf      	ldr	r3, [pc, #828]	; (8010abc <main+0x380>)
 801077e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  osMutexDef(UartMutex);
 8010780:	2300      	movs	r3, #0
 8010782:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8010786:	2300      	movs	r3, #0
 8010788:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 801078c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8010790:	4618      	mov	r0, r3
 8010792:	f006 fa6d 	bl	8016c70 <osMutexCreate>
 8010796:	4603      	mov	r3, r0
 8010798:	4ac9      	ldr	r2, [pc, #804]	; (8010ac0 <main+0x384>)
 801079a:	6013      	str	r3, [r2, #0]

  osMutexDef(Fm25v02Mutex);
 801079c:	2300      	movs	r3, #0
 801079e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80107a2:	2300      	movs	r3, #0
 80107a4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  Fm25v02MutexHandle = osMutexCreate(osMutex(Fm25v02Mutex));
 80107a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107ac:	4618      	mov	r0, r3
 80107ae:	f006 fa5f 	bl	8016c70 <osMutexCreate>
 80107b2:	4603      	mov	r3, r0
 80107b4:	4ac3      	ldr	r2, [pc, #780]	; (8010ac4 <main+0x388>)
 80107b6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  osSemaphoreDef(TransmissionState);
 80107b8:	2300      	movs	r3, #0
 80107ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80107be:	2300      	movs	r3, #0
 80107c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  TransmissionStateHandle = osSemaphoreCreate(osSemaphore(TransmissionState), 1);
 80107c4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80107c8:	2101      	movs	r1, #1
 80107ca:	4618      	mov	r0, r3
 80107cc:	f006 faec 	bl	8016da8 <osSemaphoreCreate>
 80107d0:	4603      	mov	r3, r0
 80107d2:	4abd      	ldr	r2, [pc, #756]	; (8010ac8 <main+0x38c>)
 80107d4:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ReceiveState);
 80107d6:	2300      	movs	r3, #0
 80107d8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80107dc:	2300      	movs	r3, #0
 80107de:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  ReceiveStateHandle = osSemaphoreCreate(osSemaphore(ReceiveState), 1);
 80107e2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80107e6:	2101      	movs	r1, #1
 80107e8:	4618      	mov	r0, r3
 80107ea:	f006 fadd 	bl	8016da8 <osSemaphoreCreate>
 80107ee:	4603      	mov	r3, r0
 80107f0:	4ab6      	ldr	r2, [pc, #728]	; (8010acc <main+0x390>)
 80107f2:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(RS485TransmissionState);
 80107f4:	2300      	movs	r3, #0
 80107f6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80107fa:	2300      	movs	r3, #0
 80107fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  RS485TransmissionStateHandle = osSemaphoreCreate(osSemaphore(RS485TransmissionState), 1);
 8010800:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8010804:	2101      	movs	r1, #1
 8010806:	4618      	mov	r0, r3
 8010808:	f006 face 	bl	8016da8 <osSemaphoreCreate>
 801080c:	4603      	mov	r3, r0
 801080e:	4ab0      	ldr	r2, [pc, #704]	; (8010ad0 <main+0x394>)
 8010810:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ModbusPacketReceive);
 8010812:	2300      	movs	r3, #0
 8010814:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8010818:	2300      	movs	r3, #0
 801081a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  ModbusPacketReceiveHandle = osSemaphoreCreate(osSemaphore(ModbusPacketReceive), 1);
 801081e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8010822:	2101      	movs	r1, #1
 8010824:	4618      	mov	r0, r3
 8010826:	f006 fabf 	bl	8016da8 <osSemaphoreCreate>
 801082a:	4603      	mov	r3, r0
 801082c:	4aa9      	ldr	r2, [pc, #676]	; (8010ad4 <main+0x398>)
 801082e:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(CallRingCenter);
 8010830:	2300      	movs	r3, #0
 8010832:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8010836:	2300      	movs	r3, #0
 8010838:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  CallRingCenterHandle = osSemaphoreCreate(osSemaphore(CallRingCenter), 1);
 801083c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8010840:	2101      	movs	r1, #1
 8010842:	4618      	mov	r0, r3
 8010844:	f006 fab0 	bl	8016da8 <osSemaphoreCreate>
 8010848:	4603      	mov	r3, r0
 801084a:	4aa3      	ldr	r2, [pc, #652]	; (8010ad8 <main+0x39c>)
 801084c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  osTimerDef(AT_Timer, Callback_AT_Timer);
 801084e:	4ba3      	ldr	r3, [pc, #652]	; (8010adc <main+0x3a0>)
 8010850:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8010854:	2300      	movs	r3, #0
 8010856:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  AT_TimerHandle = osTimerCreate(osTimer(AT_Timer), osTimerOnce, NULL);
 801085a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801085e:	2200      	movs	r2, #0
 8010860:	2100      	movs	r1, #0
 8010862:	4618      	mov	r0, r3
 8010864:	f006 f950 	bl	8016b08 <osTimerCreate>
 8010868:	4603      	mov	r3, r0
 801086a:	4a9d      	ldr	r2, [pc, #628]	; (8010ae0 <main+0x3a4>)
 801086c:	6013      	str	r3, [r2, #0]

  osTimerDef(Ring_Center_Timer, Callback_Ring_Center_Timer);
 801086e:	4b9d      	ldr	r3, [pc, #628]	; (8010ae4 <main+0x3a8>)
 8010870:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8010874:	2300      	movs	r3, #0
 8010876:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  Ring_Center_TimerHandle = osTimerCreate(osTimer(Ring_Center_Timer), osTimerOnce, NULL);
 801087a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801087e:	2200      	movs	r2, #0
 8010880:	2100      	movs	r1, #0
 8010882:	4618      	mov	r0, r3
 8010884:	f006 f940 	bl	8016b08 <osTimerCreate>
 8010888:	4603      	mov	r3, r0
 801088a:	4a97      	ldr	r2, [pc, #604]	; (8010ae8 <main+0x3ac>)
 801088c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  osMessageQDef(ModbusQueue, 256, uint8_t);
 801088e:	4b97      	ldr	r3, [pc, #604]	; (8010aec <main+0x3b0>)
 8010890:	f507 74c0 	add.w	r4, r7, #384	; 0x180
 8010894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModbusQueueHandle = osMessageCreate(osMessageQ(ModbusQueue), NULL);
 801089a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801089e:	2100      	movs	r1, #0
 80108a0:	4618      	mov	r0, r3
 80108a2:	f006 fb45 	bl	8016f30 <osMessageCreate>
 80108a6:	4603      	mov	r3, r0
 80108a8:	4a91      	ldr	r2, [pc, #580]	; (8010af0 <main+0x3b4>)
 80108aa:	6013      	str	r3, [r2, #0]

  osMessageQDef(MeterQueue, 256, uint8_t);
 80108ac:	4b8f      	ldr	r3, [pc, #572]	; (8010aec <main+0x3b0>)
 80108ae:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 80108b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MeterQueueHandle = osMessageCreate(osMessageQ(MeterQueue), NULL);
 80108b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80108bc:	2100      	movs	r1, #0
 80108be:	4618      	mov	r0, r3
 80108c0:	f006 fb36 	bl	8016f30 <osMessageCreate>
 80108c4:	4603      	mov	r3, r0
 80108c6:	4a8b      	ldr	r2, [pc, #556]	; (8010af4 <main+0x3b8>)
 80108c8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80108ca:	4b8b      	ldr	r3, [pc, #556]	; (8010af8 <main+0x3bc>)
 80108cc:	f507 74aa 	add.w	r4, r7, #340	; 0x154
 80108d0:	461d      	mov	r5, r3
 80108d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80108da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80108de:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80108e2:	2100      	movs	r1, #0
 80108e4:	4618      	mov	r0, r3
 80108e6:	f006 f8ae 	bl	8016a46 <osThreadCreate>
 80108ea:	4603      	mov	r3, r0
 80108ec:	4a83      	ldr	r2, [pc, #524]	; (8010afc <main+0x3c0>)
 80108ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(IbuttonTask, ThreadIbuttonTask, osPriorityNormal, 0, 128);
 80108f0:	4b83      	ldr	r3, [pc, #524]	; (8010b00 <main+0x3c4>)
 80108f2:	f507 749c 	add.w	r4, r7, #312	; 0x138
 80108f6:	461d      	mov	r5, r3
 80108f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IbuttonTaskHandle = osThreadCreate(osThread(IbuttonTask), NULL);
 8010904:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010908:	2100      	movs	r1, #0
 801090a:	4618      	mov	r0, r3
 801090c:	f006 f89b 	bl	8016a46 <osThreadCreate>
 8010910:	4603      	mov	r3, r0
 8010912:	4a7c      	ldr	r2, [pc, #496]	; (8010b04 <main+0x3c8>)
 8010914:	6013      	str	r3, [r2, #0]

  osThreadDef(SecurityTask, ThreadSecurityTask, osPriorityNormal, 0, 128);
 8010916:	4b7c      	ldr	r3, [pc, #496]	; (8010b08 <main+0x3cc>)
 8010918:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 801091c:	461d      	mov	r5, r3
 801091e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010922:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010926:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SecurityTaskHandle = osThreadCreate(osThread(SecurityTask), NULL);
 801092a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801092e:	2100      	movs	r1, #0
 8010930:	4618      	mov	r0, r3
 8010932:	f006 f888 	bl	8016a46 <osThreadCreate>
 8010936:	4603      	mov	r3, r0
 8010938:	4a74      	ldr	r2, [pc, #464]	; (8010b0c <main+0x3d0>)
 801093a:	6013      	str	r3, [r2, #0]

  osThreadDef(M95Task, ThreadM95Task, osPriorityNormal, 0, 128);
 801093c:	4b74      	ldr	r3, [pc, #464]	; (8010b10 <main+0x3d4>)
 801093e:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8010942:	461d      	mov	r5, r3
 8010944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010948:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801094c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  M95TaskHandle = osThreadCreate(osThread(M95Task), NULL);
 8010950:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010954:	2100      	movs	r1, #0
 8010956:	4618      	mov	r0, r3
 8010958:	f006 f875 	bl	8016a46 <osThreadCreate>
 801095c:	4603      	mov	r3, r0
 801095e:	4a6d      	ldr	r2, [pc, #436]	; (8010b14 <main+0x3d8>)
 8010960:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusTask, ThreadModbusTask, osPriorityNormal, 0, 128);
 8010962:	4b6d      	ldr	r3, [pc, #436]	; (8010b18 <main+0x3dc>)
 8010964:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8010968:	461d      	mov	r5, r3
 801096a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801096c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801096e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 8010976:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801097a:	2100      	movs	r1, #0
 801097c:	4618      	mov	r0, r3
 801097e:	f006 f862 	bl	8016a46 <osThreadCreate>
 8010982:	4603      	mov	r3, r0
 8010984:	4a65      	ldr	r2, [pc, #404]	; (8010b1c <main+0x3e0>)
 8010986:	6013      	str	r3, [r2, #0]

  osThreadDef(MainTask, ThreadMainTask, osPriorityNormal, 0, 128);
 8010988:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801098c:	4a64      	ldr	r2, [pc, #400]	; (8010b20 <main+0x3e4>)
 801098e:	461c      	mov	r4, r3
 8010990:	4615      	mov	r5, r2
 8010992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801099a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 801099e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80109a2:	2100      	movs	r1, #0
 80109a4:	4618      	mov	r0, r3
 80109a6:	f006 f84e 	bl	8016a46 <osThreadCreate>
 80109aa:	4603      	mov	r3, r0
 80109ac:	4a5d      	ldr	r2, [pc, #372]	; (8010b24 <main+0x3e8>)
 80109ae:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusPacketTask, ThreadModbusPacketTask, osPriorityNormal, 0, 128);
 80109b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80109b4:	4a5c      	ldr	r2, [pc, #368]	; (8010b28 <main+0x3ec>)
 80109b6:	461c      	mov	r4, r3
 80109b8:	4615      	mov	r5, r2
 80109ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80109c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusPacketTaskHandle = osThreadCreate(osThread(ModbusPacketTask), NULL);
 80109c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80109ca:	2100      	movs	r1, #0
 80109cc:	4618      	mov	r0, r3
 80109ce:	f006 f83a 	bl	8016a46 <osThreadCreate>
 80109d2:	4603      	mov	r3, r0
 80109d4:	4a55      	ldr	r2, [pc, #340]	; (8010b2c <main+0x3f0>)
 80109d6:	6013      	str	r3, [r2, #0]

  osThreadDef(CallRingCenterTask, ThreadCallRingCenterTask, osPriorityNormal, 0, 128);
 80109d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80109dc:	4a54      	ldr	r2, [pc, #336]	; (8010b30 <main+0x3f4>)
 80109de:	461c      	mov	r4, r3
 80109e0:	4615      	mov	r5, r2
 80109e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80109ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CallRingCenterTaskHandle = osThreadCreate(osThread(CallRingCenterTask), NULL);
 80109ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80109f2:	2100      	movs	r1, #0
 80109f4:	4618      	mov	r0, r3
 80109f6:	f006 f826 	bl	8016a46 <osThreadCreate>
 80109fa:	4603      	mov	r3, r0
 80109fc:	4a4d      	ldr	r2, [pc, #308]	; (8010b34 <main+0x3f8>)
 80109fe:	6013      	str	r3, [r2, #0]

  osThreadDef(LedTask, ThreadLedTask, osPriorityNormal, 0, 128);
 8010a00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010a04:	4a4c      	ldr	r2, [pc, #304]	; (8010b38 <main+0x3fc>)
 8010a06:	461c      	mov	r4, r3
 8010a08:	4615      	mov	r5, r2
 8010a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 8010a16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010a1a:	2100      	movs	r1, #0
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f006 f812 	bl	8016a46 <osThreadCreate>
 8010a22:	4603      	mov	r3, r0
 8010a24:	4a45      	ldr	r2, [pc, #276]	; (8010b3c <main+0x400>)
 8010a26:	6013      	str	r3, [r2, #0]

  osThreadDef(ArmingTask, ThreadArmingTask, osPriorityNormal, 0, 128);
 8010a28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a2c:	4a44      	ldr	r2, [pc, #272]	; (8010b40 <main+0x404>)
 8010a2e:	461c      	mov	r4, r3
 8010a30:	4615      	mov	r5, r2
 8010a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ArmingTaskHandle = osThreadCreate(osThread(ArmingTask), NULL);
 8010a3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a42:	2100      	movs	r1, #0
 8010a44:	4618      	mov	r0, r3
 8010a46:	f005 fffe 	bl	8016a46 <osThreadCreate>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	4a3d      	ldr	r2, [pc, #244]	; (8010b44 <main+0x408>)
 8010a4e:	6013      	str	r3, [r2, #0]

  osThreadDef(ReadRegistersTask, ThreadReadRegistersTask, osPriorityNormal, 0, 128);
 8010a50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010a54:	4a3c      	ldr	r2, [pc, #240]	; (8010b48 <main+0x40c>)
 8010a56:	461c      	mov	r4, r3
 8010a58:	4615      	mov	r5, r2
 8010a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRegistersTaskHandle = osThreadCreate(osThread(ReadRegistersTask), NULL);
 8010a66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f005 ffea 	bl	8016a46 <osThreadCreate>
 8010a72:	4603      	mov	r3, r0
 8010a74:	4a35      	ldr	r2, [pc, #212]	; (8010b4c <main+0x410>)
 8010a76:	6013      	str	r3, [r2, #0]

  osThreadDef(EventWriteTask, ThreadEventWriteTask, osPriorityNormal, 0, 128);
 8010a78:	f107 0320 	add.w	r3, r7, #32
 8010a7c:	4a34      	ldr	r2, [pc, #208]	; (8010b50 <main+0x414>)
 8010a7e:	461c      	mov	r4, r3
 8010a80:	4615      	mov	r5, r2
 8010a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventWriteTaskHandle = osThreadCreate(osThread(EventWriteTask), NULL);
 8010a8e:	f107 0320 	add.w	r3, r7, #32
 8010a92:	2100      	movs	r1, #0
 8010a94:	4618      	mov	r0, r3
 8010a96:	f005 ffd6 	bl	8016a46 <osThreadCreate>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	4a2d      	ldr	r2, [pc, #180]	; (8010b54 <main+0x418>)
 8010a9e:	6013      	str	r3, [r2, #0]

  osThreadDef(MeterTask, ThreadMeterTask, osPriorityNormal, 0, 128);
 8010aa0:	1d3b      	adds	r3, r7, #4
 8010aa2:	4a2d      	ldr	r2, [pc, #180]	; (8010b58 <main+0x41c>)
 8010aa4:	461c      	mov	r4, r3
 8010aa6:	4615      	mov	r5, r2
 8010aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010aac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeterTaskHandle = osThreadCreate(osThread(MeterTask), NULL);
 8010ab4:	1d3b      	adds	r3, r7, #4
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	4618      	mov	r0, r3
 8010aba:	e04f      	b.n	8010b5c <main+0x420>
 8010abc:	40023800 	.word	0x40023800
 8010ac0:	200096a0 	.word	0x200096a0
 8010ac4:	20009a6c 	.word	0x20009a6c
 8010ac8:	20009cb8 	.word	0x20009cb8
 8010acc:	20009cd4 	.word	0x20009cd4
 8010ad0:	20009a50 	.word	0x20009a50
 8010ad4:	20009a28 	.word	0x20009a28
 8010ad8:	20009cb4 	.word	0x20009cb4
 8010adc:	08011345 	.word	0x08011345
 8010ae0:	20009698 	.word	0x20009698
 8010ae4:	08011365 	.word	0x08011365
 8010ae8:	200096a4 	.word	0x200096a4
 8010aec:	0802a298 	.word	0x0802a298
 8010af0:	20008294 	.word	0x20008294
 8010af4:	20008284 	.word	0x20008284
 8010af8:	0802a2a8 	.word	0x0802a2a8
 8010afc:	20008118 	.word	0x20008118
 8010b00:	0802a2c4 	.word	0x0802a2c4
 8010b04:	20008114 	.word	0x20008114
 8010b08:	0802a2e0 	.word	0x0802a2e0
 8010b0c:	20009cbc 	.word	0x20009cbc
 8010b10:	0802a2fc 	.word	0x0802a2fc
 8010b14:	200098e0 	.word	0x200098e0
 8010b18:	0802a318 	.word	0x0802a318
 8010b1c:	200098dc 	.word	0x200098dc
 8010b20:	0802a334 	.word	0x0802a334
 8010b24:	20009718 	.word	0x20009718
 8010b28:	0802a350 	.word	0x0802a350
 8010b2c:	20009710 	.word	0x20009710
 8010b30:	0802a36c 	.word	0x0802a36c
 8010b34:	2000827c 	.word	0x2000827c
 8010b38:	0802a388 	.word	0x0802a388
 8010b3c:	200098d8 	.word	0x200098d8
 8010b40:	0802a3a4 	.word	0x0802a3a4
 8010b44:	20009714 	.word	0x20009714
 8010b48:	0802a3c0 	.word	0x0802a3c0
 8010b4c:	20008280 	.word	0x20008280
 8010b50:	0802a3dc 	.word	0x0802a3dc
 8010b54:	2000969c 	.word	0x2000969c
 8010b58:	0802a3f8 	.word	0x0802a3f8
 8010b5c:	f005 ff73 	bl	8016a46 <osThreadCreate>
 8010b60:	4603      	mov	r3, r0
 8010b62:	4a02      	ldr	r2, [pc, #8]	; (8010b6c <main+0x430>)
 8010b64:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8010b66:	f005 ff67 	bl	8016a38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010b6a:	e7fe      	b.n	8010b6a <main+0x42e>
 8010b6c:	200081d4 	.word	0x200081d4

08010b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b094      	sub	sp, #80	; 0x50
 8010b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010b76:	f107 0320 	add.w	r3, r7, #32
 8010b7a:	2230      	movs	r2, #48	; 0x30
 8010b7c:	2100      	movs	r1, #0
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f018 fb75 	bl	802926e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010b84:	f107 030c 	add.w	r3, r7, #12
 8010b88:	2200      	movs	r2, #0
 8010b8a:	601a      	str	r2, [r3, #0]
 8010b8c:	605a      	str	r2, [r3, #4]
 8010b8e:	609a      	str	r2, [r3, #8]
 8010b90:	60da      	str	r2, [r3, #12]
 8010b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010b94:	2300      	movs	r3, #0
 8010b96:	60bb      	str	r3, [r7, #8]
 8010b98:	4b2a      	ldr	r3, [pc, #168]	; (8010c44 <SystemClock_Config+0xd4>)
 8010b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b9c:	4a29      	ldr	r2, [pc, #164]	; (8010c44 <SystemClock_Config+0xd4>)
 8010b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8010ba4:	4b27      	ldr	r3, [pc, #156]	; (8010c44 <SystemClock_Config+0xd4>)
 8010ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010bac:	60bb      	str	r3, [r7, #8]
 8010bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	607b      	str	r3, [r7, #4]
 8010bb4:	4b24      	ldr	r3, [pc, #144]	; (8010c48 <SystemClock_Config+0xd8>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4a23      	ldr	r2, [pc, #140]	; (8010c48 <SystemClock_Config+0xd8>)
 8010bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010bbe:	6013      	str	r3, [r2, #0]
 8010bc0:	4b21      	ldr	r3, [pc, #132]	; (8010c48 <SystemClock_Config+0xd8>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bc8:	607b      	str	r3, [r7, #4]
 8010bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8010bcc:	230d      	movs	r3, #13
 8010bce:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010bde:	2302      	movs	r3, #2
 8010be0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010be2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8010be8:	2319      	movs	r3, #25
 8010bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8010bec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8010bf0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010bf2:	2302      	movs	r3, #2
 8010bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8010bf6:	2304      	movs	r3, #4
 8010bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010bfa:	f107 0320 	add.w	r3, r7, #32
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f002 fb6e 	bl	80132e0 <HAL_RCC_OscConfig>
 8010c04:	4603      	mov	r3, r0
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d001      	beq.n	8010c0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8010c0a:	f000 fbdd 	bl	80113c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010c0e:	230f      	movs	r3, #15
 8010c10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010c12:	2302      	movs	r3, #2
 8010c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010c16:	2300      	movs	r3, #0
 8010c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010c1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010c1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010c26:	f107 030c 	add.w	r3, r7, #12
 8010c2a:	2105      	movs	r1, #5
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f002 fdcf 	bl	80137d0 <HAL_RCC_ClockConfig>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d001      	beq.n	8010c3c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8010c38:	f000 fbc6 	bl	80113c8 <Error_Handler>
  }
}
 8010c3c:	bf00      	nop
 8010c3e:	3750      	adds	r7, #80	; 0x50
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	40023800 	.word	0x40023800
 8010c48:	40007000 	.word	0x40007000

08010c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b08c      	sub	sp, #48	; 0x30
 8010c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8010c52:	f107 0320 	add.w	r3, r7, #32
 8010c56:	2200      	movs	r2, #0
 8010c58:	601a      	str	r2, [r3, #0]
 8010c5a:	605a      	str	r2, [r3, #4]
 8010c5c:	609a      	str	r2, [r3, #8]
 8010c5e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8010c60:	463b      	mov	r3, r7
 8010c62:	2220      	movs	r2, #32
 8010c64:	2100      	movs	r1, #0
 8010c66:	4618      	mov	r0, r3
 8010c68:	f018 fb01 	bl	802926e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8010c6c:	4b3b      	ldr	r3, [pc, #236]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010c6e:	4a3c      	ldr	r2, [pc, #240]	; (8010d60 <MX_ADC1_Init+0x114>)
 8010c70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8010c72:	4b3a      	ldr	r3, [pc, #232]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010c74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010c78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8010c7a:	4b38      	ldr	r3, [pc, #224]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8010c80:	4b36      	ldr	r3, [pc, #216]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010c82:	2201      	movs	r2, #1
 8010c84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8010c86:	4b35      	ldr	r3, [pc, #212]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010c88:	2200      	movs	r2, #0
 8010c8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010c8c:	4b33      	ldr	r3, [pc, #204]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010c94:	4b31      	ldr	r3, [pc, #196]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010c96:	2200      	movs	r2, #0
 8010c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010c9a:	4b30      	ldr	r3, [pc, #192]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010c9c:	4a31      	ldr	r2, [pc, #196]	; (8010d64 <MX_ADC1_Init+0x118>)
 8010c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010ca0:	4b2e      	ldr	r3, [pc, #184]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8010ca6:	4b2d      	ldr	r3, [pc, #180]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010ca8:	2201      	movs	r2, #1
 8010caa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8010cac:	4b2b      	ldr	r3, [pc, #172]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010cb4:	4b29      	ldr	r3, [pc, #164]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010cba:	4828      	ldr	r0, [pc, #160]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010cbc:	f000 fffa 	bl	8011cb4 <HAL_ADC_Init>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d001      	beq.n	8010cca <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8010cc6:	f000 fb7f 	bl	80113c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8010cca:	230a      	movs	r3, #10
 8010ccc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010cd6:	f107 0320 	add.w	r3, r7, #32
 8010cda:	4619      	mov	r1, r3
 8010cdc:	481f      	ldr	r0, [pc, #124]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010cde:	f001 f82d 	bl	8011d3c <HAL_ADC_ConfigChannel>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d001      	beq.n	8010cec <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8010ce8:	f000 fb6e 	bl	80113c8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8010cec:	230a      	movs	r3, #10
 8010cee:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8010cf4:	2303      	movs	r3, #3
 8010cf6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8010d00:	4b19      	ldr	r3, [pc, #100]	; (8010d68 <MX_ADC1_Init+0x11c>)
 8010d02:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8010d04:	2300      	movs	r3, #0
 8010d06:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8010d10:	463b      	mov	r3, r7
 8010d12:	4619      	mov	r1, r3
 8010d14:	4811      	ldr	r0, [pc, #68]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010d16:	f001 fa2f 	bl	8012178 <HAL_ADCEx_InjectedConfigChannel>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d001      	beq.n	8010d24 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8010d20:	f000 fb52 	bl	80113c8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 2;
 8010d24:	2302      	movs	r3, #2
 8010d26:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8010d28:	463b      	mov	r3, r7
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	480b      	ldr	r0, [pc, #44]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010d2e:	f001 fa23 	bl	8012178 <HAL_ADCEx_InjectedConfigChannel>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d001      	beq.n	8010d3c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8010d38:	f000 fb46 	bl	80113c8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 3;
 8010d3c:	2303      	movs	r3, #3
 8010d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8010d40:	463b      	mov	r3, r7
 8010d42:	4619      	mov	r1, r3
 8010d44:	4805      	ldr	r0, [pc, #20]	; (8010d5c <MX_ADC1_Init+0x110>)
 8010d46:	f001 fa17 	bl	8012178 <HAL_ADCEx_InjectedConfigChannel>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d001      	beq.n	8010d54 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8010d50:	f000 fb3a 	bl	80113c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8010d54:	bf00      	nop
 8010d56:	3730      	adds	r7, #48	; 0x30
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	20009890 	.word	0x20009890
 8010d60:	40012000 	.word	0x40012000
 8010d64:	0f000001 	.word	0x0f000001
 8010d68:	000f0001 	.word	0x000f0001

08010d6c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8010d70:	4b09      	ldr	r3, [pc, #36]	; (8010d98 <MX_IWDG_Init+0x2c>)
 8010d72:	4a0a      	ldr	r2, [pc, #40]	; (8010d9c <MX_IWDG_Init+0x30>)
 8010d74:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8010d76:	4b08      	ldr	r3, [pc, #32]	; (8010d98 <MX_IWDG_Init+0x2c>)
 8010d78:	2203      	movs	r2, #3
 8010d7a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8010d7c:	4b06      	ldr	r3, [pc, #24]	; (8010d98 <MX_IWDG_Init+0x2c>)
 8010d7e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8010d82:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8010d84:	4804      	ldr	r0, [pc, #16]	; (8010d98 <MX_IWDG_Init+0x2c>)
 8010d86:	f002 fa58 	bl	801323a <HAL_IWDG_Init>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d001      	beq.n	8010d94 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8010d90:	f000 fb1a 	bl	80113c8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8010d94:	bf00      	nop
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	20008288 	.word	0x20008288
 8010d9c:	40003000 	.word	0x40003000

08010da0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b086      	sub	sp, #24
 8010da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8010da6:	1d3b      	adds	r3, r7, #4
 8010da8:	2200      	movs	r2, #0
 8010daa:	601a      	str	r2, [r3, #0]
 8010dac:	605a      	str	r2, [r3, #4]
 8010dae:	609a      	str	r2, [r3, #8]
 8010db0:	60da      	str	r2, [r3, #12]
 8010db2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8010db4:	2300      	movs	r3, #0
 8010db6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8010db8:	4b19      	ldr	r3, [pc, #100]	; (8010e20 <MX_RTC_Init+0x80>)
 8010dba:	4a1a      	ldr	r2, [pc, #104]	; (8010e24 <MX_RTC_Init+0x84>)
 8010dbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8010dbe:	4b18      	ldr	r3, [pc, #96]	; (8010e20 <MX_RTC_Init+0x80>)
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8010dc4:	4b16      	ldr	r3, [pc, #88]	; (8010e20 <MX_RTC_Init+0x80>)
 8010dc6:	227f      	movs	r2, #127	; 0x7f
 8010dc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8010dca:	4b15      	ldr	r3, [pc, #84]	; (8010e20 <MX_RTC_Init+0x80>)
 8010dcc:	22ff      	movs	r2, #255	; 0xff
 8010dce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8010dd0:	4b13      	ldr	r3, [pc, #76]	; (8010e20 <MX_RTC_Init+0x80>)
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8010dd6:	4b12      	ldr	r3, [pc, #72]	; (8010e20 <MX_RTC_Init+0x80>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8010ddc:	4b10      	ldr	r3, [pc, #64]	; (8010e20 <MX_RTC_Init+0x80>)
 8010dde:	2200      	movs	r2, #0
 8010de0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8010de2:	480f      	ldr	r0, [pc, #60]	; (8010e20 <MX_RTC_Init+0x80>)
 8010de4:	f002 ffd8 	bl	8013d98 <HAL_RTC_Init>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d001      	beq.n	8010df2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8010dee:	f000 faeb 	bl	80113c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 8010df2:	2317      	movs	r3, #23
 8010df4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x47;
 8010df6:	2347      	movs	r3, #71	; 0x47
 8010df8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8010e02:	2300      	movs	r3, #0
 8010e04:	617b      	str	r3, [r7, #20]
  //if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  //{
    //Error_Handler();
  //}
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8010e06:	2306      	movs	r3, #6
 8010e08:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8010e0a:	2311      	movs	r3, #17
 8010e0c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x5;
 8010e0e:	2305      	movs	r3, #5
 8010e10:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8010e12:	2322      	movs	r3, #34	; 0x22
 8010e14:	70fb      	strb	r3, [r7, #3]
  //}
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8010e16:	bf00      	nop
 8010e18:	3718      	adds	r7, #24
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	20009a30 	.word	0x20009a30
 8010e24:	40002800 	.word	0x40002800

08010e28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8010e2c:	4b17      	ldr	r3, [pc, #92]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e2e:	4a18      	ldr	r2, [pc, #96]	; (8010e90 <MX_SPI2_Init+0x68>)
 8010e30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8010e32:	4b16      	ldr	r3, [pc, #88]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010e38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8010e3a:	4b14      	ldr	r3, [pc, #80]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8010e40:	4b12      	ldr	r3, [pc, #72]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e42:	2200      	movs	r2, #0
 8010e44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010e46:	4b11      	ldr	r3, [pc, #68]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e48:	2200      	movs	r2, #0
 8010e4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010e4c:	4b0f      	ldr	r3, [pc, #60]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e4e:	2200      	movs	r2, #0
 8010e50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8010e52:	4b0e      	ldr	r3, [pc, #56]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8010e5a:	4b0c      	ldr	r3, [pc, #48]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e5c:	2220      	movs	r2, #32
 8010e5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010e60:	4b0a      	ldr	r3, [pc, #40]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e62:	2200      	movs	r2, #0
 8010e64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010e66:	4b09      	ldr	r3, [pc, #36]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e68:	2200      	movs	r2, #0
 8010e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010e6c:	4b07      	ldr	r3, [pc, #28]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e6e:	2200      	movs	r2, #0
 8010e70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8010e72:	4b06      	ldr	r3, [pc, #24]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e74:	220a      	movs	r2, #10
 8010e76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010e78:	4804      	ldr	r0, [pc, #16]	; (8010e8c <MX_SPI2_Init+0x64>)
 8010e7a:	f003 fa8b 	bl	8014394 <HAL_SPI_Init>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d001      	beq.n	8010e88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8010e84:	f000 faa0 	bl	80113c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8010e88:	bf00      	nop
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	2000817c 	.word	0x2000817c
 8010e90:	40003800 	.word	0x40003800

08010e94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010e98:	4b11      	ldr	r3, [pc, #68]	; (8010ee0 <MX_USART1_UART_Init+0x4c>)
 8010e9a:	4a12      	ldr	r2, [pc, #72]	; (8010ee4 <MX_USART1_UART_Init+0x50>)
 8010e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8010e9e:	4b10      	ldr	r3, [pc, #64]	; (8010ee0 <MX_USART1_UART_Init+0x4c>)
 8010ea0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8010ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010ea6:	4b0e      	ldr	r3, [pc, #56]	; (8010ee0 <MX_USART1_UART_Init+0x4c>)
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010eac:	4b0c      	ldr	r3, [pc, #48]	; (8010ee0 <MX_USART1_UART_Init+0x4c>)
 8010eae:	2200      	movs	r2, #0
 8010eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8010eb2:	4b0b      	ldr	r3, [pc, #44]	; (8010ee0 <MX_USART1_UART_Init+0x4c>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010eb8:	4b09      	ldr	r3, [pc, #36]	; (8010ee0 <MX_USART1_UART_Init+0x4c>)
 8010eba:	220c      	movs	r2, #12
 8010ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010ebe:	4b08      	ldr	r3, [pc, #32]	; (8010ee0 <MX_USART1_UART_Init+0x4c>)
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010ec4:	4b06      	ldr	r3, [pc, #24]	; (8010ee0 <MX_USART1_UART_Init+0x4c>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010eca:	4805      	ldr	r0, [pc, #20]	; (8010ee0 <MX_USART1_UART_Init+0x4c>)
 8010ecc:	f004 fab8 	bl	8015440 <HAL_UART_Init>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8010ed6:	f000 fa77 	bl	80113c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8010eda:	bf00      	nop
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	200099e4 	.word	0x200099e4
 8010ee4:	40011000 	.word	0x40011000

08010ee8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8010eec:	4b11      	ldr	r3, [pc, #68]	; (8010f34 <MX_USART3_UART_Init+0x4c>)
 8010eee:	4a12      	ldr	r2, [pc, #72]	; (8010f38 <MX_USART3_UART_Init+0x50>)
 8010ef0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8010ef2:	4b10      	ldr	r3, [pc, #64]	; (8010f34 <MX_USART3_UART_Init+0x4c>)
 8010ef4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8010ef8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8010efa:	4b0e      	ldr	r3, [pc, #56]	; (8010f34 <MX_USART3_UART_Init+0x4c>)
 8010efc:	2200      	movs	r2, #0
 8010efe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8010f00:	4b0c      	ldr	r3, [pc, #48]	; (8010f34 <MX_USART3_UART_Init+0x4c>)
 8010f02:	2200      	movs	r2, #0
 8010f04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8010f06:	4b0b      	ldr	r3, [pc, #44]	; (8010f34 <MX_USART3_UART_Init+0x4c>)
 8010f08:	2200      	movs	r2, #0
 8010f0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8010f0c:	4b09      	ldr	r3, [pc, #36]	; (8010f34 <MX_USART3_UART_Init+0x4c>)
 8010f0e:	220c      	movs	r2, #12
 8010f10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010f12:	4b08      	ldr	r3, [pc, #32]	; (8010f34 <MX_USART3_UART_Init+0x4c>)
 8010f14:	2200      	movs	r2, #0
 8010f16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8010f18:	4b06      	ldr	r3, [pc, #24]	; (8010f34 <MX_USART3_UART_Init+0x4c>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8010f1e:	4805      	ldr	r0, [pc, #20]	; (8010f34 <MX_USART3_UART_Init+0x4c>)
 8010f20:	f004 fa8e 	bl	8015440 <HAL_UART_Init>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d001      	beq.n	8010f2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8010f2a:	f000 fa4d 	bl	80113c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8010f2e:	bf00      	nop
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	20008238 	.word	0x20008238
 8010f38:	40004800 	.word	0x40004800

08010f3c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8010f40:	4b11      	ldr	r3, [pc, #68]	; (8010f88 <MX_USART6_UART_Init+0x4c>)
 8010f42:	4a12      	ldr	r2, [pc, #72]	; (8010f8c <MX_USART6_UART_Init+0x50>)
 8010f44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8010f46:	4b10      	ldr	r3, [pc, #64]	; (8010f88 <MX_USART6_UART_Init+0x4c>)
 8010f48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8010f4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8010f4e:	4b0e      	ldr	r3, [pc, #56]	; (8010f88 <MX_USART6_UART_Init+0x4c>)
 8010f50:	2200      	movs	r2, #0
 8010f52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8010f54:	4b0c      	ldr	r3, [pc, #48]	; (8010f88 <MX_USART6_UART_Init+0x4c>)
 8010f56:	2200      	movs	r2, #0
 8010f58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8010f5a:	4b0b      	ldr	r3, [pc, #44]	; (8010f88 <MX_USART6_UART_Init+0x4c>)
 8010f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010f60:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8010f62:	4b09      	ldr	r3, [pc, #36]	; (8010f88 <MX_USART6_UART_Init+0x4c>)
 8010f64:	220c      	movs	r2, #12
 8010f66:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010f68:	4b07      	ldr	r3, [pc, #28]	; (8010f88 <MX_USART6_UART_Init+0x4c>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8010f6e:	4b06      	ldr	r3, [pc, #24]	; (8010f88 <MX_USART6_UART_Init+0x4c>)
 8010f70:	2200      	movs	r2, #0
 8010f72:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8010f74:	4804      	ldr	r0, [pc, #16]	; (8010f88 <MX_USART6_UART_Init+0x4c>)
 8010f76:	f004 fa63 	bl	8015440 <HAL_UART_Init>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d001      	beq.n	8010f84 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8010f80:	f000 fa22 	bl	80113c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8010f84:	bf00      	nop
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	20009c70 	.word	0x20009c70
 8010f8c:	40011400 	.word	0x40011400

08010f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8010f96:	2300      	movs	r3, #0
 8010f98:	607b      	str	r3, [r7, #4]
 8010f9a:	4b1f      	ldr	r3, [pc, #124]	; (8011018 <MX_DMA_Init+0x88>)
 8010f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f9e:	4a1e      	ldr	r2, [pc, #120]	; (8011018 <MX_DMA_Init+0x88>)
 8010fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8010fa6:	4b1c      	ldr	r3, [pc, #112]	; (8011018 <MX_DMA_Init+0x88>)
 8010fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010fae:	607b      	str	r3, [r7, #4]
 8010fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	603b      	str	r3, [r7, #0]
 8010fb6:	4b18      	ldr	r3, [pc, #96]	; (8011018 <MX_DMA_Init+0x88>)
 8010fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fba:	4a17      	ldr	r2, [pc, #92]	; (8011018 <MX_DMA_Init+0x88>)
 8010fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8010fc2:	4b15      	ldr	r3, [pc, #84]	; (8011018 <MX_DMA_Init+0x88>)
 8010fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010fca:	603b      	str	r3, [r7, #0]
 8010fcc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8010fce:	2200      	movs	r2, #0
 8010fd0:	2105      	movs	r1, #5
 8010fd2:	200c      	movs	r0, #12
 8010fd4:	f001 fb1e 	bl	8012614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8010fd8:	200c      	movs	r0, #12
 8010fda:	f001 fb37 	bl	801264c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8010fde:	2200      	movs	r2, #0
 8010fe0:	2105      	movs	r1, #5
 8010fe2:	200e      	movs	r0, #14
 8010fe4:	f001 fb16 	bl	8012614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8010fe8:	200e      	movs	r0, #14
 8010fea:	f001 fb2f 	bl	801264c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8010fee:	2200      	movs	r2, #0
 8010ff0:	2105      	movs	r1, #5
 8010ff2:	2039      	movs	r0, #57	; 0x39
 8010ff4:	f001 fb0e 	bl	8012614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8010ff8:	2039      	movs	r0, #57	; 0x39
 8010ffa:	f001 fb27 	bl	801264c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8010ffe:	2200      	movs	r2, #0
 8011000:	2105      	movs	r1, #5
 8011002:	2045      	movs	r0, #69	; 0x45
 8011004:	f001 fb06 	bl	8012614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8011008:	2045      	movs	r0, #69	; 0x45
 801100a:	f001 fb1f 	bl	801264c <HAL_NVIC_EnableIRQ>

}
 801100e:	bf00      	nop
 8011010:	3708      	adds	r7, #8
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	40023800 	.word	0x40023800

0801101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b08e      	sub	sp, #56	; 0x38
 8011020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011026:	2200      	movs	r2, #0
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	605a      	str	r2, [r3, #4]
 801102c:	609a      	str	r2, [r3, #8]
 801102e:	60da      	str	r2, [r3, #12]
 8011030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8011032:	2300      	movs	r3, #0
 8011034:	623b      	str	r3, [r7, #32]
 8011036:	4bb3      	ldr	r3, [pc, #716]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801103a:	4ab2      	ldr	r2, [pc, #712]	; (8011304 <MX_GPIO_Init+0x2e8>)
 801103c:	f043 0310 	orr.w	r3, r3, #16
 8011040:	6313      	str	r3, [r2, #48]	; 0x30
 8011042:	4bb0      	ldr	r3, [pc, #704]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011046:	f003 0310 	and.w	r3, r3, #16
 801104a:	623b      	str	r3, [r7, #32]
 801104c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801104e:	2300      	movs	r3, #0
 8011050:	61fb      	str	r3, [r7, #28]
 8011052:	4bac      	ldr	r3, [pc, #688]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011056:	4aab      	ldr	r2, [pc, #684]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801105c:	6313      	str	r3, [r2, #48]	; 0x30
 801105e:	4ba9      	ldr	r3, [pc, #676]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011066:	61fb      	str	r3, [r7, #28]
 8011068:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801106a:	2300      	movs	r3, #0
 801106c:	61bb      	str	r3, [r7, #24]
 801106e:	4ba5      	ldr	r3, [pc, #660]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011072:	4aa4      	ldr	r2, [pc, #656]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011074:	f043 0304 	orr.w	r3, r3, #4
 8011078:	6313      	str	r3, [r2, #48]	; 0x30
 801107a:	4ba2      	ldr	r3, [pc, #648]	; (8011304 <MX_GPIO_Init+0x2e8>)
 801107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801107e:	f003 0304 	and.w	r3, r3, #4
 8011082:	61bb      	str	r3, [r7, #24]
 8011084:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8011086:	2300      	movs	r3, #0
 8011088:	617b      	str	r3, [r7, #20]
 801108a:	4b9e      	ldr	r3, [pc, #632]	; (8011304 <MX_GPIO_Init+0x2e8>)
 801108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801108e:	4a9d      	ldr	r2, [pc, #628]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011090:	f043 0320 	orr.w	r3, r3, #32
 8011094:	6313      	str	r3, [r2, #48]	; 0x30
 8011096:	4b9b      	ldr	r3, [pc, #620]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801109a:	f003 0320 	and.w	r3, r3, #32
 801109e:	617b      	str	r3, [r7, #20]
 80110a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80110a2:	2300      	movs	r3, #0
 80110a4:	613b      	str	r3, [r7, #16]
 80110a6:	4b97      	ldr	r3, [pc, #604]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110aa:	4a96      	ldr	r2, [pc, #600]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110b0:	6313      	str	r3, [r2, #48]	; 0x30
 80110b2:	4b94      	ldr	r3, [pc, #592]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110ba:	613b      	str	r3, [r7, #16]
 80110bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80110be:	2300      	movs	r3, #0
 80110c0:	60fb      	str	r3, [r7, #12]
 80110c2:	4b90      	ldr	r3, [pc, #576]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110c6:	4a8f      	ldr	r2, [pc, #572]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110c8:	f043 0301 	orr.w	r3, r3, #1
 80110cc:	6313      	str	r3, [r2, #48]	; 0x30
 80110ce:	4b8d      	ldr	r3, [pc, #564]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110d2:	f003 0301 	and.w	r3, r3, #1
 80110d6:	60fb      	str	r3, [r7, #12]
 80110d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80110da:	2300      	movs	r3, #0
 80110dc:	60bb      	str	r3, [r7, #8]
 80110de:	4b89      	ldr	r3, [pc, #548]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110e2:	4a88      	ldr	r2, [pc, #544]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110e4:	f043 0302 	orr.w	r3, r3, #2
 80110e8:	6313      	str	r3, [r2, #48]	; 0x30
 80110ea:	4b86      	ldr	r3, [pc, #536]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ee:	f003 0302 	and.w	r3, r3, #2
 80110f2:	60bb      	str	r3, [r7, #8]
 80110f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80110f6:	2300      	movs	r3, #0
 80110f8:	607b      	str	r3, [r7, #4]
 80110fa:	4b82      	ldr	r3, [pc, #520]	; (8011304 <MX_GPIO_Init+0x2e8>)
 80110fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110fe:	4a81      	ldr	r2, [pc, #516]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011104:	6313      	str	r3, [r2, #48]	; 0x30
 8011106:	4b7f      	ldr	r3, [pc, #508]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801110a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801110e:	607b      	str	r3, [r7, #4]
 8011110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011112:	2300      	movs	r3, #0
 8011114:	603b      	str	r3, [r7, #0]
 8011116:	4b7b      	ldr	r3, [pc, #492]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801111a:	4a7a      	ldr	r2, [pc, #488]	; (8011304 <MX_GPIO_Init+0x2e8>)
 801111c:	f043 0308 	orr.w	r3, r3, #8
 8011120:	6313      	str	r3, [r2, #48]	; 0x30
 8011122:	4b78      	ldr	r3, [pc, #480]	; (8011304 <MX_GPIO_Init+0x2e8>)
 8011124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011126:	f003 0308 	and.w	r3, r3, #8
 801112a:	603b      	str	r3, [r7, #0]
 801112c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 801112e:	2200      	movs	r2, #0
 8011130:	2140      	movs	r1, #64	; 0x40
 8011132:	4875      	ldr	r0, [pc, #468]	; (8011308 <MX_GPIO_Init+0x2ec>)
 8011134:	f002 f84e 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 8011138:	2200      	movs	r2, #0
 801113a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801113e:	4873      	ldr	r0, [pc, #460]	; (801130c <MX_GPIO_Init+0x2f0>)
 8011140:	f002 f848 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011144:	2200      	movs	r2, #0
 8011146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801114a:	4871      	ldr	r0, [pc, #452]	; (8011310 <MX_GPIO_Init+0x2f4>)
 801114c:	f002 f842 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8011150:	2201      	movs	r2, #1
 8011152:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8011156:	486d      	ldr	r0, [pc, #436]	; (801130c <MX_GPIO_Init+0x2f0>)
 8011158:	f002 f83c 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 801115c:	2201      	movs	r2, #1
 801115e:	2138      	movs	r1, #56	; 0x38
 8011160:	486c      	ldr	r0, [pc, #432]	; (8011314 <MX_GPIO_Init+0x2f8>)
 8011162:	f002 f837 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8011166:	2201      	movs	r2, #1
 8011168:	2101      	movs	r1, #1
 801116a:	486b      	ldr	r0, [pc, #428]	; (8011318 <MX_GPIO_Init+0x2fc>)
 801116c:	f002 f832 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15, GPIO_PIN_SET);
 8011170:	2201      	movs	r2, #1
 8011172:	f248 010c 	movw	r1, #32780	; 0x800c
 8011176:	4869      	ldr	r0, [pc, #420]	; (801131c <MX_GPIO_Init+0x300>)
 8011178:	f002 f82c 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 801117c:	2200      	movs	r2, #0
 801117e:	2160      	movs	r1, #96	; 0x60
 8011180:	4866      	ldr	r0, [pc, #408]	; (801131c <MX_GPIO_Init+0x300>)
 8011182:	f002 f827 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8011186:	2200      	movs	r2, #0
 8011188:	2128      	movs	r1, #40	; 0x28
 801118a:	4863      	ldr	r0, [pc, #396]	; (8011318 <MX_GPIO_Init+0x2fc>)
 801118c:	f002 f822 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8011190:	2200      	movs	r2, #0
 8011192:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8011196:	4862      	ldr	r0, [pc, #392]	; (8011320 <MX_GPIO_Init+0x304>)
 8011198:	f002 f81c 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 801119c:	2200      	movs	r2, #0
 801119e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80111a2:	4860      	ldr	r0, [pc, #384]	; (8011324 <MX_GPIO_Init+0x308>)
 80111a4:	f002 f816 	bl	80131d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80111a8:	2340      	movs	r3, #64	; 0x40
 80111aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80111ac:	2301      	movs	r3, #1
 80111ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111b0:	2300      	movs	r3, #0
 80111b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111b4:	2300      	movs	r3, #0
 80111b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80111b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80111bc:	4619      	mov	r1, r3
 80111be:	4852      	ldr	r0, [pc, #328]	; (8011308 <MX_GPIO_Init+0x2ec>)
 80111c0:	f001 fe54 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI10 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 80111c4:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 80111c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80111ca:	2301      	movs	r3, #1
 80111cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111ce:	2300      	movs	r3, #0
 80111d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111d2:	2300      	movs	r3, #0
 80111d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80111d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80111da:	4619      	mov	r1, r3
 80111dc:	484b      	ldr	r0, [pc, #300]	; (801130c <MX_GPIO_Init+0x2f0>)
 80111de:	f001 fe45 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80111e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80111e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80111e8:	2301      	movs	r3, #1
 80111ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111ec:	2300      	movs	r3, #0
 80111ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111f0:	2300      	movs	r3, #0
 80111f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80111f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80111f8:	4619      	mov	r1, r3
 80111fa:	4845      	ldr	r0, [pc, #276]	; (8011310 <MX_GPIO_Init+0x2f4>)
 80111fc:	f001 fe36 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8011200:	2338      	movs	r3, #56	; 0x38
 8011202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011204:	2301      	movs	r3, #1
 8011206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011208:	2300      	movs	r3, #0
 801120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801120c:	2300      	movs	r3, #0
 801120e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011214:	4619      	mov	r1, r3
 8011216:	483f      	ldr	r0, [pc, #252]	; (8011314 <MX_GPIO_Init+0x2f8>)
 8011218:	f001 fe28 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 801121c:	2329      	movs	r3, #41	; 0x29
 801121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011220:	2301      	movs	r3, #1
 8011222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011224:	2300      	movs	r3, #0
 8011226:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011228:	2300      	movs	r3, #0
 801122a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011230:	4619      	mov	r1, r3
 8011232:	4839      	ldr	r0, [pc, #228]	; (8011318 <MX_GPIO_Init+0x2fc>)
 8011234:	f001 fe1a 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH5 PH6
                           PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8011238:	f248 036c 	movw	r3, #32876	; 0x806c
 801123c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801123e:	2301      	movs	r3, #1
 8011240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011242:	2300      	movs	r3, #0
 8011244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011246:	2300      	movs	r3, #0
 8011248:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801124e:	4619      	mov	r1, r3
 8011250:	4832      	ldr	r0, [pc, #200]	; (801131c <MX_GPIO_Init+0x300>)
 8011252:	f001 fe0b 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8011256:	2310      	movs	r3, #16
 8011258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801125a:	2300      	movs	r3, #0
 801125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801125e:	2300      	movs	r3, #0
 8011260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8011262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011266:	4619      	mov	r1, r3
 8011268:	482c      	ldr	r0, [pc, #176]	; (801131c <MX_GPIO_Init+0x300>)
 801126a:	f001 fdff 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801126e:	2304      	movs	r3, #4
 8011270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011272:	2300      	movs	r3, #0
 8011274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011276:	2300      	movs	r3, #0
 8011278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801127e:	4619      	mov	r1, r3
 8011280:	4829      	ldr	r0, [pc, #164]	; (8011328 <MX_GPIO_Init+0x30c>)
 8011282:	f001 fdf3 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8011286:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801128a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801128c:	2300      	movs	r3, #0
 801128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011290:	2300      	movs	r3, #0
 8011292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011298:	4619      	mov	r1, r3
 801129a:	481e      	ldr	r0, [pc, #120]	; (8011314 <MX_GPIO_Init+0x2f8>)
 801129c:	f001 fde6 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80112a0:	2303      	movs	r3, #3
 80112a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80112a4:	2300      	movs	r3, #0
 80112a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112a8:	2300      	movs	r3, #0
 80112aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80112ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112b0:	4619      	mov	r1, r3
 80112b2:	481c      	ldr	r0, [pc, #112]	; (8011324 <MX_GPIO_Init+0x308>)
 80112b4:	f001 fdda 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80112b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80112bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80112be:	2301      	movs	r3, #1
 80112c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80112c2:	2302      	movs	r3, #2
 80112c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112c6:	2300      	movs	r3, #0
 80112c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80112ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112ce:	4619      	mov	r1, r3
 80112d0:	4813      	ldr	r0, [pc, #76]	; (8011320 <MX_GPIO_Init+0x304>)
 80112d2:	f001 fdcb 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80112d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80112dc:	2301      	movs	r3, #1
 80112de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80112e0:	2302      	movs	r3, #2
 80112e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112e4:	2300      	movs	r3, #0
 80112e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80112e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112ec:	4619      	mov	r1, r3
 80112ee:	480d      	ldr	r0, [pc, #52]	; (8011324 <MX_GPIO_Init+0x308>)
 80112f0:	f001 fdbc 	bl	8012e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80112f4:	2301      	movs	r3, #1
 80112f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80112f8:	2300      	movs	r3, #0
 80112fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80112fc:	2301      	movs	r3, #1
 80112fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011300:	e014      	b.n	801132c <MX_GPIO_Init+0x310>
 8011302:	bf00      	nop
 8011304:	40023800 	.word	0x40023800
 8011308:	40021000 	.word	0x40021000
 801130c:	40022000 	.word	0x40022000
 8011310:	40020800 	.word	0x40020800
 8011314:	40021400 	.word	0x40021400
 8011318:	40020000 	.word	0x40020000
 801131c:	40021c00 	.word	0x40021c00
 8011320:	40020c00 	.word	0x40020c00
 8011324:	40021800 	.word	0x40021800
 8011328:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011330:	4619      	mov	r1, r3
 8011332:	4803      	ldr	r0, [pc, #12]	; (8011340 <MX_GPIO_Init+0x324>)
 8011334:	f001 fd9a 	bl	8012e6c <HAL_GPIO_Init>

}
 8011338:	bf00      	nop
 801133a:	3738      	adds	r7, #56	; 0x38
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	40021000 	.word	0x40021000

08011344 <Callback_AT_Timer>:

/* USER CODE BEGIN 4 */

void Callback_AT_Timer(void const * argument)
{
 8011344:	b480      	push	{r7}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]

	read_rx_state = NOT_ACTIVE;
 801134c:	4b04      	ldr	r3, [pc, #16]	; (8011360 <Callback_AT_Timer+0x1c>)
 801134e:	2200      	movs	r2, #0
 8011350:	701a      	strb	r2, [r3, #0]

}
 8011352:	bf00      	nop
 8011354:	370c      	adds	r7, #12
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop
 8011360:	20009a2c 	.word	0x20009a2c

08011364 <Callback_Ring_Center_Timer>:

void Callback_Ring_Center_Timer(void const * argument)
{
 8011364:	b480      	push	{r7}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
	modem_reset_state = 1;
 801136c:	4b04      	ldr	r3, [pc, #16]	; (8011380 <Callback_Ring_Center_Timer+0x1c>)
 801136e:	2201      	movs	r2, #1
 8011370:	701a      	strb	r2, [r3, #0]
	//NVIC_SystemReset();
}
 8011372:	bf00      	nop
 8011374:	370c      	adds	r7, #12
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr
 801137e:	bf00      	nop
 8011380:	2000085e 	.word	0x2000085e

08011384 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_IWDG_Refresh(&hiwdg);
 801138c:	4804      	ldr	r0, [pc, #16]	; (80113a0 <StartDefaultTask+0x1c>)
 801138e:	f001 ff96 	bl	80132be <HAL_IWDG_Refresh>
	LED_VD3_TOGGLE();
 8011392:	f014 f941 	bl	8025618 <LED_VD3_TOGGLE>

    osDelay(1000);
 8011396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801139a:	f005 fba0 	bl	8016ade <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 801139e:	e7f5      	b.n	801138c <StartDefaultTask+0x8>
 80113a0:	20008288 	.word	0x20008288

080113a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4a04      	ldr	r2, [pc, #16]	; (80113c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d101      	bne.n	80113ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80113b6:	f000 fc39 	bl	8011c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80113ba:	bf00      	nop
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	40010000 	.word	0x40010000

080113c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	NVIC_SystemReset();
 80113cc:	f7ff f908 	bl	80105e0 <__NVIC_SystemReset>

080113d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80113d6:	2300      	movs	r3, #0
 80113d8:	607b      	str	r3, [r7, #4]
 80113da:	4b12      	ldr	r3, [pc, #72]	; (8011424 <HAL_MspInit+0x54>)
 80113dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113de:	4a11      	ldr	r2, [pc, #68]	; (8011424 <HAL_MspInit+0x54>)
 80113e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80113e4:	6453      	str	r3, [r2, #68]	; 0x44
 80113e6:	4b0f      	ldr	r3, [pc, #60]	; (8011424 <HAL_MspInit+0x54>)
 80113e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80113ee:	607b      	str	r3, [r7, #4]
 80113f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80113f2:	2300      	movs	r3, #0
 80113f4:	603b      	str	r3, [r7, #0]
 80113f6:	4b0b      	ldr	r3, [pc, #44]	; (8011424 <HAL_MspInit+0x54>)
 80113f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113fa:	4a0a      	ldr	r2, [pc, #40]	; (8011424 <HAL_MspInit+0x54>)
 80113fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011400:	6413      	str	r3, [r2, #64]	; 0x40
 8011402:	4b08      	ldr	r3, [pc, #32]	; (8011424 <HAL_MspInit+0x54>)
 8011404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801140a:	603b      	str	r3, [r7, #0]
 801140c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801140e:	2200      	movs	r2, #0
 8011410:	210f      	movs	r1, #15
 8011412:	f06f 0001 	mvn.w	r0, #1
 8011416:	f001 f8fd 	bl	8012614 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801141a:	bf00      	nop
 801141c:	3708      	adds	r7, #8
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	40023800 	.word	0x40023800

08011428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b08a      	sub	sp, #40	; 0x28
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011430:	f107 0314 	add.w	r3, r7, #20
 8011434:	2200      	movs	r2, #0
 8011436:	601a      	str	r2, [r3, #0]
 8011438:	605a      	str	r2, [r3, #4]
 801143a:	609a      	str	r2, [r3, #8]
 801143c:	60da      	str	r2, [r3, #12]
 801143e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4a17      	ldr	r2, [pc, #92]	; (80114a4 <HAL_ADC_MspInit+0x7c>)
 8011446:	4293      	cmp	r3, r2
 8011448:	d127      	bne.n	801149a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801144a:	2300      	movs	r3, #0
 801144c:	613b      	str	r3, [r7, #16]
 801144e:	4b16      	ldr	r3, [pc, #88]	; (80114a8 <HAL_ADC_MspInit+0x80>)
 8011450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011452:	4a15      	ldr	r2, [pc, #84]	; (80114a8 <HAL_ADC_MspInit+0x80>)
 8011454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011458:	6453      	str	r3, [r2, #68]	; 0x44
 801145a:	4b13      	ldr	r3, [pc, #76]	; (80114a8 <HAL_ADC_MspInit+0x80>)
 801145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011462:	613b      	str	r3, [r7, #16]
 8011464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011466:	2300      	movs	r3, #0
 8011468:	60fb      	str	r3, [r7, #12]
 801146a:	4b0f      	ldr	r3, [pc, #60]	; (80114a8 <HAL_ADC_MspInit+0x80>)
 801146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801146e:	4a0e      	ldr	r2, [pc, #56]	; (80114a8 <HAL_ADC_MspInit+0x80>)
 8011470:	f043 0304 	orr.w	r3, r3, #4
 8011474:	6313      	str	r3, [r2, #48]	; 0x30
 8011476:	4b0c      	ldr	r3, [pc, #48]	; (80114a8 <HAL_ADC_MspInit+0x80>)
 8011478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801147a:	f003 0304 	and.w	r3, r3, #4
 801147e:	60fb      	str	r3, [r7, #12]
 8011480:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8011482:	230d      	movs	r3, #13
 8011484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011486:	2303      	movs	r3, #3
 8011488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801148a:	2300      	movs	r3, #0
 801148c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801148e:	f107 0314 	add.w	r3, r7, #20
 8011492:	4619      	mov	r1, r3
 8011494:	4805      	ldr	r0, [pc, #20]	; (80114ac <HAL_ADC_MspInit+0x84>)
 8011496:	f001 fce9 	bl	8012e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801149a:	bf00      	nop
 801149c:	3728      	adds	r7, #40	; 0x28
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
 80114a2:	bf00      	nop
 80114a4:	40012000 	.word	0x40012000
 80114a8:	40023800 	.word	0x40023800
 80114ac:	40020800 	.word	0x40020800

080114b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80114b8:	f107 0308 	add.w	r3, r7, #8
 80114bc:	2200      	movs	r2, #0
 80114be:	601a      	str	r2, [r3, #0]
 80114c0:	605a      	str	r2, [r3, #4]
 80114c2:	609a      	str	r2, [r3, #8]
 80114c4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	4a0c      	ldr	r2, [pc, #48]	; (80114fc <HAL_RTC_MspInit+0x4c>)
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d111      	bne.n	80114f4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80114d0:	2302      	movs	r3, #2
 80114d2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80114d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114d8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80114da:	f107 0308 	add.w	r3, r7, #8
 80114de:	4618      	mov	r0, r3
 80114e0:	f002 fb78 	bl	8013bd4 <HAL_RCCEx_PeriphCLKConfig>
 80114e4:	4603      	mov	r3, r0
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d001      	beq.n	80114ee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80114ea:	f7ff ff6d 	bl	80113c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80114ee:	4b04      	ldr	r3, [pc, #16]	; (8011500 <HAL_RTC_MspInit+0x50>)
 80114f0:	2201      	movs	r2, #1
 80114f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80114f4:	bf00      	nop
 80114f6:	3718      	adds	r7, #24
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	40002800 	.word	0x40002800
 8011500:	42470e3c 	.word	0x42470e3c

08011504 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b08a      	sub	sp, #40	; 0x28
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801150c:	f107 0314 	add.w	r3, r7, #20
 8011510:	2200      	movs	r2, #0
 8011512:	601a      	str	r2, [r3, #0]
 8011514:	605a      	str	r2, [r3, #4]
 8011516:	609a      	str	r2, [r3, #8]
 8011518:	60da      	str	r2, [r3, #12]
 801151a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	4a19      	ldr	r2, [pc, #100]	; (8011588 <HAL_SPI_MspInit+0x84>)
 8011522:	4293      	cmp	r3, r2
 8011524:	d12b      	bne.n	801157e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011526:	2300      	movs	r3, #0
 8011528:	613b      	str	r3, [r7, #16]
 801152a:	4b18      	ldr	r3, [pc, #96]	; (801158c <HAL_SPI_MspInit+0x88>)
 801152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801152e:	4a17      	ldr	r2, [pc, #92]	; (801158c <HAL_SPI_MspInit+0x88>)
 8011530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011534:	6413      	str	r3, [r2, #64]	; 0x40
 8011536:	4b15      	ldr	r3, [pc, #84]	; (801158c <HAL_SPI_MspInit+0x88>)
 8011538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801153e:	613b      	str	r3, [r7, #16]
 8011540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8011542:	2300      	movs	r3, #0
 8011544:	60fb      	str	r3, [r7, #12]
 8011546:	4b11      	ldr	r3, [pc, #68]	; (801158c <HAL_SPI_MspInit+0x88>)
 8011548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801154a:	4a10      	ldr	r2, [pc, #64]	; (801158c <HAL_SPI_MspInit+0x88>)
 801154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011550:	6313      	str	r3, [r2, #48]	; 0x30
 8011552:	4b0e      	ldr	r3, [pc, #56]	; (801158c <HAL_SPI_MspInit+0x88>)
 8011554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801155a:	60fb      	str	r3, [r7, #12]
 801155c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 801155e:	230e      	movs	r3, #14
 8011560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011562:	2302      	movs	r3, #2
 8011564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011566:	2300      	movs	r3, #0
 8011568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801156a:	2303      	movs	r3, #3
 801156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801156e:	2305      	movs	r3, #5
 8011570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8011572:	f107 0314 	add.w	r3, r7, #20
 8011576:	4619      	mov	r1, r3
 8011578:	4805      	ldr	r0, [pc, #20]	; (8011590 <HAL_SPI_MspInit+0x8c>)
 801157a:	f001 fc77 	bl	8012e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 801157e:	bf00      	nop
 8011580:	3728      	adds	r7, #40	; 0x28
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	40003800 	.word	0x40003800
 801158c:	40023800 	.word	0x40023800
 8011590:	40022000 	.word	0x40022000

08011594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b08e      	sub	sp, #56	; 0x38
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115a0:	2200      	movs	r2, #0
 80115a2:	601a      	str	r2, [r3, #0]
 80115a4:	605a      	str	r2, [r3, #4]
 80115a6:	609a      	str	r2, [r3, #8]
 80115a8:	60da      	str	r2, [r3, #12]
 80115aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	4a63      	ldr	r2, [pc, #396]	; (8011740 <HAL_UART_MspInit+0x1ac>)
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d12c      	bne.n	8011610 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80115b6:	2300      	movs	r3, #0
 80115b8:	623b      	str	r3, [r7, #32]
 80115ba:	4b62      	ldr	r3, [pc, #392]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 80115bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115be:	4a61      	ldr	r2, [pc, #388]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 80115c0:	f043 0310 	orr.w	r3, r3, #16
 80115c4:	6453      	str	r3, [r2, #68]	; 0x44
 80115c6:	4b5f      	ldr	r3, [pc, #380]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 80115c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ca:	f003 0310 	and.w	r3, r3, #16
 80115ce:	623b      	str	r3, [r7, #32]
 80115d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80115d2:	2300      	movs	r3, #0
 80115d4:	61fb      	str	r3, [r7, #28]
 80115d6:	4b5b      	ldr	r3, [pc, #364]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 80115d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115da:	4a5a      	ldr	r2, [pc, #360]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 80115dc:	f043 0302 	orr.w	r3, r3, #2
 80115e0:	6313      	str	r3, [r2, #48]	; 0x30
 80115e2:	4b58      	ldr	r3, [pc, #352]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 80115e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115e6:	f003 0302 	and.w	r3, r3, #2
 80115ea:	61fb      	str	r3, [r7, #28]
 80115ec:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80115ee:	23c0      	movs	r3, #192	; 0xc0
 80115f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115f2:	2302      	movs	r3, #2
 80115f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115f6:	2300      	movs	r3, #0
 80115f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115fa:	2303      	movs	r3, #3
 80115fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80115fe:	2307      	movs	r3, #7
 8011600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011606:	4619      	mov	r1, r3
 8011608:	484f      	ldr	r0, [pc, #316]	; (8011748 <HAL_UART_MspInit+0x1b4>)
 801160a:	f001 fc2f 	bl	8012e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 801160e:	e13e      	b.n	801188e <HAL_UART_MspInit+0x2fa>
  else if(huart->Instance==USART3)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	4a4d      	ldr	r2, [pc, #308]	; (801174c <HAL_UART_MspInit+0x1b8>)
 8011616:	4293      	cmp	r3, r2
 8011618:	f040 80a2 	bne.w	8011760 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 801161c:	2300      	movs	r3, #0
 801161e:	61bb      	str	r3, [r7, #24]
 8011620:	4b48      	ldr	r3, [pc, #288]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 8011622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011624:	4a47      	ldr	r2, [pc, #284]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 8011626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801162a:	6413      	str	r3, [r2, #64]	; 0x40
 801162c:	4b45      	ldr	r3, [pc, #276]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 801162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011634:	61bb      	str	r3, [r7, #24]
 8011636:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011638:	2300      	movs	r3, #0
 801163a:	617b      	str	r3, [r7, #20]
 801163c:	4b41      	ldr	r3, [pc, #260]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 801163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011640:	4a40      	ldr	r2, [pc, #256]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 8011642:	f043 0302 	orr.w	r3, r3, #2
 8011646:	6313      	str	r3, [r2, #48]	; 0x30
 8011648:	4b3e      	ldr	r3, [pc, #248]	; (8011744 <HAL_UART_MspInit+0x1b0>)
 801164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801164c:	f003 0302 	and.w	r3, r3, #2
 8011650:	617b      	str	r3, [r7, #20]
 8011652:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8011654:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8011658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801165a:	2302      	movs	r3, #2
 801165c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801165e:	2300      	movs	r3, #0
 8011660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011662:	2303      	movs	r3, #3
 8011664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011666:	2307      	movs	r3, #7
 8011668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801166e:	4619      	mov	r1, r3
 8011670:	4835      	ldr	r0, [pc, #212]	; (8011748 <HAL_UART_MspInit+0x1b4>)
 8011672:	f001 fbfb 	bl	8012e6c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8011676:	4b36      	ldr	r3, [pc, #216]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 8011678:	4a36      	ldr	r2, [pc, #216]	; (8011754 <HAL_UART_MspInit+0x1c0>)
 801167a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 801167c:	4b34      	ldr	r3, [pc, #208]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 801167e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011682:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8011684:	4b32      	ldr	r3, [pc, #200]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 8011686:	2240      	movs	r2, #64	; 0x40
 8011688:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801168a:	4b31      	ldr	r3, [pc, #196]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 801168c:	2200      	movs	r2, #0
 801168e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8011690:	4b2f      	ldr	r3, [pc, #188]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 8011692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011696:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011698:	4b2d      	ldr	r3, [pc, #180]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 801169a:	2200      	movs	r2, #0
 801169c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801169e:	4b2c      	ldr	r3, [pc, #176]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 80116a0:	2200      	movs	r2, #0
 80116a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80116a4:	4b2a      	ldr	r3, [pc, #168]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 80116a6:	2200      	movs	r2, #0
 80116a8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80116aa:	4b29      	ldr	r3, [pc, #164]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 80116ac:	2200      	movs	r2, #0
 80116ae:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80116b0:	4b27      	ldr	r3, [pc, #156]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 80116b2:	2200      	movs	r2, #0
 80116b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80116b6:	4826      	ldr	r0, [pc, #152]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 80116b8:	f000 ffd6 	bl	8012668 <HAL_DMA_Init>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d001      	beq.n	80116c6 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80116c2:	f7ff fe81 	bl	80113c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4a21      	ldr	r2, [pc, #132]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 80116ca:	635a      	str	r2, [r3, #52]	; 0x34
 80116cc:	4a20      	ldr	r2, [pc, #128]	; (8011750 <HAL_UART_MspInit+0x1bc>)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80116d2:	4b21      	ldr	r3, [pc, #132]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 80116d4:	4a21      	ldr	r2, [pc, #132]	; (801175c <HAL_UART_MspInit+0x1c8>)
 80116d6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80116d8:	4b1f      	ldr	r3, [pc, #124]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 80116da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80116de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80116e0:	4b1d      	ldr	r3, [pc, #116]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 80116e2:	2200      	movs	r2, #0
 80116e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80116e6:	4b1c      	ldr	r3, [pc, #112]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 80116e8:	2200      	movs	r2, #0
 80116ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80116ec:	4b1a      	ldr	r3, [pc, #104]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 80116ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80116f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80116f4:	4b18      	ldr	r3, [pc, #96]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 80116f6:	2200      	movs	r2, #0
 80116f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80116fa:	4b17      	ldr	r3, [pc, #92]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 80116fc:	2200      	movs	r2, #0
 80116fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8011700:	4b15      	ldr	r3, [pc, #84]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 8011702:	2200      	movs	r2, #0
 8011704:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8011706:	4b14      	ldr	r3, [pc, #80]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 8011708:	2200      	movs	r2, #0
 801170a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801170c:	4b12      	ldr	r3, [pc, #72]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 801170e:	2200      	movs	r2, #0
 8011710:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8011712:	4811      	ldr	r0, [pc, #68]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 8011714:	f000 ffa8 	bl	8012668 <HAL_DMA_Init>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d001      	beq.n	8011722 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 801171e:	f7ff fe53 	bl	80113c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	4a0c      	ldr	r2, [pc, #48]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 8011726:	639a      	str	r2, [r3, #56]	; 0x38
 8011728:	4a0b      	ldr	r2, [pc, #44]	; (8011758 <HAL_UART_MspInit+0x1c4>)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 801172e:	2200      	movs	r2, #0
 8011730:	2105      	movs	r1, #5
 8011732:	2027      	movs	r0, #39	; 0x27
 8011734:	f000 ff6e 	bl	8012614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8011738:	2027      	movs	r0, #39	; 0x27
 801173a:	f000 ff87 	bl	801264c <HAL_NVIC_EnableIRQ>
}
 801173e:	e0a6      	b.n	801188e <HAL_UART_MspInit+0x2fa>
 8011740:	40011000 	.word	0x40011000
 8011744:	40023800 	.word	0x40023800
 8011748:	40020400 	.word	0x40020400
 801174c:	40004800 	.word	0x40004800
 8011750:	200096a8 	.word	0x200096a8
 8011754:	40026058 	.word	0x40026058
 8011758:	200081d8 	.word	0x200081d8
 801175c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	4a4c      	ldr	r2, [pc, #304]	; (8011898 <HAL_UART_MspInit+0x304>)
 8011766:	4293      	cmp	r3, r2
 8011768:	f040 8091 	bne.w	801188e <HAL_UART_MspInit+0x2fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 801176c:	2300      	movs	r3, #0
 801176e:	613b      	str	r3, [r7, #16]
 8011770:	4b4a      	ldr	r3, [pc, #296]	; (801189c <HAL_UART_MspInit+0x308>)
 8011772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011774:	4a49      	ldr	r2, [pc, #292]	; (801189c <HAL_UART_MspInit+0x308>)
 8011776:	f043 0320 	orr.w	r3, r3, #32
 801177a:	6453      	str	r3, [r2, #68]	; 0x44
 801177c:	4b47      	ldr	r3, [pc, #284]	; (801189c <HAL_UART_MspInit+0x308>)
 801177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011780:	f003 0320 	and.w	r3, r3, #32
 8011784:	613b      	str	r3, [r7, #16]
 8011786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8011788:	2300      	movs	r3, #0
 801178a:	60fb      	str	r3, [r7, #12]
 801178c:	4b43      	ldr	r3, [pc, #268]	; (801189c <HAL_UART_MspInit+0x308>)
 801178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011790:	4a42      	ldr	r2, [pc, #264]	; (801189c <HAL_UART_MspInit+0x308>)
 8011792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011796:	6313      	str	r3, [r2, #48]	; 0x30
 8011798:	4b40      	ldr	r3, [pc, #256]	; (801189c <HAL_UART_MspInit+0x308>)
 801179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801179c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117a0:	60fb      	str	r3, [r7, #12]
 80117a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80117a4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80117a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117aa:	2302      	movs	r3, #2
 80117ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117ae:	2300      	movs	r3, #0
 80117b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80117b2:	2303      	movs	r3, #3
 80117b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80117b6:	2308      	movs	r3, #8
 80117b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80117ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117be:	4619      	mov	r1, r3
 80117c0:	4837      	ldr	r0, [pc, #220]	; (80118a0 <HAL_UART_MspInit+0x30c>)
 80117c2:	f001 fb53 	bl	8012e6c <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80117c6:	4b37      	ldr	r3, [pc, #220]	; (80118a4 <HAL_UART_MspInit+0x310>)
 80117c8:	4a37      	ldr	r2, [pc, #220]	; (80118a8 <HAL_UART_MspInit+0x314>)
 80117ca:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80117cc:	4b35      	ldr	r3, [pc, #212]	; (80118a4 <HAL_UART_MspInit+0x310>)
 80117ce:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80117d2:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80117d4:	4b33      	ldr	r3, [pc, #204]	; (80118a4 <HAL_UART_MspInit+0x310>)
 80117d6:	2240      	movs	r2, #64	; 0x40
 80117d8:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80117da:	4b32      	ldr	r3, [pc, #200]	; (80118a4 <HAL_UART_MspInit+0x310>)
 80117dc:	2200      	movs	r2, #0
 80117de:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80117e0:	4b30      	ldr	r3, [pc, #192]	; (80118a4 <HAL_UART_MspInit+0x310>)
 80117e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80117e6:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80117e8:	4b2e      	ldr	r3, [pc, #184]	; (80118a4 <HAL_UART_MspInit+0x310>)
 80117ea:	2200      	movs	r2, #0
 80117ec:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80117ee:	4b2d      	ldr	r3, [pc, #180]	; (80118a4 <HAL_UART_MspInit+0x310>)
 80117f0:	2200      	movs	r2, #0
 80117f2:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80117f4:	4b2b      	ldr	r3, [pc, #172]	; (80118a4 <HAL_UART_MspInit+0x310>)
 80117f6:	2200      	movs	r2, #0
 80117f8:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80117fa:	4b2a      	ldr	r3, [pc, #168]	; (80118a4 <HAL_UART_MspInit+0x310>)
 80117fc:	2200      	movs	r2, #0
 80117fe:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8011800:	4b28      	ldr	r3, [pc, #160]	; (80118a4 <HAL_UART_MspInit+0x310>)
 8011802:	2200      	movs	r2, #0
 8011804:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8011806:	4827      	ldr	r0, [pc, #156]	; (80118a4 <HAL_UART_MspInit+0x310>)
 8011808:	f000 ff2e 	bl	8012668 <HAL_DMA_Init>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d001      	beq.n	8011816 <HAL_UART_MspInit+0x282>
      Error_Handler();
 8011812:	f7ff fdd9 	bl	80113c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4a22      	ldr	r2, [pc, #136]	; (80118a4 <HAL_UART_MspInit+0x310>)
 801181a:	635a      	str	r2, [r3, #52]	; 0x34
 801181c:	4a21      	ldr	r2, [pc, #132]	; (80118a4 <HAL_UART_MspInit+0x310>)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8011822:	4b22      	ldr	r3, [pc, #136]	; (80118ac <HAL_UART_MspInit+0x318>)
 8011824:	4a22      	ldr	r2, [pc, #136]	; (80118b0 <HAL_UART_MspInit+0x31c>)
 8011826:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8011828:	4b20      	ldr	r3, [pc, #128]	; (80118ac <HAL_UART_MspInit+0x318>)
 801182a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 801182e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011830:	4b1e      	ldr	r3, [pc, #120]	; (80118ac <HAL_UART_MspInit+0x318>)
 8011832:	2200      	movs	r2, #0
 8011834:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011836:	4b1d      	ldr	r3, [pc, #116]	; (80118ac <HAL_UART_MspInit+0x318>)
 8011838:	2200      	movs	r2, #0
 801183a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 801183c:	4b1b      	ldr	r3, [pc, #108]	; (80118ac <HAL_UART_MspInit+0x318>)
 801183e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011842:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011844:	4b19      	ldr	r3, [pc, #100]	; (80118ac <HAL_UART_MspInit+0x318>)
 8011846:	2200      	movs	r2, #0
 8011848:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801184a:	4b18      	ldr	r3, [pc, #96]	; (80118ac <HAL_UART_MspInit+0x318>)
 801184c:	2200      	movs	r2, #0
 801184e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8011850:	4b16      	ldr	r3, [pc, #88]	; (80118ac <HAL_UART_MspInit+0x318>)
 8011852:	2200      	movs	r2, #0
 8011854:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8011856:	4b15      	ldr	r3, [pc, #84]	; (80118ac <HAL_UART_MspInit+0x318>)
 8011858:	2200      	movs	r2, #0
 801185a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801185c:	4b13      	ldr	r3, [pc, #76]	; (80118ac <HAL_UART_MspInit+0x318>)
 801185e:	2200      	movs	r2, #0
 8011860:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8011862:	4812      	ldr	r0, [pc, #72]	; (80118ac <HAL_UART_MspInit+0x318>)
 8011864:	f000 ff00 	bl	8012668 <HAL_DMA_Init>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d001      	beq.n	8011872 <HAL_UART_MspInit+0x2de>
      Error_Handler();
 801186e:	f7ff fdab 	bl	80113c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4a0d      	ldr	r2, [pc, #52]	; (80118ac <HAL_UART_MspInit+0x318>)
 8011876:	639a      	str	r2, [r3, #56]	; 0x38
 8011878:	4a0c      	ldr	r2, [pc, #48]	; (80118ac <HAL_UART_MspInit+0x318>)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 801187e:	2200      	movs	r2, #0
 8011880:	2105      	movs	r1, #5
 8011882:	2047      	movs	r0, #71	; 0x47
 8011884:	f000 fec6 	bl	8012614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8011888:	2047      	movs	r0, #71	; 0x47
 801188a:	f000 fedf 	bl	801264c <HAL_NVIC_EnableIRQ>
}
 801188e:	bf00      	nop
 8011890:	3738      	adds	r7, #56	; 0x38
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	40011400 	.word	0x40011400
 801189c:	40023800 	.word	0x40023800
 80118a0:	40021800 	.word	0x40021800
 80118a4:	20009830 	.word	0x20009830
 80118a8:	400264a0 	.word	0x400264a0
 80118ac:	2000811c 	.word	0x2000811c
 80118b0:	40026428 	.word	0x40026428

080118b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b08c      	sub	sp, #48	; 0x30
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80118bc:	2300      	movs	r3, #0
 80118be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80118c0:	2300      	movs	r3, #0
 80118c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80118c4:	2200      	movs	r2, #0
 80118c6:	6879      	ldr	r1, [r7, #4]
 80118c8:	2019      	movs	r0, #25
 80118ca:	f000 fea3 	bl	8012614 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80118ce:	2019      	movs	r0, #25
 80118d0:	f000 febc 	bl	801264c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80118d4:	2300      	movs	r3, #0
 80118d6:	60fb      	str	r3, [r7, #12]
 80118d8:	4b1f      	ldr	r3, [pc, #124]	; (8011958 <HAL_InitTick+0xa4>)
 80118da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118dc:	4a1e      	ldr	r2, [pc, #120]	; (8011958 <HAL_InitTick+0xa4>)
 80118de:	f043 0301 	orr.w	r3, r3, #1
 80118e2:	6453      	str	r3, [r2, #68]	; 0x44
 80118e4:	4b1c      	ldr	r3, [pc, #112]	; (8011958 <HAL_InitTick+0xa4>)
 80118e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118e8:	f003 0301 	and.w	r3, r3, #1
 80118ec:	60fb      	str	r3, [r7, #12]
 80118ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80118f0:	f107 0210 	add.w	r2, r7, #16
 80118f4:	f107 0314 	add.w	r3, r7, #20
 80118f8:	4611      	mov	r1, r2
 80118fa:	4618      	mov	r0, r3
 80118fc:	f002 f938 	bl	8013b70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8011900:	f002 f922 	bl	8013b48 <HAL_RCC_GetPCLK2Freq>
 8011904:	4603      	mov	r3, r0
 8011906:	005b      	lsls	r3, r3, #1
 8011908:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190c:	4a13      	ldr	r2, [pc, #76]	; (801195c <HAL_InitTick+0xa8>)
 801190e:	fba2 2303 	umull	r2, r3, r2, r3
 8011912:	0c9b      	lsrs	r3, r3, #18
 8011914:	3b01      	subs	r3, #1
 8011916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8011918:	4b11      	ldr	r3, [pc, #68]	; (8011960 <HAL_InitTick+0xac>)
 801191a:	4a12      	ldr	r2, [pc, #72]	; (8011964 <HAL_InitTick+0xb0>)
 801191c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 801191e:	4b10      	ldr	r3, [pc, #64]	; (8011960 <HAL_InitTick+0xac>)
 8011920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011924:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8011926:	4a0e      	ldr	r2, [pc, #56]	; (8011960 <HAL_InitTick+0xac>)
 8011928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801192a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 801192c:	4b0c      	ldr	r3, [pc, #48]	; (8011960 <HAL_InitTick+0xac>)
 801192e:	2200      	movs	r2, #0
 8011930:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011932:	4b0b      	ldr	r3, [pc, #44]	; (8011960 <HAL_InitTick+0xac>)
 8011934:	2200      	movs	r2, #0
 8011936:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8011938:	4809      	ldr	r0, [pc, #36]	; (8011960 <HAL_InitTick+0xac>)
 801193a:	f003 fad3 	bl	8014ee4 <HAL_TIM_Base_Init>
 801193e:	4603      	mov	r3, r0
 8011940:	2b00      	cmp	r3, #0
 8011942:	d104      	bne.n	801194e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8011944:	4806      	ldr	r0, [pc, #24]	; (8011960 <HAL_InitTick+0xac>)
 8011946:	f003 fb27 	bl	8014f98 <HAL_TIM_Base_Start_IT>
 801194a:	4603      	mov	r3, r0
 801194c:	e000      	b.n	8011950 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 801194e:	2301      	movs	r3, #1
}
 8011950:	4618      	mov	r0, r3
 8011952:	3730      	adds	r7, #48	; 0x30
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	40023800 	.word	0x40023800
 801195c:	431bde83 	.word	0x431bde83
 8011960:	20009cd8 	.word	0x20009cd8
 8011964:	40010000 	.word	0x40010000

08011968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011968:	b480      	push	{r7}
 801196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801196c:	e7fe      	b.n	801196c <NMI_Handler+0x4>

0801196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801196e:	b480      	push	{r7}
 8011970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011972:	e7fe      	b.n	8011972 <HardFault_Handler+0x4>

08011974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011974:	b480      	push	{r7}
 8011976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011978:	e7fe      	b.n	8011978 <MemManage_Handler+0x4>

0801197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801197a:	b480      	push	{r7}
 801197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801197e:	e7fe      	b.n	801197e <BusFault_Handler+0x4>

08011980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011980:	b480      	push	{r7}
 8011982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011984:	e7fe      	b.n	8011984 <UsageFault_Handler+0x4>

08011986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011986:	b480      	push	{r7}
 8011988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801198a:	bf00      	nop
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8011998:	4802      	ldr	r0, [pc, #8]	; (80119a4 <DMA1_Stream1_IRQHandler+0x10>)
 801199a:	f000 fffd 	bl	8012998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 801199e:	bf00      	nop
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	200081d8 	.word	0x200081d8

080119a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80119ac:	4802      	ldr	r0, [pc, #8]	; (80119b8 <DMA1_Stream3_IRQHandler+0x10>)
 80119ae:	f000 fff3 	bl	8012998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80119b2:	bf00      	nop
 80119b4:	bd80      	pop	{r7, pc}
 80119b6:	bf00      	nop
 80119b8:	200096a8 	.word	0x200096a8

080119bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80119c0:	4802      	ldr	r0, [pc, #8]	; (80119cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80119c2:	f003 fb59 	bl	8015078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80119c6:	bf00      	nop
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	20009cd8 	.word	0x20009cd8

080119d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80119d4:	4802      	ldr	r0, [pc, #8]	; (80119e0 <USART3_IRQHandler+0x10>)
 80119d6:	f003 ff63 	bl	80158a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80119da:	bf00      	nop
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	20008238 	.word	0x20008238

080119e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80119e8:	4802      	ldr	r0, [pc, #8]	; (80119f4 <DMA2_Stream1_IRQHandler+0x10>)
 80119ea:	f000 ffd5 	bl	8012998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80119ee:	bf00      	nop
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	2000811c 	.word	0x2000811c

080119f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80119fc:	4802      	ldr	r0, [pc, #8]	; (8011a08 <DMA2_Stream6_IRQHandler+0x10>)
 80119fe:	f000 ffcb 	bl	8012998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8011a02:	bf00      	nop
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	20009830 	.word	0x20009830

08011a0c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8011a10:	4802      	ldr	r0, [pc, #8]	; (8011a1c <USART6_IRQHandler+0x10>)
 8011a12:	f003 ff45 	bl	80158a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8011a16:	bf00      	nop
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	20009c70 	.word	0x20009c70

08011a20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b086      	sub	sp, #24
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	617b      	str	r3, [r7, #20]
 8011a30:	e00a      	b.n	8011a48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011a32:	f3af 8000 	nop.w
 8011a36:	4601      	mov	r1, r0
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	1c5a      	adds	r2, r3, #1
 8011a3c:	60ba      	str	r2, [r7, #8]
 8011a3e:	b2ca      	uxtb	r2, r1
 8011a40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	3301      	adds	r3, #1
 8011a46:	617b      	str	r3, [r7, #20]
 8011a48:	697a      	ldr	r2, [r7, #20]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	dbf0      	blt.n	8011a32 <_read+0x12>
	}

return len;
 8011a50:	687b      	ldr	r3, [r7, #4]
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3718      	adds	r7, #24
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b086      	sub	sp, #24
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	60f8      	str	r0, [r7, #12]
 8011a62:	60b9      	str	r1, [r7, #8]
 8011a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011a66:	2300      	movs	r3, #0
 8011a68:	617b      	str	r3, [r7, #20]
 8011a6a:	e009      	b.n	8011a80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	1c5a      	adds	r2, r3, #1
 8011a70:	60ba      	str	r2, [r7, #8]
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	4618      	mov	r0, r3
 8011a76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	617b      	str	r3, [r7, #20]
 8011a80:	697a      	ldr	r2, [r7, #20]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	dbf1      	blt.n	8011a6c <_write+0x12>
	}
	return len;
 8011a88:	687b      	ldr	r3, [r7, #4]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3718      	adds	r7, #24
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <_close>:

int _close(int file)
{
 8011a92:	b480      	push	{r7}
 8011a94:	b083      	sub	sp, #12
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	6078      	str	r0, [r7, #4]
	return -1;
 8011a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	370c      	adds	r7, #12
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa8:	4770      	bx	lr

08011aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011aaa:	b480      	push	{r7}
 8011aac:	b083      	sub	sp, #12
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
 8011ab2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011aba:	605a      	str	r2, [r3, #4]
	return 0;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <_isatty>:

int _isatty(int file)
{
 8011aca:	b480      	push	{r7}
 8011acc:	b083      	sub	sp, #12
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
	return 1;
 8011ad2:	2301      	movs	r3, #1
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr

08011ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b085      	sub	sp, #20
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	60f8      	str	r0, [r7, #12]
 8011ae8:	60b9      	str	r1, [r7, #8]
 8011aea:	607a      	str	r2, [r7, #4]
	return 0;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3714      	adds	r7, #20
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr
	...

08011afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b086      	sub	sp, #24
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011b04:	4a14      	ldr	r2, [pc, #80]	; (8011b58 <_sbrk+0x5c>)
 8011b06:	4b15      	ldr	r3, [pc, #84]	; (8011b5c <_sbrk+0x60>)
 8011b08:	1ad3      	subs	r3, r2, r3
 8011b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011b10:	4b13      	ldr	r3, [pc, #76]	; (8011b60 <_sbrk+0x64>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d102      	bne.n	8011b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011b18:	4b11      	ldr	r3, [pc, #68]	; (8011b60 <_sbrk+0x64>)
 8011b1a:	4a12      	ldr	r2, [pc, #72]	; (8011b64 <_sbrk+0x68>)
 8011b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011b1e:	4b10      	ldr	r3, [pc, #64]	; (8011b60 <_sbrk+0x64>)
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	4413      	add	r3, r2
 8011b26:	693a      	ldr	r2, [r7, #16]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d207      	bcs.n	8011b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011b2c:	f017 fa6e 	bl	802900c <__errno>
 8011b30:	4603      	mov	r3, r0
 8011b32:	220c      	movs	r2, #12
 8011b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8011b36:	f04f 33ff 	mov.w	r3, #4294967295
 8011b3a:	e009      	b.n	8011b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011b3c:	4b08      	ldr	r3, [pc, #32]	; (8011b60 <_sbrk+0x64>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8011b42:	4b07      	ldr	r3, [pc, #28]	; (8011b60 <_sbrk+0x64>)
 8011b44:	681a      	ldr	r2, [r3, #0]
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	4413      	add	r3, r2
 8011b4a:	4a05      	ldr	r2, [pc, #20]	; (8011b60 <_sbrk+0x64>)
 8011b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3718      	adds	r7, #24
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	20020000 	.word	0x20020000
 8011b5c:	00000400 	.word	0x00000400
 8011b60:	20000860 	.word	0x20000860
 8011b64:	2000a240 	.word	0x2000a240

08011b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011b68:	b480      	push	{r7}
 8011b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011b6c:	4b07      	ldr	r3, [pc, #28]	; (8011b8c <SystemInit+0x24>)
 8011b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b72:	4a06      	ldr	r2, [pc, #24]	; (8011b8c <SystemInit+0x24>)
 8011b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8011b7c:	4b03      	ldr	r3, [pc, #12]	; (8011b8c <SystemInit+0x24>)
 8011b7e:	4a04      	ldr	r2, [pc, #16]	; (8011b90 <SystemInit+0x28>)
 8011b80:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8011b82:	bf00      	nop
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr
 8011b8c:	e000ed00 	.word	0xe000ed00
 8011b90:	08010000 	.word	0x08010000

08011b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8011b98:	480d      	ldr	r0, [pc, #52]	; (8011bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8011b9a:	490e      	ldr	r1, [pc, #56]	; (8011bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8011b9c:	4a0e      	ldr	r2, [pc, #56]	; (8011bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8011b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011ba0:	e002      	b.n	8011ba8 <LoopCopyDataInit>

08011ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011ba6:	3304      	adds	r3, #4

08011ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011bac:	d3f9      	bcc.n	8011ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011bae:	4a0b      	ldr	r2, [pc, #44]	; (8011bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8011bb0:	4c0b      	ldr	r4, [pc, #44]	; (8011be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8011bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011bb4:	e001      	b.n	8011bba <LoopFillZerobss>

08011bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011bb8:	3204      	adds	r2, #4

08011bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011bbc:	d3fb      	bcc.n	8011bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8011bbe:	f7ff ffd3 	bl	8011b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011bc2:	f017 fb1f 	bl	8029204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011bc6:	f7fe fdb9 	bl	801073c <main>
  bx  lr    
 8011bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8011bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8011bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011bd4:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8011bd8:	0802a95c 	.word	0x0802a95c
  ldr r2, =_sbss
 8011bdc:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8011be0:	2000a23c 	.word	0x2000a23c

08011be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011be4:	e7fe      	b.n	8011be4 <ADC_IRQHandler>
	...

08011be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011bec:	4b0e      	ldr	r3, [pc, #56]	; (8011c28 <HAL_Init+0x40>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	4a0d      	ldr	r2, [pc, #52]	; (8011c28 <HAL_Init+0x40>)
 8011bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011bf8:	4b0b      	ldr	r3, [pc, #44]	; (8011c28 <HAL_Init+0x40>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4a0a      	ldr	r2, [pc, #40]	; (8011c28 <HAL_Init+0x40>)
 8011bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011c04:	4b08      	ldr	r3, [pc, #32]	; (8011c28 <HAL_Init+0x40>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	4a07      	ldr	r2, [pc, #28]	; (8011c28 <HAL_Init+0x40>)
 8011c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011c10:	2003      	movs	r0, #3
 8011c12:	f000 fcf4 	bl	80125fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011c16:	200f      	movs	r0, #15
 8011c18:	f7ff fe4c 	bl	80118b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011c1c:	f7ff fbd8 	bl	80113d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011c20:	2300      	movs	r3, #0
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	40023c00 	.word	0x40023c00

08011c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011c30:	4b06      	ldr	r3, [pc, #24]	; (8011c4c <HAL_IncTick+0x20>)
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	461a      	mov	r2, r3
 8011c36:	4b06      	ldr	r3, [pc, #24]	; (8011c50 <HAL_IncTick+0x24>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4413      	add	r3, r2
 8011c3c:	4a04      	ldr	r2, [pc, #16]	; (8011c50 <HAL_IncTick+0x24>)
 8011c3e:	6013      	str	r3, [r2, #0]
}
 8011c40:	bf00      	nop
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr
 8011c4a:	bf00      	nop
 8011c4c:	20000008 	.word	0x20000008
 8011c50:	20009d20 	.word	0x20009d20

08011c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011c54:	b480      	push	{r7}
 8011c56:	af00      	add	r7, sp, #0
  return uwTick;
 8011c58:	4b03      	ldr	r3, [pc, #12]	; (8011c68 <HAL_GetTick+0x14>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr
 8011c66:	bf00      	nop
 8011c68:	20009d20 	.word	0x20009d20

08011c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011c74:	f7ff ffee 	bl	8011c54 <HAL_GetTick>
 8011c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c84:	d005      	beq.n	8011c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011c86:	4b0a      	ldr	r3, [pc, #40]	; (8011cb0 <HAL_Delay+0x44>)
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	4413      	add	r3, r2
 8011c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011c92:	bf00      	nop
 8011c94:	f7ff ffde 	bl	8011c54 <HAL_GetTick>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	1ad3      	subs	r3, r2, r3
 8011c9e:	68fa      	ldr	r2, [r7, #12]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d8f7      	bhi.n	8011c94 <HAL_Delay+0x28>
  {
  }
}
 8011ca4:	bf00      	nop
 8011ca6:	bf00      	nop
 8011ca8:	3710      	adds	r7, #16
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	20000008 	.word	0x20000008

08011cb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d101      	bne.n	8011cca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	e033      	b.n	8011d32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d109      	bne.n	8011ce6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f7ff fba8 	bl	8011428 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cea:	f003 0310 	and.w	r3, r3, #16
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d118      	bne.n	8011d24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8011cfa:	f023 0302 	bic.w	r3, r3, #2
 8011cfe:	f043 0202 	orr.w	r2, r3, #2
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 f93a 	bl	8011f80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d16:	f023 0303 	bic.w	r3, r3, #3
 8011d1a:	f043 0201 	orr.w	r2, r3, #1
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	641a      	str	r2, [r3, #64]	; 0x40
 8011d22:	e001      	b.n	8011d28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8011d24:	2301      	movs	r3, #1
 8011d26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8011d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3710      	adds	r7, #16
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
	...

08011d3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8011d46:	2300      	movs	r3, #0
 8011d48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d101      	bne.n	8011d58 <HAL_ADC_ConfigChannel+0x1c>
 8011d54:	2302      	movs	r3, #2
 8011d56:	e105      	b.n	8011f64 <HAL_ADC_ConfigChannel+0x228>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	2b09      	cmp	r3, #9
 8011d66:	d925      	bls.n	8011db4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	68d9      	ldr	r1, [r3, #12]
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	461a      	mov	r2, r3
 8011d76:	4613      	mov	r3, r2
 8011d78:	005b      	lsls	r3, r3, #1
 8011d7a:	4413      	add	r3, r2
 8011d7c:	3b1e      	subs	r3, #30
 8011d7e:	2207      	movs	r2, #7
 8011d80:	fa02 f303 	lsl.w	r3, r2, r3
 8011d84:	43da      	mvns	r2, r3
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	400a      	ands	r2, r1
 8011d8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	68d9      	ldr	r1, [r3, #12]
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	689a      	ldr	r2, [r3, #8]
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	4618      	mov	r0, r3
 8011da0:	4603      	mov	r3, r0
 8011da2:	005b      	lsls	r3, r3, #1
 8011da4:	4403      	add	r3, r0
 8011da6:	3b1e      	subs	r3, #30
 8011da8:	409a      	lsls	r2, r3
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	430a      	orrs	r2, r1
 8011db0:	60da      	str	r2, [r3, #12]
 8011db2:	e022      	b.n	8011dfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	6919      	ldr	r1, [r3, #16]
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	4613      	mov	r3, r2
 8011dc4:	005b      	lsls	r3, r3, #1
 8011dc6:	4413      	add	r3, r2
 8011dc8:	2207      	movs	r2, #7
 8011dca:	fa02 f303 	lsl.w	r3, r2, r3
 8011dce:	43da      	mvns	r2, r3
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	400a      	ands	r2, r1
 8011dd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	6919      	ldr	r1, [r3, #16]
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	689a      	ldr	r2, [r3, #8]
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	4618      	mov	r0, r3
 8011dea:	4603      	mov	r3, r0
 8011dec:	005b      	lsls	r3, r3, #1
 8011dee:	4403      	add	r3, r0
 8011df0:	409a      	lsls	r2, r3
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	430a      	orrs	r2, r1
 8011df8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	2b06      	cmp	r3, #6
 8011e00:	d824      	bhi.n	8011e4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	685a      	ldr	r2, [r3, #4]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	4413      	add	r3, r2
 8011e12:	3b05      	subs	r3, #5
 8011e14:	221f      	movs	r2, #31
 8011e16:	fa02 f303 	lsl.w	r3, r2, r3
 8011e1a:	43da      	mvns	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	400a      	ands	r2, r1
 8011e22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	4618      	mov	r0, r3
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	685a      	ldr	r2, [r3, #4]
 8011e36:	4613      	mov	r3, r2
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	4413      	add	r3, r2
 8011e3c:	3b05      	subs	r3, #5
 8011e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	430a      	orrs	r2, r1
 8011e48:	635a      	str	r2, [r3, #52]	; 0x34
 8011e4a:	e04c      	b.n	8011ee6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	2b0c      	cmp	r3, #12
 8011e52:	d824      	bhi.n	8011e9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	685a      	ldr	r2, [r3, #4]
 8011e5e:	4613      	mov	r3, r2
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	4413      	add	r3, r2
 8011e64:	3b23      	subs	r3, #35	; 0x23
 8011e66:	221f      	movs	r2, #31
 8011e68:	fa02 f303 	lsl.w	r3, r2, r3
 8011e6c:	43da      	mvns	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	400a      	ands	r2, r1
 8011e74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	4618      	mov	r0, r3
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	685a      	ldr	r2, [r3, #4]
 8011e88:	4613      	mov	r3, r2
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	4413      	add	r3, r2
 8011e8e:	3b23      	subs	r3, #35	; 0x23
 8011e90:	fa00 f203 	lsl.w	r2, r0, r3
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	430a      	orrs	r2, r1
 8011e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8011e9c:	e023      	b.n	8011ee6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	685a      	ldr	r2, [r3, #4]
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	4413      	add	r3, r2
 8011eae:	3b41      	subs	r3, #65	; 0x41
 8011eb0:	221f      	movs	r2, #31
 8011eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8011eb6:	43da      	mvns	r2, r3
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	400a      	ands	r2, r1
 8011ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	4618      	mov	r0, r3
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	685a      	ldr	r2, [r3, #4]
 8011ed2:	4613      	mov	r3, r2
 8011ed4:	009b      	lsls	r3, r3, #2
 8011ed6:	4413      	add	r3, r2
 8011ed8:	3b41      	subs	r3, #65	; 0x41
 8011eda:	fa00 f203 	lsl.w	r2, r0, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	430a      	orrs	r2, r1
 8011ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011ee6:	4b22      	ldr	r3, [pc, #136]	; (8011f70 <HAL_ADC_ConfigChannel+0x234>)
 8011ee8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	4a21      	ldr	r2, [pc, #132]	; (8011f74 <HAL_ADC_ConfigChannel+0x238>)
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d109      	bne.n	8011f08 <HAL_ADC_ConfigChannel+0x1cc>
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	2b12      	cmp	r3, #18
 8011efa:	d105      	bne.n	8011f08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	4a19      	ldr	r2, [pc, #100]	; (8011f74 <HAL_ADC_ConfigChannel+0x238>)
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d123      	bne.n	8011f5a <HAL_ADC_ConfigChannel+0x21e>
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2b10      	cmp	r3, #16
 8011f18:	d003      	beq.n	8011f22 <HAL_ADC_ConfigChannel+0x1e6>
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	2b11      	cmp	r3, #17
 8011f20:	d11b      	bne.n	8011f5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b10      	cmp	r3, #16
 8011f34:	d111      	bne.n	8011f5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8011f36:	4b10      	ldr	r3, [pc, #64]	; (8011f78 <HAL_ADC_ConfigChannel+0x23c>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4a10      	ldr	r2, [pc, #64]	; (8011f7c <HAL_ADC_ConfigChannel+0x240>)
 8011f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8011f40:	0c9a      	lsrs	r2, r3, #18
 8011f42:	4613      	mov	r3, r2
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	4413      	add	r3, r2
 8011f48:	005b      	lsls	r3, r3, #1
 8011f4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011f4c:	e002      	b.n	8011f54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	3b01      	subs	r3, #1
 8011f52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d1f9      	bne.n	8011f4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8011f62:	2300      	movs	r3, #0
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3714      	adds	r7, #20
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr
 8011f70:	40012300 	.word	0x40012300
 8011f74:	40012000 	.word	0x40012000
 8011f78:	20000000 	.word	0x20000000
 8011f7c:	431bde83 	.word	0x431bde83

08011f80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b085      	sub	sp, #20
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011f88:	4b79      	ldr	r3, [pc, #484]	; (8012170 <ADC_Init+0x1f0>)
 8011f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	685a      	ldr	r2, [r3, #4]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	431a      	orrs	r2, r3
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	685a      	ldr	r2, [r3, #4]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	6859      	ldr	r1, [r3, #4]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	691b      	ldr	r3, [r3, #16]
 8011fc0:	021a      	lsls	r2, r3, #8
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	430a      	orrs	r2, r1
 8011fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	685a      	ldr	r2, [r3, #4]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8011fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	6859      	ldr	r1, [r3, #4]
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	689a      	ldr	r2, [r3, #8]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	430a      	orrs	r2, r1
 8011fea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	689a      	ldr	r2, [r3, #8]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	6899      	ldr	r1, [r3, #8]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	68da      	ldr	r2, [r3, #12]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	430a      	orrs	r2, r1
 801200c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012012:	4a58      	ldr	r2, [pc, #352]	; (8012174 <ADC_Init+0x1f4>)
 8012014:	4293      	cmp	r3, r2
 8012016:	d022      	beq.n	801205e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	689a      	ldr	r2, [r3, #8]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8012026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	6899      	ldr	r1, [r3, #8]
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	430a      	orrs	r2, r1
 8012038:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	689a      	ldr	r2, [r3, #8]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	6899      	ldr	r1, [r3, #8]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	430a      	orrs	r2, r1
 801205a:	609a      	str	r2, [r3, #8]
 801205c:	e00f      	b.n	801207e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	689a      	ldr	r2, [r3, #8]
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801206c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	689a      	ldr	r2, [r3, #8]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801207c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	689a      	ldr	r2, [r3, #8]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	f022 0202 	bic.w	r2, r2, #2
 801208c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	6899      	ldr	r1, [r3, #8]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	7e1b      	ldrb	r3, [r3, #24]
 8012098:	005a      	lsls	r2, r3, #1
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	430a      	orrs	r2, r1
 80120a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d01b      	beq.n	80120e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	685a      	ldr	r2, [r3, #4]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80120ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	685a      	ldr	r2, [r3, #4]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80120ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	6859      	ldr	r1, [r3, #4]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120d6:	3b01      	subs	r3, #1
 80120d8:	035a      	lsls	r2, r3, #13
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	430a      	orrs	r2, r1
 80120e0:	605a      	str	r2, [r3, #4]
 80120e2:	e007      	b.n	80120f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	685a      	ldr	r2, [r3, #4]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80120f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8012102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	69db      	ldr	r3, [r3, #28]
 801210e:	3b01      	subs	r3, #1
 8012110:	051a      	lsls	r2, r3, #20
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	430a      	orrs	r2, r1
 8012118:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	689a      	ldr	r2, [r3, #8]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	6899      	ldr	r1, [r3, #8]
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012136:	025a      	lsls	r2, r3, #9
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	430a      	orrs	r2, r1
 801213e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	689a      	ldr	r2, [r3, #8]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801214e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	6899      	ldr	r1, [r3, #8]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	695b      	ldr	r3, [r3, #20]
 801215a:	029a      	lsls	r2, r3, #10
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	430a      	orrs	r2, r1
 8012162:	609a      	str	r2, [r3, #8]
}
 8012164:	bf00      	nop
 8012166:	3714      	adds	r7, #20
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr
 8012170:	40012300 	.word	0x40012300
 8012174:	0f000001 	.word	0x0f000001

08012178 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012188:	2b01      	cmp	r3, #1
 801218a:	d101      	bne.n	8012190 <HAL_ADCEx_InjectedConfigChannel+0x18>
 801218c:	2302      	movs	r3, #2
 801218e:	e17d      	b.n	801248c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2201      	movs	r2, #1
 8012194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	2b09      	cmp	r3, #9
 801219e:	d925      	bls.n	80121ec <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	68d9      	ldr	r1, [r3, #12]
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	461a      	mov	r2, r3
 80121ae:	4613      	mov	r3, r2
 80121b0:	005b      	lsls	r3, r3, #1
 80121b2:	4413      	add	r3, r2
 80121b4:	3b1e      	subs	r3, #30
 80121b6:	2207      	movs	r2, #7
 80121b8:	fa02 f303 	lsl.w	r3, r2, r3
 80121bc:	43da      	mvns	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	400a      	ands	r2, r1
 80121c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	68d9      	ldr	r1, [r3, #12]
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	689a      	ldr	r2, [r3, #8]
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	b29b      	uxth	r3, r3
 80121d6:	4618      	mov	r0, r3
 80121d8:	4603      	mov	r3, r0
 80121da:	005b      	lsls	r3, r3, #1
 80121dc:	4403      	add	r3, r0
 80121de:	3b1e      	subs	r3, #30
 80121e0:	409a      	lsls	r2, r3
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	430a      	orrs	r2, r1
 80121e8:	60da      	str	r2, [r3, #12]
 80121ea:	e022      	b.n	8012232 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	6919      	ldr	r1, [r3, #16]
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	461a      	mov	r2, r3
 80121fa:	4613      	mov	r3, r2
 80121fc:	005b      	lsls	r3, r3, #1
 80121fe:	4413      	add	r3, r2
 8012200:	2207      	movs	r2, #7
 8012202:	fa02 f303 	lsl.w	r3, r2, r3
 8012206:	43da      	mvns	r2, r3
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	400a      	ands	r2, r1
 801220e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	6919      	ldr	r1, [r3, #16]
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	689a      	ldr	r2, [r3, #8]
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	b29b      	uxth	r3, r3
 8012220:	4618      	mov	r0, r3
 8012222:	4603      	mov	r3, r0
 8012224:	005b      	lsls	r3, r3, #1
 8012226:	4403      	add	r3, r0
 8012228:	409a      	lsls	r2, r3
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	430a      	orrs	r2, r1
 8012230:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8012240:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	691b      	ldr	r3, [r3, #16]
 801224c:	3b01      	subs	r3, #1
 801224e:	051a      	lsls	r2, r3, #20
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	430a      	orrs	r2, r1
 8012256:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	b2da      	uxtb	r2, r3
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	691b      	ldr	r3, [r3, #16]
 8012268:	b2db      	uxtb	r3, r3
 801226a:	1ad3      	subs	r3, r2, r3
 801226c:	b2db      	uxtb	r3, r3
 801226e:	3303      	adds	r3, #3
 8012270:	b2db      	uxtb	r3, r3
 8012272:	461a      	mov	r2, r3
 8012274:	4613      	mov	r3, r2
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	4413      	add	r3, r2
 801227a:	221f      	movs	r2, #31
 801227c:	fa02 f303 	lsl.w	r3, r2, r3
 8012280:	43da      	mvns	r2, r3
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	400a      	ands	r2, r1
 8012288:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	b29b      	uxth	r3, r3
 8012296:	4618      	mov	r0, r3
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	b2da      	uxtb	r2, r3
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	691b      	ldr	r3, [r3, #16]
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	1ad3      	subs	r3, r2, r3
 80122a6:	b2db      	uxtb	r3, r3
 80122a8:	3303      	adds	r3, #3
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	461a      	mov	r2, r3
 80122ae:	4613      	mov	r3, r2
 80122b0:	009b      	lsls	r3, r3, #2
 80122b2:	4413      	add	r3, r2
 80122b4:	fa00 f203 	lsl.w	r2, r0, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	430a      	orrs	r2, r1
 80122be:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	699b      	ldr	r3, [r3, #24]
 80122c4:	4a74      	ldr	r2, [pc, #464]	; (8012498 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80122c6:	4293      	cmp	r3, r2
 80122c8:	d022      	beq.n	8012310 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	689a      	ldr	r2, [r3, #8]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80122d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	6899      	ldr	r1, [r3, #8]
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	699a      	ldr	r2, [r3, #24]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	430a      	orrs	r2, r1
 80122ea:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	689a      	ldr	r2, [r3, #8]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80122fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	6899      	ldr	r1, [r3, #8]
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	69da      	ldr	r2, [r3, #28]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	430a      	orrs	r2, r1
 801230c:	609a      	str	r2, [r3, #8]
 801230e:	e00f      	b.n	8012330 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	689a      	ldr	r2, [r3, #8]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 801231e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	689a      	ldr	r2, [r3, #8]
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 801232e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	7d5b      	ldrb	r3, [r3, #21]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d008      	beq.n	801234a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	685a      	ldr	r2, [r3, #4]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012346:	605a      	str	r2, [r3, #4]
 8012348:	e007      	b.n	801235a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	685a      	ldr	r2, [r3, #4]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012358:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	7d1b      	ldrb	r3, [r3, #20]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d008      	beq.n	8012374 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	685a      	ldr	r2, [r3, #4]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012370:	605a      	str	r2, [r3, #4]
 8012372:	e007      	b.n	8012384 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	685a      	ldr	r2, [r3, #4]
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012382:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	2b03      	cmp	r3, #3
 801238a:	d02e      	beq.n	80123ea <HAL_ADCEx_InjectedConfigChannel+0x272>
 801238c:	2b03      	cmp	r3, #3
 801238e:	d840      	bhi.n	8012412 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8012390:	2b01      	cmp	r3, #1
 8012392:	d002      	beq.n	801239a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8012394:	2b02      	cmp	r3, #2
 8012396:	d014      	beq.n	80123c2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8012398:	e03b      	b.n	8012412 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	695b      	ldr	r3, [r3, #20]
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	6812      	ldr	r2, [r2, #0]
 80123a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80123a8:	f023 030f 	bic.w	r3, r3, #15
 80123ac:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	6959      	ldr	r1, [r3, #20]
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	68da      	ldr	r2, [r3, #12]
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	430a      	orrs	r2, r1
 80123be:	615a      	str	r2, [r3, #20]
      break;
 80123c0:	e03b      	b.n	801243a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	699b      	ldr	r3, [r3, #24]
 80123c8:	687a      	ldr	r2, [r7, #4]
 80123ca:	6812      	ldr	r2, [r2, #0]
 80123cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80123d0:	f023 030f 	bic.w	r3, r3, #15
 80123d4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	6999      	ldr	r1, [r3, #24]
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	68da      	ldr	r2, [r3, #12]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	430a      	orrs	r2, r1
 80123e6:	619a      	str	r2, [r3, #24]
      break;
 80123e8:	e027      	b.n	801243a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	69db      	ldr	r3, [r3, #28]
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	6812      	ldr	r2, [r2, #0]
 80123f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80123f8:	f023 030f 	bic.w	r3, r3, #15
 80123fc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	69d9      	ldr	r1, [r3, #28]
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	68da      	ldr	r2, [r3, #12]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	430a      	orrs	r2, r1
 801240e:	61da      	str	r2, [r3, #28]
      break;
 8012410:	e013      	b.n	801243a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	6a1b      	ldr	r3, [r3, #32]
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	6812      	ldr	r2, [r2, #0]
 801241c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012420:	f023 030f 	bic.w	r3, r3, #15
 8012424:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	6a19      	ldr	r1, [r3, #32]
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	68da      	ldr	r2, [r3, #12]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	430a      	orrs	r2, r1
 8012436:	621a      	str	r2, [r3, #32]
      break;
 8012438:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801243a:	4b18      	ldr	r3, [pc, #96]	; (801249c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 801243c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	4a17      	ldr	r2, [pc, #92]	; (80124a0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8012444:	4293      	cmp	r3, r2
 8012446:	d109      	bne.n	801245c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	2b12      	cmp	r3, #18
 801244e:	d105      	bne.n	801245c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	4a0f      	ldr	r2, [pc, #60]	; (80124a0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8012462:	4293      	cmp	r3, r2
 8012464:	d10d      	bne.n	8012482 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2b10      	cmp	r3, #16
 801246c:	d003      	beq.n	8012476 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	2b11      	cmp	r3, #17
 8012474:	d105      	bne.n	8012482 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2200      	movs	r2, #0
 8012486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801248a:	2300      	movs	r3, #0
}
 801248c:	4618      	mov	r0, r3
 801248e:	3714      	adds	r7, #20
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr
 8012498:	000f0001 	.word	0x000f0001
 801249c:	40012300 	.word	0x40012300
 80124a0:	40012000 	.word	0x40012000

080124a4 <__NVIC_SetPriorityGrouping>:
{
 80124a4:	b480      	push	{r7}
 80124a6:	b085      	sub	sp, #20
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f003 0307 	and.w	r3, r3, #7
 80124b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80124b4:	4b0c      	ldr	r3, [pc, #48]	; (80124e8 <__NVIC_SetPriorityGrouping+0x44>)
 80124b6:	68db      	ldr	r3, [r3, #12]
 80124b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80124ba:	68ba      	ldr	r2, [r7, #8]
 80124bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80124c0:	4013      	ands	r3, r2
 80124c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80124cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80124d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80124d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80124d6:	4a04      	ldr	r2, [pc, #16]	; (80124e8 <__NVIC_SetPriorityGrouping+0x44>)
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	60d3      	str	r3, [r2, #12]
}
 80124dc:	bf00      	nop
 80124de:	3714      	adds	r7, #20
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr
 80124e8:	e000ed00 	.word	0xe000ed00

080124ec <__NVIC_GetPriorityGrouping>:
{
 80124ec:	b480      	push	{r7}
 80124ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80124f0:	4b04      	ldr	r3, [pc, #16]	; (8012504 <__NVIC_GetPriorityGrouping+0x18>)
 80124f2:	68db      	ldr	r3, [r3, #12]
 80124f4:	0a1b      	lsrs	r3, r3, #8
 80124f6:	f003 0307 	and.w	r3, r3, #7
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr
 8012504:	e000ed00 	.word	0xe000ed00

08012508 <__NVIC_EnableIRQ>:
{
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 801250e:	4603      	mov	r3, r0
 8012510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012516:	2b00      	cmp	r3, #0
 8012518:	db0b      	blt.n	8012532 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801251a:	79fb      	ldrb	r3, [r7, #7]
 801251c:	f003 021f 	and.w	r2, r3, #31
 8012520:	4907      	ldr	r1, [pc, #28]	; (8012540 <__NVIC_EnableIRQ+0x38>)
 8012522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012526:	095b      	lsrs	r3, r3, #5
 8012528:	2001      	movs	r0, #1
 801252a:	fa00 f202 	lsl.w	r2, r0, r2
 801252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012532:	bf00      	nop
 8012534:	370c      	adds	r7, #12
 8012536:	46bd      	mov	sp, r7
 8012538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253c:	4770      	bx	lr
 801253e:	bf00      	nop
 8012540:	e000e100 	.word	0xe000e100

08012544 <__NVIC_SetPriority>:
{
 8012544:	b480      	push	{r7}
 8012546:	b083      	sub	sp, #12
 8012548:	af00      	add	r7, sp, #0
 801254a:	4603      	mov	r3, r0
 801254c:	6039      	str	r1, [r7, #0]
 801254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012554:	2b00      	cmp	r3, #0
 8012556:	db0a      	blt.n	801256e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	b2da      	uxtb	r2, r3
 801255c:	490c      	ldr	r1, [pc, #48]	; (8012590 <__NVIC_SetPriority+0x4c>)
 801255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012562:	0112      	lsls	r2, r2, #4
 8012564:	b2d2      	uxtb	r2, r2
 8012566:	440b      	add	r3, r1
 8012568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801256c:	e00a      	b.n	8012584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	b2da      	uxtb	r2, r3
 8012572:	4908      	ldr	r1, [pc, #32]	; (8012594 <__NVIC_SetPriority+0x50>)
 8012574:	79fb      	ldrb	r3, [r7, #7]
 8012576:	f003 030f 	and.w	r3, r3, #15
 801257a:	3b04      	subs	r3, #4
 801257c:	0112      	lsls	r2, r2, #4
 801257e:	b2d2      	uxtb	r2, r2
 8012580:	440b      	add	r3, r1
 8012582:	761a      	strb	r2, [r3, #24]
}
 8012584:	bf00      	nop
 8012586:	370c      	adds	r7, #12
 8012588:	46bd      	mov	sp, r7
 801258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258e:	4770      	bx	lr
 8012590:	e000e100 	.word	0xe000e100
 8012594:	e000ed00 	.word	0xe000ed00

08012598 <NVIC_EncodePriority>:
{
 8012598:	b480      	push	{r7}
 801259a:	b089      	sub	sp, #36	; 0x24
 801259c:	af00      	add	r7, sp, #0
 801259e:	60f8      	str	r0, [r7, #12]
 80125a0:	60b9      	str	r1, [r7, #8]
 80125a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	f003 0307 	and.w	r3, r3, #7
 80125aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	f1c3 0307 	rsb	r3, r3, #7
 80125b2:	2b04      	cmp	r3, #4
 80125b4:	bf28      	it	cs
 80125b6:	2304      	movcs	r3, #4
 80125b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	3304      	adds	r3, #4
 80125be:	2b06      	cmp	r3, #6
 80125c0:	d902      	bls.n	80125c8 <NVIC_EncodePriority+0x30>
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	3b03      	subs	r3, #3
 80125c6:	e000      	b.n	80125ca <NVIC_EncodePriority+0x32>
 80125c8:	2300      	movs	r3, #0
 80125ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80125cc:	f04f 32ff 	mov.w	r2, #4294967295
 80125d0:	69bb      	ldr	r3, [r7, #24]
 80125d2:	fa02 f303 	lsl.w	r3, r2, r3
 80125d6:	43da      	mvns	r2, r3
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	401a      	ands	r2, r3
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80125e0:	f04f 31ff 	mov.w	r1, #4294967295
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	fa01 f303 	lsl.w	r3, r1, r3
 80125ea:	43d9      	mvns	r1, r3
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80125f0:	4313      	orrs	r3, r2
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3724      	adds	r7, #36	; 0x24
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr

080125fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80125fe:	b580      	push	{r7, lr}
 8012600:	b082      	sub	sp, #8
 8012602:	af00      	add	r7, sp, #0
 8012604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f7ff ff4c 	bl	80124a4 <__NVIC_SetPriorityGrouping>
}
 801260c:	bf00      	nop
 801260e:	3708      	adds	r7, #8
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}

08012614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012614:	b580      	push	{r7, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	af00      	add	r7, sp, #0
 801261a:	4603      	mov	r3, r0
 801261c:	60b9      	str	r1, [r7, #8]
 801261e:	607a      	str	r2, [r7, #4]
 8012620:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012622:	2300      	movs	r3, #0
 8012624:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8012626:	f7ff ff61 	bl	80124ec <__NVIC_GetPriorityGrouping>
 801262a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801262c:	687a      	ldr	r2, [r7, #4]
 801262e:	68b9      	ldr	r1, [r7, #8]
 8012630:	6978      	ldr	r0, [r7, #20]
 8012632:	f7ff ffb1 	bl	8012598 <NVIC_EncodePriority>
 8012636:	4602      	mov	r2, r0
 8012638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801263c:	4611      	mov	r1, r2
 801263e:	4618      	mov	r0, r3
 8012640:	f7ff ff80 	bl	8012544 <__NVIC_SetPriority>
}
 8012644:	bf00      	nop
 8012646:	3718      	adds	r7, #24
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	4603      	mov	r3, r0
 8012654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801265a:	4618      	mov	r0, r3
 801265c:	f7ff ff54 	bl	8012508 <__NVIC_EnableIRQ>
}
 8012660:	bf00      	nop
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b086      	sub	sp, #24
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012670:	2300      	movs	r3, #0
 8012672:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012674:	f7ff faee 	bl	8011c54 <HAL_GetTick>
 8012678:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d101      	bne.n	8012684 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012680:	2301      	movs	r3, #1
 8012682:	e099      	b.n	80127b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2202      	movs	r2, #2
 8012688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2200      	movs	r2, #0
 8012690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	f022 0201 	bic.w	r2, r2, #1
 80126a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80126a4:	e00f      	b.n	80126c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80126a6:	f7ff fad5 	bl	8011c54 <HAL_GetTick>
 80126aa:	4602      	mov	r2, r0
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	1ad3      	subs	r3, r2, r3
 80126b0:	2b05      	cmp	r3, #5
 80126b2:	d908      	bls.n	80126c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2220      	movs	r2, #32
 80126b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2203      	movs	r2, #3
 80126be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80126c2:	2303      	movs	r3, #3
 80126c4:	e078      	b.n	80127b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	f003 0301 	and.w	r3, r3, #1
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1e8      	bne.n	80126a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80126dc:	697a      	ldr	r2, [r7, #20]
 80126de:	4b38      	ldr	r3, [pc, #224]	; (80127c0 <HAL_DMA_Init+0x158>)
 80126e0:	4013      	ands	r3, r2
 80126e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	685a      	ldr	r2, [r3, #4]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	689b      	ldr	r3, [r3, #8]
 80126ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80126f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	691b      	ldr	r3, [r3, #16]
 80126f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80126fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	699b      	ldr	r3, [r3, #24]
 8012704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801270a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6a1b      	ldr	r3, [r3, #32]
 8012710:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012712:	697a      	ldr	r2, [r7, #20]
 8012714:	4313      	orrs	r3, r2
 8012716:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271c:	2b04      	cmp	r3, #4
 801271e:	d107      	bne.n	8012730 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012728:	4313      	orrs	r3, r2
 801272a:	697a      	ldr	r2, [r7, #20]
 801272c:	4313      	orrs	r3, r2
 801272e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	697a      	ldr	r2, [r7, #20]
 8012736:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	695b      	ldr	r3, [r3, #20]
 801273e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	f023 0307 	bic.w	r3, r3, #7
 8012746:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801274c:	697a      	ldr	r2, [r7, #20]
 801274e:	4313      	orrs	r3, r2
 8012750:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012756:	2b04      	cmp	r3, #4
 8012758:	d117      	bne.n	801278a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801275e:	697a      	ldr	r2, [r7, #20]
 8012760:	4313      	orrs	r3, r2
 8012762:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012768:	2b00      	cmp	r3, #0
 801276a:	d00e      	beq.n	801278a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f000 fb01 	bl	8012d74 <DMA_CheckFifoParam>
 8012772:	4603      	mov	r3, r0
 8012774:	2b00      	cmp	r3, #0
 8012776:	d008      	beq.n	801278a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2240      	movs	r2, #64	; 0x40
 801277c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2201      	movs	r2, #1
 8012782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8012786:	2301      	movs	r3, #1
 8012788:	e016      	b.n	80127b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	697a      	ldr	r2, [r7, #20]
 8012790:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f000 fab8 	bl	8012d08 <DMA_CalcBaseAndBitshift>
 8012798:	4603      	mov	r3, r0
 801279a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127a0:	223f      	movs	r2, #63	; 0x3f
 80127a2:	409a      	lsls	r2, r3
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2200      	movs	r2, #0
 80127ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2201      	movs	r2, #1
 80127b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80127b6:	2300      	movs	r3, #0
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3718      	adds	r7, #24
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}
 80127c0:	f010803f 	.word	0xf010803f

080127c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b086      	sub	sp, #24
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	60f8      	str	r0, [r7, #12]
 80127cc:	60b9      	str	r1, [r7, #8]
 80127ce:	607a      	str	r2, [r7, #4]
 80127d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80127d2:	2300      	movs	r3, #0
 80127d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d101      	bne.n	80127ea <HAL_DMA_Start_IT+0x26>
 80127e6:	2302      	movs	r3, #2
 80127e8:	e040      	b.n	801286c <HAL_DMA_Start_IT+0xa8>
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	2201      	movs	r2, #1
 80127ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	2b01      	cmp	r3, #1
 80127fc:	d12f      	bne.n	801285e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2202      	movs	r2, #2
 8012802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	2200      	movs	r2, #0
 801280a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	68b9      	ldr	r1, [r7, #8]
 8012812:	68f8      	ldr	r0, [r7, #12]
 8012814:	f000 fa4a 	bl	8012cac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801281c:	223f      	movs	r2, #63	; 0x3f
 801281e:	409a      	lsls	r2, r3
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f042 0216 	orr.w	r2, r2, #22
 8012832:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012838:	2b00      	cmp	r3, #0
 801283a:	d007      	beq.n	801284c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	681a      	ldr	r2, [r3, #0]
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	f042 0208 	orr.w	r2, r2, #8
 801284a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	681a      	ldr	r2, [r3, #0]
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f042 0201 	orr.w	r2, r2, #1
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	e005      	b.n	801286a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	2200      	movs	r2, #0
 8012862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8012866:	2302      	movs	r3, #2
 8012868:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801286a:	7dfb      	ldrb	r3, [r7, #23]
}
 801286c:	4618      	mov	r0, r3
 801286e:	3718      	adds	r7, #24
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012880:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8012882:	f7ff f9e7 	bl	8011c54 <HAL_GetTick>
 8012886:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801288e:	b2db      	uxtb	r3, r3
 8012890:	2b02      	cmp	r3, #2
 8012892:	d008      	beq.n	80128a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2280      	movs	r2, #128	; 0x80
 8012898:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2200      	movs	r2, #0
 801289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80128a2:	2301      	movs	r3, #1
 80128a4:	e052      	b.n	801294c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f022 0216 	bic.w	r2, r2, #22
 80128b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	695a      	ldr	r2, [r3, #20]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80128c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d103      	bne.n	80128d6 <HAL_DMA_Abort+0x62>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d007      	beq.n	80128e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	f022 0208 	bic.w	r2, r2, #8
 80128e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	681a      	ldr	r2, [r3, #0]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f022 0201 	bic.w	r2, r2, #1
 80128f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80128f6:	e013      	b.n	8012920 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80128f8:	f7ff f9ac 	bl	8011c54 <HAL_GetTick>
 80128fc:	4602      	mov	r2, r0
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	1ad3      	subs	r3, r2, r3
 8012902:	2b05      	cmp	r3, #5
 8012904:	d90c      	bls.n	8012920 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2220      	movs	r2, #32
 801290a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2203      	movs	r2, #3
 8012910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2200      	movs	r2, #0
 8012918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801291c:	2303      	movs	r3, #3
 801291e:	e015      	b.n	801294c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	f003 0301 	and.w	r3, r3, #1
 801292a:	2b00      	cmp	r3, #0
 801292c:	d1e4      	bne.n	80128f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012932:	223f      	movs	r2, #63	; 0x3f
 8012934:	409a      	lsls	r2, r3
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2201      	movs	r2, #1
 801293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801294a:	2300      	movs	r3, #0
}
 801294c:	4618      	mov	r0, r3
 801294e:	3710      	adds	r7, #16
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012962:	b2db      	uxtb	r3, r3
 8012964:	2b02      	cmp	r3, #2
 8012966:	d004      	beq.n	8012972 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2280      	movs	r2, #128	; 0x80
 801296c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801296e:	2301      	movs	r3, #1
 8012970:	e00c      	b.n	801298c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2205      	movs	r2, #5
 8012976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	681a      	ldr	r2, [r3, #0]
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	f022 0201 	bic.w	r2, r2, #1
 8012988:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801298a:	2300      	movs	r3, #0
}
 801298c:	4618      	mov	r0, r3
 801298e:	370c      	adds	r7, #12
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b086      	sub	sp, #24
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80129a0:	2300      	movs	r3, #0
 80129a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80129a4:	4b92      	ldr	r3, [pc, #584]	; (8012bf0 <HAL_DMA_IRQHandler+0x258>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	4a92      	ldr	r2, [pc, #584]	; (8012bf4 <HAL_DMA_IRQHandler+0x25c>)
 80129aa:	fba2 2303 	umull	r2, r3, r2, r3
 80129ae:	0a9b      	lsrs	r3, r3, #10
 80129b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129c2:	2208      	movs	r2, #8
 80129c4:	409a      	lsls	r2, r3
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	4013      	ands	r3, r2
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d01a      	beq.n	8012a04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	f003 0304 	and.w	r3, r3, #4
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d013      	beq.n	8012a04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f022 0204 	bic.w	r2, r2, #4
 80129ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129f0:	2208      	movs	r2, #8
 80129f2:	409a      	lsls	r2, r3
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129fc:	f043 0201 	orr.w	r2, r3, #1
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a08:	2201      	movs	r2, #1
 8012a0a:	409a      	lsls	r2, r3
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	4013      	ands	r3, r2
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d012      	beq.n	8012a3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	695b      	ldr	r3, [r3, #20]
 8012a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d00b      	beq.n	8012a3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a26:	2201      	movs	r2, #1
 8012a28:	409a      	lsls	r2, r3
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a32:	f043 0202 	orr.w	r2, r3, #2
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a3e:	2204      	movs	r2, #4
 8012a40:	409a      	lsls	r2, r3
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	4013      	ands	r3, r2
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d012      	beq.n	8012a70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f003 0302 	and.w	r3, r3, #2
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d00b      	beq.n	8012a70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a5c:	2204      	movs	r2, #4
 8012a5e:	409a      	lsls	r2, r3
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a68:	f043 0204 	orr.w	r2, r3, #4
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a74:	2210      	movs	r2, #16
 8012a76:	409a      	lsls	r2, r3
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	4013      	ands	r3, r2
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d043      	beq.n	8012b08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	f003 0308 	and.w	r3, r3, #8
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d03c      	beq.n	8012b08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a92:	2210      	movs	r2, #16
 8012a94:	409a      	lsls	r2, r3
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d018      	beq.n	8012ada <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d108      	bne.n	8012ac8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d024      	beq.n	8012b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	4798      	blx	r3
 8012ac6:	e01f      	b.n	8012b08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d01b      	beq.n	8012b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	4798      	blx	r3
 8012ad8:	e016      	b.n	8012b08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d107      	bne.n	8012af8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	681a      	ldr	r2, [r3, #0]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	f022 0208 	bic.w	r2, r2, #8
 8012af6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d003      	beq.n	8012b08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b0c:	2220      	movs	r2, #32
 8012b0e:	409a      	lsls	r2, r3
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	4013      	ands	r3, r2
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	f000 808e 	beq.w	8012c36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	f003 0310 	and.w	r3, r3, #16
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f000 8086 	beq.w	8012c36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b2e:	2220      	movs	r2, #32
 8012b30:	409a      	lsls	r2, r3
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012b3c:	b2db      	uxtb	r3, r3
 8012b3e:	2b05      	cmp	r3, #5
 8012b40:	d136      	bne.n	8012bb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f022 0216 	bic.w	r2, r2, #22
 8012b50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	695a      	ldr	r2, [r3, #20]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d103      	bne.n	8012b72 <HAL_DMA_IRQHandler+0x1da>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d007      	beq.n	8012b82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	f022 0208 	bic.w	r2, r2, #8
 8012b80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b86:	223f      	movs	r2, #63	; 0x3f
 8012b88:	409a      	lsls	r2, r3
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2201      	movs	r2, #1
 8012b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d07d      	beq.n	8012ca2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	4798      	blx	r3
        }
        return;
 8012bae:	e078      	b.n	8012ca2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d01c      	beq.n	8012bf8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d108      	bne.n	8012bde <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d030      	beq.n	8012c36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	4798      	blx	r3
 8012bdc:	e02b      	b.n	8012c36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d027      	beq.n	8012c36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	4798      	blx	r3
 8012bee:	e022      	b.n	8012c36 <HAL_DMA_IRQHandler+0x29e>
 8012bf0:	20000000 	.word	0x20000000
 8012bf4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d10f      	bne.n	8012c26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	681a      	ldr	r2, [r3, #0]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	f022 0210 	bic.w	r2, r2, #16
 8012c14:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2201      	movs	r2, #1
 8012c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2200      	movs	r2, #0
 8012c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d003      	beq.n	8012c36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d032      	beq.n	8012ca4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c42:	f003 0301 	and.w	r3, r3, #1
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d022      	beq.n	8012c90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2205      	movs	r2, #5
 8012c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	681a      	ldr	r2, [r3, #0]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f022 0201 	bic.w	r2, r2, #1
 8012c60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	3301      	adds	r3, #1
 8012c66:	60bb      	str	r3, [r7, #8]
 8012c68:	697a      	ldr	r2, [r7, #20]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d307      	bcc.n	8012c7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f003 0301 	and.w	r3, r3, #1
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1f2      	bne.n	8012c62 <HAL_DMA_IRQHandler+0x2ca>
 8012c7c:	e000      	b.n	8012c80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8012c7e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2201      	movs	r2, #1
 8012c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d005      	beq.n	8012ca4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	4798      	blx	r3
 8012ca0:	e000      	b.n	8012ca4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8012ca2:	bf00      	nop
    }
  }
}
 8012ca4:	3718      	adds	r7, #24
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop

08012cac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b085      	sub	sp, #20
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
 8012cb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012cc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	683a      	ldr	r2, [r7, #0]
 8012cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	689b      	ldr	r3, [r3, #8]
 8012cd6:	2b40      	cmp	r3, #64	; 0x40
 8012cd8:	d108      	bne.n	8012cec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	68ba      	ldr	r2, [r7, #8]
 8012ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8012cea:	e007      	b.n	8012cfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	68ba      	ldr	r2, [r7, #8]
 8012cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	60da      	str	r2, [r3, #12]
}
 8012cfc:	bf00      	nop
 8012cfe:	3714      	adds	r7, #20
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b085      	sub	sp, #20
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	3b10      	subs	r3, #16
 8012d18:	4a14      	ldr	r2, [pc, #80]	; (8012d6c <DMA_CalcBaseAndBitshift+0x64>)
 8012d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8012d1e:	091b      	lsrs	r3, r3, #4
 8012d20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8012d22:	4a13      	ldr	r2, [pc, #76]	; (8012d70 <DMA_CalcBaseAndBitshift+0x68>)
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	4413      	add	r3, r2
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	2b03      	cmp	r3, #3
 8012d34:	d909      	bls.n	8012d4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012d3e:	f023 0303 	bic.w	r3, r3, #3
 8012d42:	1d1a      	adds	r2, r3, #4
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	659a      	str	r2, [r3, #88]	; 0x58
 8012d48:	e007      	b.n	8012d5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012d52:	f023 0303 	bic.w	r3, r3, #3
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3714      	adds	r7, #20
 8012d62:	46bd      	mov	sp, r7
 8012d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d68:	4770      	bx	lr
 8012d6a:	bf00      	nop
 8012d6c:	aaaaaaab 	.word	0xaaaaaaab
 8012d70:	0802a6ac 	.word	0x0802a6ac

08012d74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8012d74:	b480      	push	{r7}
 8012d76:	b085      	sub	sp, #20
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	699b      	ldr	r3, [r3, #24]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d11f      	bne.n	8012dce <DMA_CheckFifoParam+0x5a>
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	2b03      	cmp	r3, #3
 8012d92:	d856      	bhi.n	8012e42 <DMA_CheckFifoParam+0xce>
 8012d94:	a201      	add	r2, pc, #4	; (adr r2, 8012d9c <DMA_CheckFifoParam+0x28>)
 8012d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d9a:	bf00      	nop
 8012d9c:	08012dad 	.word	0x08012dad
 8012da0:	08012dbf 	.word	0x08012dbf
 8012da4:	08012dad 	.word	0x08012dad
 8012da8:	08012e43 	.word	0x08012e43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d046      	beq.n	8012e46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8012db8:	2301      	movs	r3, #1
 8012dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012dbc:	e043      	b.n	8012e46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012dc6:	d140      	bne.n	8012e4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012dcc:	e03d      	b.n	8012e4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	699b      	ldr	r3, [r3, #24]
 8012dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012dd6:	d121      	bne.n	8012e1c <DMA_CheckFifoParam+0xa8>
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	2b03      	cmp	r3, #3
 8012ddc:	d837      	bhi.n	8012e4e <DMA_CheckFifoParam+0xda>
 8012dde:	a201      	add	r2, pc, #4	; (adr r2, 8012de4 <DMA_CheckFifoParam+0x70>)
 8012de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012de4:	08012df5 	.word	0x08012df5
 8012de8:	08012dfb 	.word	0x08012dfb
 8012dec:	08012df5 	.word	0x08012df5
 8012df0:	08012e0d 	.word	0x08012e0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8012df4:	2301      	movs	r3, #1
 8012df6:	73fb      	strb	r3, [r7, #15]
      break;
 8012df8:	e030      	b.n	8012e5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d025      	beq.n	8012e52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8012e06:	2301      	movs	r3, #1
 8012e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012e0a:	e022      	b.n	8012e52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012e14:	d11f      	bne.n	8012e56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8012e16:	2301      	movs	r3, #1
 8012e18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8012e1a:	e01c      	b.n	8012e56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	2b02      	cmp	r3, #2
 8012e20:	d903      	bls.n	8012e2a <DMA_CheckFifoParam+0xb6>
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	2b03      	cmp	r3, #3
 8012e26:	d003      	beq.n	8012e30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8012e28:	e018      	b.n	8012e5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8012e2e:	e015      	b.n	8012e5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d00e      	beq.n	8012e5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8012e40:	e00b      	b.n	8012e5a <DMA_CheckFifoParam+0xe6>
      break;
 8012e42:	bf00      	nop
 8012e44:	e00a      	b.n	8012e5c <DMA_CheckFifoParam+0xe8>
      break;
 8012e46:	bf00      	nop
 8012e48:	e008      	b.n	8012e5c <DMA_CheckFifoParam+0xe8>
      break;
 8012e4a:	bf00      	nop
 8012e4c:	e006      	b.n	8012e5c <DMA_CheckFifoParam+0xe8>
      break;
 8012e4e:	bf00      	nop
 8012e50:	e004      	b.n	8012e5c <DMA_CheckFifoParam+0xe8>
      break;
 8012e52:	bf00      	nop
 8012e54:	e002      	b.n	8012e5c <DMA_CheckFifoParam+0xe8>
      break;   
 8012e56:	bf00      	nop
 8012e58:	e000      	b.n	8012e5c <DMA_CheckFifoParam+0xe8>
      break;
 8012e5a:	bf00      	nop
    }
  } 
  
  return status; 
 8012e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3714      	adds	r7, #20
 8012e62:	46bd      	mov	sp, r7
 8012e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e68:	4770      	bx	lr
 8012e6a:	bf00      	nop

08012e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b089      	sub	sp, #36	; 0x24
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012e76:	2300      	movs	r3, #0
 8012e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012e82:	2300      	movs	r3, #0
 8012e84:	61fb      	str	r3, [r7, #28]
 8012e86:	e16b      	b.n	8013160 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012e88:	2201      	movs	r2, #1
 8012e8a:	69fb      	ldr	r3, [r7, #28]
 8012e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8012e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	697a      	ldr	r2, [r7, #20]
 8012e98:	4013      	ands	r3, r2
 8012e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012e9c:	693a      	ldr	r2, [r7, #16]
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	f040 815a 	bne.w	801315a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	f003 0303 	and.w	r3, r3, #3
 8012eae:	2b01      	cmp	r3, #1
 8012eb0:	d005      	beq.n	8012ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012eba:	2b02      	cmp	r3, #2
 8012ebc:	d130      	bne.n	8012f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	689b      	ldr	r3, [r3, #8]
 8012ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012ec4:	69fb      	ldr	r3, [r7, #28]
 8012ec6:	005b      	lsls	r3, r3, #1
 8012ec8:	2203      	movs	r2, #3
 8012eca:	fa02 f303 	lsl.w	r3, r2, r3
 8012ece:	43db      	mvns	r3, r3
 8012ed0:	69ba      	ldr	r2, [r7, #24]
 8012ed2:	4013      	ands	r3, r2
 8012ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	68da      	ldr	r2, [r3, #12]
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	005b      	lsls	r3, r3, #1
 8012ede:	fa02 f303 	lsl.w	r3, r2, r3
 8012ee2:	69ba      	ldr	r2, [r7, #24]
 8012ee4:	4313      	orrs	r3, r2
 8012ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	69ba      	ldr	r2, [r7, #24]
 8012eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012ef4:	2201      	movs	r2, #1
 8012ef6:	69fb      	ldr	r3, [r7, #28]
 8012ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8012efc:	43db      	mvns	r3, r3
 8012efe:	69ba      	ldr	r2, [r7, #24]
 8012f00:	4013      	ands	r3, r2
 8012f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	091b      	lsrs	r3, r3, #4
 8012f0a:	f003 0201 	and.w	r2, r3, #1
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	fa02 f303 	lsl.w	r3, r2, r3
 8012f14:	69ba      	ldr	r2, [r7, #24]
 8012f16:	4313      	orrs	r3, r2
 8012f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	69ba      	ldr	r2, [r7, #24]
 8012f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	685b      	ldr	r3, [r3, #4]
 8012f24:	f003 0303 	and.w	r3, r3, #3
 8012f28:	2b03      	cmp	r3, #3
 8012f2a:	d017      	beq.n	8012f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	68db      	ldr	r3, [r3, #12]
 8012f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	005b      	lsls	r3, r3, #1
 8012f36:	2203      	movs	r2, #3
 8012f38:	fa02 f303 	lsl.w	r3, r2, r3
 8012f3c:	43db      	mvns	r3, r3
 8012f3e:	69ba      	ldr	r2, [r7, #24]
 8012f40:	4013      	ands	r3, r2
 8012f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	689a      	ldr	r2, [r3, #8]
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	005b      	lsls	r3, r3, #1
 8012f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8012f50:	69ba      	ldr	r2, [r7, #24]
 8012f52:	4313      	orrs	r3, r2
 8012f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	69ba      	ldr	r2, [r7, #24]
 8012f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	f003 0303 	and.w	r3, r3, #3
 8012f64:	2b02      	cmp	r3, #2
 8012f66:	d123      	bne.n	8012fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	08da      	lsrs	r2, r3, #3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	3208      	adds	r2, #8
 8012f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	f003 0307 	and.w	r3, r3, #7
 8012f7c:	009b      	lsls	r3, r3, #2
 8012f7e:	220f      	movs	r2, #15
 8012f80:	fa02 f303 	lsl.w	r3, r2, r3
 8012f84:	43db      	mvns	r3, r3
 8012f86:	69ba      	ldr	r2, [r7, #24]
 8012f88:	4013      	ands	r3, r2
 8012f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	691a      	ldr	r2, [r3, #16]
 8012f90:	69fb      	ldr	r3, [r7, #28]
 8012f92:	f003 0307 	and.w	r3, r3, #7
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	fa02 f303 	lsl.w	r3, r2, r3
 8012f9c:	69ba      	ldr	r2, [r7, #24]
 8012f9e:	4313      	orrs	r3, r2
 8012fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012fa2:	69fb      	ldr	r3, [r7, #28]
 8012fa4:	08da      	lsrs	r2, r3, #3
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	3208      	adds	r2, #8
 8012faa:	69b9      	ldr	r1, [r7, #24]
 8012fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012fb6:	69fb      	ldr	r3, [r7, #28]
 8012fb8:	005b      	lsls	r3, r3, #1
 8012fba:	2203      	movs	r2, #3
 8012fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8012fc0:	43db      	mvns	r3, r3
 8012fc2:	69ba      	ldr	r2, [r7, #24]
 8012fc4:	4013      	ands	r3, r2
 8012fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	f003 0203 	and.w	r2, r3, #3
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	005b      	lsls	r3, r3, #1
 8012fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8012fd8:	69ba      	ldr	r2, [r7, #24]
 8012fda:	4313      	orrs	r3, r2
 8012fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	69ba      	ldr	r2, [r7, #24]
 8012fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	f000 80b4 	beq.w	801315a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	60fb      	str	r3, [r7, #12]
 8012ff6:	4b60      	ldr	r3, [pc, #384]	; (8013178 <HAL_GPIO_Init+0x30c>)
 8012ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ffa:	4a5f      	ldr	r2, [pc, #380]	; (8013178 <HAL_GPIO_Init+0x30c>)
 8012ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013000:	6453      	str	r3, [r2, #68]	; 0x44
 8013002:	4b5d      	ldr	r3, [pc, #372]	; (8013178 <HAL_GPIO_Init+0x30c>)
 8013004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801300a:	60fb      	str	r3, [r7, #12]
 801300c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801300e:	4a5b      	ldr	r2, [pc, #364]	; (801317c <HAL_GPIO_Init+0x310>)
 8013010:	69fb      	ldr	r3, [r7, #28]
 8013012:	089b      	lsrs	r3, r3, #2
 8013014:	3302      	adds	r3, #2
 8013016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	f003 0303 	and.w	r3, r3, #3
 8013022:	009b      	lsls	r3, r3, #2
 8013024:	220f      	movs	r2, #15
 8013026:	fa02 f303 	lsl.w	r3, r2, r3
 801302a:	43db      	mvns	r3, r3
 801302c:	69ba      	ldr	r2, [r7, #24]
 801302e:	4013      	ands	r3, r2
 8013030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	4a52      	ldr	r2, [pc, #328]	; (8013180 <HAL_GPIO_Init+0x314>)
 8013036:	4293      	cmp	r3, r2
 8013038:	d02b      	beq.n	8013092 <HAL_GPIO_Init+0x226>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	4a51      	ldr	r2, [pc, #324]	; (8013184 <HAL_GPIO_Init+0x318>)
 801303e:	4293      	cmp	r3, r2
 8013040:	d025      	beq.n	801308e <HAL_GPIO_Init+0x222>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	4a50      	ldr	r2, [pc, #320]	; (8013188 <HAL_GPIO_Init+0x31c>)
 8013046:	4293      	cmp	r3, r2
 8013048:	d01f      	beq.n	801308a <HAL_GPIO_Init+0x21e>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	4a4f      	ldr	r2, [pc, #316]	; (801318c <HAL_GPIO_Init+0x320>)
 801304e:	4293      	cmp	r3, r2
 8013050:	d019      	beq.n	8013086 <HAL_GPIO_Init+0x21a>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	4a4e      	ldr	r2, [pc, #312]	; (8013190 <HAL_GPIO_Init+0x324>)
 8013056:	4293      	cmp	r3, r2
 8013058:	d013      	beq.n	8013082 <HAL_GPIO_Init+0x216>
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	4a4d      	ldr	r2, [pc, #308]	; (8013194 <HAL_GPIO_Init+0x328>)
 801305e:	4293      	cmp	r3, r2
 8013060:	d00d      	beq.n	801307e <HAL_GPIO_Init+0x212>
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	4a4c      	ldr	r2, [pc, #304]	; (8013198 <HAL_GPIO_Init+0x32c>)
 8013066:	4293      	cmp	r3, r2
 8013068:	d007      	beq.n	801307a <HAL_GPIO_Init+0x20e>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	4a4b      	ldr	r2, [pc, #300]	; (801319c <HAL_GPIO_Init+0x330>)
 801306e:	4293      	cmp	r3, r2
 8013070:	d101      	bne.n	8013076 <HAL_GPIO_Init+0x20a>
 8013072:	2307      	movs	r3, #7
 8013074:	e00e      	b.n	8013094 <HAL_GPIO_Init+0x228>
 8013076:	2308      	movs	r3, #8
 8013078:	e00c      	b.n	8013094 <HAL_GPIO_Init+0x228>
 801307a:	2306      	movs	r3, #6
 801307c:	e00a      	b.n	8013094 <HAL_GPIO_Init+0x228>
 801307e:	2305      	movs	r3, #5
 8013080:	e008      	b.n	8013094 <HAL_GPIO_Init+0x228>
 8013082:	2304      	movs	r3, #4
 8013084:	e006      	b.n	8013094 <HAL_GPIO_Init+0x228>
 8013086:	2303      	movs	r3, #3
 8013088:	e004      	b.n	8013094 <HAL_GPIO_Init+0x228>
 801308a:	2302      	movs	r3, #2
 801308c:	e002      	b.n	8013094 <HAL_GPIO_Init+0x228>
 801308e:	2301      	movs	r3, #1
 8013090:	e000      	b.n	8013094 <HAL_GPIO_Init+0x228>
 8013092:	2300      	movs	r3, #0
 8013094:	69fa      	ldr	r2, [r7, #28]
 8013096:	f002 0203 	and.w	r2, r2, #3
 801309a:	0092      	lsls	r2, r2, #2
 801309c:	4093      	lsls	r3, r2
 801309e:	69ba      	ldr	r2, [r7, #24]
 80130a0:	4313      	orrs	r3, r2
 80130a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80130a4:	4935      	ldr	r1, [pc, #212]	; (801317c <HAL_GPIO_Init+0x310>)
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	089b      	lsrs	r3, r3, #2
 80130aa:	3302      	adds	r3, #2
 80130ac:	69ba      	ldr	r2, [r7, #24]
 80130ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80130b2:	4b3b      	ldr	r3, [pc, #236]	; (80131a0 <HAL_GPIO_Init+0x334>)
 80130b4:	689b      	ldr	r3, [r3, #8]
 80130b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	43db      	mvns	r3, r3
 80130bc:	69ba      	ldr	r2, [r7, #24]
 80130be:	4013      	ands	r3, r2
 80130c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d003      	beq.n	80130d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80130ce:	69ba      	ldr	r2, [r7, #24]
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	4313      	orrs	r3, r2
 80130d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80130d6:	4a32      	ldr	r2, [pc, #200]	; (80131a0 <HAL_GPIO_Init+0x334>)
 80130d8:	69bb      	ldr	r3, [r7, #24]
 80130da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80130dc:	4b30      	ldr	r3, [pc, #192]	; (80131a0 <HAL_GPIO_Init+0x334>)
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	43db      	mvns	r3, r3
 80130e6:	69ba      	ldr	r2, [r7, #24]
 80130e8:	4013      	ands	r3, r2
 80130ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d003      	beq.n	8013100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80130f8:	69ba      	ldr	r2, [r7, #24]
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	4313      	orrs	r3, r2
 80130fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013100:	4a27      	ldr	r2, [pc, #156]	; (80131a0 <HAL_GPIO_Init+0x334>)
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8013106:	4b26      	ldr	r3, [pc, #152]	; (80131a0 <HAL_GPIO_Init+0x334>)
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	43db      	mvns	r3, r3
 8013110:	69ba      	ldr	r2, [r7, #24]
 8013112:	4013      	ands	r3, r2
 8013114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801311e:	2b00      	cmp	r3, #0
 8013120:	d003      	beq.n	801312a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8013122:	69ba      	ldr	r2, [r7, #24]
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	4313      	orrs	r3, r2
 8013128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801312a:	4a1d      	ldr	r2, [pc, #116]	; (80131a0 <HAL_GPIO_Init+0x334>)
 801312c:	69bb      	ldr	r3, [r7, #24]
 801312e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013130:	4b1b      	ldr	r3, [pc, #108]	; (80131a0 <HAL_GPIO_Init+0x334>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	43db      	mvns	r3, r3
 801313a:	69ba      	ldr	r2, [r7, #24]
 801313c:	4013      	ands	r3, r2
 801313e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	685b      	ldr	r3, [r3, #4]
 8013144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013148:	2b00      	cmp	r3, #0
 801314a:	d003      	beq.n	8013154 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801314c:	69ba      	ldr	r2, [r7, #24]
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	4313      	orrs	r3, r2
 8013152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8013154:	4a12      	ldr	r2, [pc, #72]	; (80131a0 <HAL_GPIO_Init+0x334>)
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801315a:	69fb      	ldr	r3, [r7, #28]
 801315c:	3301      	adds	r3, #1
 801315e:	61fb      	str	r3, [r7, #28]
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	2b0f      	cmp	r3, #15
 8013164:	f67f ae90 	bls.w	8012e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013168:	bf00      	nop
 801316a:	bf00      	nop
 801316c:	3724      	adds	r7, #36	; 0x24
 801316e:	46bd      	mov	sp, r7
 8013170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013174:	4770      	bx	lr
 8013176:	bf00      	nop
 8013178:	40023800 	.word	0x40023800
 801317c:	40013800 	.word	0x40013800
 8013180:	40020000 	.word	0x40020000
 8013184:	40020400 	.word	0x40020400
 8013188:	40020800 	.word	0x40020800
 801318c:	40020c00 	.word	0x40020c00
 8013190:	40021000 	.word	0x40021000
 8013194:	40021400 	.word	0x40021400
 8013198:	40021800 	.word	0x40021800
 801319c:	40021c00 	.word	0x40021c00
 80131a0:	40013c00 	.word	0x40013c00

080131a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b085      	sub	sp, #20
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	460b      	mov	r3, r1
 80131ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	691a      	ldr	r2, [r3, #16]
 80131b4:	887b      	ldrh	r3, [r7, #2]
 80131b6:	4013      	ands	r3, r2
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d002      	beq.n	80131c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80131bc:	2301      	movs	r3, #1
 80131be:	73fb      	strb	r3, [r7, #15]
 80131c0:	e001      	b.n	80131c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80131c2:	2300      	movs	r3, #0
 80131c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80131c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3714      	adds	r7, #20
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80131d4:	b480      	push	{r7}
 80131d6:	b083      	sub	sp, #12
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	460b      	mov	r3, r1
 80131de:	807b      	strh	r3, [r7, #2]
 80131e0:	4613      	mov	r3, r2
 80131e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80131e4:	787b      	ldrb	r3, [r7, #1]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d003      	beq.n	80131f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80131ea:	887a      	ldrh	r2, [r7, #2]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80131f0:	e003      	b.n	80131fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80131f2:	887b      	ldrh	r3, [r7, #2]
 80131f4:	041a      	lsls	r2, r3, #16
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	619a      	str	r2, [r3, #24]
}
 80131fa:	bf00      	nop
 80131fc:	370c      	adds	r7, #12
 80131fe:	46bd      	mov	sp, r7
 8013200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013204:	4770      	bx	lr

08013206 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013206:	b480      	push	{r7}
 8013208:	b085      	sub	sp, #20
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
 801320e:	460b      	mov	r3, r1
 8013210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	695b      	ldr	r3, [r3, #20]
 8013216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8013218:	887a      	ldrh	r2, [r7, #2]
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	4013      	ands	r3, r2
 801321e:	041a      	lsls	r2, r3, #16
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	43d9      	mvns	r1, r3
 8013224:	887b      	ldrh	r3, [r7, #2]
 8013226:	400b      	ands	r3, r1
 8013228:	431a      	orrs	r2, r3
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	619a      	str	r2, [r3, #24]
}
 801322e:	bf00      	nop
 8013230:	3714      	adds	r7, #20
 8013232:	46bd      	mov	sp, r7
 8013234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013238:	4770      	bx	lr

0801323a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801323a:	b580      	push	{r7, lr}
 801323c:	b084      	sub	sp, #16
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d101      	bne.n	801324c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8013248:	2301      	movs	r3, #1
 801324a:	e034      	b.n	80132b6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8013254:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	f245 5255 	movw	r2, #21845	; 0x5555
 801325e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	687a      	ldr	r2, [r7, #4]
 8013266:	6852      	ldr	r2, [r2, #4]
 8013268:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	687a      	ldr	r2, [r7, #4]
 8013270:	6892      	ldr	r2, [r2, #8]
 8013272:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8013274:	f7fe fcee 	bl	8011c54 <HAL_GetTick>
 8013278:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801327a:	e00f      	b.n	801329c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801327c:	f7fe fcea 	bl	8011c54 <HAL_GetTick>
 8013280:	4602      	mov	r2, r0
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	1ad3      	subs	r3, r2, r3
 8013286:	2b31      	cmp	r3, #49	; 0x31
 8013288:	d908      	bls.n	801329c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	68db      	ldr	r3, [r3, #12]
 8013290:	f003 0303 	and.w	r3, r3, #3
 8013294:	2b00      	cmp	r3, #0
 8013296:	d001      	beq.n	801329c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8013298:	2303      	movs	r3, #3
 801329a:	e00c      	b.n	80132b6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	f003 0303 	and.w	r3, r3, #3
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d1e8      	bne.n	801327c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80132b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80132b4:	2300      	movs	r3, #0
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3710      	adds	r7, #16
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}

080132be <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80132be:	b480      	push	{r7}
 80132c0:	b083      	sub	sp, #12
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80132ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80132d0:	2300      	movs	r3, #0
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	370c      	adds	r7, #12
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
	...

080132e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b086      	sub	sp, #24
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d101      	bne.n	80132f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80132ee:	2301      	movs	r3, #1
 80132f0:	e264      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f003 0301 	and.w	r3, r3, #1
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d075      	beq.n	80133ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80132fe:	4ba3      	ldr	r3, [pc, #652]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013300:	689b      	ldr	r3, [r3, #8]
 8013302:	f003 030c 	and.w	r3, r3, #12
 8013306:	2b04      	cmp	r3, #4
 8013308:	d00c      	beq.n	8013324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801330a:	4ba0      	ldr	r3, [pc, #640]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801330c:	689b      	ldr	r3, [r3, #8]
 801330e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013312:	2b08      	cmp	r3, #8
 8013314:	d112      	bne.n	801333c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013316:	4b9d      	ldr	r3, [pc, #628]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801331e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013322:	d10b      	bne.n	801333c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013324:	4b99      	ldr	r3, [pc, #612]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801332c:	2b00      	cmp	r3, #0
 801332e:	d05b      	beq.n	80133e8 <HAL_RCC_OscConfig+0x108>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d157      	bne.n	80133e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013338:	2301      	movs	r3, #1
 801333a:	e23f      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	685b      	ldr	r3, [r3, #4]
 8013340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013344:	d106      	bne.n	8013354 <HAL_RCC_OscConfig+0x74>
 8013346:	4b91      	ldr	r3, [pc, #580]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	4a90      	ldr	r2, [pc, #576]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013350:	6013      	str	r3, [r2, #0]
 8013352:	e01d      	b.n	8013390 <HAL_RCC_OscConfig+0xb0>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801335c:	d10c      	bne.n	8013378 <HAL_RCC_OscConfig+0x98>
 801335e:	4b8b      	ldr	r3, [pc, #556]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	4a8a      	ldr	r2, [pc, #552]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013368:	6013      	str	r3, [r2, #0]
 801336a:	4b88      	ldr	r3, [pc, #544]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	4a87      	ldr	r2, [pc, #540]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013374:	6013      	str	r3, [r2, #0]
 8013376:	e00b      	b.n	8013390 <HAL_RCC_OscConfig+0xb0>
 8013378:	4b84      	ldr	r3, [pc, #528]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	4a83      	ldr	r2, [pc, #524]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801337e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013382:	6013      	str	r3, [r2, #0]
 8013384:	4b81      	ldr	r3, [pc, #516]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4a80      	ldr	r2, [pc, #512]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801338a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801338e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d013      	beq.n	80133c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013398:	f7fe fc5c 	bl	8011c54 <HAL_GetTick>
 801339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801339e:	e008      	b.n	80133b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80133a0:	f7fe fc58 	bl	8011c54 <HAL_GetTick>
 80133a4:	4602      	mov	r2, r0
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	1ad3      	subs	r3, r2, r3
 80133aa:	2b64      	cmp	r3, #100	; 0x64
 80133ac:	d901      	bls.n	80133b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80133ae:	2303      	movs	r3, #3
 80133b0:	e204      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80133b2:	4b76      	ldr	r3, [pc, #472]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d0f0      	beq.n	80133a0 <HAL_RCC_OscConfig+0xc0>
 80133be:	e014      	b.n	80133ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80133c0:	f7fe fc48 	bl	8011c54 <HAL_GetTick>
 80133c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80133c6:	e008      	b.n	80133da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80133c8:	f7fe fc44 	bl	8011c54 <HAL_GetTick>
 80133cc:	4602      	mov	r2, r0
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	1ad3      	subs	r3, r2, r3
 80133d2:	2b64      	cmp	r3, #100	; 0x64
 80133d4:	d901      	bls.n	80133da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80133d6:	2303      	movs	r3, #3
 80133d8:	e1f0      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80133da:	4b6c      	ldr	r3, [pc, #432]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d1f0      	bne.n	80133c8 <HAL_RCC_OscConfig+0xe8>
 80133e6:	e000      	b.n	80133ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80133e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f003 0302 	and.w	r3, r3, #2
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d063      	beq.n	80134be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80133f6:	4b65      	ldr	r3, [pc, #404]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	f003 030c 	and.w	r3, r3, #12
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d00b      	beq.n	801341a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013402:	4b62      	ldr	r3, [pc, #392]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013404:	689b      	ldr	r3, [r3, #8]
 8013406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801340a:	2b08      	cmp	r3, #8
 801340c:	d11c      	bne.n	8013448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801340e:	4b5f      	ldr	r3, [pc, #380]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013410:	685b      	ldr	r3, [r3, #4]
 8013412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013416:	2b00      	cmp	r3, #0
 8013418:	d116      	bne.n	8013448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801341a:	4b5c      	ldr	r3, [pc, #368]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f003 0302 	and.w	r3, r3, #2
 8013422:	2b00      	cmp	r3, #0
 8013424:	d005      	beq.n	8013432 <HAL_RCC_OscConfig+0x152>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	2b01      	cmp	r3, #1
 801342c:	d001      	beq.n	8013432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801342e:	2301      	movs	r3, #1
 8013430:	e1c4      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013432:	4b56      	ldr	r3, [pc, #344]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	691b      	ldr	r3, [r3, #16]
 801343e:	00db      	lsls	r3, r3, #3
 8013440:	4952      	ldr	r1, [pc, #328]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013442:	4313      	orrs	r3, r2
 8013444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013446:	e03a      	b.n	80134be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d020      	beq.n	8013492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013450:	4b4f      	ldr	r3, [pc, #316]	; (8013590 <HAL_RCC_OscConfig+0x2b0>)
 8013452:	2201      	movs	r2, #1
 8013454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013456:	f7fe fbfd 	bl	8011c54 <HAL_GetTick>
 801345a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801345c:	e008      	b.n	8013470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801345e:	f7fe fbf9 	bl	8011c54 <HAL_GetTick>
 8013462:	4602      	mov	r2, r0
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	1ad3      	subs	r3, r2, r3
 8013468:	2b02      	cmp	r3, #2
 801346a:	d901      	bls.n	8013470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801346c:	2303      	movs	r3, #3
 801346e:	e1a5      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013470:	4b46      	ldr	r3, [pc, #280]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f003 0302 	and.w	r3, r3, #2
 8013478:	2b00      	cmp	r3, #0
 801347a:	d0f0      	beq.n	801345e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801347c:	4b43      	ldr	r3, [pc, #268]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	691b      	ldr	r3, [r3, #16]
 8013488:	00db      	lsls	r3, r3, #3
 801348a:	4940      	ldr	r1, [pc, #256]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801348c:	4313      	orrs	r3, r2
 801348e:	600b      	str	r3, [r1, #0]
 8013490:	e015      	b.n	80134be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013492:	4b3f      	ldr	r3, [pc, #252]	; (8013590 <HAL_RCC_OscConfig+0x2b0>)
 8013494:	2200      	movs	r2, #0
 8013496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013498:	f7fe fbdc 	bl	8011c54 <HAL_GetTick>
 801349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801349e:	e008      	b.n	80134b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80134a0:	f7fe fbd8 	bl	8011c54 <HAL_GetTick>
 80134a4:	4602      	mov	r2, r0
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	1ad3      	subs	r3, r2, r3
 80134aa:	2b02      	cmp	r3, #2
 80134ac:	d901      	bls.n	80134b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80134ae:	2303      	movs	r3, #3
 80134b0:	e184      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80134b2:	4b36      	ldr	r3, [pc, #216]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	f003 0302 	and.w	r3, r3, #2
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d1f0      	bne.n	80134a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	f003 0308 	and.w	r3, r3, #8
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d030      	beq.n	801352c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	695b      	ldr	r3, [r3, #20]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d016      	beq.n	8013500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80134d2:	4b30      	ldr	r3, [pc, #192]	; (8013594 <HAL_RCC_OscConfig+0x2b4>)
 80134d4:	2201      	movs	r2, #1
 80134d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80134d8:	f7fe fbbc 	bl	8011c54 <HAL_GetTick>
 80134dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80134de:	e008      	b.n	80134f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80134e0:	f7fe fbb8 	bl	8011c54 <HAL_GetTick>
 80134e4:	4602      	mov	r2, r0
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	1ad3      	subs	r3, r2, r3
 80134ea:	2b02      	cmp	r3, #2
 80134ec:	d901      	bls.n	80134f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80134ee:	2303      	movs	r3, #3
 80134f0:	e164      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80134f2:	4b26      	ldr	r3, [pc, #152]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 80134f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134f6:	f003 0302 	and.w	r3, r3, #2
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d0f0      	beq.n	80134e0 <HAL_RCC_OscConfig+0x200>
 80134fe:	e015      	b.n	801352c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013500:	4b24      	ldr	r3, [pc, #144]	; (8013594 <HAL_RCC_OscConfig+0x2b4>)
 8013502:	2200      	movs	r2, #0
 8013504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013506:	f7fe fba5 	bl	8011c54 <HAL_GetTick>
 801350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801350c:	e008      	b.n	8013520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801350e:	f7fe fba1 	bl	8011c54 <HAL_GetTick>
 8013512:	4602      	mov	r2, r0
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	1ad3      	subs	r3, r2, r3
 8013518:	2b02      	cmp	r3, #2
 801351a:	d901      	bls.n	8013520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801351c:	2303      	movs	r3, #3
 801351e:	e14d      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013520:	4b1a      	ldr	r3, [pc, #104]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013524:	f003 0302 	and.w	r3, r3, #2
 8013528:	2b00      	cmp	r3, #0
 801352a:	d1f0      	bne.n	801350e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f003 0304 	and.w	r3, r3, #4
 8013534:	2b00      	cmp	r3, #0
 8013536:	f000 80a0 	beq.w	801367a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801353a:	2300      	movs	r3, #0
 801353c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801353e:	4b13      	ldr	r3, [pc, #76]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013546:	2b00      	cmp	r3, #0
 8013548:	d10f      	bne.n	801356a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801354a:	2300      	movs	r3, #0
 801354c:	60bb      	str	r3, [r7, #8]
 801354e:	4b0f      	ldr	r3, [pc, #60]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013552:	4a0e      	ldr	r2, [pc, #56]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 8013554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013558:	6413      	str	r3, [r2, #64]	; 0x40
 801355a:	4b0c      	ldr	r3, [pc, #48]	; (801358c <HAL_RCC_OscConfig+0x2ac>)
 801355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013562:	60bb      	str	r3, [r7, #8]
 8013564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013566:	2301      	movs	r3, #1
 8013568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801356a:	4b0b      	ldr	r3, [pc, #44]	; (8013598 <HAL_RCC_OscConfig+0x2b8>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013572:	2b00      	cmp	r3, #0
 8013574:	d121      	bne.n	80135ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013576:	4b08      	ldr	r3, [pc, #32]	; (8013598 <HAL_RCC_OscConfig+0x2b8>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	4a07      	ldr	r2, [pc, #28]	; (8013598 <HAL_RCC_OscConfig+0x2b8>)
 801357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013582:	f7fe fb67 	bl	8011c54 <HAL_GetTick>
 8013586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013588:	e011      	b.n	80135ae <HAL_RCC_OscConfig+0x2ce>
 801358a:	bf00      	nop
 801358c:	40023800 	.word	0x40023800
 8013590:	42470000 	.word	0x42470000
 8013594:	42470e80 	.word	0x42470e80
 8013598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801359c:	f7fe fb5a 	bl	8011c54 <HAL_GetTick>
 80135a0:	4602      	mov	r2, r0
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	1ad3      	subs	r3, r2, r3
 80135a6:	2b02      	cmp	r3, #2
 80135a8:	d901      	bls.n	80135ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80135aa:	2303      	movs	r3, #3
 80135ac:	e106      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80135ae:	4b85      	ldr	r3, [pc, #532]	; (80137c4 <HAL_RCC_OscConfig+0x4e4>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d0f0      	beq.n	801359c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	2b01      	cmp	r3, #1
 80135c0:	d106      	bne.n	80135d0 <HAL_RCC_OscConfig+0x2f0>
 80135c2:	4b81      	ldr	r3, [pc, #516]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80135c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135c6:	4a80      	ldr	r2, [pc, #512]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80135c8:	f043 0301 	orr.w	r3, r3, #1
 80135cc:	6713      	str	r3, [r2, #112]	; 0x70
 80135ce:	e01c      	b.n	801360a <HAL_RCC_OscConfig+0x32a>
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	689b      	ldr	r3, [r3, #8]
 80135d4:	2b05      	cmp	r3, #5
 80135d6:	d10c      	bne.n	80135f2 <HAL_RCC_OscConfig+0x312>
 80135d8:	4b7b      	ldr	r3, [pc, #492]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80135da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135dc:	4a7a      	ldr	r2, [pc, #488]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80135de:	f043 0304 	orr.w	r3, r3, #4
 80135e2:	6713      	str	r3, [r2, #112]	; 0x70
 80135e4:	4b78      	ldr	r3, [pc, #480]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80135e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135e8:	4a77      	ldr	r2, [pc, #476]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80135ea:	f043 0301 	orr.w	r3, r3, #1
 80135ee:	6713      	str	r3, [r2, #112]	; 0x70
 80135f0:	e00b      	b.n	801360a <HAL_RCC_OscConfig+0x32a>
 80135f2:	4b75      	ldr	r3, [pc, #468]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80135f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135f6:	4a74      	ldr	r2, [pc, #464]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80135f8:	f023 0301 	bic.w	r3, r3, #1
 80135fc:	6713      	str	r3, [r2, #112]	; 0x70
 80135fe:	4b72      	ldr	r3, [pc, #456]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 8013600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013602:	4a71      	ldr	r2, [pc, #452]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 8013604:	f023 0304 	bic.w	r3, r3, #4
 8013608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	689b      	ldr	r3, [r3, #8]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d015      	beq.n	801363e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013612:	f7fe fb1f 	bl	8011c54 <HAL_GetTick>
 8013616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013618:	e00a      	b.n	8013630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801361a:	f7fe fb1b 	bl	8011c54 <HAL_GetTick>
 801361e:	4602      	mov	r2, r0
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	1ad3      	subs	r3, r2, r3
 8013624:	f241 3288 	movw	r2, #5000	; 0x1388
 8013628:	4293      	cmp	r3, r2
 801362a:	d901      	bls.n	8013630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801362c:	2303      	movs	r3, #3
 801362e:	e0c5      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013630:	4b65      	ldr	r3, [pc, #404]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 8013632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013634:	f003 0302 	and.w	r3, r3, #2
 8013638:	2b00      	cmp	r3, #0
 801363a:	d0ee      	beq.n	801361a <HAL_RCC_OscConfig+0x33a>
 801363c:	e014      	b.n	8013668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801363e:	f7fe fb09 	bl	8011c54 <HAL_GetTick>
 8013642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013644:	e00a      	b.n	801365c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013646:	f7fe fb05 	bl	8011c54 <HAL_GetTick>
 801364a:	4602      	mov	r2, r0
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	1ad3      	subs	r3, r2, r3
 8013650:	f241 3288 	movw	r2, #5000	; 0x1388
 8013654:	4293      	cmp	r3, r2
 8013656:	d901      	bls.n	801365c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013658:	2303      	movs	r3, #3
 801365a:	e0af      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801365c:	4b5a      	ldr	r3, [pc, #360]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 801365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013660:	f003 0302 	and.w	r3, r3, #2
 8013664:	2b00      	cmp	r3, #0
 8013666:	d1ee      	bne.n	8013646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013668:	7dfb      	ldrb	r3, [r7, #23]
 801366a:	2b01      	cmp	r3, #1
 801366c:	d105      	bne.n	801367a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801366e:	4b56      	ldr	r3, [pc, #344]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 8013670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013672:	4a55      	ldr	r2, [pc, #340]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 8013674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	699b      	ldr	r3, [r3, #24]
 801367e:	2b00      	cmp	r3, #0
 8013680:	f000 809b 	beq.w	80137ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013684:	4b50      	ldr	r3, [pc, #320]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 8013686:	689b      	ldr	r3, [r3, #8]
 8013688:	f003 030c 	and.w	r3, r3, #12
 801368c:	2b08      	cmp	r3, #8
 801368e:	d05c      	beq.n	801374a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	699b      	ldr	r3, [r3, #24]
 8013694:	2b02      	cmp	r3, #2
 8013696:	d141      	bne.n	801371c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013698:	4b4c      	ldr	r3, [pc, #304]	; (80137cc <HAL_RCC_OscConfig+0x4ec>)
 801369a:	2200      	movs	r2, #0
 801369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801369e:	f7fe fad9 	bl	8011c54 <HAL_GetTick>
 80136a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80136a4:	e008      	b.n	80136b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80136a6:	f7fe fad5 	bl	8011c54 <HAL_GetTick>
 80136aa:	4602      	mov	r2, r0
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	1ad3      	subs	r3, r2, r3
 80136b0:	2b02      	cmp	r3, #2
 80136b2:	d901      	bls.n	80136b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80136b4:	2303      	movs	r3, #3
 80136b6:	e081      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80136b8:	4b43      	ldr	r3, [pc, #268]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d1f0      	bne.n	80136a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	69da      	ldr	r2, [r3, #28]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6a1b      	ldr	r3, [r3, #32]
 80136cc:	431a      	orrs	r2, r3
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136d2:	019b      	lsls	r3, r3, #6
 80136d4:	431a      	orrs	r2, r3
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136da:	085b      	lsrs	r3, r3, #1
 80136dc:	3b01      	subs	r3, #1
 80136de:	041b      	lsls	r3, r3, #16
 80136e0:	431a      	orrs	r2, r3
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136e6:	061b      	lsls	r3, r3, #24
 80136e8:	4937      	ldr	r1, [pc, #220]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 80136ea:	4313      	orrs	r3, r2
 80136ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80136ee:	4b37      	ldr	r3, [pc, #220]	; (80137cc <HAL_RCC_OscConfig+0x4ec>)
 80136f0:	2201      	movs	r2, #1
 80136f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80136f4:	f7fe faae 	bl	8011c54 <HAL_GetTick>
 80136f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80136fa:	e008      	b.n	801370e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80136fc:	f7fe faaa 	bl	8011c54 <HAL_GetTick>
 8013700:	4602      	mov	r2, r0
 8013702:	693b      	ldr	r3, [r7, #16]
 8013704:	1ad3      	subs	r3, r2, r3
 8013706:	2b02      	cmp	r3, #2
 8013708:	d901      	bls.n	801370e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801370a:	2303      	movs	r3, #3
 801370c:	e056      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801370e:	4b2e      	ldr	r3, [pc, #184]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013716:	2b00      	cmp	r3, #0
 8013718:	d0f0      	beq.n	80136fc <HAL_RCC_OscConfig+0x41c>
 801371a:	e04e      	b.n	80137ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801371c:	4b2b      	ldr	r3, [pc, #172]	; (80137cc <HAL_RCC_OscConfig+0x4ec>)
 801371e:	2200      	movs	r2, #0
 8013720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013722:	f7fe fa97 	bl	8011c54 <HAL_GetTick>
 8013726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013728:	e008      	b.n	801373c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801372a:	f7fe fa93 	bl	8011c54 <HAL_GetTick>
 801372e:	4602      	mov	r2, r0
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	1ad3      	subs	r3, r2, r3
 8013734:	2b02      	cmp	r3, #2
 8013736:	d901      	bls.n	801373c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013738:	2303      	movs	r3, #3
 801373a:	e03f      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801373c:	4b22      	ldr	r3, [pc, #136]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013744:	2b00      	cmp	r3, #0
 8013746:	d1f0      	bne.n	801372a <HAL_RCC_OscConfig+0x44a>
 8013748:	e037      	b.n	80137ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	699b      	ldr	r3, [r3, #24]
 801374e:	2b01      	cmp	r3, #1
 8013750:	d101      	bne.n	8013756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013752:	2301      	movs	r3, #1
 8013754:	e032      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013756:	4b1c      	ldr	r3, [pc, #112]	; (80137c8 <HAL_RCC_OscConfig+0x4e8>)
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	699b      	ldr	r3, [r3, #24]
 8013760:	2b01      	cmp	r3, #1
 8013762:	d028      	beq.n	80137b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801376e:	429a      	cmp	r2, r3
 8013770:	d121      	bne.n	80137b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801377c:	429a      	cmp	r2, r3
 801377e:	d11a      	bne.n	80137b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013780:	68fa      	ldr	r2, [r7, #12]
 8013782:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013786:	4013      	ands	r3, r2
 8013788:	687a      	ldr	r2, [r7, #4]
 801378a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801378c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801378e:	4293      	cmp	r3, r2
 8013790:	d111      	bne.n	80137b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801379c:	085b      	lsrs	r3, r3, #1
 801379e:	3b01      	subs	r3, #1
 80137a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d107      	bne.n	80137b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d001      	beq.n	80137ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80137b6:	2301      	movs	r3, #1
 80137b8:	e000      	b.n	80137bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80137ba:	2300      	movs	r3, #0
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3718      	adds	r7, #24
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	40007000 	.word	0x40007000
 80137c8:	40023800 	.word	0x40023800
 80137cc:	42470060 	.word	0x42470060

080137d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d101      	bne.n	80137e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80137e0:	2301      	movs	r3, #1
 80137e2:	e0cc      	b.n	801397e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80137e4:	4b68      	ldr	r3, [pc, #416]	; (8013988 <HAL_RCC_ClockConfig+0x1b8>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	f003 0307 	and.w	r3, r3, #7
 80137ec:	683a      	ldr	r2, [r7, #0]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d90c      	bls.n	801380c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80137f2:	4b65      	ldr	r3, [pc, #404]	; (8013988 <HAL_RCC_ClockConfig+0x1b8>)
 80137f4:	683a      	ldr	r2, [r7, #0]
 80137f6:	b2d2      	uxtb	r2, r2
 80137f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80137fa:	4b63      	ldr	r3, [pc, #396]	; (8013988 <HAL_RCC_ClockConfig+0x1b8>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	f003 0307 	and.w	r3, r3, #7
 8013802:	683a      	ldr	r2, [r7, #0]
 8013804:	429a      	cmp	r2, r3
 8013806:	d001      	beq.n	801380c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013808:	2301      	movs	r3, #1
 801380a:	e0b8      	b.n	801397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	f003 0302 	and.w	r3, r3, #2
 8013814:	2b00      	cmp	r3, #0
 8013816:	d020      	beq.n	801385a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f003 0304 	and.w	r3, r3, #4
 8013820:	2b00      	cmp	r3, #0
 8013822:	d005      	beq.n	8013830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013824:	4b59      	ldr	r3, [pc, #356]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 8013826:	689b      	ldr	r3, [r3, #8]
 8013828:	4a58      	ldr	r2, [pc, #352]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 801382a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801382e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	f003 0308 	and.w	r3, r3, #8
 8013838:	2b00      	cmp	r3, #0
 801383a:	d005      	beq.n	8013848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801383c:	4b53      	ldr	r3, [pc, #332]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 801383e:	689b      	ldr	r3, [r3, #8]
 8013840:	4a52      	ldr	r2, [pc, #328]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 8013842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013848:	4b50      	ldr	r3, [pc, #320]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 801384a:	689b      	ldr	r3, [r3, #8]
 801384c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	689b      	ldr	r3, [r3, #8]
 8013854:	494d      	ldr	r1, [pc, #308]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 8013856:	4313      	orrs	r3, r2
 8013858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	f003 0301 	and.w	r3, r3, #1
 8013862:	2b00      	cmp	r3, #0
 8013864:	d044      	beq.n	80138f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	2b01      	cmp	r3, #1
 801386c:	d107      	bne.n	801387e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801386e:	4b47      	ldr	r3, [pc, #284]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013876:	2b00      	cmp	r3, #0
 8013878:	d119      	bne.n	80138ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801387a:	2301      	movs	r3, #1
 801387c:	e07f      	b.n	801397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	2b02      	cmp	r3, #2
 8013884:	d003      	beq.n	801388e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801388a:	2b03      	cmp	r3, #3
 801388c:	d107      	bne.n	801389e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801388e:	4b3f      	ldr	r3, [pc, #252]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013896:	2b00      	cmp	r3, #0
 8013898:	d109      	bne.n	80138ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801389a:	2301      	movs	r3, #1
 801389c:	e06f      	b.n	801397e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801389e:	4b3b      	ldr	r3, [pc, #236]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	f003 0302 	and.w	r3, r3, #2
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d101      	bne.n	80138ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80138aa:	2301      	movs	r3, #1
 80138ac:	e067      	b.n	801397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80138ae:	4b37      	ldr	r3, [pc, #220]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	f023 0203 	bic.w	r2, r3, #3
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	4934      	ldr	r1, [pc, #208]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 80138bc:	4313      	orrs	r3, r2
 80138be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80138c0:	f7fe f9c8 	bl	8011c54 <HAL_GetTick>
 80138c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80138c6:	e00a      	b.n	80138de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80138c8:	f7fe f9c4 	bl	8011c54 <HAL_GetTick>
 80138cc:	4602      	mov	r2, r0
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	1ad3      	subs	r3, r2, r3
 80138d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80138d6:	4293      	cmp	r3, r2
 80138d8:	d901      	bls.n	80138de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80138da:	2303      	movs	r3, #3
 80138dc:	e04f      	b.n	801397e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80138de:	4b2b      	ldr	r3, [pc, #172]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 80138e0:	689b      	ldr	r3, [r3, #8]
 80138e2:	f003 020c 	and.w	r2, r3, #12
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	009b      	lsls	r3, r3, #2
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d1eb      	bne.n	80138c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80138f0:	4b25      	ldr	r3, [pc, #148]	; (8013988 <HAL_RCC_ClockConfig+0x1b8>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f003 0307 	and.w	r3, r3, #7
 80138f8:	683a      	ldr	r2, [r7, #0]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d20c      	bcs.n	8013918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80138fe:	4b22      	ldr	r3, [pc, #136]	; (8013988 <HAL_RCC_ClockConfig+0x1b8>)
 8013900:	683a      	ldr	r2, [r7, #0]
 8013902:	b2d2      	uxtb	r2, r2
 8013904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013906:	4b20      	ldr	r3, [pc, #128]	; (8013988 <HAL_RCC_ClockConfig+0x1b8>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	f003 0307 	and.w	r3, r3, #7
 801390e:	683a      	ldr	r2, [r7, #0]
 8013910:	429a      	cmp	r2, r3
 8013912:	d001      	beq.n	8013918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013914:	2301      	movs	r3, #1
 8013916:	e032      	b.n	801397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	f003 0304 	and.w	r3, r3, #4
 8013920:	2b00      	cmp	r3, #0
 8013922:	d008      	beq.n	8013936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013924:	4b19      	ldr	r3, [pc, #100]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 8013926:	689b      	ldr	r3, [r3, #8]
 8013928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	68db      	ldr	r3, [r3, #12]
 8013930:	4916      	ldr	r1, [pc, #88]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 8013932:	4313      	orrs	r3, r2
 8013934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	f003 0308 	and.w	r3, r3, #8
 801393e:	2b00      	cmp	r3, #0
 8013940:	d009      	beq.n	8013956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013942:	4b12      	ldr	r3, [pc, #72]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 8013944:	689b      	ldr	r3, [r3, #8]
 8013946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	691b      	ldr	r3, [r3, #16]
 801394e:	00db      	lsls	r3, r3, #3
 8013950:	490e      	ldr	r1, [pc, #56]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 8013952:	4313      	orrs	r3, r2
 8013954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013956:	f000 f821 	bl	801399c <HAL_RCC_GetSysClockFreq>
 801395a:	4602      	mov	r2, r0
 801395c:	4b0b      	ldr	r3, [pc, #44]	; (801398c <HAL_RCC_ClockConfig+0x1bc>)
 801395e:	689b      	ldr	r3, [r3, #8]
 8013960:	091b      	lsrs	r3, r3, #4
 8013962:	f003 030f 	and.w	r3, r3, #15
 8013966:	490a      	ldr	r1, [pc, #40]	; (8013990 <HAL_RCC_ClockConfig+0x1c0>)
 8013968:	5ccb      	ldrb	r3, [r1, r3]
 801396a:	fa22 f303 	lsr.w	r3, r2, r3
 801396e:	4a09      	ldr	r2, [pc, #36]	; (8013994 <HAL_RCC_ClockConfig+0x1c4>)
 8013970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013972:	4b09      	ldr	r3, [pc, #36]	; (8013998 <HAL_RCC_ClockConfig+0x1c8>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	4618      	mov	r0, r3
 8013978:	f7fd ff9c 	bl	80118b4 <HAL_InitTick>

  return HAL_OK;
 801397c:	2300      	movs	r3, #0
}
 801397e:	4618      	mov	r0, r3
 8013980:	3710      	adds	r7, #16
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	40023c00 	.word	0x40023c00
 801398c:	40023800 	.word	0x40023800
 8013990:	0802a694 	.word	0x0802a694
 8013994:	20000000 	.word	0x20000000
 8013998:	20000004 	.word	0x20000004

0801399c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801399c:	b5b0      	push	{r4, r5, r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80139a2:	2100      	movs	r1, #0
 80139a4:	6079      	str	r1, [r7, #4]
 80139a6:	2100      	movs	r1, #0
 80139a8:	60f9      	str	r1, [r7, #12]
 80139aa:	2100      	movs	r1, #0
 80139ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80139ae:	2100      	movs	r1, #0
 80139b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80139b2:	4952      	ldr	r1, [pc, #328]	; (8013afc <HAL_RCC_GetSysClockFreq+0x160>)
 80139b4:	6889      	ldr	r1, [r1, #8]
 80139b6:	f001 010c 	and.w	r1, r1, #12
 80139ba:	2908      	cmp	r1, #8
 80139bc:	d00d      	beq.n	80139da <HAL_RCC_GetSysClockFreq+0x3e>
 80139be:	2908      	cmp	r1, #8
 80139c0:	f200 8094 	bhi.w	8013aec <HAL_RCC_GetSysClockFreq+0x150>
 80139c4:	2900      	cmp	r1, #0
 80139c6:	d002      	beq.n	80139ce <HAL_RCC_GetSysClockFreq+0x32>
 80139c8:	2904      	cmp	r1, #4
 80139ca:	d003      	beq.n	80139d4 <HAL_RCC_GetSysClockFreq+0x38>
 80139cc:	e08e      	b.n	8013aec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80139ce:	4b4c      	ldr	r3, [pc, #304]	; (8013b00 <HAL_RCC_GetSysClockFreq+0x164>)
 80139d0:	60bb      	str	r3, [r7, #8]
       break;
 80139d2:	e08e      	b.n	8013af2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80139d4:	4b4b      	ldr	r3, [pc, #300]	; (8013b04 <HAL_RCC_GetSysClockFreq+0x168>)
 80139d6:	60bb      	str	r3, [r7, #8]
      break;
 80139d8:	e08b      	b.n	8013af2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80139da:	4948      	ldr	r1, [pc, #288]	; (8013afc <HAL_RCC_GetSysClockFreq+0x160>)
 80139dc:	6849      	ldr	r1, [r1, #4]
 80139de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80139e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80139e4:	4945      	ldr	r1, [pc, #276]	; (8013afc <HAL_RCC_GetSysClockFreq+0x160>)
 80139e6:	6849      	ldr	r1, [r1, #4]
 80139e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80139ec:	2900      	cmp	r1, #0
 80139ee:	d024      	beq.n	8013a3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80139f0:	4942      	ldr	r1, [pc, #264]	; (8013afc <HAL_RCC_GetSysClockFreq+0x160>)
 80139f2:	6849      	ldr	r1, [r1, #4]
 80139f4:	0989      	lsrs	r1, r1, #6
 80139f6:	4608      	mov	r0, r1
 80139f8:	f04f 0100 	mov.w	r1, #0
 80139fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8013a00:	f04f 0500 	mov.w	r5, #0
 8013a04:	ea00 0204 	and.w	r2, r0, r4
 8013a08:	ea01 0305 	and.w	r3, r1, r5
 8013a0c:	493d      	ldr	r1, [pc, #244]	; (8013b04 <HAL_RCC_GetSysClockFreq+0x168>)
 8013a0e:	fb01 f003 	mul.w	r0, r1, r3
 8013a12:	2100      	movs	r1, #0
 8013a14:	fb01 f102 	mul.w	r1, r1, r2
 8013a18:	1844      	adds	r4, r0, r1
 8013a1a:	493a      	ldr	r1, [pc, #232]	; (8013b04 <HAL_RCC_GetSysClockFreq+0x168>)
 8013a1c:	fba2 0101 	umull	r0, r1, r2, r1
 8013a20:	1863      	adds	r3, r4, r1
 8013a22:	4619      	mov	r1, r3
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	461a      	mov	r2, r3
 8013a28:	f04f 0300 	mov.w	r3, #0
 8013a2c:	f7fc fc28 	bl	8010280 <__aeabi_uldivmod>
 8013a30:	4602      	mov	r2, r0
 8013a32:	460b      	mov	r3, r1
 8013a34:	4613      	mov	r3, r2
 8013a36:	60fb      	str	r3, [r7, #12]
 8013a38:	e04a      	b.n	8013ad0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013a3a:	4b30      	ldr	r3, [pc, #192]	; (8013afc <HAL_RCC_GetSysClockFreq+0x160>)
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	099b      	lsrs	r3, r3, #6
 8013a40:	461a      	mov	r2, r3
 8013a42:	f04f 0300 	mov.w	r3, #0
 8013a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013a4a:	f04f 0100 	mov.w	r1, #0
 8013a4e:	ea02 0400 	and.w	r4, r2, r0
 8013a52:	ea03 0501 	and.w	r5, r3, r1
 8013a56:	4620      	mov	r0, r4
 8013a58:	4629      	mov	r1, r5
 8013a5a:	f04f 0200 	mov.w	r2, #0
 8013a5e:	f04f 0300 	mov.w	r3, #0
 8013a62:	014b      	lsls	r3, r1, #5
 8013a64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013a68:	0142      	lsls	r2, r0, #5
 8013a6a:	4610      	mov	r0, r2
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	1b00      	subs	r0, r0, r4
 8013a70:	eb61 0105 	sbc.w	r1, r1, r5
 8013a74:	f04f 0200 	mov.w	r2, #0
 8013a78:	f04f 0300 	mov.w	r3, #0
 8013a7c:	018b      	lsls	r3, r1, #6
 8013a7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013a82:	0182      	lsls	r2, r0, #6
 8013a84:	1a12      	subs	r2, r2, r0
 8013a86:	eb63 0301 	sbc.w	r3, r3, r1
 8013a8a:	f04f 0000 	mov.w	r0, #0
 8013a8e:	f04f 0100 	mov.w	r1, #0
 8013a92:	00d9      	lsls	r1, r3, #3
 8013a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013a98:	00d0      	lsls	r0, r2, #3
 8013a9a:	4602      	mov	r2, r0
 8013a9c:	460b      	mov	r3, r1
 8013a9e:	1912      	adds	r2, r2, r4
 8013aa0:	eb45 0303 	adc.w	r3, r5, r3
 8013aa4:	f04f 0000 	mov.w	r0, #0
 8013aa8:	f04f 0100 	mov.w	r1, #0
 8013aac:	0299      	lsls	r1, r3, #10
 8013aae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8013ab2:	0290      	lsls	r0, r2, #10
 8013ab4:	4602      	mov	r2, r0
 8013ab6:	460b      	mov	r3, r1
 8013ab8:	4610      	mov	r0, r2
 8013aba:	4619      	mov	r1, r3
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	461a      	mov	r2, r3
 8013ac0:	f04f 0300 	mov.w	r3, #0
 8013ac4:	f7fc fbdc 	bl	8010280 <__aeabi_uldivmod>
 8013ac8:	4602      	mov	r2, r0
 8013aca:	460b      	mov	r3, r1
 8013acc:	4613      	mov	r3, r2
 8013ace:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013ad0:	4b0a      	ldr	r3, [pc, #40]	; (8013afc <HAL_RCC_GetSysClockFreq+0x160>)
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	0c1b      	lsrs	r3, r3, #16
 8013ad6:	f003 0303 	and.w	r3, r3, #3
 8013ada:	3301      	adds	r3, #1
 8013adc:	005b      	lsls	r3, r3, #1
 8013ade:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013ae0:	68fa      	ldr	r2, [r7, #12]
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ae8:	60bb      	str	r3, [r7, #8]
      break;
 8013aea:	e002      	b.n	8013af2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013aec:	4b04      	ldr	r3, [pc, #16]	; (8013b00 <HAL_RCC_GetSysClockFreq+0x164>)
 8013aee:	60bb      	str	r3, [r7, #8]
      break;
 8013af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013af2:	68bb      	ldr	r3, [r7, #8]
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3710      	adds	r7, #16
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bdb0      	pop	{r4, r5, r7, pc}
 8013afc:	40023800 	.word	0x40023800
 8013b00:	00f42400 	.word	0x00f42400
 8013b04:	017d7840 	.word	0x017d7840

08013b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013b08:	b480      	push	{r7}
 8013b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013b0c:	4b03      	ldr	r3, [pc, #12]	; (8013b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	46bd      	mov	sp, r7
 8013b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b18:	4770      	bx	lr
 8013b1a:	bf00      	nop
 8013b1c:	20000000 	.word	0x20000000

08013b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013b24:	f7ff fff0 	bl	8013b08 <HAL_RCC_GetHCLKFreq>
 8013b28:	4602      	mov	r2, r0
 8013b2a:	4b05      	ldr	r3, [pc, #20]	; (8013b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013b2c:	689b      	ldr	r3, [r3, #8]
 8013b2e:	0a9b      	lsrs	r3, r3, #10
 8013b30:	f003 0307 	and.w	r3, r3, #7
 8013b34:	4903      	ldr	r1, [pc, #12]	; (8013b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013b36:	5ccb      	ldrb	r3, [r1, r3]
 8013b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	40023800 	.word	0x40023800
 8013b44:	0802a6a4 	.word	0x0802a6a4

08013b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013b4c:	f7ff ffdc 	bl	8013b08 <HAL_RCC_GetHCLKFreq>
 8013b50:	4602      	mov	r2, r0
 8013b52:	4b05      	ldr	r3, [pc, #20]	; (8013b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013b54:	689b      	ldr	r3, [r3, #8]
 8013b56:	0b5b      	lsrs	r3, r3, #13
 8013b58:	f003 0307 	and.w	r3, r3, #7
 8013b5c:	4903      	ldr	r1, [pc, #12]	; (8013b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8013b5e:	5ccb      	ldrb	r3, [r1, r3]
 8013b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	bd80      	pop	{r7, pc}
 8013b68:	40023800 	.word	0x40023800
 8013b6c:	0802a6a4 	.word	0x0802a6a4

08013b70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013b70:	b480      	push	{r7}
 8013b72:	b083      	sub	sp, #12
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	220f      	movs	r2, #15
 8013b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013b80:	4b12      	ldr	r3, [pc, #72]	; (8013bcc <HAL_RCC_GetClockConfig+0x5c>)
 8013b82:	689b      	ldr	r3, [r3, #8]
 8013b84:	f003 0203 	and.w	r2, r3, #3
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8013b8c:	4b0f      	ldr	r3, [pc, #60]	; (8013bcc <HAL_RCC_GetClockConfig+0x5c>)
 8013b8e:	689b      	ldr	r3, [r3, #8]
 8013b90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8013b98:	4b0c      	ldr	r3, [pc, #48]	; (8013bcc <HAL_RCC_GetClockConfig+0x5c>)
 8013b9a:	689b      	ldr	r3, [r3, #8]
 8013b9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013ba4:	4b09      	ldr	r3, [pc, #36]	; (8013bcc <HAL_RCC_GetClockConfig+0x5c>)
 8013ba6:	689b      	ldr	r3, [r3, #8]
 8013ba8:	08db      	lsrs	r3, r3, #3
 8013baa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013bb2:	4b07      	ldr	r3, [pc, #28]	; (8013bd0 <HAL_RCC_GetClockConfig+0x60>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	f003 0207 	and.w	r2, r3, #7
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	601a      	str	r2, [r3, #0]
}
 8013bbe:	bf00      	nop
 8013bc0:	370c      	adds	r7, #12
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc8:	4770      	bx	lr
 8013bca:	bf00      	nop
 8013bcc:	40023800 	.word	0x40023800
 8013bd0:	40023c00 	.word	0x40023c00

08013bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b086      	sub	sp, #24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8013be0:	2300      	movs	r3, #0
 8013be2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f003 0301 	and.w	r3, r3, #1
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d105      	bne.n	8013bfc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d035      	beq.n	8013c68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8013bfc:	4b62      	ldr	r3, [pc, #392]	; (8013d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8013bfe:	2200      	movs	r2, #0
 8013c00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013c02:	f7fe f827 	bl	8011c54 <HAL_GetTick>
 8013c06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013c08:	e008      	b.n	8013c1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8013c0a:	f7fe f823 	bl	8011c54 <HAL_GetTick>
 8013c0e:	4602      	mov	r2, r0
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	1ad3      	subs	r3, r2, r3
 8013c14:	2b02      	cmp	r3, #2
 8013c16:	d901      	bls.n	8013c1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013c18:	2303      	movs	r3, #3
 8013c1a:	e0b0      	b.n	8013d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013c1c:	4b5b      	ldr	r3, [pc, #364]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d1f0      	bne.n	8013c0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	019a      	lsls	r2, r3, #6
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	689b      	ldr	r3, [r3, #8]
 8013c32:	071b      	lsls	r3, r3, #28
 8013c34:	4955      	ldr	r1, [pc, #340]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013c36:	4313      	orrs	r3, r2
 8013c38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8013c3c:	4b52      	ldr	r3, [pc, #328]	; (8013d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8013c3e:	2201      	movs	r2, #1
 8013c40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013c42:	f7fe f807 	bl	8011c54 <HAL_GetTick>
 8013c46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013c48:	e008      	b.n	8013c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8013c4a:	f7fe f803 	bl	8011c54 <HAL_GetTick>
 8013c4e:	4602      	mov	r2, r0
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	2b02      	cmp	r3, #2
 8013c56:	d901      	bls.n	8013c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013c58:	2303      	movs	r3, #3
 8013c5a:	e090      	b.n	8013d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013c5c:	4b4b      	ldr	r3, [pc, #300]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d0f0      	beq.n	8013c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	f003 0302 	and.w	r3, r3, #2
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f000 8083 	beq.w	8013d7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8013c76:	2300      	movs	r3, #0
 8013c78:	60fb      	str	r3, [r7, #12]
 8013c7a:	4b44      	ldr	r3, [pc, #272]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c7e:	4a43      	ldr	r2, [pc, #268]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c84:	6413      	str	r3, [r2, #64]	; 0x40
 8013c86:	4b41      	ldr	r3, [pc, #260]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c8e:	60fb      	str	r3, [r7, #12]
 8013c90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8013c92:	4b3f      	ldr	r3, [pc, #252]	; (8013d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	4a3e      	ldr	r2, [pc, #248]	; (8013d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8013c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013c9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8013c9e:	f7fd ffd9 	bl	8011c54 <HAL_GetTick>
 8013ca2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8013ca4:	e008      	b.n	8013cb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8013ca6:	f7fd ffd5 	bl	8011c54 <HAL_GetTick>
 8013caa:	4602      	mov	r2, r0
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	1ad3      	subs	r3, r2, r3
 8013cb0:	2b02      	cmp	r3, #2
 8013cb2:	d901      	bls.n	8013cb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8013cb4:	2303      	movs	r3, #3
 8013cb6:	e062      	b.n	8013d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8013cb8:	4b35      	ldr	r3, [pc, #212]	; (8013d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d0f0      	beq.n	8013ca6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013cc4:	4b31      	ldr	r3, [pc, #196]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013ccc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8013cce:	693b      	ldr	r3, [r7, #16]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d02f      	beq.n	8013d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013cdc:	693a      	ldr	r2, [r7, #16]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d028      	beq.n	8013d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013ce2:	4b2a      	ldr	r3, [pc, #168]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013cea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8013cec:	4b29      	ldr	r3, [pc, #164]	; (8013d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8013cee:	2201      	movs	r2, #1
 8013cf0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013cf2:	4b28      	ldr	r3, [pc, #160]	; (8013d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8013cf8:	4a24      	ldr	r2, [pc, #144]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8013cfe:	4b23      	ldr	r3, [pc, #140]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d02:	f003 0301 	and.w	r3, r3, #1
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d114      	bne.n	8013d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8013d0a:	f7fd ffa3 	bl	8011c54 <HAL_GetTick>
 8013d0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013d10:	e00a      	b.n	8013d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013d12:	f7fd ff9f 	bl	8011c54 <HAL_GetTick>
 8013d16:	4602      	mov	r2, r0
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	1ad3      	subs	r3, r2, r3
 8013d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d20:	4293      	cmp	r3, r2
 8013d22:	d901      	bls.n	8013d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8013d24:	2303      	movs	r3, #3
 8013d26:	e02a      	b.n	8013d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013d28:	4b18      	ldr	r3, [pc, #96]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d2c:	f003 0302 	and.w	r3, r3, #2
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d0ee      	beq.n	8013d12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	68db      	ldr	r3, [r3, #12]
 8013d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013d40:	d10d      	bne.n	8013d5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8013d42:	4b12      	ldr	r3, [pc, #72]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d44:	689b      	ldr	r3, [r3, #8]
 8013d46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	68db      	ldr	r3, [r3, #12]
 8013d4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d56:	490d      	ldr	r1, [pc, #52]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d58:	4313      	orrs	r3, r2
 8013d5a:	608b      	str	r3, [r1, #8]
 8013d5c:	e005      	b.n	8013d6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8013d5e:	4b0b      	ldr	r3, [pc, #44]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d60:	689b      	ldr	r3, [r3, #8]
 8013d62:	4a0a      	ldr	r2, [pc, #40]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8013d68:	6093      	str	r3, [r2, #8]
 8013d6a:	4b08      	ldr	r3, [pc, #32]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	68db      	ldr	r3, [r3, #12]
 8013d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d76:	4905      	ldr	r1, [pc, #20]	; (8013d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d78:	4313      	orrs	r3, r2
 8013d7a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8013d7c:	2300      	movs	r3, #0
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3718      	adds	r7, #24
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	42470068 	.word	0x42470068
 8013d8c:	40023800 	.word	0x40023800
 8013d90:	40007000 	.word	0x40007000
 8013d94:	42470e40 	.word	0x42470e40

08013d98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013da0:	2301      	movs	r3, #1
 8013da2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d101      	bne.n	8013dae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8013daa:	2301      	movs	r3, #1
 8013dac:	e066      	b.n	8013e7c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	7f5b      	ldrb	r3, [r3, #29]
 8013db2:	b2db      	uxtb	r3, r3
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d105      	bne.n	8013dc4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	f7fd fb76 	bl	80114b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2202      	movs	r2, #2
 8013dc8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	22ca      	movs	r2, #202	; 0xca
 8013dd0:	625a      	str	r2, [r3, #36]	; 0x24
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	2253      	movs	r2, #83	; 0x53
 8013dd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f000 fa45 	bl	801426a <RTC_EnterInitMode>
 8013de0:	4603      	mov	r3, r0
 8013de2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8013de4:	7bfb      	ldrb	r3, [r7, #15]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d12c      	bne.n	8013e44 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	689b      	ldr	r3, [r3, #8]
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	6812      	ldr	r2, [r2, #0]
 8013df4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013dfc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	6899      	ldr	r1, [r3, #8]
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	685a      	ldr	r2, [r3, #4]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	691b      	ldr	r3, [r3, #16]
 8013e0c:	431a      	orrs	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	695b      	ldr	r3, [r3, #20]
 8013e12:	431a      	orrs	r2, r3
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	430a      	orrs	r2, r1
 8013e1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	687a      	ldr	r2, [r7, #4]
 8013e22:	68d2      	ldr	r2, [r2, #12]
 8013e24:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	6919      	ldr	r1, [r3, #16]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	041a      	lsls	r2, r3, #16
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	430a      	orrs	r2, r1
 8013e38:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 fa4c 	bl	80142d8 <RTC_ExitInitMode>
 8013e40:	4603      	mov	r3, r0
 8013e42:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8013e44:	7bfb      	ldrb	r3, [r7, #15]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d113      	bne.n	8013e72 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013e58:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	699a      	ldr	r2, [r3, #24]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	430a      	orrs	r2, r1
 8013e6a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2201      	movs	r2, #1
 8013e70:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	22ff      	movs	r2, #255	; 0xff
 8013e78:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8013e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3710      	adds	r7, #16
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013e84:	b590      	push	{r4, r7, lr}
 8013e86:	b087      	sub	sp, #28
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	60f8      	str	r0, [r7, #12]
 8013e8c:	60b9      	str	r1, [r7, #8]
 8013e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8013e90:	2300      	movs	r3, #0
 8013e92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	7f1b      	ldrb	r3, [r3, #28]
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d101      	bne.n	8013ea0 <HAL_RTC_SetTime+0x1c>
 8013e9c:	2302      	movs	r3, #2
 8013e9e:	e087      	b.n	8013fb0 <HAL_RTC_SetTime+0x12c>
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	2202      	movs	r2, #2
 8013eaa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d126      	bne.n	8013f00 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	689b      	ldr	r3, [r3, #8]
 8013eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d102      	bne.n	8013ec6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	781b      	ldrb	r3, [r3, #0]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f000 fa29 	bl	8014322 <RTC_ByteToBcd2>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	785b      	ldrb	r3, [r3, #1]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f000 fa22 	bl	8014322 <RTC_ByteToBcd2>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013ee2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	789b      	ldrb	r3, [r3, #2]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f000 fa1a 	bl	8014322 <RTC_ByteToBcd2>
 8013eee:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013ef0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	78db      	ldrb	r3, [r3, #3]
 8013ef8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013efa:	4313      	orrs	r3, r2
 8013efc:	617b      	str	r3, [r7, #20]
 8013efe:	e018      	b.n	8013f32 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	689b      	ldr	r3, [r3, #8]
 8013f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d102      	bne.n	8013f14 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	2200      	movs	r2, #0
 8013f12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	785b      	ldrb	r3, [r3, #1]
 8013f1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013f20:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8013f22:	68ba      	ldr	r2, [r7, #8]
 8013f24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8013f26:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	78db      	ldrb	r3, [r3, #3]
 8013f2c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013f2e:	4313      	orrs	r3, r2
 8013f30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	22ca      	movs	r2, #202	; 0xca
 8013f38:	625a      	str	r2, [r3, #36]	; 0x24
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	2253      	movs	r2, #83	; 0x53
 8013f40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013f42:	68f8      	ldr	r0, [r7, #12]
 8013f44:	f000 f991 	bl	801426a <RTC_EnterInitMode>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8013f4c:	7cfb      	ldrb	r3, [r7, #19]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d120      	bne.n	8013f94 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8013f5c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8013f60:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	689a      	ldr	r2, [r3, #8]
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013f70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	6899      	ldr	r1, [r3, #8]
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	68da      	ldr	r2, [r3, #12]
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	691b      	ldr	r3, [r3, #16]
 8013f80:	431a      	orrs	r2, r3
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	430a      	orrs	r2, r1
 8013f88:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013f8a:	68f8      	ldr	r0, [r7, #12]
 8013f8c:	f000 f9a4 	bl	80142d8 <RTC_ExitInitMode>
 8013f90:	4603      	mov	r3, r0
 8013f92:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8013f94:	7cfb      	ldrb	r3, [r7, #19]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d102      	bne.n	8013fa0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	2201      	movs	r2, #1
 8013f9e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	22ff      	movs	r2, #255	; 0xff
 8013fa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2200      	movs	r2, #0
 8013fac:	771a      	strb	r2, [r3, #28]

  return status;
 8013fae:	7cfb      	ldrb	r3, [r7, #19]
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	371c      	adds	r7, #28
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd90      	pop	{r4, r7, pc}

08013fb8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b086      	sub	sp, #24
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	691b      	ldr	r3, [r3, #16]
 8013fd8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8013fea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8013fee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	0c1b      	lsrs	r3, r3, #16
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ffa:	b2da      	uxtb	r2, r3
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	0a1b      	lsrs	r3, r3, #8
 8014004:	b2db      	uxtb	r3, r3
 8014006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801400a:	b2da      	uxtb	r2, r3
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	b2db      	uxtb	r3, r3
 8014014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014018:	b2da      	uxtb	r2, r3
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	0d9b      	lsrs	r3, r3, #22
 8014022:	b2db      	uxtb	r3, r3
 8014024:	f003 0301 	and.w	r3, r3, #1
 8014028:	b2da      	uxtb	r2, r3
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d11a      	bne.n	801406a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	4618      	mov	r0, r3
 801403a:	f000 f98f 	bl	801435c <RTC_Bcd2ToByte>
 801403e:	4603      	mov	r3, r0
 8014040:	461a      	mov	r2, r3
 8014042:	68bb      	ldr	r3, [r7, #8]
 8014044:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	785b      	ldrb	r3, [r3, #1]
 801404a:	4618      	mov	r0, r3
 801404c:	f000 f986 	bl	801435c <RTC_Bcd2ToByte>
 8014050:	4603      	mov	r3, r0
 8014052:	461a      	mov	r2, r3
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	789b      	ldrb	r3, [r3, #2]
 801405c:	4618      	mov	r0, r3
 801405e:	f000 f97d 	bl	801435c <RTC_Bcd2ToByte>
 8014062:	4603      	mov	r3, r0
 8014064:	461a      	mov	r2, r3
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801406a:	2300      	movs	r3, #0
}
 801406c:	4618      	mov	r0, r3
 801406e:	3718      	adds	r7, #24
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014074:	b590      	push	{r4, r7, lr}
 8014076:	b087      	sub	sp, #28
 8014078:	af00      	add	r7, sp, #0
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014080:	2300      	movs	r3, #0
 8014082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	7f1b      	ldrb	r3, [r3, #28]
 8014088:	2b01      	cmp	r3, #1
 801408a:	d101      	bne.n	8014090 <HAL_RTC_SetDate+0x1c>
 801408c:	2302      	movs	r3, #2
 801408e:	e071      	b.n	8014174 <HAL_RTC_SetDate+0x100>
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2201      	movs	r2, #1
 8014094:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	2202      	movs	r2, #2
 801409a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d10e      	bne.n	80140c0 <HAL_RTC_SetDate+0x4c>
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	785b      	ldrb	r3, [r3, #1]
 80140a6:	f003 0310 	and.w	r3, r3, #16
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d008      	beq.n	80140c0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	785b      	ldrb	r3, [r3, #1]
 80140b2:	f023 0310 	bic.w	r3, r3, #16
 80140b6:	b2db      	uxtb	r3, r3
 80140b8:	330a      	adds	r3, #10
 80140ba:	b2da      	uxtb	r2, r3
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d11c      	bne.n	8014100 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	78db      	ldrb	r3, [r3, #3]
 80140ca:	4618      	mov	r0, r3
 80140cc:	f000 f929 	bl	8014322 <RTC_ByteToBcd2>
 80140d0:	4603      	mov	r3, r0
 80140d2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	785b      	ldrb	r3, [r3, #1]
 80140d8:	4618      	mov	r0, r3
 80140da:	f000 f922 	bl	8014322 <RTC_ByteToBcd2>
 80140de:	4603      	mov	r3, r0
 80140e0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80140e2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	789b      	ldrb	r3, [r3, #2]
 80140e8:	4618      	mov	r0, r3
 80140ea:	f000 f91a 	bl	8014322 <RTC_ByteToBcd2>
 80140ee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80140f0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80140fa:	4313      	orrs	r3, r2
 80140fc:	617b      	str	r3, [r7, #20]
 80140fe:	e00e      	b.n	801411e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	78db      	ldrb	r3, [r3, #3]
 8014104:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	785b      	ldrb	r3, [r3, #1]
 801410a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801410c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801410e:	68ba      	ldr	r2, [r7, #8]
 8014110:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8014112:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801411a:	4313      	orrs	r3, r2
 801411c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	22ca      	movs	r2, #202	; 0xca
 8014124:	625a      	str	r2, [r3, #36]	; 0x24
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2253      	movs	r2, #83	; 0x53
 801412c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801412e:	68f8      	ldr	r0, [r7, #12]
 8014130:	f000 f89b 	bl	801426a <RTC_EnterInitMode>
 8014134:	4603      	mov	r3, r0
 8014136:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8014138:	7cfb      	ldrb	r3, [r7, #19]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d10c      	bne.n	8014158 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	681a      	ldr	r2, [r3, #0]
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014148:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801414c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801414e:	68f8      	ldr	r0, [r7, #12]
 8014150:	f000 f8c2 	bl	80142d8 <RTC_ExitInitMode>
 8014154:	4603      	mov	r3, r0
 8014156:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8014158:	7cfb      	ldrb	r3, [r7, #19]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d102      	bne.n	8014164 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2201      	movs	r2, #1
 8014162:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	22ff      	movs	r2, #255	; 0xff
 801416a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	2200      	movs	r2, #0
 8014170:	771a      	strb	r2, [r3, #28]

  return status;
 8014172:	7cfb      	ldrb	r3, [r7, #19]
}
 8014174:	4618      	mov	r0, r3
 8014176:	371c      	adds	r7, #28
 8014178:	46bd      	mov	sp, r7
 801417a:	bd90      	pop	{r4, r7, pc}

0801417c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b086      	sub	sp, #24
 8014180:	af00      	add	r7, sp, #0
 8014182:	60f8      	str	r0, [r7, #12]
 8014184:	60b9      	str	r1, [r7, #8]
 8014186:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014188:	2300      	movs	r3, #0
 801418a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014196:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801419a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	0c1b      	lsrs	r3, r3, #16
 80141a0:	b2da      	uxtb	r2, r3
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	0a1b      	lsrs	r3, r3, #8
 80141aa:	b2db      	uxtb	r3, r3
 80141ac:	f003 031f 	and.w	r3, r3, #31
 80141b0:	b2da      	uxtb	r2, r3
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80141be:	b2da      	uxtb	r2, r3
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	0b5b      	lsrs	r3, r3, #13
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	f003 0307 	and.w	r3, r3, #7
 80141ce:	b2da      	uxtb	r2, r3
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d11a      	bne.n	8014210 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	78db      	ldrb	r3, [r3, #3]
 80141de:	4618      	mov	r0, r3
 80141e0:	f000 f8bc 	bl	801435c <RTC_Bcd2ToByte>
 80141e4:	4603      	mov	r3, r0
 80141e6:	461a      	mov	r2, r3
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	785b      	ldrb	r3, [r3, #1]
 80141f0:	4618      	mov	r0, r3
 80141f2:	f000 f8b3 	bl	801435c <RTC_Bcd2ToByte>
 80141f6:	4603      	mov	r3, r0
 80141f8:	461a      	mov	r2, r3
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	789b      	ldrb	r3, [r3, #2]
 8014202:	4618      	mov	r0, r3
 8014204:	f000 f8aa 	bl	801435c <RTC_Bcd2ToByte>
 8014208:	4603      	mov	r3, r0
 801420a:	461a      	mov	r2, r3
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8014210:	2300      	movs	r3, #0
}
 8014212:	4618      	mov	r0, r3
 8014214:	3718      	adds	r7, #24
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801421a:	b580      	push	{r7, lr}
 801421c:	b084      	sub	sp, #16
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014222:	2300      	movs	r3, #0
 8014224:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	68da      	ldr	r2, [r3, #12]
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8014234:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014236:	f7fd fd0d 	bl	8011c54 <HAL_GetTick>
 801423a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801423c:	e009      	b.n	8014252 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801423e:	f7fd fd09 	bl	8011c54 <HAL_GetTick>
 8014242:	4602      	mov	r2, r0
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	1ad3      	subs	r3, r2, r3
 8014248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801424c:	d901      	bls.n	8014252 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 801424e:	2303      	movs	r3, #3
 8014250:	e007      	b.n	8014262 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	68db      	ldr	r3, [r3, #12]
 8014258:	f003 0320 	and.w	r3, r3, #32
 801425c:	2b00      	cmp	r3, #0
 801425e:	d0ee      	beq.n	801423e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8014260:	2300      	movs	r3, #0
}
 8014262:	4618      	mov	r0, r3
 8014264:	3710      	adds	r7, #16
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}

0801426a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801426a:	b580      	push	{r7, lr}
 801426c:	b084      	sub	sp, #16
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014272:	2300      	movs	r3, #0
 8014274:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8014276:	2300      	movs	r3, #0
 8014278:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	68db      	ldr	r3, [r3, #12]
 8014280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014284:	2b00      	cmp	r3, #0
 8014286:	d122      	bne.n	80142ce <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	68da      	ldr	r2, [r3, #12]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014296:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014298:	f7fd fcdc 	bl	8011c54 <HAL_GetTick>
 801429c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801429e:	e00c      	b.n	80142ba <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80142a0:	f7fd fcd8 	bl	8011c54 <HAL_GetTick>
 80142a4:	4602      	mov	r2, r0
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80142ae:	d904      	bls.n	80142ba <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2204      	movs	r2, #4
 80142b4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80142b6:	2301      	movs	r3, #1
 80142b8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	68db      	ldr	r3, [r3, #12]
 80142c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d102      	bne.n	80142ce <RTC_EnterInitMode+0x64>
 80142c8:	7bfb      	ldrb	r3, [r7, #15]
 80142ca:	2b01      	cmp	r3, #1
 80142cc:	d1e8      	bne.n	80142a0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80142ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80142d0:	4618      	mov	r0, r3
 80142d2:	3710      	adds	r7, #16
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b084      	sub	sp, #16
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80142e0:	2300      	movs	r3, #0
 80142e2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	68da      	ldr	r2, [r3, #12]
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80142f2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	689b      	ldr	r3, [r3, #8]
 80142fa:	f003 0320 	and.w	r3, r3, #32
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d10a      	bne.n	8014318 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ff ff89 	bl	801421a <HAL_RTC_WaitForSynchro>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d004      	beq.n	8014318 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2204      	movs	r2, #4
 8014312:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8014314:	2301      	movs	r3, #1
 8014316:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8014318:	7bfb      	ldrb	r3, [r7, #15]
}
 801431a:	4618      	mov	r0, r3
 801431c:	3710      	adds	r7, #16
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}

08014322 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8014322:	b480      	push	{r7}
 8014324:	b085      	sub	sp, #20
 8014326:	af00      	add	r7, sp, #0
 8014328:	4603      	mov	r3, r0
 801432a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 801432c:	2300      	movs	r3, #0
 801432e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8014330:	e005      	b.n	801433e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8014332:	7bfb      	ldrb	r3, [r7, #15]
 8014334:	3301      	adds	r3, #1
 8014336:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8014338:	79fb      	ldrb	r3, [r7, #7]
 801433a:	3b0a      	subs	r3, #10
 801433c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 801433e:	79fb      	ldrb	r3, [r7, #7]
 8014340:	2b09      	cmp	r3, #9
 8014342:	d8f6      	bhi.n	8014332 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8014344:	7bfb      	ldrb	r3, [r7, #15]
 8014346:	011b      	lsls	r3, r3, #4
 8014348:	b2da      	uxtb	r2, r3
 801434a:	79fb      	ldrb	r3, [r7, #7]
 801434c:	4313      	orrs	r3, r2
 801434e:	b2db      	uxtb	r3, r3
}
 8014350:	4618      	mov	r0, r3
 8014352:	3714      	adds	r7, #20
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr

0801435c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801435c:	b480      	push	{r7}
 801435e:	b085      	sub	sp, #20
 8014360:	af00      	add	r7, sp, #0
 8014362:	4603      	mov	r3, r0
 8014364:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8014366:	2300      	movs	r3, #0
 8014368:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801436a:	79fb      	ldrb	r3, [r7, #7]
 801436c:	091b      	lsrs	r3, r3, #4
 801436e:	b2db      	uxtb	r3, r3
 8014370:	461a      	mov	r2, r3
 8014372:	0092      	lsls	r2, r2, #2
 8014374:	4413      	add	r3, r2
 8014376:	005b      	lsls	r3, r3, #1
 8014378:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 801437a:	79fb      	ldrb	r3, [r7, #7]
 801437c:	f003 030f 	and.w	r3, r3, #15
 8014380:	b2da      	uxtb	r2, r3
 8014382:	7bfb      	ldrb	r3, [r7, #15]
 8014384:	4413      	add	r3, r2
 8014386:	b2db      	uxtb	r3, r3
}
 8014388:	4618      	mov	r0, r3
 801438a:	3714      	adds	r7, #20
 801438c:	46bd      	mov	sp, r7
 801438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014392:	4770      	bx	lr

08014394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d101      	bne.n	80143a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80143a2:	2301      	movs	r3, #1
 80143a4:	e07b      	b.n	801449e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d108      	bne.n	80143c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	685b      	ldr	r3, [r3, #4]
 80143b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80143b6:	d009      	beq.n	80143cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2200      	movs	r2, #0
 80143bc:	61da      	str	r2, [r3, #28]
 80143be:	e005      	b.n	80143cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2200      	movs	r2, #0
 80143c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2200      	movs	r2, #0
 80143ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2200      	movs	r2, #0
 80143d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d106      	bne.n	80143ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2200      	movs	r2, #0
 80143e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f7fd f88c 	bl	8011504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2202      	movs	r2, #2
 80143f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	681a      	ldr	r2, [r3, #0]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	689b      	ldr	r3, [r3, #8]
 8014410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8014414:	431a      	orrs	r2, r3
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	68db      	ldr	r3, [r3, #12]
 801441a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801441e:	431a      	orrs	r2, r3
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	691b      	ldr	r3, [r3, #16]
 8014424:	f003 0302 	and.w	r3, r3, #2
 8014428:	431a      	orrs	r2, r3
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	695b      	ldr	r3, [r3, #20]
 801442e:	f003 0301 	and.w	r3, r3, #1
 8014432:	431a      	orrs	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	699b      	ldr	r3, [r3, #24]
 8014438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801443c:	431a      	orrs	r2, r3
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	69db      	ldr	r3, [r3, #28]
 8014442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014446:	431a      	orrs	r2, r3
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6a1b      	ldr	r3, [r3, #32]
 801444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014450:	ea42 0103 	orr.w	r1, r2, r3
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	430a      	orrs	r2, r1
 8014462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	699b      	ldr	r3, [r3, #24]
 8014468:	0c1b      	lsrs	r3, r3, #16
 801446a:	f003 0104 	and.w	r1, r3, #4
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014472:	f003 0210 	and.w	r2, r3, #16
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	430a      	orrs	r2, r1
 801447c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	69da      	ldr	r2, [r3, #28]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801448c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2200      	movs	r2, #0
 8014492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2201      	movs	r2, #1
 8014498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801449c:	2300      	movs	r3, #0
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3708      	adds	r7, #8
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}

080144a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80144a6:	b580      	push	{r7, lr}
 80144a8:	b088      	sub	sp, #32
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	60f8      	str	r0, [r7, #12]
 80144ae:	60b9      	str	r1, [r7, #8]
 80144b0:	603b      	str	r3, [r7, #0]
 80144b2:	4613      	mov	r3, r2
 80144b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80144b6:	2300      	movs	r3, #0
 80144b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80144c0:	2b01      	cmp	r3, #1
 80144c2:	d101      	bne.n	80144c8 <HAL_SPI_Transmit+0x22>
 80144c4:	2302      	movs	r3, #2
 80144c6:	e126      	b.n	8014716 <HAL_SPI_Transmit+0x270>
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	2201      	movs	r2, #1
 80144cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80144d0:	f7fd fbc0 	bl	8011c54 <HAL_GetTick>
 80144d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80144d6:	88fb      	ldrh	r3, [r7, #6]
 80144d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80144e0:	b2db      	uxtb	r3, r3
 80144e2:	2b01      	cmp	r3, #1
 80144e4:	d002      	beq.n	80144ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80144e6:	2302      	movs	r3, #2
 80144e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80144ea:	e10b      	b.n	8014704 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d002      	beq.n	80144f8 <HAL_SPI_Transmit+0x52>
 80144f2:	88fb      	ldrh	r3, [r7, #6]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d102      	bne.n	80144fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80144f8:	2301      	movs	r3, #1
 80144fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80144fc:	e102      	b.n	8014704 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2203      	movs	r2, #3
 8014502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2200      	movs	r2, #0
 801450a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	68ba      	ldr	r2, [r7, #8]
 8014510:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	88fa      	ldrh	r2, [r7, #6]
 8014516:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	88fa      	ldrh	r2, [r7, #6]
 801451c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	2200      	movs	r2, #0
 8014522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	2200      	movs	r2, #0
 8014528:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	2200      	movs	r2, #0
 801452e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	2200      	movs	r2, #0
 8014534:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	2200      	movs	r2, #0
 801453a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	689b      	ldr	r3, [r3, #8]
 8014540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014544:	d10f      	bne.n	8014566 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	681a      	ldr	r2, [r3, #0]
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014554:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014564:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014570:	2b40      	cmp	r3, #64	; 0x40
 8014572:	d007      	beq.n	8014584 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	681a      	ldr	r2, [r3, #0]
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	68db      	ldr	r3, [r3, #12]
 8014588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801458c:	d14b      	bne.n	8014626 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d002      	beq.n	801459c <HAL_SPI_Transmit+0xf6>
 8014596:	8afb      	ldrh	r3, [r7, #22]
 8014598:	2b01      	cmp	r3, #1
 801459a:	d13e      	bne.n	801461a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145a0:	881a      	ldrh	r2, [r3, #0]
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145ac:	1c9a      	adds	r2, r3, #2
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	3b01      	subs	r3, #1
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80145c0:	e02b      	b.n	801461a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	689b      	ldr	r3, [r3, #8]
 80145c8:	f003 0302 	and.w	r3, r3, #2
 80145cc:	2b02      	cmp	r3, #2
 80145ce:	d112      	bne.n	80145f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145d4:	881a      	ldrh	r2, [r3, #0]
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145e0:	1c9a      	adds	r2, r3, #2
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	3b01      	subs	r3, #1
 80145ee:	b29a      	uxth	r2, r3
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80145f4:	e011      	b.n	801461a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80145f6:	f7fd fb2d 	bl	8011c54 <HAL_GetTick>
 80145fa:	4602      	mov	r2, r0
 80145fc:	69bb      	ldr	r3, [r7, #24]
 80145fe:	1ad3      	subs	r3, r2, r3
 8014600:	683a      	ldr	r2, [r7, #0]
 8014602:	429a      	cmp	r2, r3
 8014604:	d803      	bhi.n	801460e <HAL_SPI_Transmit+0x168>
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801460c:	d102      	bne.n	8014614 <HAL_SPI_Transmit+0x16e>
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d102      	bne.n	801461a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8014614:	2303      	movs	r3, #3
 8014616:	77fb      	strb	r3, [r7, #31]
          goto error;
 8014618:	e074      	b.n	8014704 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801461e:	b29b      	uxth	r3, r3
 8014620:	2b00      	cmp	r3, #0
 8014622:	d1ce      	bne.n	80145c2 <HAL_SPI_Transmit+0x11c>
 8014624:	e04c      	b.n	80146c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d002      	beq.n	8014634 <HAL_SPI_Transmit+0x18e>
 801462e:	8afb      	ldrh	r3, [r7, #22]
 8014630:	2b01      	cmp	r3, #1
 8014632:	d140      	bne.n	80146b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	330c      	adds	r3, #12
 801463e:	7812      	ldrb	r2, [r2, #0]
 8014640:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014646:	1c5a      	adds	r2, r3, #1
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014650:	b29b      	uxth	r3, r3
 8014652:	3b01      	subs	r3, #1
 8014654:	b29a      	uxth	r2, r3
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801465a:	e02c      	b.n	80146b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	689b      	ldr	r3, [r3, #8]
 8014662:	f003 0302 	and.w	r3, r3, #2
 8014666:	2b02      	cmp	r3, #2
 8014668:	d113      	bne.n	8014692 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	330c      	adds	r3, #12
 8014674:	7812      	ldrb	r2, [r2, #0]
 8014676:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801467c:	1c5a      	adds	r2, r3, #1
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014686:	b29b      	uxth	r3, r3
 8014688:	3b01      	subs	r3, #1
 801468a:	b29a      	uxth	r2, r3
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	86da      	strh	r2, [r3, #54]	; 0x36
 8014690:	e011      	b.n	80146b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014692:	f7fd fadf 	bl	8011c54 <HAL_GetTick>
 8014696:	4602      	mov	r2, r0
 8014698:	69bb      	ldr	r3, [r7, #24]
 801469a:	1ad3      	subs	r3, r2, r3
 801469c:	683a      	ldr	r2, [r7, #0]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d803      	bhi.n	80146aa <HAL_SPI_Transmit+0x204>
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146a8:	d102      	bne.n	80146b0 <HAL_SPI_Transmit+0x20a>
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d102      	bne.n	80146b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80146b0:	2303      	movs	r3, #3
 80146b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80146b4:	e026      	b.n	8014704 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d1cd      	bne.n	801465c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80146c0:	69ba      	ldr	r2, [r7, #24]
 80146c2:	6839      	ldr	r1, [r7, #0]
 80146c4:	68f8      	ldr	r0, [r7, #12]
 80146c6:	f000 fbcb 	bl	8014e60 <SPI_EndRxTxTransaction>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d002      	beq.n	80146d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	2220      	movs	r2, #32
 80146d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	689b      	ldr	r3, [r3, #8]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d10a      	bne.n	80146f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80146de:	2300      	movs	r3, #0
 80146e0:	613b      	str	r3, [r7, #16]
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	613b      	str	r3, [r7, #16]
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	689b      	ldr	r3, [r3, #8]
 80146f0:	613b      	str	r3, [r7, #16]
 80146f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d002      	beq.n	8014702 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80146fc:	2301      	movs	r3, #1
 80146fe:	77fb      	strb	r3, [r7, #31]
 8014700:	e000      	b.n	8014704 <HAL_SPI_Transmit+0x25e>
  }

error:
 8014702:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	2201      	movs	r2, #1
 8014708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	2200      	movs	r2, #0
 8014710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014714:	7ffb      	ldrb	r3, [r7, #31]
}
 8014716:	4618      	mov	r0, r3
 8014718:	3720      	adds	r7, #32
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}

0801471e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801471e:	b580      	push	{r7, lr}
 8014720:	b088      	sub	sp, #32
 8014722:	af02      	add	r7, sp, #8
 8014724:	60f8      	str	r0, [r7, #12]
 8014726:	60b9      	str	r1, [r7, #8]
 8014728:	603b      	str	r3, [r7, #0]
 801472a:	4613      	mov	r3, r2
 801472c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801472e:	2300      	movs	r3, #0
 8014730:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	685b      	ldr	r3, [r3, #4]
 8014736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801473a:	d112      	bne.n	8014762 <HAL_SPI_Receive+0x44>
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	689b      	ldr	r3, [r3, #8]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d10e      	bne.n	8014762 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	2204      	movs	r2, #4
 8014748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801474c:	88fa      	ldrh	r2, [r7, #6]
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	9300      	str	r3, [sp, #0]
 8014752:	4613      	mov	r3, r2
 8014754:	68ba      	ldr	r2, [r7, #8]
 8014756:	68b9      	ldr	r1, [r7, #8]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f000 f8f1 	bl	8014940 <HAL_SPI_TransmitReceive>
 801475e:	4603      	mov	r3, r0
 8014760:	e0ea      	b.n	8014938 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014768:	2b01      	cmp	r3, #1
 801476a:	d101      	bne.n	8014770 <HAL_SPI_Receive+0x52>
 801476c:	2302      	movs	r3, #2
 801476e:	e0e3      	b.n	8014938 <HAL_SPI_Receive+0x21a>
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2201      	movs	r2, #1
 8014774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014778:	f7fd fa6c 	bl	8011c54 <HAL_GetTick>
 801477c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014784:	b2db      	uxtb	r3, r3
 8014786:	2b01      	cmp	r3, #1
 8014788:	d002      	beq.n	8014790 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801478a:	2302      	movs	r3, #2
 801478c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801478e:	e0ca      	b.n	8014926 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d002      	beq.n	801479c <HAL_SPI_Receive+0x7e>
 8014796:	88fb      	ldrh	r3, [r7, #6]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d102      	bne.n	80147a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801479c:	2301      	movs	r3, #1
 801479e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80147a0:	e0c1      	b.n	8014926 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	2204      	movs	r2, #4
 80147a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2200      	movs	r2, #0
 80147ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	68ba      	ldr	r2, [r7, #8]
 80147b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	88fa      	ldrh	r2, [r7, #6]
 80147ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	88fa      	ldrh	r2, [r7, #6]
 80147c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2200      	movs	r2, #0
 80147c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2200      	movs	r2, #0
 80147cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	2200      	movs	r2, #0
 80147d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2200      	movs	r2, #0
 80147d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2200      	movs	r2, #0
 80147de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	689b      	ldr	r3, [r3, #8]
 80147e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80147e8:	d10f      	bne.n	801480a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80147f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	681a      	ldr	r2, [r3, #0]
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014808:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014814:	2b40      	cmp	r3, #64	; 0x40
 8014816:	d007      	beq.n	8014828 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	681a      	ldr	r2, [r3, #0]
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014826:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	68db      	ldr	r3, [r3, #12]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d162      	bne.n	80148f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8014830:	e02e      	b.n	8014890 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	689b      	ldr	r3, [r3, #8]
 8014838:	f003 0301 	and.w	r3, r3, #1
 801483c:	2b01      	cmp	r3, #1
 801483e:	d115      	bne.n	801486c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	f103 020c 	add.w	r2, r3, #12
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801484c:	7812      	ldrb	r2, [r2, #0]
 801484e:	b2d2      	uxtb	r2, r2
 8014850:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014856:	1c5a      	adds	r2, r3, #1
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014860:	b29b      	uxth	r3, r3
 8014862:	3b01      	subs	r3, #1
 8014864:	b29a      	uxth	r2, r3
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	87da      	strh	r2, [r3, #62]	; 0x3e
 801486a:	e011      	b.n	8014890 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801486c:	f7fd f9f2 	bl	8011c54 <HAL_GetTick>
 8014870:	4602      	mov	r2, r0
 8014872:	693b      	ldr	r3, [r7, #16]
 8014874:	1ad3      	subs	r3, r2, r3
 8014876:	683a      	ldr	r2, [r7, #0]
 8014878:	429a      	cmp	r2, r3
 801487a:	d803      	bhi.n	8014884 <HAL_SPI_Receive+0x166>
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014882:	d102      	bne.n	801488a <HAL_SPI_Receive+0x16c>
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d102      	bne.n	8014890 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801488a:	2303      	movs	r3, #3
 801488c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801488e:	e04a      	b.n	8014926 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014894:	b29b      	uxth	r3, r3
 8014896:	2b00      	cmp	r3, #0
 8014898:	d1cb      	bne.n	8014832 <HAL_SPI_Receive+0x114>
 801489a:	e031      	b.n	8014900 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	689b      	ldr	r3, [r3, #8]
 80148a2:	f003 0301 	and.w	r3, r3, #1
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d113      	bne.n	80148d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	68da      	ldr	r2, [r3, #12]
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148b4:	b292      	uxth	r2, r2
 80148b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148bc:	1c9a      	adds	r2, r3, #2
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	3b01      	subs	r3, #1
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80148d0:	e011      	b.n	80148f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80148d2:	f7fd f9bf 	bl	8011c54 <HAL_GetTick>
 80148d6:	4602      	mov	r2, r0
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	1ad3      	subs	r3, r2, r3
 80148dc:	683a      	ldr	r2, [r7, #0]
 80148de:	429a      	cmp	r2, r3
 80148e0:	d803      	bhi.n	80148ea <HAL_SPI_Receive+0x1cc>
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148e8:	d102      	bne.n	80148f0 <HAL_SPI_Receive+0x1d2>
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d102      	bne.n	80148f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80148f0:	2303      	movs	r3, #3
 80148f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80148f4:	e017      	b.n	8014926 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d1cd      	bne.n	801489c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014900:	693a      	ldr	r2, [r7, #16]
 8014902:	6839      	ldr	r1, [r7, #0]
 8014904:	68f8      	ldr	r0, [r7, #12]
 8014906:	f000 fa45 	bl	8014d94 <SPI_EndRxTransaction>
 801490a:	4603      	mov	r3, r0
 801490c:	2b00      	cmp	r3, #0
 801490e:	d002      	beq.n	8014916 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	2220      	movs	r2, #32
 8014914:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801491a:	2b00      	cmp	r3, #0
 801491c:	d002      	beq.n	8014924 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801491e:	2301      	movs	r3, #1
 8014920:	75fb      	strb	r3, [r7, #23]
 8014922:	e000      	b.n	8014926 <HAL_SPI_Receive+0x208>
  }

error :
 8014924:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	2201      	movs	r2, #1
 801492a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2200      	movs	r2, #0
 8014932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014936:	7dfb      	ldrb	r3, [r7, #23]
}
 8014938:	4618      	mov	r0, r3
 801493a:	3718      	adds	r7, #24
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}

08014940 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b08c      	sub	sp, #48	; 0x30
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
 801494c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801494e:	2301      	movs	r3, #1
 8014950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8014952:	2300      	movs	r3, #0
 8014954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801495e:	2b01      	cmp	r3, #1
 8014960:	d101      	bne.n	8014966 <HAL_SPI_TransmitReceive+0x26>
 8014962:	2302      	movs	r3, #2
 8014964:	e18a      	b.n	8014c7c <HAL_SPI_TransmitReceive+0x33c>
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2201      	movs	r2, #1
 801496a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801496e:	f7fd f971 	bl	8011c54 <HAL_GetTick>
 8014972:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	685b      	ldr	r3, [r3, #4]
 8014982:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8014984:	887b      	ldrh	r3, [r7, #2]
 8014986:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801498c:	2b01      	cmp	r3, #1
 801498e:	d00f      	beq.n	80149b0 <HAL_SPI_TransmitReceive+0x70>
 8014990:	69fb      	ldr	r3, [r7, #28]
 8014992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014996:	d107      	bne.n	80149a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	689b      	ldr	r3, [r3, #8]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d103      	bne.n	80149a8 <HAL_SPI_TransmitReceive+0x68>
 80149a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149a4:	2b04      	cmp	r3, #4
 80149a6:	d003      	beq.n	80149b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80149a8:	2302      	movs	r3, #2
 80149aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80149ae:	e15b      	b.n	8014c68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d005      	beq.n	80149c2 <HAL_SPI_TransmitReceive+0x82>
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d002      	beq.n	80149c2 <HAL_SPI_TransmitReceive+0x82>
 80149bc:	887b      	ldrh	r3, [r7, #2]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d103      	bne.n	80149ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80149c2:	2301      	movs	r3, #1
 80149c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80149c8:	e14e      	b.n	8014c68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	2b04      	cmp	r3, #4
 80149d4:	d003      	beq.n	80149de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2205      	movs	r2, #5
 80149da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	2200      	movs	r2, #0
 80149e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	687a      	ldr	r2, [r7, #4]
 80149e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	887a      	ldrh	r2, [r7, #2]
 80149ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	887a      	ldrh	r2, [r7, #2]
 80149f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	68ba      	ldr	r2, [r7, #8]
 80149fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	887a      	ldrh	r2, [r7, #2]
 8014a00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	887a      	ldrh	r2, [r7, #2]
 8014a06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	2200      	movs	r2, #0
 8014a12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a1e:	2b40      	cmp	r3, #64	; 0x40
 8014a20:	d007      	beq.n	8014a32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014a30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	68db      	ldr	r3, [r3, #12]
 8014a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a3a:	d178      	bne.n	8014b2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <HAL_SPI_TransmitReceive+0x10a>
 8014a44:	8b7b      	ldrh	r3, [r7, #26]
 8014a46:	2b01      	cmp	r3, #1
 8014a48:	d166      	bne.n	8014b18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a4e:	881a      	ldrh	r2, [r3, #0]
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a5a:	1c9a      	adds	r2, r3, #2
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a64:	b29b      	uxth	r3, r3
 8014a66:	3b01      	subs	r3, #1
 8014a68:	b29a      	uxth	r2, r3
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014a6e:	e053      	b.n	8014b18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	689b      	ldr	r3, [r3, #8]
 8014a76:	f003 0302 	and.w	r3, r3, #2
 8014a7a:	2b02      	cmp	r3, #2
 8014a7c:	d11b      	bne.n	8014ab6 <HAL_SPI_TransmitReceive+0x176>
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a82:	b29b      	uxth	r3, r3
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d016      	beq.n	8014ab6 <HAL_SPI_TransmitReceive+0x176>
 8014a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a8a:	2b01      	cmp	r3, #1
 8014a8c:	d113      	bne.n	8014ab6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a92:	881a      	ldrh	r2, [r3, #0]
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a9e:	1c9a      	adds	r2, r3, #2
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	3b01      	subs	r3, #1
 8014aac:	b29a      	uxth	r2, r3
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	689b      	ldr	r3, [r3, #8]
 8014abc:	f003 0301 	and.w	r3, r3, #1
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	d119      	bne.n	8014af8 <HAL_SPI_TransmitReceive+0x1b8>
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ac8:	b29b      	uxth	r3, r3
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d014      	beq.n	8014af8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	68da      	ldr	r2, [r3, #12]
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ad8:	b292      	uxth	r2, r2
 8014ada:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ae0:	1c9a      	adds	r2, r3, #2
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014aea:	b29b      	uxth	r3, r3
 8014aec:	3b01      	subs	r3, #1
 8014aee:	b29a      	uxth	r2, r3
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014af4:	2301      	movs	r3, #1
 8014af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014af8:	f7fd f8ac 	bl	8011c54 <HAL_GetTick>
 8014afc:	4602      	mov	r2, r0
 8014afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b00:	1ad3      	subs	r3, r2, r3
 8014b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d807      	bhi.n	8014b18 <HAL_SPI_TransmitReceive+0x1d8>
 8014b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b0e:	d003      	beq.n	8014b18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8014b10:	2303      	movs	r3, #3
 8014b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8014b16:	e0a7      	b.n	8014c68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d1a6      	bne.n	8014a70 <HAL_SPI_TransmitReceive+0x130>
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d1a1      	bne.n	8014a70 <HAL_SPI_TransmitReceive+0x130>
 8014b2c:	e07c      	b.n	8014c28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d002      	beq.n	8014b3c <HAL_SPI_TransmitReceive+0x1fc>
 8014b36:	8b7b      	ldrh	r3, [r7, #26]
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d16b      	bne.n	8014c14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	330c      	adds	r3, #12
 8014b46:	7812      	ldrb	r2, [r2, #0]
 8014b48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b4e:	1c5a      	adds	r2, r3, #1
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014b58:	b29b      	uxth	r3, r3
 8014b5a:	3b01      	subs	r3, #1
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014b62:	e057      	b.n	8014c14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	689b      	ldr	r3, [r3, #8]
 8014b6a:	f003 0302 	and.w	r3, r3, #2
 8014b6e:	2b02      	cmp	r3, #2
 8014b70:	d11c      	bne.n	8014bac <HAL_SPI_TransmitReceive+0x26c>
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014b76:	b29b      	uxth	r3, r3
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d017      	beq.n	8014bac <HAL_SPI_TransmitReceive+0x26c>
 8014b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	d114      	bne.n	8014bac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	330c      	adds	r3, #12
 8014b8c:	7812      	ldrb	r2, [r2, #0]
 8014b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b94:	1c5a      	adds	r2, r3, #1
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	3b01      	subs	r3, #1
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	689b      	ldr	r3, [r3, #8]
 8014bb2:	f003 0301 	and.w	r3, r3, #1
 8014bb6:	2b01      	cmp	r3, #1
 8014bb8:	d119      	bne.n	8014bee <HAL_SPI_TransmitReceive+0x2ae>
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d014      	beq.n	8014bee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	68da      	ldr	r2, [r3, #12]
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bce:	b2d2      	uxtb	r2, r2
 8014bd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bd6:	1c5a      	adds	r2, r3, #1
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014be0:	b29b      	uxth	r3, r3
 8014be2:	3b01      	subs	r3, #1
 8014be4:	b29a      	uxth	r2, r3
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014bea:	2301      	movs	r3, #1
 8014bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014bee:	f7fd f831 	bl	8011c54 <HAL_GetTick>
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf6:	1ad3      	subs	r3, r2, r3
 8014bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d803      	bhi.n	8014c06 <HAL_SPI_TransmitReceive+0x2c6>
 8014bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c04:	d102      	bne.n	8014c0c <HAL_SPI_TransmitReceive+0x2cc>
 8014c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d103      	bne.n	8014c14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8014c0c:	2303      	movs	r3, #3
 8014c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8014c12:	e029      	b.n	8014c68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d1a2      	bne.n	8014b64 <HAL_SPI_TransmitReceive+0x224>
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c22:	b29b      	uxth	r3, r3
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d19d      	bne.n	8014b64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c2c:	68f8      	ldr	r0, [r7, #12]
 8014c2e:	f000 f917 	bl	8014e60 <SPI_EndRxTxTransaction>
 8014c32:	4603      	mov	r3, r0
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d006      	beq.n	8014c46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2220      	movs	r2, #32
 8014c42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8014c44:	e010      	b.n	8014c68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	689b      	ldr	r3, [r3, #8]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d10b      	bne.n	8014c66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014c4e:	2300      	movs	r3, #0
 8014c50:	617b      	str	r3, [r7, #20]
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	617b      	str	r3, [r7, #20]
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	689b      	ldr	r3, [r3, #8]
 8014c60:	617b      	str	r3, [r7, #20]
 8014c62:	697b      	ldr	r3, [r7, #20]
 8014c64:	e000      	b.n	8014c68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8014c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	2200      	movs	r2, #0
 8014c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014c78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3730      	adds	r7, #48	; 0x30
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b088      	sub	sp, #32
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	603b      	str	r3, [r7, #0]
 8014c90:	4613      	mov	r3, r2
 8014c92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014c94:	f7fc ffde 	bl	8011c54 <HAL_GetTick>
 8014c98:	4602      	mov	r2, r0
 8014c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c9c:	1a9b      	subs	r3, r3, r2
 8014c9e:	683a      	ldr	r2, [r7, #0]
 8014ca0:	4413      	add	r3, r2
 8014ca2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014ca4:	f7fc ffd6 	bl	8011c54 <HAL_GetTick>
 8014ca8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014caa:	4b39      	ldr	r3, [pc, #228]	; (8014d90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	015b      	lsls	r3, r3, #5
 8014cb0:	0d1b      	lsrs	r3, r3, #20
 8014cb2:	69fa      	ldr	r2, [r7, #28]
 8014cb4:	fb02 f303 	mul.w	r3, r2, r3
 8014cb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014cba:	e054      	b.n	8014d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cc2:	d050      	beq.n	8014d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014cc4:	f7fc ffc6 	bl	8011c54 <HAL_GetTick>
 8014cc8:	4602      	mov	r2, r0
 8014cca:	69bb      	ldr	r3, [r7, #24]
 8014ccc:	1ad3      	subs	r3, r2, r3
 8014cce:	69fa      	ldr	r2, [r7, #28]
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d902      	bls.n	8014cda <SPI_WaitFlagStateUntilTimeout+0x56>
 8014cd4:	69fb      	ldr	r3, [r7, #28]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d13d      	bne.n	8014d56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	685a      	ldr	r2, [r3, #4]
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014ce8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014cf2:	d111      	bne.n	8014d18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	689b      	ldr	r3, [r3, #8]
 8014cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014cfc:	d004      	beq.n	8014d08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	689b      	ldr	r3, [r3, #8]
 8014d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d06:	d107      	bne.n	8014d18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	681a      	ldr	r2, [r3, #0]
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014d16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d20:	d10f      	bne.n	8014d42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	681a      	ldr	r2, [r3, #0]
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014d30:	601a      	str	r2, [r3, #0]
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014d40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2201      	movs	r2, #1
 8014d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014d52:	2303      	movs	r3, #3
 8014d54:	e017      	b.n	8014d86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d101      	bne.n	8014d60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	3b01      	subs	r3, #1
 8014d64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	689a      	ldr	r2, [r3, #8]
 8014d6c:	68bb      	ldr	r3, [r7, #8]
 8014d6e:	4013      	ands	r3, r2
 8014d70:	68ba      	ldr	r2, [r7, #8]
 8014d72:	429a      	cmp	r2, r3
 8014d74:	bf0c      	ite	eq
 8014d76:	2301      	moveq	r3, #1
 8014d78:	2300      	movne	r3, #0
 8014d7a:	b2db      	uxtb	r3, r3
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	79fb      	ldrb	r3, [r7, #7]
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d19b      	bne.n	8014cbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014d84:	2300      	movs	r3, #0
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3720      	adds	r7, #32
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	20000000 	.word	0x20000000

08014d94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b086      	sub	sp, #24
 8014d98:	af02      	add	r7, sp, #8
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	60b9      	str	r1, [r7, #8]
 8014d9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014da8:	d111      	bne.n	8014dce <SPI_EndRxTransaction+0x3a>
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	689b      	ldr	r3, [r3, #8]
 8014dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014db2:	d004      	beq.n	8014dbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	689b      	ldr	r3, [r3, #8]
 8014db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014dbc:	d107      	bne.n	8014dce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014dcc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014dd6:	d12a      	bne.n	8014e2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	689b      	ldr	r3, [r3, #8]
 8014ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014de0:	d012      	beq.n	8014e08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	9300      	str	r3, [sp, #0]
 8014de6:	68bb      	ldr	r3, [r7, #8]
 8014de8:	2200      	movs	r2, #0
 8014dea:	2180      	movs	r1, #128	; 0x80
 8014dec:	68f8      	ldr	r0, [r7, #12]
 8014dee:	f7ff ff49 	bl	8014c84 <SPI_WaitFlagStateUntilTimeout>
 8014df2:	4603      	mov	r3, r0
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d02d      	beq.n	8014e54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dfc:	f043 0220 	orr.w	r2, r3, #32
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014e04:	2303      	movs	r3, #3
 8014e06:	e026      	b.n	8014e56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	9300      	str	r3, [sp, #0]
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	2101      	movs	r1, #1
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	f7ff ff36 	bl	8014c84 <SPI_WaitFlagStateUntilTimeout>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d01a      	beq.n	8014e54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e22:	f043 0220 	orr.w	r2, r3, #32
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014e2a:	2303      	movs	r3, #3
 8014e2c:	e013      	b.n	8014e56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	9300      	str	r3, [sp, #0]
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	2200      	movs	r2, #0
 8014e36:	2101      	movs	r1, #1
 8014e38:	68f8      	ldr	r0, [r7, #12]
 8014e3a:	f7ff ff23 	bl	8014c84 <SPI_WaitFlagStateUntilTimeout>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d007      	beq.n	8014e54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e48:	f043 0220 	orr.w	r2, r3, #32
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014e50:	2303      	movs	r3, #3
 8014e52:	e000      	b.n	8014e56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014e54:	2300      	movs	r3, #0
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3710      	adds	r7, #16
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
	...

08014e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b088      	sub	sp, #32
 8014e64:	af02      	add	r7, sp, #8
 8014e66:	60f8      	str	r0, [r7, #12]
 8014e68:	60b9      	str	r1, [r7, #8]
 8014e6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014e6c:	4b1b      	ldr	r3, [pc, #108]	; (8014edc <SPI_EndRxTxTransaction+0x7c>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	4a1b      	ldr	r2, [pc, #108]	; (8014ee0 <SPI_EndRxTxTransaction+0x80>)
 8014e72:	fba2 2303 	umull	r2, r3, r2, r3
 8014e76:	0d5b      	lsrs	r3, r3, #21
 8014e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014e7c:	fb02 f303 	mul.w	r3, r2, r3
 8014e80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014e8a:	d112      	bne.n	8014eb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	9300      	str	r3, [sp, #0]
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	2200      	movs	r2, #0
 8014e94:	2180      	movs	r1, #128	; 0x80
 8014e96:	68f8      	ldr	r0, [r7, #12]
 8014e98:	f7ff fef4 	bl	8014c84 <SPI_WaitFlagStateUntilTimeout>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d016      	beq.n	8014ed0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ea6:	f043 0220 	orr.w	r2, r3, #32
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014eae:	2303      	movs	r3, #3
 8014eb0:	e00f      	b.n	8014ed2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d00a      	beq.n	8014ece <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	3b01      	subs	r3, #1
 8014ebc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	689b      	ldr	r3, [r3, #8]
 8014ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ec8:	2b80      	cmp	r3, #128	; 0x80
 8014eca:	d0f2      	beq.n	8014eb2 <SPI_EndRxTxTransaction+0x52>
 8014ecc:	e000      	b.n	8014ed0 <SPI_EndRxTxTransaction+0x70>
        break;
 8014ece:	bf00      	nop
  }

  return HAL_OK;
 8014ed0:	2300      	movs	r3, #0
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3718      	adds	r7, #24
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	20000000 	.word	0x20000000
 8014ee0:	165e9f81 	.word	0x165e9f81

08014ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d101      	bne.n	8014ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	e041      	b.n	8014f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014efc:	b2db      	uxtb	r3, r3
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d106      	bne.n	8014f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2200      	movs	r2, #0
 8014f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f000 f839 	bl	8014f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	2202      	movs	r2, #2
 8014f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	3304      	adds	r3, #4
 8014f20:	4619      	mov	r1, r3
 8014f22:	4610      	mov	r0, r2
 8014f24:	f000 f9d8 	bl	80152d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2201      	movs	r2, #1
 8014f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2201      	movs	r2, #1
 8014f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2201      	movs	r2, #1
 8014f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2201      	movs	r2, #1
 8014f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2201      	movs	r2, #1
 8014f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2201      	movs	r2, #1
 8014f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014f78:	2300      	movs	r3, #0
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3708      	adds	r7, #8
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}

08014f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8014f82:	b480      	push	{r7}
 8014f84:	b083      	sub	sp, #12
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8014f8a:	bf00      	nop
 8014f8c:	370c      	adds	r7, #12
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f94:	4770      	bx	lr
	...

08014f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b085      	sub	sp, #20
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	2b01      	cmp	r3, #1
 8014faa:	d001      	beq.n	8014fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014fac:	2301      	movs	r3, #1
 8014fae:	e04e      	b.n	801504e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2202      	movs	r2, #2
 8014fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	68da      	ldr	r2, [r3, #12]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	f042 0201 	orr.w	r2, r2, #1
 8014fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	4a23      	ldr	r2, [pc, #140]	; (801505c <HAL_TIM_Base_Start_IT+0xc4>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d022      	beq.n	8015018 <HAL_TIM_Base_Start_IT+0x80>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014fda:	d01d      	beq.n	8015018 <HAL_TIM_Base_Start_IT+0x80>
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4a1f      	ldr	r2, [pc, #124]	; (8015060 <HAL_TIM_Base_Start_IT+0xc8>)
 8014fe2:	4293      	cmp	r3, r2
 8014fe4:	d018      	beq.n	8015018 <HAL_TIM_Base_Start_IT+0x80>
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	4a1e      	ldr	r2, [pc, #120]	; (8015064 <HAL_TIM_Base_Start_IT+0xcc>)
 8014fec:	4293      	cmp	r3, r2
 8014fee:	d013      	beq.n	8015018 <HAL_TIM_Base_Start_IT+0x80>
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	4a1c      	ldr	r2, [pc, #112]	; (8015068 <HAL_TIM_Base_Start_IT+0xd0>)
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	d00e      	beq.n	8015018 <HAL_TIM_Base_Start_IT+0x80>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	4a1b      	ldr	r2, [pc, #108]	; (801506c <HAL_TIM_Base_Start_IT+0xd4>)
 8015000:	4293      	cmp	r3, r2
 8015002:	d009      	beq.n	8015018 <HAL_TIM_Base_Start_IT+0x80>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	4a19      	ldr	r2, [pc, #100]	; (8015070 <HAL_TIM_Base_Start_IT+0xd8>)
 801500a:	4293      	cmp	r3, r2
 801500c:	d004      	beq.n	8015018 <HAL_TIM_Base_Start_IT+0x80>
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	4a18      	ldr	r2, [pc, #96]	; (8015074 <HAL_TIM_Base_Start_IT+0xdc>)
 8015014:	4293      	cmp	r3, r2
 8015016:	d111      	bne.n	801503c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	689b      	ldr	r3, [r3, #8]
 801501e:	f003 0307 	and.w	r3, r3, #7
 8015022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2b06      	cmp	r3, #6
 8015028:	d010      	beq.n	801504c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	681a      	ldr	r2, [r3, #0]
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	f042 0201 	orr.w	r2, r2, #1
 8015038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801503a:	e007      	b.n	801504c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	681a      	ldr	r2, [r3, #0]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	f042 0201 	orr.w	r2, r2, #1
 801504a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801504c:	2300      	movs	r3, #0
}
 801504e:	4618      	mov	r0, r3
 8015050:	3714      	adds	r7, #20
 8015052:	46bd      	mov	sp, r7
 8015054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015058:	4770      	bx	lr
 801505a:	bf00      	nop
 801505c:	40010000 	.word	0x40010000
 8015060:	40000400 	.word	0x40000400
 8015064:	40000800 	.word	0x40000800
 8015068:	40000c00 	.word	0x40000c00
 801506c:	40010400 	.word	0x40010400
 8015070:	40014000 	.word	0x40014000
 8015074:	40001800 	.word	0x40001800

08015078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b082      	sub	sp, #8
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	691b      	ldr	r3, [r3, #16]
 8015086:	f003 0302 	and.w	r3, r3, #2
 801508a:	2b02      	cmp	r3, #2
 801508c:	d122      	bne.n	80150d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	68db      	ldr	r3, [r3, #12]
 8015094:	f003 0302 	and.w	r3, r3, #2
 8015098:	2b02      	cmp	r3, #2
 801509a:	d11b      	bne.n	80150d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	f06f 0202 	mvn.w	r2, #2
 80150a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2201      	movs	r2, #1
 80150aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	699b      	ldr	r3, [r3, #24]
 80150b2:	f003 0303 	and.w	r3, r3, #3
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d003      	beq.n	80150c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f000 f8ee 	bl	801529c <HAL_TIM_IC_CaptureCallback>
 80150c0:	e005      	b.n	80150ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80150c2:	6878      	ldr	r0, [r7, #4]
 80150c4:	f000 f8e0 	bl	8015288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f000 f8f1 	bl	80152b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	2200      	movs	r2, #0
 80150d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	691b      	ldr	r3, [r3, #16]
 80150da:	f003 0304 	and.w	r3, r3, #4
 80150de:	2b04      	cmp	r3, #4
 80150e0:	d122      	bne.n	8015128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	68db      	ldr	r3, [r3, #12]
 80150e8:	f003 0304 	and.w	r3, r3, #4
 80150ec:	2b04      	cmp	r3, #4
 80150ee:	d11b      	bne.n	8015128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	f06f 0204 	mvn.w	r2, #4
 80150f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2202      	movs	r2, #2
 80150fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	699b      	ldr	r3, [r3, #24]
 8015106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801510a:	2b00      	cmp	r3, #0
 801510c:	d003      	beq.n	8015116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f000 f8c4 	bl	801529c <HAL_TIM_IC_CaptureCallback>
 8015114:	e005      	b.n	8015122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015116:	6878      	ldr	r0, [r7, #4]
 8015118:	f000 f8b6 	bl	8015288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f000 f8c7 	bl	80152b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	2200      	movs	r2, #0
 8015126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	691b      	ldr	r3, [r3, #16]
 801512e:	f003 0308 	and.w	r3, r3, #8
 8015132:	2b08      	cmp	r3, #8
 8015134:	d122      	bne.n	801517c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	68db      	ldr	r3, [r3, #12]
 801513c:	f003 0308 	and.w	r3, r3, #8
 8015140:	2b08      	cmp	r3, #8
 8015142:	d11b      	bne.n	801517c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	f06f 0208 	mvn.w	r2, #8
 801514c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	2204      	movs	r2, #4
 8015152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	69db      	ldr	r3, [r3, #28]
 801515a:	f003 0303 	and.w	r3, r3, #3
 801515e:	2b00      	cmp	r3, #0
 8015160:	d003      	beq.n	801516a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f000 f89a 	bl	801529c <HAL_TIM_IC_CaptureCallback>
 8015168:	e005      	b.n	8015176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f000 f88c 	bl	8015288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f000 f89d 	bl	80152b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2200      	movs	r2, #0
 801517a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	691b      	ldr	r3, [r3, #16]
 8015182:	f003 0310 	and.w	r3, r3, #16
 8015186:	2b10      	cmp	r3, #16
 8015188:	d122      	bne.n	80151d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	f003 0310 	and.w	r3, r3, #16
 8015194:	2b10      	cmp	r3, #16
 8015196:	d11b      	bne.n	80151d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	f06f 0210 	mvn.w	r2, #16
 80151a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2208      	movs	r2, #8
 80151a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	69db      	ldr	r3, [r3, #28]
 80151ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d003      	beq.n	80151be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f000 f870 	bl	801529c <HAL_TIM_IC_CaptureCallback>
 80151bc:	e005      	b.n	80151ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f000 f862 	bl	8015288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 f873 	bl	80152b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2200      	movs	r2, #0
 80151ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	691b      	ldr	r3, [r3, #16]
 80151d6:	f003 0301 	and.w	r3, r3, #1
 80151da:	2b01      	cmp	r3, #1
 80151dc:	d10e      	bne.n	80151fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	68db      	ldr	r3, [r3, #12]
 80151e4:	f003 0301 	and.w	r3, r3, #1
 80151e8:	2b01      	cmp	r3, #1
 80151ea:	d107      	bne.n	80151fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	f06f 0201 	mvn.w	r2, #1
 80151f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	f7fc f8d4 	bl	80113a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	691b      	ldr	r3, [r3, #16]
 8015202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015206:	2b80      	cmp	r3, #128	; 0x80
 8015208:	d10e      	bne.n	8015228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	68db      	ldr	r3, [r3, #12]
 8015210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015214:	2b80      	cmp	r3, #128	; 0x80
 8015216:	d107      	bne.n	8015228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f000 f902 	bl	801542c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	691b      	ldr	r3, [r3, #16]
 801522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015232:	2b40      	cmp	r3, #64	; 0x40
 8015234:	d10e      	bne.n	8015254 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	68db      	ldr	r3, [r3, #12]
 801523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015240:	2b40      	cmp	r3, #64	; 0x40
 8015242:	d107      	bne.n	8015254 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f000 f838 	bl	80152c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	691b      	ldr	r3, [r3, #16]
 801525a:	f003 0320 	and.w	r3, r3, #32
 801525e:	2b20      	cmp	r3, #32
 8015260:	d10e      	bne.n	8015280 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	68db      	ldr	r3, [r3, #12]
 8015268:	f003 0320 	and.w	r3, r3, #32
 801526c:	2b20      	cmp	r3, #32
 801526e:	d107      	bne.n	8015280 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	f06f 0220 	mvn.w	r2, #32
 8015278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f000 f8cc 	bl	8015418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015280:	bf00      	nop
 8015282:	3708      	adds	r7, #8
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015288:	b480      	push	{r7}
 801528a:	b083      	sub	sp, #12
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015290:	bf00      	nop
 8015292:	370c      	adds	r7, #12
 8015294:	46bd      	mov	sp, r7
 8015296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529a:	4770      	bx	lr

0801529c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801529c:	b480      	push	{r7}
 801529e:	b083      	sub	sp, #12
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80152a4:	bf00      	nop
 80152a6:	370c      	adds	r7, #12
 80152a8:	46bd      	mov	sp, r7
 80152aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ae:	4770      	bx	lr

080152b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80152b0:	b480      	push	{r7}
 80152b2:	b083      	sub	sp, #12
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80152b8:	bf00      	nop
 80152ba:	370c      	adds	r7, #12
 80152bc:	46bd      	mov	sp, r7
 80152be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c2:	4770      	bx	lr

080152c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80152c4:	b480      	push	{r7}
 80152c6:	b083      	sub	sp, #12
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80152cc:	bf00      	nop
 80152ce:	370c      	adds	r7, #12
 80152d0:	46bd      	mov	sp, r7
 80152d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d6:	4770      	bx	lr

080152d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80152d8:	b480      	push	{r7}
 80152da:	b085      	sub	sp, #20
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
 80152e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	4a40      	ldr	r2, [pc, #256]	; (80153ec <TIM_Base_SetConfig+0x114>)
 80152ec:	4293      	cmp	r3, r2
 80152ee:	d013      	beq.n	8015318 <TIM_Base_SetConfig+0x40>
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152f6:	d00f      	beq.n	8015318 <TIM_Base_SetConfig+0x40>
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	4a3d      	ldr	r2, [pc, #244]	; (80153f0 <TIM_Base_SetConfig+0x118>)
 80152fc:	4293      	cmp	r3, r2
 80152fe:	d00b      	beq.n	8015318 <TIM_Base_SetConfig+0x40>
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	4a3c      	ldr	r2, [pc, #240]	; (80153f4 <TIM_Base_SetConfig+0x11c>)
 8015304:	4293      	cmp	r3, r2
 8015306:	d007      	beq.n	8015318 <TIM_Base_SetConfig+0x40>
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	4a3b      	ldr	r2, [pc, #236]	; (80153f8 <TIM_Base_SetConfig+0x120>)
 801530c:	4293      	cmp	r3, r2
 801530e:	d003      	beq.n	8015318 <TIM_Base_SetConfig+0x40>
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	4a3a      	ldr	r2, [pc, #232]	; (80153fc <TIM_Base_SetConfig+0x124>)
 8015314:	4293      	cmp	r3, r2
 8015316:	d108      	bne.n	801532a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801531e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	4313      	orrs	r3, r2
 8015328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	4a2f      	ldr	r2, [pc, #188]	; (80153ec <TIM_Base_SetConfig+0x114>)
 801532e:	4293      	cmp	r3, r2
 8015330:	d02b      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015338:	d027      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	4a2c      	ldr	r2, [pc, #176]	; (80153f0 <TIM_Base_SetConfig+0x118>)
 801533e:	4293      	cmp	r3, r2
 8015340:	d023      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	4a2b      	ldr	r2, [pc, #172]	; (80153f4 <TIM_Base_SetConfig+0x11c>)
 8015346:	4293      	cmp	r3, r2
 8015348:	d01f      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4a2a      	ldr	r2, [pc, #168]	; (80153f8 <TIM_Base_SetConfig+0x120>)
 801534e:	4293      	cmp	r3, r2
 8015350:	d01b      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	4a29      	ldr	r2, [pc, #164]	; (80153fc <TIM_Base_SetConfig+0x124>)
 8015356:	4293      	cmp	r3, r2
 8015358:	d017      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	4a28      	ldr	r2, [pc, #160]	; (8015400 <TIM_Base_SetConfig+0x128>)
 801535e:	4293      	cmp	r3, r2
 8015360:	d013      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	4a27      	ldr	r2, [pc, #156]	; (8015404 <TIM_Base_SetConfig+0x12c>)
 8015366:	4293      	cmp	r3, r2
 8015368:	d00f      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	4a26      	ldr	r2, [pc, #152]	; (8015408 <TIM_Base_SetConfig+0x130>)
 801536e:	4293      	cmp	r3, r2
 8015370:	d00b      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	4a25      	ldr	r2, [pc, #148]	; (801540c <TIM_Base_SetConfig+0x134>)
 8015376:	4293      	cmp	r3, r2
 8015378:	d007      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	4a24      	ldr	r2, [pc, #144]	; (8015410 <TIM_Base_SetConfig+0x138>)
 801537e:	4293      	cmp	r3, r2
 8015380:	d003      	beq.n	801538a <TIM_Base_SetConfig+0xb2>
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	4a23      	ldr	r2, [pc, #140]	; (8015414 <TIM_Base_SetConfig+0x13c>)
 8015386:	4293      	cmp	r3, r2
 8015388:	d108      	bne.n	801539c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	68db      	ldr	r3, [r3, #12]
 8015396:	68fa      	ldr	r2, [r7, #12]
 8015398:	4313      	orrs	r3, r2
 801539a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	695b      	ldr	r3, [r3, #20]
 80153a6:	4313      	orrs	r3, r2
 80153a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	68fa      	ldr	r2, [r7, #12]
 80153ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	689a      	ldr	r2, [r3, #8]
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	681a      	ldr	r2, [r3, #0]
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	4a0a      	ldr	r2, [pc, #40]	; (80153ec <TIM_Base_SetConfig+0x114>)
 80153c4:	4293      	cmp	r3, r2
 80153c6:	d003      	beq.n	80153d0 <TIM_Base_SetConfig+0xf8>
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	4a0c      	ldr	r2, [pc, #48]	; (80153fc <TIM_Base_SetConfig+0x124>)
 80153cc:	4293      	cmp	r3, r2
 80153ce:	d103      	bne.n	80153d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80153d0:	683b      	ldr	r3, [r7, #0]
 80153d2:	691a      	ldr	r2, [r3, #16]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2201      	movs	r2, #1
 80153dc:	615a      	str	r2, [r3, #20]
}
 80153de:	bf00      	nop
 80153e0:	3714      	adds	r7, #20
 80153e2:	46bd      	mov	sp, r7
 80153e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e8:	4770      	bx	lr
 80153ea:	bf00      	nop
 80153ec:	40010000 	.word	0x40010000
 80153f0:	40000400 	.word	0x40000400
 80153f4:	40000800 	.word	0x40000800
 80153f8:	40000c00 	.word	0x40000c00
 80153fc:	40010400 	.word	0x40010400
 8015400:	40014000 	.word	0x40014000
 8015404:	40014400 	.word	0x40014400
 8015408:	40014800 	.word	0x40014800
 801540c:	40001800 	.word	0x40001800
 8015410:	40001c00 	.word	0x40001c00
 8015414:	40002000 	.word	0x40002000

08015418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015420:	bf00      	nop
 8015422:	370c      	adds	r7, #12
 8015424:	46bd      	mov	sp, r7
 8015426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542a:	4770      	bx	lr

0801542c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801542c:	b480      	push	{r7}
 801542e:	b083      	sub	sp, #12
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015434:	bf00      	nop
 8015436:	370c      	adds	r7, #12
 8015438:	46bd      	mov	sp, r7
 801543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543e:	4770      	bx	lr

08015440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b082      	sub	sp, #8
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d101      	bne.n	8015452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801544e:	2301      	movs	r3, #1
 8015450:	e03f      	b.n	80154d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015458:	b2db      	uxtb	r3, r3
 801545a:	2b00      	cmp	r3, #0
 801545c:	d106      	bne.n	801546c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2200      	movs	r2, #0
 8015462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f7fc f894 	bl	8011594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2224      	movs	r2, #36	; 0x24
 8015470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	68da      	ldr	r2, [r3, #12]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f001 f8e5 	bl	8016654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	691a      	ldr	r2, [r3, #16]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	695a      	ldr	r2, [r3, #20]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80154a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	68da      	ldr	r2, [r3, #12]
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80154b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2200      	movs	r2, #0
 80154be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2220      	movs	r2, #32
 80154c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2220      	movs	r2, #32
 80154cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80154d0:	2300      	movs	r3, #0
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3708      	adds	r7, #8
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}

080154da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80154da:	b580      	push	{r7, lr}
 80154dc:	b08a      	sub	sp, #40	; 0x28
 80154de:	af02      	add	r7, sp, #8
 80154e0:	60f8      	str	r0, [r7, #12]
 80154e2:	60b9      	str	r1, [r7, #8]
 80154e4:	603b      	str	r3, [r7, #0]
 80154e6:	4613      	mov	r3, r2
 80154e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80154ea:	2300      	movs	r3, #0
 80154ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	2b20      	cmp	r3, #32
 80154f8:	d17c      	bne.n	80155f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d002      	beq.n	8015506 <HAL_UART_Transmit+0x2c>
 8015500:	88fb      	ldrh	r3, [r7, #6]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d101      	bne.n	801550a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015506:	2301      	movs	r3, #1
 8015508:	e075      	b.n	80155f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015510:	2b01      	cmp	r3, #1
 8015512:	d101      	bne.n	8015518 <HAL_UART_Transmit+0x3e>
 8015514:	2302      	movs	r3, #2
 8015516:	e06e      	b.n	80155f6 <HAL_UART_Transmit+0x11c>
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2201      	movs	r2, #1
 801551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	2200      	movs	r2, #0
 8015524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	2221      	movs	r2, #33	; 0x21
 801552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801552e:	f7fc fb91 	bl	8011c54 <HAL_GetTick>
 8015532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	88fa      	ldrh	r2, [r7, #6]
 8015538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	88fa      	ldrh	r2, [r7, #6]
 801553e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	689b      	ldr	r3, [r3, #8]
 8015544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015548:	d108      	bne.n	801555c <HAL_UART_Transmit+0x82>
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	691b      	ldr	r3, [r3, #16]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d104      	bne.n	801555c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8015552:	2300      	movs	r3, #0
 8015554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	61bb      	str	r3, [r7, #24]
 801555a:	e003      	b.n	8015564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015560:	2300      	movs	r3, #0
 8015562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	2200      	movs	r2, #0
 8015568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801556c:	e02a      	b.n	80155c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	9300      	str	r3, [sp, #0]
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	2200      	movs	r2, #0
 8015576:	2180      	movs	r1, #128	; 0x80
 8015578:	68f8      	ldr	r0, [r7, #12]
 801557a:	f000 fd9c 	bl	80160b6 <UART_WaitOnFlagUntilTimeout>
 801557e:	4603      	mov	r3, r0
 8015580:	2b00      	cmp	r3, #0
 8015582:	d001      	beq.n	8015588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8015584:	2303      	movs	r3, #3
 8015586:	e036      	b.n	80155f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d10b      	bne.n	80155a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801558e:	69bb      	ldr	r3, [r7, #24]
 8015590:	881b      	ldrh	r3, [r3, #0]
 8015592:	461a      	mov	r2, r3
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801559c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	3302      	adds	r3, #2
 80155a2:	61bb      	str	r3, [r7, #24]
 80155a4:	e007      	b.n	80155b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80155a6:	69fb      	ldr	r3, [r7, #28]
 80155a8:	781a      	ldrb	r2, [r3, #0]
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80155b0:	69fb      	ldr	r3, [r7, #28]
 80155b2:	3301      	adds	r3, #1
 80155b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	3b01      	subs	r3, #1
 80155be:	b29a      	uxth	r2, r3
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d1cf      	bne.n	801556e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	9300      	str	r3, [sp, #0]
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	2200      	movs	r2, #0
 80155d6:	2140      	movs	r1, #64	; 0x40
 80155d8:	68f8      	ldr	r0, [r7, #12]
 80155da:	f000 fd6c 	bl	80160b6 <UART_WaitOnFlagUntilTimeout>
 80155de:	4603      	mov	r3, r0
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d001      	beq.n	80155e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80155e4:	2303      	movs	r3, #3
 80155e6:	e006      	b.n	80155f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	2220      	movs	r2, #32
 80155ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80155f0:	2300      	movs	r3, #0
 80155f2:	e000      	b.n	80155f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80155f4:	2302      	movs	r3, #2
  }
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3720      	adds	r7, #32
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80155fe:	b580      	push	{r7, lr}
 8015600:	b08a      	sub	sp, #40	; 0x28
 8015602:	af02      	add	r7, sp, #8
 8015604:	60f8      	str	r0, [r7, #12]
 8015606:	60b9      	str	r1, [r7, #8]
 8015608:	603b      	str	r3, [r7, #0]
 801560a:	4613      	mov	r3, r2
 801560c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801560e:	2300      	movs	r3, #0
 8015610:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015618:	b2db      	uxtb	r3, r3
 801561a:	2b20      	cmp	r3, #32
 801561c:	f040 808c 	bne.w	8015738 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d002      	beq.n	801562c <HAL_UART_Receive+0x2e>
 8015626:	88fb      	ldrh	r3, [r7, #6]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d101      	bne.n	8015630 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 801562c:	2301      	movs	r3, #1
 801562e:	e084      	b.n	801573a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015636:	2b01      	cmp	r3, #1
 8015638:	d101      	bne.n	801563e <HAL_UART_Receive+0x40>
 801563a:	2302      	movs	r3, #2
 801563c:	e07d      	b.n	801573a <HAL_UART_Receive+0x13c>
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	2201      	movs	r2, #1
 8015642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	2200      	movs	r2, #0
 801564a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	2222      	movs	r2, #34	; 0x22
 8015650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	2200      	movs	r2, #0
 8015658:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801565a:	f7fc fafb 	bl	8011c54 <HAL_GetTick>
 801565e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	88fa      	ldrh	r2, [r7, #6]
 8015664:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	88fa      	ldrh	r2, [r7, #6]
 801566a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	689b      	ldr	r3, [r3, #8]
 8015670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015674:	d108      	bne.n	8015688 <HAL_UART_Receive+0x8a>
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	691b      	ldr	r3, [r3, #16]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d104      	bne.n	8015688 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 801567e:	2300      	movs	r3, #0
 8015680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	61bb      	str	r3, [r7, #24]
 8015686:	e003      	b.n	8015690 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801568c:	2300      	movs	r3, #0
 801568e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	2200      	movs	r2, #0
 8015694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8015698:	e043      	b.n	8015722 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	9300      	str	r3, [sp, #0]
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	2200      	movs	r2, #0
 80156a2:	2120      	movs	r1, #32
 80156a4:	68f8      	ldr	r0, [r7, #12]
 80156a6:	f000 fd06 	bl	80160b6 <UART_WaitOnFlagUntilTimeout>
 80156aa:	4603      	mov	r3, r0
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d001      	beq.n	80156b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80156b0:	2303      	movs	r3, #3
 80156b2:	e042      	b.n	801573a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d10c      	bne.n	80156d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	69bb      	ldr	r3, [r7, #24]
 80156ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80156cc:	69bb      	ldr	r3, [r7, #24]
 80156ce:	3302      	adds	r3, #2
 80156d0:	61bb      	str	r3, [r7, #24]
 80156d2:	e01f      	b.n	8015714 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	689b      	ldr	r3, [r3, #8]
 80156d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80156dc:	d007      	beq.n	80156ee <HAL_UART_Receive+0xf0>
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	689b      	ldr	r3, [r3, #8]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d10a      	bne.n	80156fc <HAL_UART_Receive+0xfe>
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	691b      	ldr	r3, [r3, #16]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d106      	bne.n	80156fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	b2da      	uxtb	r2, r3
 80156f6:	69fb      	ldr	r3, [r7, #28]
 80156f8:	701a      	strb	r2, [r3, #0]
 80156fa:	e008      	b.n	801570e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	b2db      	uxtb	r3, r3
 8015704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015708:	b2da      	uxtb	r2, r3
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 801570e:	69fb      	ldr	r3, [r7, #28]
 8015710:	3301      	adds	r3, #1
 8015712:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015718:	b29b      	uxth	r3, r3
 801571a:	3b01      	subs	r3, #1
 801571c:	b29a      	uxth	r2, r3
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015726:	b29b      	uxth	r3, r3
 8015728:	2b00      	cmp	r3, #0
 801572a:	d1b6      	bne.n	801569a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	2220      	movs	r2, #32
 8015730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8015734:	2300      	movs	r3, #0
 8015736:	e000      	b.n	801573a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8015738:	2302      	movs	r3, #2
  }
}
 801573a:	4618      	mov	r0, r3
 801573c:	3720      	adds	r7, #32
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
	...

08015744 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b08c      	sub	sp, #48	; 0x30
 8015748:	af00      	add	r7, sp, #0
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	4613      	mov	r3, r2
 8015750:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015758:	b2db      	uxtb	r3, r3
 801575a:	2b20      	cmp	r3, #32
 801575c:	d165      	bne.n	801582a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d002      	beq.n	801576a <HAL_UART_Transmit_DMA+0x26>
 8015764:	88fb      	ldrh	r3, [r7, #6]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d101      	bne.n	801576e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801576a:	2301      	movs	r3, #1
 801576c:	e05e      	b.n	801582c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015774:	2b01      	cmp	r3, #1
 8015776:	d101      	bne.n	801577c <HAL_UART_Transmit_DMA+0x38>
 8015778:	2302      	movs	r3, #2
 801577a:	e057      	b.n	801582c <HAL_UART_Transmit_DMA+0xe8>
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	2201      	movs	r2, #1
 8015780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015784:	68ba      	ldr	r2, [r7, #8]
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	88fa      	ldrh	r2, [r7, #6]
 801578e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	88fa      	ldrh	r2, [r7, #6]
 8015794:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	2200      	movs	r2, #0
 801579a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	2221      	movs	r2, #33	; 0x21
 80157a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157a8:	4a22      	ldr	r2, [pc, #136]	; (8015834 <HAL_UART_Transmit_DMA+0xf0>)
 80157aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157b0:	4a21      	ldr	r2, [pc, #132]	; (8015838 <HAL_UART_Transmit_DMA+0xf4>)
 80157b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157b8:	4a20      	ldr	r2, [pc, #128]	; (801583c <HAL_UART_Transmit_DMA+0xf8>)
 80157ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157c0:	2200      	movs	r2, #0
 80157c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80157c4:	f107 0308 	add.w	r3, r7, #8
 80157c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80157ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d0:	6819      	ldr	r1, [r3, #0]
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	3304      	adds	r3, #4
 80157d8:	461a      	mov	r2, r3
 80157da:	88fb      	ldrh	r3, [r7, #6]
 80157dc:	f7fc fff2 	bl	80127c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80157e8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	2200      	movs	r2, #0
 80157ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	3314      	adds	r3, #20
 80157f8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157fa:	69bb      	ldr	r3, [r7, #24]
 80157fc:	e853 3f00 	ldrex	r3, [r3]
 8015800:	617b      	str	r3, [r7, #20]
   return(result);
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015808:	62bb      	str	r3, [r7, #40]	; 0x28
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	3314      	adds	r3, #20
 8015810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015812:	627a      	str	r2, [r7, #36]	; 0x24
 8015814:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015816:	6a39      	ldr	r1, [r7, #32]
 8015818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801581a:	e841 2300 	strex	r3, r2, [r1]
 801581e:	61fb      	str	r3, [r7, #28]
   return(result);
 8015820:	69fb      	ldr	r3, [r7, #28]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d1e5      	bne.n	80157f2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8015826:	2300      	movs	r3, #0
 8015828:	e000      	b.n	801582c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 801582a:	2302      	movs	r3, #2
  }
}
 801582c:	4618      	mov	r0, r3
 801582e:	3730      	adds	r7, #48	; 0x30
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}
 8015834:	08015e11 	.word	0x08015e11
 8015838:	08015eab 	.word	0x08015eab
 801583c:	08016023 	.word	0x08016023

08015840 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b084      	sub	sp, #16
 8015844:	af00      	add	r7, sp, #0
 8015846:	60f8      	str	r0, [r7, #12]
 8015848:	60b9      	str	r1, [r7, #8]
 801584a:	4613      	mov	r3, r2
 801584c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015854:	b2db      	uxtb	r3, r3
 8015856:	2b20      	cmp	r3, #32
 8015858:	d11d      	bne.n	8015896 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d002      	beq.n	8015866 <HAL_UART_Receive_DMA+0x26>
 8015860:	88fb      	ldrh	r3, [r7, #6]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d101      	bne.n	801586a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8015866:	2301      	movs	r3, #1
 8015868:	e016      	b.n	8015898 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015870:	2b01      	cmp	r3, #1
 8015872:	d101      	bne.n	8015878 <HAL_UART_Receive_DMA+0x38>
 8015874:	2302      	movs	r3, #2
 8015876:	e00f      	b.n	8015898 <HAL_UART_Receive_DMA+0x58>
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	2201      	movs	r2, #1
 801587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	2200      	movs	r2, #0
 8015884:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015886:	88fb      	ldrh	r3, [r7, #6]
 8015888:	461a      	mov	r2, r3
 801588a:	68b9      	ldr	r1, [r7, #8]
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	f000 fc81 	bl	8016194 <UART_Start_Receive_DMA>
 8015892:	4603      	mov	r3, r0
 8015894:	e000      	b.n	8015898 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015896:	2302      	movs	r3, #2
  }
}
 8015898:	4618      	mov	r0, r3
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}

080158a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b0ba      	sub	sp, #232	; 0xe8
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	68db      	ldr	r3, [r3, #12]
 80158b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	695b      	ldr	r3, [r3, #20]
 80158c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80158c6:	2300      	movs	r3, #0
 80158c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80158cc:	2300      	movs	r3, #0
 80158ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80158d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80158d6:	f003 030f 	and.w	r3, r3, #15
 80158da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80158de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d10f      	bne.n	8015906 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80158e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80158ea:	f003 0320 	and.w	r3, r3, #32
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d009      	beq.n	8015906 <HAL_UART_IRQHandler+0x66>
 80158f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80158f6:	f003 0320 	and.w	r3, r3, #32
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d003      	beq.n	8015906 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f000 fded 	bl	80164de <UART_Receive_IT>
      return;
 8015904:	e256      	b.n	8015db4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8015906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801590a:	2b00      	cmp	r3, #0
 801590c:	f000 80de 	beq.w	8015acc <HAL_UART_IRQHandler+0x22c>
 8015910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015914:	f003 0301 	and.w	r3, r3, #1
 8015918:	2b00      	cmp	r3, #0
 801591a:	d106      	bne.n	801592a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015920:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8015924:	2b00      	cmp	r3, #0
 8015926:	f000 80d1 	beq.w	8015acc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801592e:	f003 0301 	and.w	r3, r3, #1
 8015932:	2b00      	cmp	r3, #0
 8015934:	d00b      	beq.n	801594e <HAL_UART_IRQHandler+0xae>
 8015936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801593a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801593e:	2b00      	cmp	r3, #0
 8015940:	d005      	beq.n	801594e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015946:	f043 0201 	orr.w	r2, r3, #1
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015952:	f003 0304 	and.w	r3, r3, #4
 8015956:	2b00      	cmp	r3, #0
 8015958:	d00b      	beq.n	8015972 <HAL_UART_IRQHandler+0xd2>
 801595a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801595e:	f003 0301 	and.w	r3, r3, #1
 8015962:	2b00      	cmp	r3, #0
 8015964:	d005      	beq.n	8015972 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801596a:	f043 0202 	orr.w	r2, r3, #2
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8015972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015976:	f003 0302 	and.w	r3, r3, #2
 801597a:	2b00      	cmp	r3, #0
 801597c:	d00b      	beq.n	8015996 <HAL_UART_IRQHandler+0xf6>
 801597e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015982:	f003 0301 	and.w	r3, r3, #1
 8015986:	2b00      	cmp	r3, #0
 8015988:	d005      	beq.n	8015996 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801598e:	f043 0204 	orr.w	r2, r3, #4
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8015996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801599a:	f003 0308 	and.w	r3, r3, #8
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d011      	beq.n	80159c6 <HAL_UART_IRQHandler+0x126>
 80159a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80159a6:	f003 0320 	and.w	r3, r3, #32
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d105      	bne.n	80159ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80159ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80159b2:	f003 0301 	and.w	r3, r3, #1
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d005      	beq.n	80159c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159be:	f043 0208 	orr.w	r2, r3, #8
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	f000 81ed 	beq.w	8015daa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80159d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80159d4:	f003 0320 	and.w	r3, r3, #32
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d008      	beq.n	80159ee <HAL_UART_IRQHandler+0x14e>
 80159dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80159e0:	f003 0320 	and.w	r3, r3, #32
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d002      	beq.n	80159ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f000 fd78 	bl	80164de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	695b      	ldr	r3, [r3, #20]
 80159f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159f8:	2b40      	cmp	r3, #64	; 0x40
 80159fa:	bf0c      	ite	eq
 80159fc:	2301      	moveq	r3, #1
 80159fe:	2300      	movne	r3, #0
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a0a:	f003 0308 	and.w	r3, r3, #8
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d103      	bne.n	8015a1a <HAL_UART_IRQHandler+0x17a>
 8015a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d04f      	beq.n	8015aba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	f000 fc80 	bl	8016320 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	695b      	ldr	r3, [r3, #20]
 8015a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a2a:	2b40      	cmp	r3, #64	; 0x40
 8015a2c:	d141      	bne.n	8015ab2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	3314      	adds	r3, #20
 8015a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015a3c:	e853 3f00 	ldrex	r3, [r3]
 8015a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8015a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	3314      	adds	r3, #20
 8015a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8015a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8015a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015a6a:	e841 2300 	strex	r3, r2, [r1]
 8015a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8015a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d1d9      	bne.n	8015a2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d013      	beq.n	8015aaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a86:	4a7d      	ldr	r2, [pc, #500]	; (8015c7c <HAL_UART_IRQHandler+0x3dc>)
 8015a88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f7fc ff60 	bl	8012954 <HAL_DMA_Abort_IT>
 8015a94:	4603      	mov	r3, r0
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d016      	beq.n	8015ac8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015aa0:	687a      	ldr	r2, [r7, #4]
 8015aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015aa4:	4610      	mov	r0, r2
 8015aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015aa8:	e00e      	b.n	8015ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015aaa:	6878      	ldr	r0, [r7, #4]
 8015aac:	f000 f99a 	bl	8015de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015ab0:	e00a      	b.n	8015ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f000 f996 	bl	8015de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015ab8:	e006      	b.n	8015ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f000 f992 	bl	8015de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8015ac6:	e170      	b.n	8015daa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015ac8:	bf00      	nop
    return;
 8015aca:	e16e      	b.n	8015daa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ad0:	2b01      	cmp	r3, #1
 8015ad2:	f040 814a 	bne.w	8015d6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8015ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ada:	f003 0310 	and.w	r3, r3, #16
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	f000 8143 	beq.w	8015d6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8015ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015ae8:	f003 0310 	and.w	r3, r3, #16
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	f000 813c 	beq.w	8015d6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015af2:	2300      	movs	r3, #0
 8015af4:	60bb      	str	r3, [r7, #8]
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	60bb      	str	r3, [r7, #8]
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	685b      	ldr	r3, [r3, #4]
 8015b04:	60bb      	str	r3, [r7, #8]
 8015b06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	695b      	ldr	r3, [r3, #20]
 8015b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b12:	2b40      	cmp	r3, #64	; 0x40
 8015b14:	f040 80b4 	bne.w	8015c80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8015b24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	f000 8140 	beq.w	8015dae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8015b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015b36:	429a      	cmp	r2, r3
 8015b38:	f080 8139 	bcs.w	8015dae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015b42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b48:	69db      	ldr	r3, [r3, #28]
 8015b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b4e:	f000 8088 	beq.w	8015c62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	330c      	adds	r3, #12
 8015b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015b60:	e853 3f00 	ldrex	r3, [r3]
 8015b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8015b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	330c      	adds	r3, #12
 8015b7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015b7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8015b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015b8e:	e841 2300 	strex	r3, r2, [r1]
 8015b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8015b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d1d9      	bne.n	8015b52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	3314      	adds	r3, #20
 8015ba4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ba8:	e853 3f00 	ldrex	r3, [r3]
 8015bac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8015bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015bb0:	f023 0301 	bic.w	r3, r3, #1
 8015bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	3314      	adds	r3, #20
 8015bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015bc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015bca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015bce:	e841 2300 	strex	r3, r2, [r1]
 8015bd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d1e1      	bne.n	8015b9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	3314      	adds	r3, #20
 8015be0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015be4:	e853 3f00 	ldrex	r3, [r3]
 8015be8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	3314      	adds	r3, #20
 8015bfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015bfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015c00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015c04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015c06:	e841 2300 	strex	r3, r2, [r1]
 8015c0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d1e3      	bne.n	8015bda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2220      	movs	r2, #32
 8015c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	330c      	adds	r3, #12
 8015c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c2a:	e853 3f00 	ldrex	r3, [r3]
 8015c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c32:	f023 0310 	bic.w	r3, r3, #16
 8015c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	330c      	adds	r3, #12
 8015c40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8015c44:	65ba      	str	r2, [r7, #88]	; 0x58
 8015c46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015c4c:	e841 2300 	strex	r3, r2, [r1]
 8015c50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d1e3      	bne.n	8015c20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7fc fe09 	bl	8012874 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	1ad3      	subs	r3, r2, r3
 8015c6e:	b29b      	uxth	r3, r3
 8015c70:	4619      	mov	r1, r3
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f000 f8c0 	bl	8015df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8015c78:	e099      	b.n	8015dae <HAL_UART_IRQHandler+0x50e>
 8015c7a:	bf00      	nop
 8015c7c:	080163e7 	.word	0x080163e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	1ad3      	subs	r3, r2, r3
 8015c8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015c94:	b29b      	uxth	r3, r3
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	f000 808b 	beq.w	8015db2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8015c9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	f000 8086 	beq.w	8015db2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	330c      	adds	r3, #12
 8015cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cb0:	e853 3f00 	ldrex	r3, [r3]
 8015cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	330c      	adds	r3, #12
 8015cc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015cca:	647a      	str	r2, [r7, #68]	; 0x44
 8015ccc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015cd2:	e841 2300 	strex	r3, r2, [r1]
 8015cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d1e3      	bne.n	8015ca6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	3314      	adds	r3, #20
 8015ce4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce8:	e853 3f00 	ldrex	r3, [r3]
 8015cec:	623b      	str	r3, [r7, #32]
   return(result);
 8015cee:	6a3b      	ldr	r3, [r7, #32]
 8015cf0:	f023 0301 	bic.w	r3, r3, #1
 8015cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	3314      	adds	r3, #20
 8015cfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015d02:	633a      	str	r2, [r7, #48]	; 0x30
 8015d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d0a:	e841 2300 	strex	r3, r2, [r1]
 8015d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d1e3      	bne.n	8015cde <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2220      	movs	r2, #32
 8015d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2200      	movs	r2, #0
 8015d22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	330c      	adds	r3, #12
 8015d2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	e853 3f00 	ldrex	r3, [r3]
 8015d32:	60fb      	str	r3, [r7, #12]
   return(result);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	f023 0310 	bic.w	r3, r3, #16
 8015d3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	330c      	adds	r3, #12
 8015d44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015d48:	61fa      	str	r2, [r7, #28]
 8015d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d4c:	69b9      	ldr	r1, [r7, #24]
 8015d4e:	69fa      	ldr	r2, [r7, #28]
 8015d50:	e841 2300 	strex	r3, r2, [r1]
 8015d54:	617b      	str	r3, [r7, #20]
   return(result);
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d1e3      	bne.n	8015d24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8015d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8015d60:	4619      	mov	r1, r3
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f000 f848 	bl	8015df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8015d68:	e023      	b.n	8015db2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8015d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d009      	beq.n	8015d8a <HAL_UART_IRQHandler+0x4ea>
 8015d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d003      	beq.n	8015d8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8015d82:	6878      	ldr	r0, [r7, #4]
 8015d84:	f000 fb43 	bl	801640e <UART_Transmit_IT>
    return;
 8015d88:	e014      	b.n	8015db4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8015d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d00e      	beq.n	8015db4 <HAL_UART_IRQHandler+0x514>
 8015d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d008      	beq.n	8015db4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f000 fb83 	bl	80164ae <UART_EndTransmit_IT>
    return;
 8015da8:	e004      	b.n	8015db4 <HAL_UART_IRQHandler+0x514>
    return;
 8015daa:	bf00      	nop
 8015dac:	e002      	b.n	8015db4 <HAL_UART_IRQHandler+0x514>
      return;
 8015dae:	bf00      	nop
 8015db0:	e000      	b.n	8015db4 <HAL_UART_IRQHandler+0x514>
      return;
 8015db2:	bf00      	nop
  }
}
 8015db4:	37e8      	adds	r7, #232	; 0xe8
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}
 8015dba:	bf00      	nop

08015dbc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8015dbc:	b480      	push	{r7}
 8015dbe:	b083      	sub	sp, #12
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8015dc4:	bf00      	nop
 8015dc6:	370c      	adds	r7, #12
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dce:	4770      	bx	lr

08015dd0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8015dd0:	b480      	push	{r7}
 8015dd2:	b083      	sub	sp, #12
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8015dd8:	bf00      	nop
 8015dda:	370c      	adds	r7, #12
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de2:	4770      	bx	lr

08015de4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015de4:	b480      	push	{r7}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8015dec:	bf00      	nop
 8015dee:	370c      	adds	r7, #12
 8015df0:	46bd      	mov	sp, r7
 8015df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df6:	4770      	bx	lr

08015df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b083      	sub	sp, #12
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	460b      	mov	r3, r1
 8015e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015e04:	bf00      	nop
 8015e06:	370c      	adds	r7, #12
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr

08015e10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b090      	sub	sp, #64	; 0x40
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d137      	bne.n	8015e9c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8015e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e2e:	2200      	movs	r2, #0
 8015e30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	3314      	adds	r3, #20
 8015e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3c:	e853 3f00 	ldrex	r3, [r3]
 8015e40:	623b      	str	r3, [r7, #32]
   return(result);
 8015e42:	6a3b      	ldr	r3, [r7, #32]
 8015e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8015e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	3314      	adds	r3, #20
 8015e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e52:	633a      	str	r2, [r7, #48]	; 0x30
 8015e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e5a:	e841 2300 	strex	r3, r2, [r1]
 8015e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d1e5      	bne.n	8015e32 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	330c      	adds	r3, #12
 8015e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	e853 3f00 	ldrex	r3, [r3]
 8015e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8015e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	330c      	adds	r3, #12
 8015e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e86:	61fa      	str	r2, [r7, #28]
 8015e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e8a:	69b9      	ldr	r1, [r7, #24]
 8015e8c:	69fa      	ldr	r2, [r7, #28]
 8015e8e:	e841 2300 	strex	r3, r2, [r1]
 8015e92:	617b      	str	r3, [r7, #20]
   return(result);
 8015e94:	697b      	ldr	r3, [r7, #20]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d1e5      	bne.n	8015e66 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015e9a:	e002      	b.n	8015ea2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8015e9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e9e:	f7fa fbb5 	bl	801060c <HAL_UART_TxCpltCallback>
}
 8015ea2:	bf00      	nop
 8015ea4:	3740      	adds	r7, #64	; 0x40
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}

08015eaa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015eaa:	b580      	push	{r7, lr}
 8015eac:	b084      	sub	sp, #16
 8015eae:	af00      	add	r7, sp, #0
 8015eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015eb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8015eb8:	68f8      	ldr	r0, [r7, #12]
 8015eba:	f7ff ff7f 	bl	8015dbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015ebe:	bf00      	nop
 8015ec0:	3710      	adds	r7, #16
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}

08015ec6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015ec6:	b580      	push	{r7, lr}
 8015ec8:	b09c      	sub	sp, #112	; 0x70
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d172      	bne.n	8015fc8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8015ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	330c      	adds	r3, #12
 8015eee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ef2:	e853 3f00 	ldrex	r3, [r3]
 8015ef6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015efe:	66bb      	str	r3, [r7, #104]	; 0x68
 8015f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	330c      	adds	r3, #12
 8015f06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015f08:	65ba      	str	r2, [r7, #88]	; 0x58
 8015f0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015f0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015f10:	e841 2300 	strex	r3, r2, [r1]
 8015f14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d1e5      	bne.n	8015ee8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	3314      	adds	r3, #20
 8015f22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f26:	e853 3f00 	ldrex	r3, [r3]
 8015f2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f2e:	f023 0301 	bic.w	r3, r3, #1
 8015f32:	667b      	str	r3, [r7, #100]	; 0x64
 8015f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	3314      	adds	r3, #20
 8015f3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f3c:	647a      	str	r2, [r7, #68]	; 0x44
 8015f3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015f44:	e841 2300 	strex	r3, r2, [r1]
 8015f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d1e5      	bne.n	8015f1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	3314      	adds	r3, #20
 8015f56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5a:	e853 3f00 	ldrex	r3, [r3]
 8015f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8015f60:	6a3b      	ldr	r3, [r7, #32]
 8015f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015f66:	663b      	str	r3, [r7, #96]	; 0x60
 8015f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	3314      	adds	r3, #20
 8015f6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f70:	633a      	str	r2, [r7, #48]	; 0x30
 8015f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f78:	e841 2300 	strex	r3, r2, [r1]
 8015f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d1e5      	bne.n	8015f50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f86:	2220      	movs	r2, #32
 8015f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d119      	bne.n	8015fc8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	330c      	adds	r3, #12
 8015f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f9c:	693b      	ldr	r3, [r7, #16]
 8015f9e:	e853 3f00 	ldrex	r3, [r3]
 8015fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	f023 0310 	bic.w	r3, r3, #16
 8015faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	330c      	adds	r3, #12
 8015fb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015fb4:	61fa      	str	r2, [r7, #28]
 8015fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fb8:	69b9      	ldr	r1, [r7, #24]
 8015fba:	69fa      	ldr	r2, [r7, #28]
 8015fbc:	e841 2300 	strex	r3, r2, [r1]
 8015fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d1e5      	bne.n	8015f94 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	d106      	bne.n	8015fde <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015fd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8015fd4:	4619      	mov	r1, r3
 8015fd6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015fd8:	f7ff ff0e 	bl	8015df8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015fdc:	e002      	b.n	8015fe4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8015fde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015fe0:	f7fa fb4a 	bl	8010678 <HAL_UART_RxCpltCallback>
}
 8015fe4:	bf00      	nop
 8015fe6:	3770      	adds	r7, #112	; 0x70
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}

08015fec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b084      	sub	sp, #16
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ff8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ffe:	2b01      	cmp	r3, #1
 8016000:	d108      	bne.n	8016014 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016006:	085b      	lsrs	r3, r3, #1
 8016008:	b29b      	uxth	r3, r3
 801600a:	4619      	mov	r1, r3
 801600c:	68f8      	ldr	r0, [r7, #12]
 801600e:	f7ff fef3 	bl	8015df8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016012:	e002      	b.n	801601a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8016014:	68f8      	ldr	r0, [r7, #12]
 8016016:	f7ff fedb 	bl	8015dd0 <HAL_UART_RxHalfCpltCallback>
}
 801601a:	bf00      	nop
 801601c:	3710      	adds	r7, #16
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}

08016022 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8016022:	b580      	push	{r7, lr}
 8016024:	b084      	sub	sp, #16
 8016026:	af00      	add	r7, sp, #0
 8016028:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801602a:	2300      	movs	r3, #0
 801602c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016032:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	695b      	ldr	r3, [r3, #20]
 801603a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801603e:	2b80      	cmp	r3, #128	; 0x80
 8016040:	bf0c      	ite	eq
 8016042:	2301      	moveq	r3, #1
 8016044:	2300      	movne	r3, #0
 8016046:	b2db      	uxtb	r3, r3
 8016048:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016050:	b2db      	uxtb	r3, r3
 8016052:	2b21      	cmp	r3, #33	; 0x21
 8016054:	d108      	bne.n	8016068 <UART_DMAError+0x46>
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d005      	beq.n	8016068 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	2200      	movs	r2, #0
 8016060:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8016062:	68b8      	ldr	r0, [r7, #8]
 8016064:	f000 f934 	bl	80162d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	695b      	ldr	r3, [r3, #20]
 801606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016072:	2b40      	cmp	r3, #64	; 0x40
 8016074:	bf0c      	ite	eq
 8016076:	2301      	moveq	r3, #1
 8016078:	2300      	movne	r3, #0
 801607a:	b2db      	uxtb	r3, r3
 801607c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016084:	b2db      	uxtb	r3, r3
 8016086:	2b22      	cmp	r3, #34	; 0x22
 8016088:	d108      	bne.n	801609c <UART_DMAError+0x7a>
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d005      	beq.n	801609c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8016090:	68bb      	ldr	r3, [r7, #8]
 8016092:	2200      	movs	r2, #0
 8016094:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8016096:	68b8      	ldr	r0, [r7, #8]
 8016098:	f000 f942 	bl	8016320 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160a0:	f043 0210 	orr.w	r2, r3, #16
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80160a8:	68b8      	ldr	r0, [r7, #8]
 80160aa:	f7ff fe9b 	bl	8015de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80160ae:	bf00      	nop
 80160b0:	3710      	adds	r7, #16
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}

080160b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80160b6:	b580      	push	{r7, lr}
 80160b8:	b090      	sub	sp, #64	; 0x40
 80160ba:	af00      	add	r7, sp, #0
 80160bc:	60f8      	str	r0, [r7, #12]
 80160be:	60b9      	str	r1, [r7, #8]
 80160c0:	603b      	str	r3, [r7, #0]
 80160c2:	4613      	mov	r3, r2
 80160c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80160c6:	e050      	b.n	801616a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80160c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160ce:	d04c      	beq.n	801616a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80160d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d007      	beq.n	80160e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80160d6:	f7fb fdbd 	bl	8011c54 <HAL_GetTick>
 80160da:	4602      	mov	r2, r0
 80160dc:	683b      	ldr	r3, [r7, #0]
 80160de:	1ad3      	subs	r3, r2, r3
 80160e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80160e2:	429a      	cmp	r2, r3
 80160e4:	d241      	bcs.n	801616a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	330c      	adds	r3, #12
 80160ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160f0:	e853 3f00 	ldrex	r3, [r3]
 80160f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80160f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80160fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	330c      	adds	r3, #12
 8016104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016106:	637a      	str	r2, [r7, #52]	; 0x34
 8016108:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801610a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801610c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801610e:	e841 2300 	strex	r3, r2, [r1]
 8016112:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8016114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016116:	2b00      	cmp	r3, #0
 8016118:	d1e5      	bne.n	80160e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	3314      	adds	r3, #20
 8016120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016122:	697b      	ldr	r3, [r7, #20]
 8016124:	e853 3f00 	ldrex	r3, [r3]
 8016128:	613b      	str	r3, [r7, #16]
   return(result);
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	f023 0301 	bic.w	r3, r3, #1
 8016130:	63bb      	str	r3, [r7, #56]	; 0x38
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	3314      	adds	r3, #20
 8016138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801613a:	623a      	str	r2, [r7, #32]
 801613c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801613e:	69f9      	ldr	r1, [r7, #28]
 8016140:	6a3a      	ldr	r2, [r7, #32]
 8016142:	e841 2300 	strex	r3, r2, [r1]
 8016146:	61bb      	str	r3, [r7, #24]
   return(result);
 8016148:	69bb      	ldr	r3, [r7, #24]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d1e5      	bne.n	801611a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2220      	movs	r2, #32
 8016152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2220      	movs	r2, #32
 801615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	2200      	movs	r2, #0
 8016162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8016166:	2303      	movs	r3, #3
 8016168:	e00f      	b.n	801618a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	681a      	ldr	r2, [r3, #0]
 8016170:	68bb      	ldr	r3, [r7, #8]
 8016172:	4013      	ands	r3, r2
 8016174:	68ba      	ldr	r2, [r7, #8]
 8016176:	429a      	cmp	r2, r3
 8016178:	bf0c      	ite	eq
 801617a:	2301      	moveq	r3, #1
 801617c:	2300      	movne	r3, #0
 801617e:	b2db      	uxtb	r3, r3
 8016180:	461a      	mov	r2, r3
 8016182:	79fb      	ldrb	r3, [r7, #7]
 8016184:	429a      	cmp	r2, r3
 8016186:	d09f      	beq.n	80160c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8016188:	2300      	movs	r3, #0
}
 801618a:	4618      	mov	r0, r3
 801618c:	3740      	adds	r7, #64	; 0x40
 801618e:	46bd      	mov	sp, r7
 8016190:	bd80      	pop	{r7, pc}
	...

08016194 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b098      	sub	sp, #96	; 0x60
 8016198:	af00      	add	r7, sp, #0
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	60b9      	str	r1, [r7, #8]
 801619e:	4613      	mov	r3, r2
 80161a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80161a2:	68ba      	ldr	r2, [r7, #8]
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	88fa      	ldrh	r2, [r7, #6]
 80161ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2200      	movs	r2, #0
 80161b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	2222      	movs	r2, #34	; 0x22
 80161b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161c0:	4a40      	ldr	r2, [pc, #256]	; (80162c4 <UART_Start_Receive_DMA+0x130>)
 80161c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161c8:	4a3f      	ldr	r2, [pc, #252]	; (80162c8 <UART_Start_Receive_DMA+0x134>)
 80161ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161d0:	4a3e      	ldr	r2, [pc, #248]	; (80162cc <UART_Start_Receive_DMA+0x138>)
 80161d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161d8:	2200      	movs	r2, #0
 80161da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80161dc:	f107 0308 	add.w	r3, r7, #8
 80161e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	3304      	adds	r3, #4
 80161ec:	4619      	mov	r1, r3
 80161ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161f0:	681a      	ldr	r2, [r3, #0]
 80161f2:	88fb      	ldrh	r3, [r7, #6]
 80161f4:	f7fc fae6 	bl	80127c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80161f8:	2300      	movs	r3, #0
 80161fa:	613b      	str	r3, [r7, #16]
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	613b      	str	r3, [r7, #16]
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	613b      	str	r3, [r7, #16]
 801620c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	2200      	movs	r2, #0
 8016212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	691b      	ldr	r3, [r3, #16]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d019      	beq.n	8016252 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	330c      	adds	r3, #12
 8016224:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016228:	e853 3f00 	ldrex	r3, [r3]
 801622c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801622e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016234:	65bb      	str	r3, [r7, #88]	; 0x58
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	330c      	adds	r3, #12
 801623c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801623e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016240:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016242:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016246:	e841 2300 	strex	r3, r2, [r1]
 801624a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801624c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801624e:	2b00      	cmp	r3, #0
 8016250:	d1e5      	bne.n	801621e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	3314      	adds	r3, #20
 8016258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625c:	e853 3f00 	ldrex	r3, [r3]
 8016260:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016264:	f043 0301 	orr.w	r3, r3, #1
 8016268:	657b      	str	r3, [r7, #84]	; 0x54
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	3314      	adds	r3, #20
 8016270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016272:	63ba      	str	r2, [r7, #56]	; 0x38
 8016274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016276:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801627a:	e841 2300 	strex	r3, r2, [r1]
 801627e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016282:	2b00      	cmp	r3, #0
 8016284:	d1e5      	bne.n	8016252 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	3314      	adds	r3, #20
 801628c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801628e:	69bb      	ldr	r3, [r7, #24]
 8016290:	e853 3f00 	ldrex	r3, [r3]
 8016294:	617b      	str	r3, [r7, #20]
   return(result);
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801629c:	653b      	str	r3, [r7, #80]	; 0x50
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	3314      	adds	r3, #20
 80162a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80162a6:	627a      	str	r2, [r7, #36]	; 0x24
 80162a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162aa:	6a39      	ldr	r1, [r7, #32]
 80162ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162ae:	e841 2300 	strex	r3, r2, [r1]
 80162b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80162b4:	69fb      	ldr	r3, [r7, #28]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d1e5      	bne.n	8016286 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80162ba:	2300      	movs	r3, #0
}
 80162bc:	4618      	mov	r0, r3
 80162be:	3760      	adds	r7, #96	; 0x60
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}
 80162c4:	08015ec7 	.word	0x08015ec7
 80162c8:	08015fed 	.word	0x08015fed
 80162cc:	08016023 	.word	0x08016023

080162d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80162d0:	b480      	push	{r7}
 80162d2:	b089      	sub	sp, #36	; 0x24
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	330c      	adds	r3, #12
 80162de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	e853 3f00 	ldrex	r3, [r3]
 80162e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80162ee:	61fb      	str	r3, [r7, #28]
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	330c      	adds	r3, #12
 80162f6:	69fa      	ldr	r2, [r7, #28]
 80162f8:	61ba      	str	r2, [r7, #24]
 80162fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162fc:	6979      	ldr	r1, [r7, #20]
 80162fe:	69ba      	ldr	r2, [r7, #24]
 8016300:	e841 2300 	strex	r3, r2, [r1]
 8016304:	613b      	str	r3, [r7, #16]
   return(result);
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d1e5      	bne.n	80162d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2220      	movs	r2, #32
 8016310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8016314:	bf00      	nop
 8016316:	3724      	adds	r7, #36	; 0x24
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr

08016320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016320:	b480      	push	{r7}
 8016322:	b095      	sub	sp, #84	; 0x54
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	330c      	adds	r3, #12
 801632e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016332:	e853 3f00 	ldrex	r3, [r3]
 8016336:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801633e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	330c      	adds	r3, #12
 8016346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016348:	643a      	str	r2, [r7, #64]	; 0x40
 801634a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801634c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801634e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016350:	e841 2300 	strex	r3, r2, [r1]
 8016354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016358:	2b00      	cmp	r3, #0
 801635a:	d1e5      	bne.n	8016328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	3314      	adds	r3, #20
 8016362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016364:	6a3b      	ldr	r3, [r7, #32]
 8016366:	e853 3f00 	ldrex	r3, [r3]
 801636a:	61fb      	str	r3, [r7, #28]
   return(result);
 801636c:	69fb      	ldr	r3, [r7, #28]
 801636e:	f023 0301 	bic.w	r3, r3, #1
 8016372:	64bb      	str	r3, [r7, #72]	; 0x48
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	3314      	adds	r3, #20
 801637a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801637c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801637e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016384:	e841 2300 	strex	r3, r2, [r1]
 8016388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638c:	2b00      	cmp	r3, #0
 801638e:	d1e5      	bne.n	801635c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016394:	2b01      	cmp	r3, #1
 8016396:	d119      	bne.n	80163cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	330c      	adds	r3, #12
 801639e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	e853 3f00 	ldrex	r3, [r3]
 80163a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80163a8:	68bb      	ldr	r3, [r7, #8]
 80163aa:	f023 0310 	bic.w	r3, r3, #16
 80163ae:	647b      	str	r3, [r7, #68]	; 0x44
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	330c      	adds	r3, #12
 80163b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80163b8:	61ba      	str	r2, [r7, #24]
 80163ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163bc:	6979      	ldr	r1, [r7, #20]
 80163be:	69ba      	ldr	r2, [r7, #24]
 80163c0:	e841 2300 	strex	r3, r2, [r1]
 80163c4:	613b      	str	r3, [r7, #16]
   return(result);
 80163c6:	693b      	ldr	r3, [r7, #16]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d1e5      	bne.n	8016398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2220      	movs	r2, #32
 80163d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2200      	movs	r2, #0
 80163d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80163da:	bf00      	nop
 80163dc:	3754      	adds	r7, #84	; 0x54
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr

080163e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80163e6:	b580      	push	{r7, lr}
 80163e8:	b084      	sub	sp, #16
 80163ea:	af00      	add	r7, sp, #0
 80163ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2200      	movs	r2, #0
 80163f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	2200      	movs	r2, #0
 80163fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f7ff fcef 	bl	8015de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016406:	bf00      	nop
 8016408:	3710      	adds	r7, #16
 801640a:	46bd      	mov	sp, r7
 801640c:	bd80      	pop	{r7, pc}

0801640e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801640e:	b480      	push	{r7}
 8016410:	b085      	sub	sp, #20
 8016412:	af00      	add	r7, sp, #0
 8016414:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801641c:	b2db      	uxtb	r3, r3
 801641e:	2b21      	cmp	r3, #33	; 0x21
 8016420:	d13e      	bne.n	80164a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	689b      	ldr	r3, [r3, #8]
 8016426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801642a:	d114      	bne.n	8016456 <UART_Transmit_IT+0x48>
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	691b      	ldr	r3, [r3, #16]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d110      	bne.n	8016456 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	6a1b      	ldr	r3, [r3, #32]
 8016438:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	881b      	ldrh	r3, [r3, #0]
 801643e:	461a      	mov	r2, r3
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016448:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	6a1b      	ldr	r3, [r3, #32]
 801644e:	1c9a      	adds	r2, r3, #2
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	621a      	str	r2, [r3, #32]
 8016454:	e008      	b.n	8016468 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	6a1b      	ldr	r3, [r3, #32]
 801645a:	1c59      	adds	r1, r3, #1
 801645c:	687a      	ldr	r2, [r7, #4]
 801645e:	6211      	str	r1, [r2, #32]
 8016460:	781a      	ldrb	r2, [r3, #0]
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801646c:	b29b      	uxth	r3, r3
 801646e:	3b01      	subs	r3, #1
 8016470:	b29b      	uxth	r3, r3
 8016472:	687a      	ldr	r2, [r7, #4]
 8016474:	4619      	mov	r1, r3
 8016476:	84d1      	strh	r1, [r2, #38]	; 0x26
 8016478:	2b00      	cmp	r3, #0
 801647a:	d10f      	bne.n	801649c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	68da      	ldr	r2, [r3, #12]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801648a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	68da      	ldr	r2, [r3, #12]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801649a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801649c:	2300      	movs	r3, #0
 801649e:	e000      	b.n	80164a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80164a0:	2302      	movs	r3, #2
  }
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3714      	adds	r7, #20
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr

080164ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80164ae:	b580      	push	{r7, lr}
 80164b0:	b082      	sub	sp, #8
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	68da      	ldr	r2, [r3, #12]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80164c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2220      	movs	r2, #32
 80164ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f7fa f89c 	bl	801060c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80164d4:	2300      	movs	r3, #0
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3708      	adds	r7, #8
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80164de:	b580      	push	{r7, lr}
 80164e0:	b08c      	sub	sp, #48	; 0x30
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80164ec:	b2db      	uxtb	r3, r3
 80164ee:	2b22      	cmp	r3, #34	; 0x22
 80164f0:	f040 80ab 	bne.w	801664a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	689b      	ldr	r3, [r3, #8]
 80164f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164fc:	d117      	bne.n	801652e <UART_Receive_IT+0x50>
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	691b      	ldr	r3, [r3, #16]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d113      	bne.n	801652e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8016506:	2300      	movs	r3, #0
 8016508:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801650e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	b29b      	uxth	r3, r3
 8016518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801651c:	b29a      	uxth	r2, r3
 801651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016520:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016526:	1c9a      	adds	r2, r3, #2
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	629a      	str	r2, [r3, #40]	; 0x28
 801652c:	e026      	b.n	801657c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016532:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8016534:	2300      	movs	r3, #0
 8016536:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	689b      	ldr	r3, [r3, #8]
 801653c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016540:	d007      	beq.n	8016552 <UART_Receive_IT+0x74>
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	689b      	ldr	r3, [r3, #8]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d10a      	bne.n	8016560 <UART_Receive_IT+0x82>
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	691b      	ldr	r3, [r3, #16]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d106      	bne.n	8016560 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	b2da      	uxtb	r2, r3
 801655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655c:	701a      	strb	r2, [r3, #0]
 801655e:	e008      	b.n	8016572 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	b2db      	uxtb	r3, r3
 8016568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801656c:	b2da      	uxtb	r2, r3
 801656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016570:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016576:	1c5a      	adds	r2, r3, #1
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016580:	b29b      	uxth	r3, r3
 8016582:	3b01      	subs	r3, #1
 8016584:	b29b      	uxth	r3, r3
 8016586:	687a      	ldr	r2, [r7, #4]
 8016588:	4619      	mov	r1, r3
 801658a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801658c:	2b00      	cmp	r3, #0
 801658e:	d15a      	bne.n	8016646 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	68da      	ldr	r2, [r3, #12]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f022 0220 	bic.w	r2, r2, #32
 801659e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	68da      	ldr	r2, [r3, #12]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80165ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	695a      	ldr	r2, [r3, #20]
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	f022 0201 	bic.w	r2, r2, #1
 80165be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2220      	movs	r2, #32
 80165c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165cc:	2b01      	cmp	r3, #1
 80165ce:	d135      	bne.n	801663c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2200      	movs	r2, #0
 80165d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	330c      	adds	r3, #12
 80165dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165de:	697b      	ldr	r3, [r7, #20]
 80165e0:	e853 3f00 	ldrex	r3, [r3]
 80165e4:	613b      	str	r3, [r7, #16]
   return(result);
 80165e6:	693b      	ldr	r3, [r7, #16]
 80165e8:	f023 0310 	bic.w	r3, r3, #16
 80165ec:	627b      	str	r3, [r7, #36]	; 0x24
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	330c      	adds	r3, #12
 80165f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165f6:	623a      	str	r2, [r7, #32]
 80165f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165fa:	69f9      	ldr	r1, [r7, #28]
 80165fc:	6a3a      	ldr	r2, [r7, #32]
 80165fe:	e841 2300 	strex	r3, r2, [r1]
 8016602:	61bb      	str	r3, [r7, #24]
   return(result);
 8016604:	69bb      	ldr	r3, [r7, #24]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d1e5      	bne.n	80165d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	f003 0310 	and.w	r3, r3, #16
 8016614:	2b10      	cmp	r3, #16
 8016616:	d10a      	bne.n	801662e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016618:	2300      	movs	r3, #0
 801661a:	60fb      	str	r3, [r7, #12]
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	60fb      	str	r3, [r7, #12]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	685b      	ldr	r3, [r3, #4]
 801662a:	60fb      	str	r3, [r7, #12]
 801662c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016632:	4619      	mov	r1, r3
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f7ff fbdf 	bl	8015df8 <HAL_UARTEx_RxEventCallback>
 801663a:	e002      	b.n	8016642 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f7fa f81b 	bl	8010678 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8016642:	2300      	movs	r3, #0
 8016644:	e002      	b.n	801664c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8016646:	2300      	movs	r3, #0
 8016648:	e000      	b.n	801664c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801664a:	2302      	movs	r3, #2
  }
}
 801664c:	4618      	mov	r0, r3
 801664e:	3730      	adds	r7, #48	; 0x30
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016658:	b09f      	sub	sp, #124	; 0x7c
 801665a:	af00      	add	r7, sp, #0
 801665c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801665e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	691b      	ldr	r3, [r3, #16]
 8016664:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8016668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801666a:	68d9      	ldr	r1, [r3, #12]
 801666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801666e:	681a      	ldr	r2, [r3, #0]
 8016670:	ea40 0301 	orr.w	r3, r0, r1
 8016674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8016676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016678:	689a      	ldr	r2, [r3, #8]
 801667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801667c:	691b      	ldr	r3, [r3, #16]
 801667e:	431a      	orrs	r2, r3
 8016680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016682:	695b      	ldr	r3, [r3, #20]
 8016684:	431a      	orrs	r2, r3
 8016686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016688:	69db      	ldr	r3, [r3, #28]
 801668a:	4313      	orrs	r3, r2
 801668c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 801668e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	68db      	ldr	r3, [r3, #12]
 8016694:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8016698:	f021 010c 	bic.w	r1, r1, #12
 801669c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801669e:	681a      	ldr	r2, [r3, #0]
 80166a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80166a2:	430b      	orrs	r3, r1
 80166a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80166a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	695b      	ldr	r3, [r3, #20]
 80166ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80166b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166b2:	6999      	ldr	r1, [r3, #24]
 80166b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166b6:	681a      	ldr	r2, [r3, #0]
 80166b8:	ea40 0301 	orr.w	r3, r0, r1
 80166bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80166be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166c0:	681a      	ldr	r2, [r3, #0]
 80166c2:	4bc5      	ldr	r3, [pc, #788]	; (80169d8 <UART_SetConfig+0x384>)
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d004      	beq.n	80166d2 <UART_SetConfig+0x7e>
 80166c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166ca:	681a      	ldr	r2, [r3, #0]
 80166cc:	4bc3      	ldr	r3, [pc, #780]	; (80169dc <UART_SetConfig+0x388>)
 80166ce:	429a      	cmp	r2, r3
 80166d0:	d103      	bne.n	80166da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80166d2:	f7fd fa39 	bl	8013b48 <HAL_RCC_GetPCLK2Freq>
 80166d6:	6778      	str	r0, [r7, #116]	; 0x74
 80166d8:	e002      	b.n	80166e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80166da:	f7fd fa21 	bl	8013b20 <HAL_RCC_GetPCLK1Freq>
 80166de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80166e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166e2:	69db      	ldr	r3, [r3, #28]
 80166e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80166e8:	f040 80b6 	bne.w	8016858 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80166ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80166ee:	461c      	mov	r4, r3
 80166f0:	f04f 0500 	mov.w	r5, #0
 80166f4:	4622      	mov	r2, r4
 80166f6:	462b      	mov	r3, r5
 80166f8:	1891      	adds	r1, r2, r2
 80166fa:	6439      	str	r1, [r7, #64]	; 0x40
 80166fc:	415b      	adcs	r3, r3
 80166fe:	647b      	str	r3, [r7, #68]	; 0x44
 8016700:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016704:	1912      	adds	r2, r2, r4
 8016706:	eb45 0303 	adc.w	r3, r5, r3
 801670a:	f04f 0000 	mov.w	r0, #0
 801670e:	f04f 0100 	mov.w	r1, #0
 8016712:	00d9      	lsls	r1, r3, #3
 8016714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016718:	00d0      	lsls	r0, r2, #3
 801671a:	4602      	mov	r2, r0
 801671c:	460b      	mov	r3, r1
 801671e:	1911      	adds	r1, r2, r4
 8016720:	6639      	str	r1, [r7, #96]	; 0x60
 8016722:	416b      	adcs	r3, r5
 8016724:	667b      	str	r3, [r7, #100]	; 0x64
 8016726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016728:	685b      	ldr	r3, [r3, #4]
 801672a:	461a      	mov	r2, r3
 801672c:	f04f 0300 	mov.w	r3, #0
 8016730:	1891      	adds	r1, r2, r2
 8016732:	63b9      	str	r1, [r7, #56]	; 0x38
 8016734:	415b      	adcs	r3, r3
 8016736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801673c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8016740:	f7f9 fd9e 	bl	8010280 <__aeabi_uldivmod>
 8016744:	4602      	mov	r2, r0
 8016746:	460b      	mov	r3, r1
 8016748:	4ba5      	ldr	r3, [pc, #660]	; (80169e0 <UART_SetConfig+0x38c>)
 801674a:	fba3 2302 	umull	r2, r3, r3, r2
 801674e:	095b      	lsrs	r3, r3, #5
 8016750:	011e      	lsls	r6, r3, #4
 8016752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016754:	461c      	mov	r4, r3
 8016756:	f04f 0500 	mov.w	r5, #0
 801675a:	4622      	mov	r2, r4
 801675c:	462b      	mov	r3, r5
 801675e:	1891      	adds	r1, r2, r2
 8016760:	6339      	str	r1, [r7, #48]	; 0x30
 8016762:	415b      	adcs	r3, r3
 8016764:	637b      	str	r3, [r7, #52]	; 0x34
 8016766:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801676a:	1912      	adds	r2, r2, r4
 801676c:	eb45 0303 	adc.w	r3, r5, r3
 8016770:	f04f 0000 	mov.w	r0, #0
 8016774:	f04f 0100 	mov.w	r1, #0
 8016778:	00d9      	lsls	r1, r3, #3
 801677a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801677e:	00d0      	lsls	r0, r2, #3
 8016780:	4602      	mov	r2, r0
 8016782:	460b      	mov	r3, r1
 8016784:	1911      	adds	r1, r2, r4
 8016786:	65b9      	str	r1, [r7, #88]	; 0x58
 8016788:	416b      	adcs	r3, r5
 801678a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801678c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	461a      	mov	r2, r3
 8016792:	f04f 0300 	mov.w	r3, #0
 8016796:	1891      	adds	r1, r2, r2
 8016798:	62b9      	str	r1, [r7, #40]	; 0x28
 801679a:	415b      	adcs	r3, r3
 801679c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801679e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80167a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80167a6:	f7f9 fd6b 	bl	8010280 <__aeabi_uldivmod>
 80167aa:	4602      	mov	r2, r0
 80167ac:	460b      	mov	r3, r1
 80167ae:	4b8c      	ldr	r3, [pc, #560]	; (80169e0 <UART_SetConfig+0x38c>)
 80167b0:	fba3 1302 	umull	r1, r3, r3, r2
 80167b4:	095b      	lsrs	r3, r3, #5
 80167b6:	2164      	movs	r1, #100	; 0x64
 80167b8:	fb01 f303 	mul.w	r3, r1, r3
 80167bc:	1ad3      	subs	r3, r2, r3
 80167be:	00db      	lsls	r3, r3, #3
 80167c0:	3332      	adds	r3, #50	; 0x32
 80167c2:	4a87      	ldr	r2, [pc, #540]	; (80169e0 <UART_SetConfig+0x38c>)
 80167c4:	fba2 2303 	umull	r2, r3, r2, r3
 80167c8:	095b      	lsrs	r3, r3, #5
 80167ca:	005b      	lsls	r3, r3, #1
 80167cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80167d0:	441e      	add	r6, r3
 80167d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80167d4:	4618      	mov	r0, r3
 80167d6:	f04f 0100 	mov.w	r1, #0
 80167da:	4602      	mov	r2, r0
 80167dc:	460b      	mov	r3, r1
 80167de:	1894      	adds	r4, r2, r2
 80167e0:	623c      	str	r4, [r7, #32]
 80167e2:	415b      	adcs	r3, r3
 80167e4:	627b      	str	r3, [r7, #36]	; 0x24
 80167e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80167ea:	1812      	adds	r2, r2, r0
 80167ec:	eb41 0303 	adc.w	r3, r1, r3
 80167f0:	f04f 0400 	mov.w	r4, #0
 80167f4:	f04f 0500 	mov.w	r5, #0
 80167f8:	00dd      	lsls	r5, r3, #3
 80167fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80167fe:	00d4      	lsls	r4, r2, #3
 8016800:	4622      	mov	r2, r4
 8016802:	462b      	mov	r3, r5
 8016804:	1814      	adds	r4, r2, r0
 8016806:	653c      	str	r4, [r7, #80]	; 0x50
 8016808:	414b      	adcs	r3, r1
 801680a:	657b      	str	r3, [r7, #84]	; 0x54
 801680c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	461a      	mov	r2, r3
 8016812:	f04f 0300 	mov.w	r3, #0
 8016816:	1891      	adds	r1, r2, r2
 8016818:	61b9      	str	r1, [r7, #24]
 801681a:	415b      	adcs	r3, r3
 801681c:	61fb      	str	r3, [r7, #28]
 801681e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016822:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016826:	f7f9 fd2b 	bl	8010280 <__aeabi_uldivmod>
 801682a:	4602      	mov	r2, r0
 801682c:	460b      	mov	r3, r1
 801682e:	4b6c      	ldr	r3, [pc, #432]	; (80169e0 <UART_SetConfig+0x38c>)
 8016830:	fba3 1302 	umull	r1, r3, r3, r2
 8016834:	095b      	lsrs	r3, r3, #5
 8016836:	2164      	movs	r1, #100	; 0x64
 8016838:	fb01 f303 	mul.w	r3, r1, r3
 801683c:	1ad3      	subs	r3, r2, r3
 801683e:	00db      	lsls	r3, r3, #3
 8016840:	3332      	adds	r3, #50	; 0x32
 8016842:	4a67      	ldr	r2, [pc, #412]	; (80169e0 <UART_SetConfig+0x38c>)
 8016844:	fba2 2303 	umull	r2, r3, r2, r3
 8016848:	095b      	lsrs	r3, r3, #5
 801684a:	f003 0207 	and.w	r2, r3, #7
 801684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	4432      	add	r2, r6
 8016854:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8016856:	e0b9      	b.n	80169cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801685a:	461c      	mov	r4, r3
 801685c:	f04f 0500 	mov.w	r5, #0
 8016860:	4622      	mov	r2, r4
 8016862:	462b      	mov	r3, r5
 8016864:	1891      	adds	r1, r2, r2
 8016866:	6139      	str	r1, [r7, #16]
 8016868:	415b      	adcs	r3, r3
 801686a:	617b      	str	r3, [r7, #20]
 801686c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016870:	1912      	adds	r2, r2, r4
 8016872:	eb45 0303 	adc.w	r3, r5, r3
 8016876:	f04f 0000 	mov.w	r0, #0
 801687a:	f04f 0100 	mov.w	r1, #0
 801687e:	00d9      	lsls	r1, r3, #3
 8016880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016884:	00d0      	lsls	r0, r2, #3
 8016886:	4602      	mov	r2, r0
 8016888:	460b      	mov	r3, r1
 801688a:	eb12 0804 	adds.w	r8, r2, r4
 801688e:	eb43 0905 	adc.w	r9, r3, r5
 8016892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016894:	685b      	ldr	r3, [r3, #4]
 8016896:	4618      	mov	r0, r3
 8016898:	f04f 0100 	mov.w	r1, #0
 801689c:	f04f 0200 	mov.w	r2, #0
 80168a0:	f04f 0300 	mov.w	r3, #0
 80168a4:	008b      	lsls	r3, r1, #2
 80168a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80168aa:	0082      	lsls	r2, r0, #2
 80168ac:	4640      	mov	r0, r8
 80168ae:	4649      	mov	r1, r9
 80168b0:	f7f9 fce6 	bl	8010280 <__aeabi_uldivmod>
 80168b4:	4602      	mov	r2, r0
 80168b6:	460b      	mov	r3, r1
 80168b8:	4b49      	ldr	r3, [pc, #292]	; (80169e0 <UART_SetConfig+0x38c>)
 80168ba:	fba3 2302 	umull	r2, r3, r3, r2
 80168be:	095b      	lsrs	r3, r3, #5
 80168c0:	011e      	lsls	r6, r3, #4
 80168c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168c4:	4618      	mov	r0, r3
 80168c6:	f04f 0100 	mov.w	r1, #0
 80168ca:	4602      	mov	r2, r0
 80168cc:	460b      	mov	r3, r1
 80168ce:	1894      	adds	r4, r2, r2
 80168d0:	60bc      	str	r4, [r7, #8]
 80168d2:	415b      	adcs	r3, r3
 80168d4:	60fb      	str	r3, [r7, #12]
 80168d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80168da:	1812      	adds	r2, r2, r0
 80168dc:	eb41 0303 	adc.w	r3, r1, r3
 80168e0:	f04f 0400 	mov.w	r4, #0
 80168e4:	f04f 0500 	mov.w	r5, #0
 80168e8:	00dd      	lsls	r5, r3, #3
 80168ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80168ee:	00d4      	lsls	r4, r2, #3
 80168f0:	4622      	mov	r2, r4
 80168f2:	462b      	mov	r3, r5
 80168f4:	1814      	adds	r4, r2, r0
 80168f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80168f8:	414b      	adcs	r3, r1
 80168fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80168fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	4618      	mov	r0, r3
 8016902:	f04f 0100 	mov.w	r1, #0
 8016906:	f04f 0200 	mov.w	r2, #0
 801690a:	f04f 0300 	mov.w	r3, #0
 801690e:	008b      	lsls	r3, r1, #2
 8016910:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016914:	0082      	lsls	r2, r0, #2
 8016916:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801691a:	f7f9 fcb1 	bl	8010280 <__aeabi_uldivmod>
 801691e:	4602      	mov	r2, r0
 8016920:	460b      	mov	r3, r1
 8016922:	4b2f      	ldr	r3, [pc, #188]	; (80169e0 <UART_SetConfig+0x38c>)
 8016924:	fba3 1302 	umull	r1, r3, r3, r2
 8016928:	095b      	lsrs	r3, r3, #5
 801692a:	2164      	movs	r1, #100	; 0x64
 801692c:	fb01 f303 	mul.w	r3, r1, r3
 8016930:	1ad3      	subs	r3, r2, r3
 8016932:	011b      	lsls	r3, r3, #4
 8016934:	3332      	adds	r3, #50	; 0x32
 8016936:	4a2a      	ldr	r2, [pc, #168]	; (80169e0 <UART_SetConfig+0x38c>)
 8016938:	fba2 2303 	umull	r2, r3, r2, r3
 801693c:	095b      	lsrs	r3, r3, #5
 801693e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016942:	441e      	add	r6, r3
 8016944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016946:	4618      	mov	r0, r3
 8016948:	f04f 0100 	mov.w	r1, #0
 801694c:	4602      	mov	r2, r0
 801694e:	460b      	mov	r3, r1
 8016950:	1894      	adds	r4, r2, r2
 8016952:	603c      	str	r4, [r7, #0]
 8016954:	415b      	adcs	r3, r3
 8016956:	607b      	str	r3, [r7, #4]
 8016958:	e9d7 2300 	ldrd	r2, r3, [r7]
 801695c:	1812      	adds	r2, r2, r0
 801695e:	eb41 0303 	adc.w	r3, r1, r3
 8016962:	f04f 0400 	mov.w	r4, #0
 8016966:	f04f 0500 	mov.w	r5, #0
 801696a:	00dd      	lsls	r5, r3, #3
 801696c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016970:	00d4      	lsls	r4, r2, #3
 8016972:	4622      	mov	r2, r4
 8016974:	462b      	mov	r3, r5
 8016976:	eb12 0a00 	adds.w	sl, r2, r0
 801697a:	eb43 0b01 	adc.w	fp, r3, r1
 801697e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016980:	685b      	ldr	r3, [r3, #4]
 8016982:	4618      	mov	r0, r3
 8016984:	f04f 0100 	mov.w	r1, #0
 8016988:	f04f 0200 	mov.w	r2, #0
 801698c:	f04f 0300 	mov.w	r3, #0
 8016990:	008b      	lsls	r3, r1, #2
 8016992:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016996:	0082      	lsls	r2, r0, #2
 8016998:	4650      	mov	r0, sl
 801699a:	4659      	mov	r1, fp
 801699c:	f7f9 fc70 	bl	8010280 <__aeabi_uldivmod>
 80169a0:	4602      	mov	r2, r0
 80169a2:	460b      	mov	r3, r1
 80169a4:	4b0e      	ldr	r3, [pc, #56]	; (80169e0 <UART_SetConfig+0x38c>)
 80169a6:	fba3 1302 	umull	r1, r3, r3, r2
 80169aa:	095b      	lsrs	r3, r3, #5
 80169ac:	2164      	movs	r1, #100	; 0x64
 80169ae:	fb01 f303 	mul.w	r3, r1, r3
 80169b2:	1ad3      	subs	r3, r2, r3
 80169b4:	011b      	lsls	r3, r3, #4
 80169b6:	3332      	adds	r3, #50	; 0x32
 80169b8:	4a09      	ldr	r2, [pc, #36]	; (80169e0 <UART_SetConfig+0x38c>)
 80169ba:	fba2 2303 	umull	r2, r3, r2, r3
 80169be:	095b      	lsrs	r3, r3, #5
 80169c0:	f003 020f 	and.w	r2, r3, #15
 80169c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	4432      	add	r2, r6
 80169ca:	609a      	str	r2, [r3, #8]
}
 80169cc:	bf00      	nop
 80169ce:	377c      	adds	r7, #124	; 0x7c
 80169d0:	46bd      	mov	sp, r7
 80169d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169d6:	bf00      	nop
 80169d8:	40011000 	.word	0x40011000
 80169dc:	40011400 	.word	0x40011400
 80169e0:	51eb851f 	.word	0x51eb851f

080169e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80169e4:	b480      	push	{r7}
 80169e6:	b085      	sub	sp, #20
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	4603      	mov	r3, r0
 80169ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80169ee:	2300      	movs	r3, #0
 80169f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80169f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80169f6:	2b84      	cmp	r3, #132	; 0x84
 80169f8:	d005      	beq.n	8016a06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80169fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	4413      	add	r3, r2
 8016a02:	3303      	adds	r3, #3
 8016a04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8016a06:	68fb      	ldr	r3, [r7, #12]
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3714      	adds	r7, #20
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a12:	4770      	bx	lr

08016a14 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8016a14:	b480      	push	{r7}
 8016a16:	b083      	sub	sp, #12
 8016a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016a1a:	f3ef 8305 	mrs	r3, IPSR
 8016a1e:	607b      	str	r3, [r7, #4]
  return(result);
 8016a20:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	bf14      	ite	ne
 8016a26:	2301      	movne	r3, #1
 8016a28:	2300      	moveq	r3, #0
 8016a2a:	b2db      	uxtb	r3, r3
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	370c      	adds	r7, #12
 8016a30:	46bd      	mov	sp, r7
 8016a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a36:	4770      	bx	lr

08016a38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8016a3c:	f001 ffb0 	bl	80189a0 <vTaskStartScheduler>
  
  return osOK;
 8016a40:	2300      	movs	r3, #0
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	bd80      	pop	{r7, pc}

08016a46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a48:	b089      	sub	sp, #36	; 0x24
 8016a4a:	af04      	add	r7, sp, #16
 8016a4c:	6078      	str	r0, [r7, #4]
 8016a4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	695b      	ldr	r3, [r3, #20]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d020      	beq.n	8016a9a <osThreadCreate+0x54>
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	699b      	ldr	r3, [r3, #24]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d01c      	beq.n	8016a9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	685c      	ldr	r4, [r3, #4]
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681d      	ldr	r5, [r3, #0]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	691e      	ldr	r6, [r3, #16]
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7ff ffb6 	bl	80169e4 <makeFreeRtosPriority>
 8016a78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	695b      	ldr	r3, [r3, #20]
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016a82:	9202      	str	r2, [sp, #8]
 8016a84:	9301      	str	r3, [sp, #4]
 8016a86:	9100      	str	r1, [sp, #0]
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	4632      	mov	r2, r6
 8016a8c:	4629      	mov	r1, r5
 8016a8e:	4620      	mov	r0, r4
 8016a90:	f001 fc14 	bl	80182bc <xTaskCreateStatic>
 8016a94:	4603      	mov	r3, r0
 8016a96:	60fb      	str	r3, [r7, #12]
 8016a98:	e01c      	b.n	8016ad4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	685c      	ldr	r4, [r3, #4]
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016aa6:	b29e      	uxth	r6, r3
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f7ff ff98 	bl	80169e4 <makeFreeRtosPriority>
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	f107 030c 	add.w	r3, r7, #12
 8016aba:	9301      	str	r3, [sp, #4]
 8016abc:	9200      	str	r2, [sp, #0]
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	4632      	mov	r2, r6
 8016ac2:	4629      	mov	r1, r5
 8016ac4:	4620      	mov	r0, r4
 8016ac6:	f001 fc56 	bl	8018376 <xTaskCreate>
 8016aca:	4603      	mov	r3, r0
 8016acc:	2b01      	cmp	r3, #1
 8016ace:	d001      	beq.n	8016ad4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	e000      	b.n	8016ad6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3714      	adds	r7, #20
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ade <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016ade:	b580      	push	{r7, lr}
 8016ae0:	b084      	sub	sp, #16
 8016ae2:	af00      	add	r7, sp, #0
 8016ae4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d001      	beq.n	8016af4 <osDelay+0x16>
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	e000      	b.n	8016af6 <osDelay+0x18>
 8016af4:	2301      	movs	r3, #1
 8016af6:	4618      	mov	r0, r3
 8016af8:	f001 fd8a 	bl	8018610 <vTaskDelay>
  
  return osOK;
 8016afc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	3710      	adds	r7, #16
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}
	...

08016b08 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b086      	sub	sp, #24
 8016b0c:	af02      	add	r7, sp, #8
 8016b0e:	60f8      	str	r0, [r7, #12]
 8016b10:	460b      	mov	r3, r1
 8016b12:	607a      	str	r2, [r7, #4]
 8016b14:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	685b      	ldr	r3, [r3, #4]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d013      	beq.n	8016b46 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8016b1e:	7afb      	ldrb	r3, [r7, #11]
 8016b20:	2b01      	cmp	r3, #1
 8016b22:	d101      	bne.n	8016b28 <osTimerCreate+0x20>
 8016b24:	2101      	movs	r1, #1
 8016b26:	e000      	b.n	8016b2a <osTimerCreate+0x22>
 8016b28:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8016b2e:	68fa      	ldr	r2, [r7, #12]
 8016b30:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8016b32:	9201      	str	r2, [sp, #4]
 8016b34:	9300      	str	r3, [sp, #0]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	460a      	mov	r2, r1
 8016b3a:	2101      	movs	r1, #1
 8016b3c:	480b      	ldr	r0, [pc, #44]	; (8016b6c <osTimerCreate+0x64>)
 8016b3e:	f002 fe0e 	bl	801975e <xTimerCreateStatic>
 8016b42:	4603      	mov	r3, r0
 8016b44:	e00e      	b.n	8016b64 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8016b46:	7afb      	ldrb	r3, [r7, #11]
 8016b48:	2b01      	cmp	r3, #1
 8016b4a:	d101      	bne.n	8016b50 <osTimerCreate+0x48>
 8016b4c:	2201      	movs	r2, #1
 8016b4e:	e000      	b.n	8016b52 <osTimerCreate+0x4a>
 8016b50:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8016b56:	9300      	str	r3, [sp, #0]
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	2101      	movs	r1, #1
 8016b5c:	4803      	ldr	r0, [pc, #12]	; (8016b6c <osTimerCreate+0x64>)
 8016b5e:	f002 fddd 	bl	801971c <xTimerCreate>
 8016b62:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8016b64:	4618      	mov	r0, r3
 8016b66:	3710      	adds	r7, #16
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}
 8016b6c:	0802a414 	.word	0x0802a414

08016b70 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b088      	sub	sp, #32
 8016b74:	af02      	add	r7, sp, #8
 8016b76:	6078      	str	r0, [r7, #4]
 8016b78:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8016b7e:	2300      	movs	r3, #0
 8016b80:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8016b86:	693b      	ldr	r3, [r7, #16]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d101      	bne.n	8016b90 <osTimerStart+0x20>
    ticks = 1;
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8016b90:	f7ff ff40 	bl	8016a14 <inHandlerMode>
 8016b94:	4603      	mov	r3, r0
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d01a      	beq.n	8016bd0 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8016b9a:	f107 030c 	add.w	r3, r7, #12
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	9200      	str	r2, [sp, #0]
 8016ba2:	693a      	ldr	r2, [r7, #16]
 8016ba4:	2109      	movs	r1, #9
 8016ba6:	6878      	ldr	r0, [r7, #4]
 8016ba8:	f002 fe52 	bl	8019850 <xTimerGenericCommand>
 8016bac:	4603      	mov	r3, r0
 8016bae:	2b01      	cmp	r3, #1
 8016bb0:	d002      	beq.n	8016bb8 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8016bb2:	23ff      	movs	r3, #255	; 0xff
 8016bb4:	617b      	str	r3, [r7, #20]
 8016bb6:	e018      	b.n	8016bea <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d015      	beq.n	8016bea <osTimerStart+0x7a>
 8016bbe:	4b0d      	ldr	r3, [pc, #52]	; (8016bf4 <osTimerStart+0x84>)
 8016bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bc4:	601a      	str	r2, [r3, #0]
 8016bc6:	f3bf 8f4f 	dsb	sy
 8016bca:	f3bf 8f6f 	isb	sy
 8016bce:	e00c      	b.n	8016bea <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	9300      	str	r3, [sp, #0]
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	693a      	ldr	r2, [r7, #16]
 8016bd8:	2104      	movs	r1, #4
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f002 fe38 	bl	8019850 <xTimerGenericCommand>
 8016be0:	4603      	mov	r3, r0
 8016be2:	2b01      	cmp	r3, #1
 8016be4:	d001      	beq.n	8016bea <osTimerStart+0x7a>
      result = osErrorOS;
 8016be6:	23ff      	movs	r3, #255	; 0xff
 8016be8:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8016bea:	697b      	ldr	r3, [r7, #20]
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3718      	adds	r7, #24
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}
 8016bf4:	e000ed04 	.word	0xe000ed04

08016bf8 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b086      	sub	sp, #24
 8016bfc:	af02      	add	r7, sp, #8
 8016bfe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8016c00:	2300      	movs	r3, #0
 8016c02:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8016c04:	2300      	movs	r3, #0
 8016c06:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8016c08:	f7ff ff04 	bl	8016a14 <inHandlerMode>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d019      	beq.n	8016c46 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8016c12:	f107 0308 	add.w	r3, r7, #8
 8016c16:	2200      	movs	r2, #0
 8016c18:	9200      	str	r2, [sp, #0]
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	2108      	movs	r1, #8
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f002 fe16 	bl	8019850 <xTimerGenericCommand>
 8016c24:	4603      	mov	r3, r0
 8016c26:	2b01      	cmp	r3, #1
 8016c28:	d001      	beq.n	8016c2e <osTimerStop+0x36>
      return osErrorOS;
 8016c2a:	23ff      	movs	r3, #255	; 0xff
 8016c2c:	e019      	b.n	8016c62 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d015      	beq.n	8016c60 <osTimerStop+0x68>
 8016c34:	4b0d      	ldr	r3, [pc, #52]	; (8016c6c <osTimerStop+0x74>)
 8016c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c3a:	601a      	str	r2, [r3, #0]
 8016c3c:	f3bf 8f4f 	dsb	sy
 8016c40:	f3bf 8f6f 	isb	sy
 8016c44:	e00c      	b.n	8016c60 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8016c46:	2300      	movs	r3, #0
 8016c48:	9300      	str	r3, [sp, #0]
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	2103      	movs	r1, #3
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f002 fdfd 	bl	8019850 <xTimerGenericCommand>
 8016c56:	4603      	mov	r3, r0
 8016c58:	2b01      	cmp	r3, #1
 8016c5a:	d001      	beq.n	8016c60 <osTimerStop+0x68>
      result = osErrorOS;
 8016c5c:	23ff      	movs	r3, #255	; 0xff
 8016c5e:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8016c60:	68fb      	ldr	r3, [r7, #12]
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	3710      	adds	r7, #16
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}
 8016c6a:	bf00      	nop
 8016c6c:	e000ed04 	.word	0xe000ed04

08016c70 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	685b      	ldr	r3, [r3, #4]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d007      	beq.n	8016c90 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	685b      	ldr	r3, [r3, #4]
 8016c84:	4619      	mov	r1, r3
 8016c86:	2001      	movs	r0, #1
 8016c88:	f000 fc7b 	bl	8017582 <xQueueCreateMutexStatic>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	e003      	b.n	8016c98 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8016c90:	2001      	movs	r0, #1
 8016c92:	f000 fc5e 	bl	8017552 <xQueueCreateMutex>
 8016c96:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3708      	adds	r7, #8
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}

08016ca0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b084      	sub	sp, #16
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8016caa:	2300      	movs	r3, #0
 8016cac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d101      	bne.n	8016cb8 <osMutexWait+0x18>
    return osErrorParameter;
 8016cb4:	2380      	movs	r3, #128	; 0x80
 8016cb6:	e03a      	b.n	8016d2e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8016cbc:	683b      	ldr	r3, [r7, #0]
 8016cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cc2:	d103      	bne.n	8016ccc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8016cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8016cc8:	60fb      	str	r3, [r7, #12]
 8016cca:	e009      	b.n	8016ce0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8016ccc:	683b      	ldr	r3, [r7, #0]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d006      	beq.n	8016ce0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8016cd2:	683b      	ldr	r3, [r7, #0]
 8016cd4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d101      	bne.n	8016ce0 <osMutexWait+0x40>
      ticks = 1;
 8016cdc:	2301      	movs	r3, #1
 8016cde:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8016ce0:	f7ff fe98 	bl	8016a14 <inHandlerMode>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d017      	beq.n	8016d1a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8016cea:	f107 0308 	add.w	r3, r7, #8
 8016cee:	461a      	mov	r2, r3
 8016cf0:	2100      	movs	r1, #0
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f001 f8dc 	bl	8017eb0 <xQueueReceiveFromISR>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	2b01      	cmp	r3, #1
 8016cfc:	d001      	beq.n	8016d02 <osMutexWait+0x62>
      return osErrorOS;
 8016cfe:	23ff      	movs	r3, #255	; 0xff
 8016d00:	e015      	b.n	8016d2e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8016d02:	68bb      	ldr	r3, [r7, #8]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d011      	beq.n	8016d2c <osMutexWait+0x8c>
 8016d08:	4b0b      	ldr	r3, [pc, #44]	; (8016d38 <osMutexWait+0x98>)
 8016d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d0e:	601a      	str	r2, [r3, #0]
 8016d10:	f3bf 8f4f 	dsb	sy
 8016d14:	f3bf 8f6f 	isb	sy
 8016d18:	e008      	b.n	8016d2c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8016d1a:	68f9      	ldr	r1, [r7, #12]
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f000 ffbb 	bl	8017c98 <xQueueSemaphoreTake>
 8016d22:	4603      	mov	r3, r0
 8016d24:	2b01      	cmp	r3, #1
 8016d26:	d001      	beq.n	8016d2c <osMutexWait+0x8c>
    return osErrorOS;
 8016d28:	23ff      	movs	r3, #255	; 0xff
 8016d2a:	e000      	b.n	8016d2e <osMutexWait+0x8e>
  }
  
  return osOK;
 8016d2c:	2300      	movs	r3, #0
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3710      	adds	r7, #16
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}
 8016d36:	bf00      	nop
 8016d38:	e000ed04 	.word	0xe000ed04

08016d3c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b084      	sub	sp, #16
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8016d44:	2300      	movs	r3, #0
 8016d46:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8016d48:	2300      	movs	r3, #0
 8016d4a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8016d4c:	f7ff fe62 	bl	8016a14 <inHandlerMode>
 8016d50:	4603      	mov	r3, r0
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d016      	beq.n	8016d84 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8016d56:	f107 0308 	add.w	r3, r7, #8
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f000 fe2e 	bl	80179be <xQueueGiveFromISR>
 8016d62:	4603      	mov	r3, r0
 8016d64:	2b01      	cmp	r3, #1
 8016d66:	d001      	beq.n	8016d6c <osMutexRelease+0x30>
      return osErrorOS;
 8016d68:	23ff      	movs	r3, #255	; 0xff
 8016d6a:	e017      	b.n	8016d9c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d013      	beq.n	8016d9a <osMutexRelease+0x5e>
 8016d72:	4b0c      	ldr	r3, [pc, #48]	; (8016da4 <osMutexRelease+0x68>)
 8016d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d78:	601a      	str	r2, [r3, #0]
 8016d7a:	f3bf 8f4f 	dsb	sy
 8016d7e:	f3bf 8f6f 	isb	sy
 8016d82:	e00a      	b.n	8016d9a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8016d84:	2300      	movs	r3, #0
 8016d86:	2200      	movs	r2, #0
 8016d88:	2100      	movs	r1, #0
 8016d8a:	6878      	ldr	r0, [r7, #4]
 8016d8c:	f000 fc7e 	bl	801768c <xQueueGenericSend>
 8016d90:	4603      	mov	r3, r0
 8016d92:	2b01      	cmp	r3, #1
 8016d94:	d001      	beq.n	8016d9a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8016d96:	23ff      	movs	r3, #255	; 0xff
 8016d98:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8016d9a:	68fb      	ldr	r3, [r7, #12]
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3710      	adds	r7, #16
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}
 8016da4:	e000ed04 	.word	0xe000ed04

08016da8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b086      	sub	sp, #24
 8016dac:	af02      	add	r7, sp, #8
 8016dae:	6078      	str	r0, [r7, #4]
 8016db0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	685b      	ldr	r3, [r3, #4]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d016      	beq.n	8016de8 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	2b01      	cmp	r3, #1
 8016dbe:	d10a      	bne.n	8016dd6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	685b      	ldr	r3, [r3, #4]
 8016dc4:	2203      	movs	r2, #3
 8016dc6:	9200      	str	r2, [sp, #0]
 8016dc8:	2200      	movs	r2, #0
 8016dca:	2100      	movs	r1, #0
 8016dcc:	2001      	movs	r0, #1
 8016dce:	f000 fad5 	bl	801737c <xQueueGenericCreateStatic>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	e023      	b.n	8016e1e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8016dd6:	6838      	ldr	r0, [r7, #0]
 8016dd8:	6839      	ldr	r1, [r7, #0]
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	685b      	ldr	r3, [r3, #4]
 8016dde:	461a      	mov	r2, r3
 8016de0:	f000 fbea 	bl	80175b8 <xQueueCreateCountingSemaphoreStatic>
 8016de4:	4603      	mov	r3, r0
 8016de6:	e01a      	b.n	8016e1e <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	2b01      	cmp	r3, #1
 8016dec:	d110      	bne.n	8016e10 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8016dee:	2203      	movs	r2, #3
 8016df0:	2100      	movs	r1, #0
 8016df2:	2001      	movs	r0, #1
 8016df4:	f000 fb3a 	bl	801746c <xQueueGenericCreate>
 8016df8:	60f8      	str	r0, [r7, #12]
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d005      	beq.n	8016e0c <osSemaphoreCreate+0x64>
 8016e00:	2300      	movs	r3, #0
 8016e02:	2200      	movs	r2, #0
 8016e04:	2100      	movs	r1, #0
 8016e06:	68f8      	ldr	r0, [r7, #12]
 8016e08:	f000 fc40 	bl	801768c <xQueueGenericSend>
      return sema;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	e006      	b.n	8016e1e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8016e10:	683b      	ldr	r3, [r7, #0]
 8016e12:	683a      	ldr	r2, [r7, #0]
 8016e14:	4611      	mov	r1, r2
 8016e16:	4618      	mov	r0, r3
 8016e18:	f000 fc05 	bl	8017626 <xQueueCreateCountingSemaphore>
 8016e1c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	3710      	adds	r7, #16
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
	...

08016e28 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
 8016e30:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8016e32:	2300      	movs	r3, #0
 8016e34:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d101      	bne.n	8016e40 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8016e3c:	2380      	movs	r3, #128	; 0x80
 8016e3e:	e03a      	b.n	8016eb6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8016e40:	2300      	movs	r3, #0
 8016e42:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e4a:	d103      	bne.n	8016e54 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8016e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e50:	60fb      	str	r3, [r7, #12]
 8016e52:	e009      	b.n	8016e68 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8016e54:	683b      	ldr	r3, [r7, #0]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d006      	beq.n	8016e68 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d101      	bne.n	8016e68 <osSemaphoreWait+0x40>
      ticks = 1;
 8016e64:	2301      	movs	r3, #1
 8016e66:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8016e68:	f7ff fdd4 	bl	8016a14 <inHandlerMode>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d017      	beq.n	8016ea2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8016e72:	f107 0308 	add.w	r3, r7, #8
 8016e76:	461a      	mov	r2, r3
 8016e78:	2100      	movs	r1, #0
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f001 f818 	bl	8017eb0 <xQueueReceiveFromISR>
 8016e80:	4603      	mov	r3, r0
 8016e82:	2b01      	cmp	r3, #1
 8016e84:	d001      	beq.n	8016e8a <osSemaphoreWait+0x62>
      return osErrorOS;
 8016e86:	23ff      	movs	r3, #255	; 0xff
 8016e88:	e015      	b.n	8016eb6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8016e8a:	68bb      	ldr	r3, [r7, #8]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d011      	beq.n	8016eb4 <osSemaphoreWait+0x8c>
 8016e90:	4b0b      	ldr	r3, [pc, #44]	; (8016ec0 <osSemaphoreWait+0x98>)
 8016e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e96:	601a      	str	r2, [r3, #0]
 8016e98:	f3bf 8f4f 	dsb	sy
 8016e9c:	f3bf 8f6f 	isb	sy
 8016ea0:	e008      	b.n	8016eb4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8016ea2:	68f9      	ldr	r1, [r7, #12]
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f000 fef7 	bl	8017c98 <xQueueSemaphoreTake>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d001      	beq.n	8016eb4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8016eb0:	23ff      	movs	r3, #255	; 0xff
 8016eb2:	e000      	b.n	8016eb6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8016eb4:	2300      	movs	r3, #0
}
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	3710      	adds	r7, #16
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}
 8016ebe:	bf00      	nop
 8016ec0:	e000ed04 	.word	0xe000ed04

08016ec4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b084      	sub	sp, #16
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8016ecc:	2300      	movs	r3, #0
 8016ece:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8016ed4:	f7ff fd9e 	bl	8016a14 <inHandlerMode>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d016      	beq.n	8016f0c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8016ede:	f107 0308 	add.w	r3, r7, #8
 8016ee2:	4619      	mov	r1, r3
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	f000 fd6a 	bl	80179be <xQueueGiveFromISR>
 8016eea:	4603      	mov	r3, r0
 8016eec:	2b01      	cmp	r3, #1
 8016eee:	d001      	beq.n	8016ef4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8016ef0:	23ff      	movs	r3, #255	; 0xff
 8016ef2:	e017      	b.n	8016f24 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d013      	beq.n	8016f22 <osSemaphoreRelease+0x5e>
 8016efa:	4b0c      	ldr	r3, [pc, #48]	; (8016f2c <osSemaphoreRelease+0x68>)
 8016efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f00:	601a      	str	r2, [r3, #0]
 8016f02:	f3bf 8f4f 	dsb	sy
 8016f06:	f3bf 8f6f 	isb	sy
 8016f0a:	e00a      	b.n	8016f22 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	2200      	movs	r2, #0
 8016f10:	2100      	movs	r1, #0
 8016f12:	6878      	ldr	r0, [r7, #4]
 8016f14:	f000 fbba 	bl	801768c <xQueueGenericSend>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	2b01      	cmp	r3, #1
 8016f1c:	d001      	beq.n	8016f22 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8016f1e:	23ff      	movs	r3, #255	; 0xff
 8016f20:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8016f22:	68fb      	ldr	r3, [r7, #12]
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3710      	adds	r7, #16
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	e000ed04 	.word	0xe000ed04

08016f30 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8016f30:	b590      	push	{r4, r7, lr}
 8016f32:	b085      	sub	sp, #20
 8016f34:	af02      	add	r7, sp, #8
 8016f36:	6078      	str	r0, [r7, #4]
 8016f38:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	689b      	ldr	r3, [r3, #8]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d011      	beq.n	8016f66 <osMessageCreate+0x36>
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	68db      	ldr	r3, [r3, #12]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d00d      	beq.n	8016f66 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	6818      	ldr	r0, [r3, #0]
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	6859      	ldr	r1, [r3, #4]
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	689a      	ldr	r2, [r3, #8]
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	68db      	ldr	r3, [r3, #12]
 8016f5a:	2400      	movs	r4, #0
 8016f5c:	9400      	str	r4, [sp, #0]
 8016f5e:	f000 fa0d 	bl	801737c <xQueueGenericCreateStatic>
 8016f62:	4603      	mov	r3, r0
 8016f64:	e008      	b.n	8016f78 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	6818      	ldr	r0, [r3, #0]
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	685b      	ldr	r3, [r3, #4]
 8016f6e:	2200      	movs	r2, #0
 8016f70:	4619      	mov	r1, r3
 8016f72:	f000 fa7b 	bl	801746c <xQueueGenericCreate>
 8016f76:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	370c      	adds	r7, #12
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd90      	pop	{r4, r7, pc}

08016f80 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b086      	sub	sp, #24
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	60f8      	str	r0, [r7, #12]
 8016f88:	60b9      	str	r1, [r7, #8]
 8016f8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d101      	bne.n	8016f9e <osMessagePut+0x1e>
    ticks = 1;
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8016f9e:	f7ff fd39 	bl	8016a14 <inHandlerMode>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d018      	beq.n	8016fda <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016fa8:	f107 0210 	add.w	r2, r7, #16
 8016fac:	f107 0108 	add.w	r1, r7, #8
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	68f8      	ldr	r0, [r7, #12]
 8016fb4:	f000 fc68 	bl	8017888 <xQueueGenericSendFromISR>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	2b01      	cmp	r3, #1
 8016fbc:	d001      	beq.n	8016fc2 <osMessagePut+0x42>
      return osErrorOS;
 8016fbe:	23ff      	movs	r3, #255	; 0xff
 8016fc0:	e018      	b.n	8016ff4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d014      	beq.n	8016ff2 <osMessagePut+0x72>
 8016fc8:	4b0c      	ldr	r3, [pc, #48]	; (8016ffc <osMessagePut+0x7c>)
 8016fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fce:	601a      	str	r2, [r3, #0]
 8016fd0:	f3bf 8f4f 	dsb	sy
 8016fd4:	f3bf 8f6f 	isb	sy
 8016fd8:	e00b      	b.n	8016ff2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8016fda:	f107 0108 	add.w	r1, r7, #8
 8016fde:	2300      	movs	r3, #0
 8016fe0:	697a      	ldr	r2, [r7, #20]
 8016fe2:	68f8      	ldr	r0, [r7, #12]
 8016fe4:	f000 fb52 	bl	801768c <xQueueGenericSend>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	2b01      	cmp	r3, #1
 8016fec:	d001      	beq.n	8016ff2 <osMessagePut+0x72>
      return osErrorOS;
 8016fee:	23ff      	movs	r3, #255	; 0xff
 8016ff0:	e000      	b.n	8016ff4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8016ff2:	2300      	movs	r3, #0
}
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	3718      	adds	r7, #24
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}
 8016ffc:	e000ed04 	.word	0xe000ed04

08017000 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8017000:	b590      	push	{r4, r7, lr}
 8017002:	b08b      	sub	sp, #44	; 0x2c
 8017004:	af00      	add	r7, sp, #0
 8017006:	60f8      	str	r0, [r7, #12]
 8017008:	60b9      	str	r1, [r7, #8]
 801700a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8017010:	2300      	movs	r3, #0
 8017012:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d10a      	bne.n	8017030 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801701a:	2380      	movs	r3, #128	; 0x80
 801701c:	617b      	str	r3, [r7, #20]
    return event;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	461c      	mov	r4, r3
 8017022:	f107 0314 	add.w	r3, r7, #20
 8017026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801702a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801702e:	e054      	b.n	80170da <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8017030:	2300      	movs	r3, #0
 8017032:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8017034:	2300      	movs	r3, #0
 8017036:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801703e:	d103      	bne.n	8017048 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8017040:	f04f 33ff 	mov.w	r3, #4294967295
 8017044:	627b      	str	r3, [r7, #36]	; 0x24
 8017046:	e009      	b.n	801705c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d006      	beq.n	801705c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8017052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017054:	2b00      	cmp	r3, #0
 8017056:	d101      	bne.n	801705c <osMessageGet+0x5c>
      ticks = 1;
 8017058:	2301      	movs	r3, #1
 801705a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801705c:	f7ff fcda 	bl	8016a14 <inHandlerMode>
 8017060:	4603      	mov	r3, r0
 8017062:	2b00      	cmp	r3, #0
 8017064:	d01c      	beq.n	80170a0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8017066:	f107 0220 	add.w	r2, r7, #32
 801706a:	f107 0314 	add.w	r3, r7, #20
 801706e:	3304      	adds	r3, #4
 8017070:	4619      	mov	r1, r3
 8017072:	68b8      	ldr	r0, [r7, #8]
 8017074:	f000 ff1c 	bl	8017eb0 <xQueueReceiveFromISR>
 8017078:	4603      	mov	r3, r0
 801707a:	2b01      	cmp	r3, #1
 801707c:	d102      	bne.n	8017084 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801707e:	2310      	movs	r3, #16
 8017080:	617b      	str	r3, [r7, #20]
 8017082:	e001      	b.n	8017088 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8017084:	2300      	movs	r3, #0
 8017086:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017088:	6a3b      	ldr	r3, [r7, #32]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d01d      	beq.n	80170ca <osMessageGet+0xca>
 801708e:	4b15      	ldr	r3, [pc, #84]	; (80170e4 <osMessageGet+0xe4>)
 8017090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017094:	601a      	str	r2, [r3, #0]
 8017096:	f3bf 8f4f 	dsb	sy
 801709a:	f3bf 8f6f 	isb	sy
 801709e:	e014      	b.n	80170ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80170a0:	f107 0314 	add.w	r3, r7, #20
 80170a4:	3304      	adds	r3, #4
 80170a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170a8:	4619      	mov	r1, r3
 80170aa:	68b8      	ldr	r0, [r7, #8]
 80170ac:	f000 fd14 	bl	8017ad8 <xQueueReceive>
 80170b0:	4603      	mov	r3, r0
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d102      	bne.n	80170bc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80170b6:	2310      	movs	r3, #16
 80170b8:	617b      	str	r3, [r7, #20]
 80170ba:	e006      	b.n	80170ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80170bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d101      	bne.n	80170c6 <osMessageGet+0xc6>
 80170c2:	2300      	movs	r3, #0
 80170c4:	e000      	b.n	80170c8 <osMessageGet+0xc8>
 80170c6:	2340      	movs	r3, #64	; 0x40
 80170c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	461c      	mov	r4, r3
 80170ce:	f107 0314 	add.w	r3, r7, #20
 80170d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80170d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80170da:	68f8      	ldr	r0, [r7, #12]
 80170dc:	372c      	adds	r7, #44	; 0x2c
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd90      	pop	{r4, r7, pc}
 80170e2:	bf00      	nop
 80170e4:	e000ed04 	.word	0xe000ed04

080170e8 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80170f0:	6878      	ldr	r0, [r7, #4]
 80170f2:	f001 fac1 	bl	8018678 <vTaskSuspend>
  
  return osOK;
 80170f6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80170f8:	4618      	mov	r0, r3
 80170fa:	3708      	adds	r7, #8
 80170fc:	46bd      	mov	sp, r7
 80170fe:	bd80      	pop	{r7, pc}

08017100 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b082      	sub	sp, #8
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8017108:	f7ff fc84 	bl	8016a14 <inHandlerMode>
 801710c:	4603      	mov	r3, r0
 801710e:	2b00      	cmp	r3, #0
 8017110:	d00e      	beq.n	8017130 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f001 fbd2 	bl	80188bc <xTaskResumeFromISR>
 8017118:	4603      	mov	r3, r0
 801711a:	2b01      	cmp	r3, #1
 801711c:	d10b      	bne.n	8017136 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 801711e:	4b08      	ldr	r3, [pc, #32]	; (8017140 <osThreadResume+0x40>)
 8017120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017124:	601a      	str	r2, [r3, #0]
 8017126:	f3bf 8f4f 	dsb	sy
 801712a:	f3bf 8f6f 	isb	sy
 801712e:	e002      	b.n	8017136 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8017130:	6878      	ldr	r0, [r7, #4]
 8017132:	f001 fb65 	bl	8018800 <vTaskResume>
  }
  return osOK;
 8017136:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8017138:	4618      	mov	r0, r3
 801713a:	3708      	adds	r7, #8
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}
 8017140:	e000ed04 	.word	0xe000ed04

08017144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017144:	b480      	push	{r7}
 8017146:	b083      	sub	sp, #12
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	f103 0208 	add.w	r2, r3, #8
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	f04f 32ff 	mov.w	r2, #4294967295
 801715c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	f103 0208 	add.w	r2, r3, #8
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	f103 0208 	add.w	r2, r3, #8
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	2200      	movs	r2, #0
 8017176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017178:	bf00      	nop
 801717a:	370c      	adds	r7, #12
 801717c:	46bd      	mov	sp, r7
 801717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017182:	4770      	bx	lr

08017184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017184:	b480      	push	{r7}
 8017186:	b083      	sub	sp, #12
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2200      	movs	r2, #0
 8017190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017192:	bf00      	nop
 8017194:	370c      	adds	r7, #12
 8017196:	46bd      	mov	sp, r7
 8017198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719c:	4770      	bx	lr

0801719e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801719e:	b480      	push	{r7}
 80171a0:	b085      	sub	sp, #20
 80171a2:	af00      	add	r7, sp, #0
 80171a4:	6078      	str	r0, [r7, #4]
 80171a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	685b      	ldr	r3, [r3, #4]
 80171ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	68fa      	ldr	r2, [r7, #12]
 80171b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	689a      	ldr	r2, [r3, #8]
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	689b      	ldr	r3, [r3, #8]
 80171c0:	683a      	ldr	r2, [r7, #0]
 80171c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	683a      	ldr	r2, [r7, #0]
 80171c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	687a      	ldr	r2, [r7, #4]
 80171ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	1c5a      	adds	r2, r3, #1
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	601a      	str	r2, [r3, #0]
}
 80171da:	bf00      	nop
 80171dc:	3714      	adds	r7, #20
 80171de:	46bd      	mov	sp, r7
 80171e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e4:	4770      	bx	lr

080171e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80171e6:	b480      	push	{r7}
 80171e8:	b085      	sub	sp, #20
 80171ea:	af00      	add	r7, sp, #0
 80171ec:	6078      	str	r0, [r7, #4]
 80171ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80171f0:	683b      	ldr	r3, [r7, #0]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80171f6:	68bb      	ldr	r3, [r7, #8]
 80171f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171fc:	d103      	bne.n	8017206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	691b      	ldr	r3, [r3, #16]
 8017202:	60fb      	str	r3, [r7, #12]
 8017204:	e00c      	b.n	8017220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	3308      	adds	r3, #8
 801720a:	60fb      	str	r3, [r7, #12]
 801720c:	e002      	b.n	8017214 <vListInsert+0x2e>
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	685b      	ldr	r3, [r3, #4]
 8017212:	60fb      	str	r3, [r7, #12]
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	685b      	ldr	r3, [r3, #4]
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	68ba      	ldr	r2, [r7, #8]
 801721c:	429a      	cmp	r2, r3
 801721e:	d2f6      	bcs.n	801720e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	685a      	ldr	r2, [r3, #4]
 8017224:	683b      	ldr	r3, [r7, #0]
 8017226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	685b      	ldr	r3, [r3, #4]
 801722c:	683a      	ldr	r2, [r7, #0]
 801722e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	68fa      	ldr	r2, [r7, #12]
 8017234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	683a      	ldr	r2, [r7, #0]
 801723a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	687a      	ldr	r2, [r7, #4]
 8017240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	1c5a      	adds	r2, r3, #1
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	601a      	str	r2, [r3, #0]
}
 801724c:	bf00      	nop
 801724e:	3714      	adds	r7, #20
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr

08017258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017258:	b480      	push	{r7}
 801725a:	b085      	sub	sp, #20
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	691b      	ldr	r3, [r3, #16]
 8017264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	685b      	ldr	r3, [r3, #4]
 801726a:	687a      	ldr	r2, [r7, #4]
 801726c:	6892      	ldr	r2, [r2, #8]
 801726e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	689b      	ldr	r3, [r3, #8]
 8017274:	687a      	ldr	r2, [r7, #4]
 8017276:	6852      	ldr	r2, [r2, #4]
 8017278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	685b      	ldr	r3, [r3, #4]
 801727e:	687a      	ldr	r2, [r7, #4]
 8017280:	429a      	cmp	r2, r3
 8017282:	d103      	bne.n	801728c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	689a      	ldr	r2, [r3, #8]
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2200      	movs	r2, #0
 8017290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	1e5a      	subs	r2, r3, #1
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	681b      	ldr	r3, [r3, #0]
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3714      	adds	r7, #20
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr

080172ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b084      	sub	sp, #16
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d10a      	bne.n	80172d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80172c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172c4:	f383 8811 	msr	BASEPRI, r3
 80172c8:	f3bf 8f6f 	isb	sy
 80172cc:	f3bf 8f4f 	dsb	sy
 80172d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80172d2:	bf00      	nop
 80172d4:	e7fe      	b.n	80172d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80172d6:	f002 fed5 	bl	801a084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	681a      	ldr	r2, [r3, #0]
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172e2:	68f9      	ldr	r1, [r7, #12]
 80172e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80172e6:	fb01 f303 	mul.w	r3, r1, r3
 80172ea:	441a      	add	r2, r3
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	2200      	movs	r2, #0
 80172f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	681a      	ldr	r2, [r3, #0]
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	681a      	ldr	r2, [r3, #0]
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017306:	3b01      	subs	r3, #1
 8017308:	68f9      	ldr	r1, [r7, #12]
 801730a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801730c:	fb01 f303 	mul.w	r3, r1, r3
 8017310:	441a      	add	r2, r3
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	22ff      	movs	r2, #255	; 0xff
 801731a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	22ff      	movs	r2, #255	; 0xff
 8017322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d114      	bne.n	8017356 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	691b      	ldr	r3, [r3, #16]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d01a      	beq.n	801736a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	3310      	adds	r3, #16
 8017338:	4618      	mov	r0, r3
 801733a:	f001 fdc5 	bl	8018ec8 <xTaskRemoveFromEventList>
 801733e:	4603      	mov	r3, r0
 8017340:	2b00      	cmp	r3, #0
 8017342:	d012      	beq.n	801736a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017344:	4b0c      	ldr	r3, [pc, #48]	; (8017378 <xQueueGenericReset+0xcc>)
 8017346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801734a:	601a      	str	r2, [r3, #0]
 801734c:	f3bf 8f4f 	dsb	sy
 8017350:	f3bf 8f6f 	isb	sy
 8017354:	e009      	b.n	801736a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	3310      	adds	r3, #16
 801735a:	4618      	mov	r0, r3
 801735c:	f7ff fef2 	bl	8017144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	3324      	adds	r3, #36	; 0x24
 8017364:	4618      	mov	r0, r3
 8017366:	f7ff feed 	bl	8017144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801736a:	f002 febb 	bl	801a0e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801736e:	2301      	movs	r3, #1
}
 8017370:	4618      	mov	r0, r3
 8017372:	3710      	adds	r7, #16
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}
 8017378:	e000ed04 	.word	0xe000ed04

0801737c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801737c:	b580      	push	{r7, lr}
 801737e:	b08e      	sub	sp, #56	; 0x38
 8017380:	af02      	add	r7, sp, #8
 8017382:	60f8      	str	r0, [r7, #12]
 8017384:	60b9      	str	r1, [r7, #8]
 8017386:	607a      	str	r2, [r7, #4]
 8017388:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d10a      	bne.n	80173a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017394:	f383 8811 	msr	BASEPRI, r3
 8017398:	f3bf 8f6f 	isb	sy
 801739c:	f3bf 8f4f 	dsb	sy
 80173a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80173a2:	bf00      	nop
 80173a4:	e7fe      	b.n	80173a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80173a6:	683b      	ldr	r3, [r7, #0]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d10a      	bne.n	80173c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80173ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173b0:	f383 8811 	msr	BASEPRI, r3
 80173b4:	f3bf 8f6f 	isb	sy
 80173b8:	f3bf 8f4f 	dsb	sy
 80173bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80173be:	bf00      	nop
 80173c0:	e7fe      	b.n	80173c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d002      	beq.n	80173ce <xQueueGenericCreateStatic+0x52>
 80173c8:	68bb      	ldr	r3, [r7, #8]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d001      	beq.n	80173d2 <xQueueGenericCreateStatic+0x56>
 80173ce:	2301      	movs	r3, #1
 80173d0:	e000      	b.n	80173d4 <xQueueGenericCreateStatic+0x58>
 80173d2:	2300      	movs	r3, #0
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d10a      	bne.n	80173ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80173d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173dc:	f383 8811 	msr	BASEPRI, r3
 80173e0:	f3bf 8f6f 	isb	sy
 80173e4:	f3bf 8f4f 	dsb	sy
 80173e8:	623b      	str	r3, [r7, #32]
}
 80173ea:	bf00      	nop
 80173ec:	e7fe      	b.n	80173ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d102      	bne.n	80173fa <xQueueGenericCreateStatic+0x7e>
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d101      	bne.n	80173fe <xQueueGenericCreateStatic+0x82>
 80173fa:	2301      	movs	r3, #1
 80173fc:	e000      	b.n	8017400 <xQueueGenericCreateStatic+0x84>
 80173fe:	2300      	movs	r3, #0
 8017400:	2b00      	cmp	r3, #0
 8017402:	d10a      	bne.n	801741a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017408:	f383 8811 	msr	BASEPRI, r3
 801740c:	f3bf 8f6f 	isb	sy
 8017410:	f3bf 8f4f 	dsb	sy
 8017414:	61fb      	str	r3, [r7, #28]
}
 8017416:	bf00      	nop
 8017418:	e7fe      	b.n	8017418 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801741a:	2348      	movs	r3, #72	; 0x48
 801741c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	2b48      	cmp	r3, #72	; 0x48
 8017422:	d00a      	beq.n	801743a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017428:	f383 8811 	msr	BASEPRI, r3
 801742c:	f3bf 8f6f 	isb	sy
 8017430:	f3bf 8f4f 	dsb	sy
 8017434:	61bb      	str	r3, [r7, #24]
}
 8017436:	bf00      	nop
 8017438:	e7fe      	b.n	8017438 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801743a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801743c:	683b      	ldr	r3, [r7, #0]
 801743e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017442:	2b00      	cmp	r3, #0
 8017444:	d00d      	beq.n	8017462 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017448:	2201      	movs	r2, #1
 801744a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801744e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017454:	9300      	str	r3, [sp, #0]
 8017456:	4613      	mov	r3, r2
 8017458:	687a      	ldr	r2, [r7, #4]
 801745a:	68b9      	ldr	r1, [r7, #8]
 801745c:	68f8      	ldr	r0, [r7, #12]
 801745e:	f000 f83f 	bl	80174e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017464:	4618      	mov	r0, r3
 8017466:	3730      	adds	r7, #48	; 0x30
 8017468:	46bd      	mov	sp, r7
 801746a:	bd80      	pop	{r7, pc}

0801746c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801746c:	b580      	push	{r7, lr}
 801746e:	b08a      	sub	sp, #40	; 0x28
 8017470:	af02      	add	r7, sp, #8
 8017472:	60f8      	str	r0, [r7, #12]
 8017474:	60b9      	str	r1, [r7, #8]
 8017476:	4613      	mov	r3, r2
 8017478:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d10a      	bne.n	8017496 <xQueueGenericCreate+0x2a>
	__asm volatile
 8017480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017484:	f383 8811 	msr	BASEPRI, r3
 8017488:	f3bf 8f6f 	isb	sy
 801748c:	f3bf 8f4f 	dsb	sy
 8017490:	613b      	str	r3, [r7, #16]
}
 8017492:	bf00      	nop
 8017494:	e7fe      	b.n	8017494 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	68ba      	ldr	r2, [r7, #8]
 801749a:	fb02 f303 	mul.w	r3, r2, r3
 801749e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80174a0:	69fb      	ldr	r3, [r7, #28]
 80174a2:	3348      	adds	r3, #72	; 0x48
 80174a4:	4618      	mov	r0, r3
 80174a6:	f002 ff0f 	bl	801a2c8 <pvPortMalloc>
 80174aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80174ac:	69bb      	ldr	r3, [r7, #24]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d011      	beq.n	80174d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80174b2:	69bb      	ldr	r3, [r7, #24]
 80174b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80174b6:	697b      	ldr	r3, [r7, #20]
 80174b8:	3348      	adds	r3, #72	; 0x48
 80174ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80174bc:	69bb      	ldr	r3, [r7, #24]
 80174be:	2200      	movs	r2, #0
 80174c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80174c4:	79fa      	ldrb	r2, [r7, #7]
 80174c6:	69bb      	ldr	r3, [r7, #24]
 80174c8:	9300      	str	r3, [sp, #0]
 80174ca:	4613      	mov	r3, r2
 80174cc:	697a      	ldr	r2, [r7, #20]
 80174ce:	68b9      	ldr	r1, [r7, #8]
 80174d0:	68f8      	ldr	r0, [r7, #12]
 80174d2:	f000 f805 	bl	80174e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80174d6:	69bb      	ldr	r3, [r7, #24]
	}
 80174d8:	4618      	mov	r0, r3
 80174da:	3720      	adds	r7, #32
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}

080174e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	60f8      	str	r0, [r7, #12]
 80174e8:	60b9      	str	r1, [r7, #8]
 80174ea:	607a      	str	r2, [r7, #4]
 80174ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d103      	bne.n	80174fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80174f4:	69bb      	ldr	r3, [r7, #24]
 80174f6:	69ba      	ldr	r2, [r7, #24]
 80174f8:	601a      	str	r2, [r3, #0]
 80174fa:	e002      	b.n	8017502 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80174fc:	69bb      	ldr	r3, [r7, #24]
 80174fe:	687a      	ldr	r2, [r7, #4]
 8017500:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017502:	69bb      	ldr	r3, [r7, #24]
 8017504:	68fa      	ldr	r2, [r7, #12]
 8017506:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017508:	69bb      	ldr	r3, [r7, #24]
 801750a:	68ba      	ldr	r2, [r7, #8]
 801750c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801750e:	2101      	movs	r1, #1
 8017510:	69b8      	ldr	r0, [r7, #24]
 8017512:	f7ff fecb 	bl	80172ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017516:	bf00      	nop
 8017518:	3710      	adds	r7, #16
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}

0801751e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801751e:	b580      	push	{r7, lr}
 8017520:	b082      	sub	sp, #8
 8017522:	af00      	add	r7, sp, #0
 8017524:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d00e      	beq.n	801754a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	2200      	movs	r2, #0
 8017530:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	2200      	movs	r2, #0
 8017536:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2200      	movs	r2, #0
 801753c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801753e:	2300      	movs	r3, #0
 8017540:	2200      	movs	r2, #0
 8017542:	2100      	movs	r1, #0
 8017544:	6878      	ldr	r0, [r7, #4]
 8017546:	f000 f8a1 	bl	801768c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801754a:	bf00      	nop
 801754c:	3708      	adds	r7, #8
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}

08017552 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8017552:	b580      	push	{r7, lr}
 8017554:	b086      	sub	sp, #24
 8017556:	af00      	add	r7, sp, #0
 8017558:	4603      	mov	r3, r0
 801755a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801755c:	2301      	movs	r3, #1
 801755e:	617b      	str	r3, [r7, #20]
 8017560:	2300      	movs	r3, #0
 8017562:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8017564:	79fb      	ldrb	r3, [r7, #7]
 8017566:	461a      	mov	r2, r3
 8017568:	6939      	ldr	r1, [r7, #16]
 801756a:	6978      	ldr	r0, [r7, #20]
 801756c:	f7ff ff7e 	bl	801746c <xQueueGenericCreate>
 8017570:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017572:	68f8      	ldr	r0, [r7, #12]
 8017574:	f7ff ffd3 	bl	801751e <prvInitialiseMutex>

		return xNewQueue;
 8017578:	68fb      	ldr	r3, [r7, #12]
	}
 801757a:	4618      	mov	r0, r3
 801757c:	3718      	adds	r7, #24
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}

08017582 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8017582:	b580      	push	{r7, lr}
 8017584:	b088      	sub	sp, #32
 8017586:	af02      	add	r7, sp, #8
 8017588:	4603      	mov	r3, r0
 801758a:	6039      	str	r1, [r7, #0]
 801758c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801758e:	2301      	movs	r3, #1
 8017590:	617b      	str	r3, [r7, #20]
 8017592:	2300      	movs	r3, #0
 8017594:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8017596:	79fb      	ldrb	r3, [r7, #7]
 8017598:	9300      	str	r3, [sp, #0]
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	2200      	movs	r2, #0
 801759e:	6939      	ldr	r1, [r7, #16]
 80175a0:	6978      	ldr	r0, [r7, #20]
 80175a2:	f7ff feeb 	bl	801737c <xQueueGenericCreateStatic>
 80175a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80175a8:	68f8      	ldr	r0, [r7, #12]
 80175aa:	f7ff ffb8 	bl	801751e <prvInitialiseMutex>

		return xNewQueue;
 80175ae:	68fb      	ldr	r3, [r7, #12]
	}
 80175b0:	4618      	mov	r0, r3
 80175b2:	3718      	adds	r7, #24
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b08a      	sub	sp, #40	; 0x28
 80175bc:	af02      	add	r7, sp, #8
 80175be:	60f8      	str	r0, [r7, #12]
 80175c0:	60b9      	str	r1, [r7, #8]
 80175c2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d10a      	bne.n	80175e0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80175ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ce:	f383 8811 	msr	BASEPRI, r3
 80175d2:	f3bf 8f6f 	isb	sy
 80175d6:	f3bf 8f4f 	dsb	sy
 80175da:	61bb      	str	r3, [r7, #24]
}
 80175dc:	bf00      	nop
 80175de:	e7fe      	b.n	80175de <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80175e0:	68ba      	ldr	r2, [r7, #8]
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	429a      	cmp	r2, r3
 80175e6:	d90a      	bls.n	80175fe <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80175e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ec:	f383 8811 	msr	BASEPRI, r3
 80175f0:	f3bf 8f6f 	isb	sy
 80175f4:	f3bf 8f4f 	dsb	sy
 80175f8:	617b      	str	r3, [r7, #20]
}
 80175fa:	bf00      	nop
 80175fc:	e7fe      	b.n	80175fc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80175fe:	2302      	movs	r3, #2
 8017600:	9300      	str	r3, [sp, #0]
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	2200      	movs	r2, #0
 8017606:	2100      	movs	r1, #0
 8017608:	68f8      	ldr	r0, [r7, #12]
 801760a:	f7ff feb7 	bl	801737c <xQueueGenericCreateStatic>
 801760e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8017610:	69fb      	ldr	r3, [r7, #28]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d002      	beq.n	801761c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017616:	69fb      	ldr	r3, [r7, #28]
 8017618:	68ba      	ldr	r2, [r7, #8]
 801761a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801761c:	69fb      	ldr	r3, [r7, #28]
	}
 801761e:	4618      	mov	r0, r3
 8017620:	3720      	adds	r7, #32
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}

08017626 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8017626:	b580      	push	{r7, lr}
 8017628:	b086      	sub	sp, #24
 801762a:	af00      	add	r7, sp, #0
 801762c:	6078      	str	r0, [r7, #4]
 801762e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d10a      	bne.n	801764c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8017636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801763a:	f383 8811 	msr	BASEPRI, r3
 801763e:	f3bf 8f6f 	isb	sy
 8017642:	f3bf 8f4f 	dsb	sy
 8017646:	613b      	str	r3, [r7, #16]
}
 8017648:	bf00      	nop
 801764a:	e7fe      	b.n	801764a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801764c:	683a      	ldr	r2, [r7, #0]
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	429a      	cmp	r2, r3
 8017652:	d90a      	bls.n	801766a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8017654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017658:	f383 8811 	msr	BASEPRI, r3
 801765c:	f3bf 8f6f 	isb	sy
 8017660:	f3bf 8f4f 	dsb	sy
 8017664:	60fb      	str	r3, [r7, #12]
}
 8017666:	bf00      	nop
 8017668:	e7fe      	b.n	8017668 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801766a:	2202      	movs	r2, #2
 801766c:	2100      	movs	r1, #0
 801766e:	6878      	ldr	r0, [r7, #4]
 8017670:	f7ff fefc 	bl	801746c <xQueueGenericCreate>
 8017674:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8017676:	697b      	ldr	r3, [r7, #20]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d002      	beq.n	8017682 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	683a      	ldr	r2, [r7, #0]
 8017680:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017682:	697b      	ldr	r3, [r7, #20]
	}
 8017684:	4618      	mov	r0, r3
 8017686:	3718      	adds	r7, #24
 8017688:	46bd      	mov	sp, r7
 801768a:	bd80      	pop	{r7, pc}

0801768c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b08e      	sub	sp, #56	; 0x38
 8017690:	af00      	add	r7, sp, #0
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	607a      	str	r2, [r7, #4]
 8017698:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801769a:	2300      	movs	r3, #0
 801769c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80176a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d10a      	bne.n	80176be <xQueueGenericSend+0x32>
	__asm volatile
 80176a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176ac:	f383 8811 	msr	BASEPRI, r3
 80176b0:	f3bf 8f6f 	isb	sy
 80176b4:	f3bf 8f4f 	dsb	sy
 80176b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80176ba:	bf00      	nop
 80176bc:	e7fe      	b.n	80176bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d103      	bne.n	80176cc <xQueueGenericSend+0x40>
 80176c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d101      	bne.n	80176d0 <xQueueGenericSend+0x44>
 80176cc:	2301      	movs	r3, #1
 80176ce:	e000      	b.n	80176d2 <xQueueGenericSend+0x46>
 80176d0:	2300      	movs	r3, #0
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d10a      	bne.n	80176ec <xQueueGenericSend+0x60>
	__asm volatile
 80176d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176da:	f383 8811 	msr	BASEPRI, r3
 80176de:	f3bf 8f6f 	isb	sy
 80176e2:	f3bf 8f4f 	dsb	sy
 80176e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80176e8:	bf00      	nop
 80176ea:	e7fe      	b.n	80176ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	2b02      	cmp	r3, #2
 80176f0:	d103      	bne.n	80176fa <xQueueGenericSend+0x6e>
 80176f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176f6:	2b01      	cmp	r3, #1
 80176f8:	d101      	bne.n	80176fe <xQueueGenericSend+0x72>
 80176fa:	2301      	movs	r3, #1
 80176fc:	e000      	b.n	8017700 <xQueueGenericSend+0x74>
 80176fe:	2300      	movs	r3, #0
 8017700:	2b00      	cmp	r3, #0
 8017702:	d10a      	bne.n	801771a <xQueueGenericSend+0x8e>
	__asm volatile
 8017704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017708:	f383 8811 	msr	BASEPRI, r3
 801770c:	f3bf 8f6f 	isb	sy
 8017710:	f3bf 8f4f 	dsb	sy
 8017714:	623b      	str	r3, [r7, #32]
}
 8017716:	bf00      	nop
 8017718:	e7fe      	b.n	8017718 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801771a:	f001 fd95 	bl	8019248 <xTaskGetSchedulerState>
 801771e:	4603      	mov	r3, r0
 8017720:	2b00      	cmp	r3, #0
 8017722:	d102      	bne.n	801772a <xQueueGenericSend+0x9e>
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d101      	bne.n	801772e <xQueueGenericSend+0xa2>
 801772a:	2301      	movs	r3, #1
 801772c:	e000      	b.n	8017730 <xQueueGenericSend+0xa4>
 801772e:	2300      	movs	r3, #0
 8017730:	2b00      	cmp	r3, #0
 8017732:	d10a      	bne.n	801774a <xQueueGenericSend+0xbe>
	__asm volatile
 8017734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017738:	f383 8811 	msr	BASEPRI, r3
 801773c:	f3bf 8f6f 	isb	sy
 8017740:	f3bf 8f4f 	dsb	sy
 8017744:	61fb      	str	r3, [r7, #28]
}
 8017746:	bf00      	nop
 8017748:	e7fe      	b.n	8017748 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801774a:	f002 fc9b 	bl	801a084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017756:	429a      	cmp	r2, r3
 8017758:	d302      	bcc.n	8017760 <xQueueGenericSend+0xd4>
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	2b02      	cmp	r3, #2
 801775e:	d129      	bne.n	80177b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017760:	683a      	ldr	r2, [r7, #0]
 8017762:	68b9      	ldr	r1, [r7, #8]
 8017764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017766:	f000 fc3b 	bl	8017fe0 <prvCopyDataToQueue>
 801776a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017770:	2b00      	cmp	r3, #0
 8017772:	d010      	beq.n	8017796 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017776:	3324      	adds	r3, #36	; 0x24
 8017778:	4618      	mov	r0, r3
 801777a:	f001 fba5 	bl	8018ec8 <xTaskRemoveFromEventList>
 801777e:	4603      	mov	r3, r0
 8017780:	2b00      	cmp	r3, #0
 8017782:	d013      	beq.n	80177ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017784:	4b3f      	ldr	r3, [pc, #252]	; (8017884 <xQueueGenericSend+0x1f8>)
 8017786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801778a:	601a      	str	r2, [r3, #0]
 801778c:	f3bf 8f4f 	dsb	sy
 8017790:	f3bf 8f6f 	isb	sy
 8017794:	e00a      	b.n	80177ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017798:	2b00      	cmp	r3, #0
 801779a:	d007      	beq.n	80177ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801779c:	4b39      	ldr	r3, [pc, #228]	; (8017884 <xQueueGenericSend+0x1f8>)
 801779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177a2:	601a      	str	r2, [r3, #0]
 80177a4:	f3bf 8f4f 	dsb	sy
 80177a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80177ac:	f002 fc9a 	bl	801a0e4 <vPortExitCritical>
				return pdPASS;
 80177b0:	2301      	movs	r3, #1
 80177b2:	e063      	b.n	801787c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d103      	bne.n	80177c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80177ba:	f002 fc93 	bl	801a0e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80177be:	2300      	movs	r3, #0
 80177c0:	e05c      	b.n	801787c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80177c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d106      	bne.n	80177d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80177c8:	f107 0314 	add.w	r3, r7, #20
 80177cc:	4618      	mov	r0, r3
 80177ce:	f001 fbdd 	bl	8018f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80177d2:	2301      	movs	r3, #1
 80177d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80177d6:	f002 fc85 	bl	801a0e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80177da:	f001 f951 	bl	8018a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80177de:	f002 fc51 	bl	801a084 <vPortEnterCritical>
 80177e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80177e8:	b25b      	sxtb	r3, r3
 80177ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177ee:	d103      	bne.n	80177f8 <xQueueGenericSend+0x16c>
 80177f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f2:	2200      	movs	r2, #0
 80177f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80177f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80177fe:	b25b      	sxtb	r3, r3
 8017800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017804:	d103      	bne.n	801780e <xQueueGenericSend+0x182>
 8017806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017808:	2200      	movs	r2, #0
 801780a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801780e:	f002 fc69 	bl	801a0e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017812:	1d3a      	adds	r2, r7, #4
 8017814:	f107 0314 	add.w	r3, r7, #20
 8017818:	4611      	mov	r1, r2
 801781a:	4618      	mov	r0, r3
 801781c:	f001 fbcc 	bl	8018fb8 <xTaskCheckForTimeOut>
 8017820:	4603      	mov	r3, r0
 8017822:	2b00      	cmp	r3, #0
 8017824:	d124      	bne.n	8017870 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017828:	f000 fcd2 	bl	80181d0 <prvIsQueueFull>
 801782c:	4603      	mov	r3, r0
 801782e:	2b00      	cmp	r3, #0
 8017830:	d018      	beq.n	8017864 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017834:	3310      	adds	r3, #16
 8017836:	687a      	ldr	r2, [r7, #4]
 8017838:	4611      	mov	r1, r2
 801783a:	4618      	mov	r0, r3
 801783c:	f001 faf4 	bl	8018e28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017842:	f000 fc5d 	bl	8018100 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017846:	f001 f929 	bl	8018a9c <xTaskResumeAll>
 801784a:	4603      	mov	r3, r0
 801784c:	2b00      	cmp	r3, #0
 801784e:	f47f af7c 	bne.w	801774a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017852:	4b0c      	ldr	r3, [pc, #48]	; (8017884 <xQueueGenericSend+0x1f8>)
 8017854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017858:	601a      	str	r2, [r3, #0]
 801785a:	f3bf 8f4f 	dsb	sy
 801785e:	f3bf 8f6f 	isb	sy
 8017862:	e772      	b.n	801774a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017866:	f000 fc4b 	bl	8018100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801786a:	f001 f917 	bl	8018a9c <xTaskResumeAll>
 801786e:	e76c      	b.n	801774a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017872:	f000 fc45 	bl	8018100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017876:	f001 f911 	bl	8018a9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801787a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801787c:	4618      	mov	r0, r3
 801787e:	3738      	adds	r7, #56	; 0x38
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}
 8017884:	e000ed04 	.word	0xe000ed04

08017888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b090      	sub	sp, #64	; 0x40
 801788c:	af00      	add	r7, sp, #0
 801788e:	60f8      	str	r0, [r7, #12]
 8017890:	60b9      	str	r1, [r7, #8]
 8017892:	607a      	str	r2, [r7, #4]
 8017894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801789c:	2b00      	cmp	r3, #0
 801789e:	d10a      	bne.n	80178b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80178a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178a4:	f383 8811 	msr	BASEPRI, r3
 80178a8:	f3bf 8f6f 	isb	sy
 80178ac:	f3bf 8f4f 	dsb	sy
 80178b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80178b2:	bf00      	nop
 80178b4:	e7fe      	b.n	80178b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d103      	bne.n	80178c4 <xQueueGenericSendFromISR+0x3c>
 80178bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d101      	bne.n	80178c8 <xQueueGenericSendFromISR+0x40>
 80178c4:	2301      	movs	r3, #1
 80178c6:	e000      	b.n	80178ca <xQueueGenericSendFromISR+0x42>
 80178c8:	2300      	movs	r3, #0
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d10a      	bne.n	80178e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80178ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178d2:	f383 8811 	msr	BASEPRI, r3
 80178d6:	f3bf 8f6f 	isb	sy
 80178da:	f3bf 8f4f 	dsb	sy
 80178de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80178e0:	bf00      	nop
 80178e2:	e7fe      	b.n	80178e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80178e4:	683b      	ldr	r3, [r7, #0]
 80178e6:	2b02      	cmp	r3, #2
 80178e8:	d103      	bne.n	80178f2 <xQueueGenericSendFromISR+0x6a>
 80178ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178ee:	2b01      	cmp	r3, #1
 80178f0:	d101      	bne.n	80178f6 <xQueueGenericSendFromISR+0x6e>
 80178f2:	2301      	movs	r3, #1
 80178f4:	e000      	b.n	80178f8 <xQueueGenericSendFromISR+0x70>
 80178f6:	2300      	movs	r3, #0
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d10a      	bne.n	8017912 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80178fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017900:	f383 8811 	msr	BASEPRI, r3
 8017904:	f3bf 8f6f 	isb	sy
 8017908:	f3bf 8f4f 	dsb	sy
 801790c:	623b      	str	r3, [r7, #32]
}
 801790e:	bf00      	nop
 8017910:	e7fe      	b.n	8017910 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017912:	f002 fc99 	bl	801a248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017916:	f3ef 8211 	mrs	r2, BASEPRI
 801791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801791e:	f383 8811 	msr	BASEPRI, r3
 8017922:	f3bf 8f6f 	isb	sy
 8017926:	f3bf 8f4f 	dsb	sy
 801792a:	61fa      	str	r2, [r7, #28]
 801792c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801792e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017930:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801793a:	429a      	cmp	r2, r3
 801793c:	d302      	bcc.n	8017944 <xQueueGenericSendFromISR+0xbc>
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	2b02      	cmp	r3, #2
 8017942:	d12f      	bne.n	80179a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801794a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017952:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017954:	683a      	ldr	r2, [r7, #0]
 8017956:	68b9      	ldr	r1, [r7, #8]
 8017958:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801795a:	f000 fb41 	bl	8017fe0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801795e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017966:	d112      	bne.n	801798e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801796c:	2b00      	cmp	r3, #0
 801796e:	d016      	beq.n	801799e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017972:	3324      	adds	r3, #36	; 0x24
 8017974:	4618      	mov	r0, r3
 8017976:	f001 faa7 	bl	8018ec8 <xTaskRemoveFromEventList>
 801797a:	4603      	mov	r3, r0
 801797c:	2b00      	cmp	r3, #0
 801797e:	d00e      	beq.n	801799e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d00b      	beq.n	801799e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	2201      	movs	r2, #1
 801798a:	601a      	str	r2, [r3, #0]
 801798c:	e007      	b.n	801799e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801798e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017992:	3301      	adds	r3, #1
 8017994:	b2db      	uxtb	r3, r3
 8017996:	b25a      	sxtb	r2, r3
 8017998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801799a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801799e:	2301      	movs	r3, #1
 80179a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80179a2:	e001      	b.n	80179a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80179a4:	2300      	movs	r3, #0
 80179a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80179a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80179ac:	697b      	ldr	r3, [r7, #20]
 80179ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80179b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80179b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80179b6:	4618      	mov	r0, r3
 80179b8:	3740      	adds	r7, #64	; 0x40
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd80      	pop	{r7, pc}

080179be <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80179be:	b580      	push	{r7, lr}
 80179c0:	b08e      	sub	sp, #56	; 0x38
 80179c2:	af00      	add	r7, sp, #0
 80179c4:	6078      	str	r0, [r7, #4]
 80179c6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80179cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d10a      	bne.n	80179e8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80179d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179d6:	f383 8811 	msr	BASEPRI, r3
 80179da:	f3bf 8f6f 	isb	sy
 80179de:	f3bf 8f4f 	dsb	sy
 80179e2:	623b      	str	r3, [r7, #32]
}
 80179e4:	bf00      	nop
 80179e6:	e7fe      	b.n	80179e6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80179e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d00a      	beq.n	8017a06 <xQueueGiveFromISR+0x48>
	__asm volatile
 80179f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179f4:	f383 8811 	msr	BASEPRI, r3
 80179f8:	f3bf 8f6f 	isb	sy
 80179fc:	f3bf 8f4f 	dsb	sy
 8017a00:	61fb      	str	r3, [r7, #28]
}
 8017a02:	bf00      	nop
 8017a04:	e7fe      	b.n	8017a04 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d103      	bne.n	8017a16 <xQueueGiveFromISR+0x58>
 8017a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a10:	689b      	ldr	r3, [r3, #8]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d101      	bne.n	8017a1a <xQueueGiveFromISR+0x5c>
 8017a16:	2301      	movs	r3, #1
 8017a18:	e000      	b.n	8017a1c <xQueueGiveFromISR+0x5e>
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d10a      	bne.n	8017a36 <xQueueGiveFromISR+0x78>
	__asm volatile
 8017a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a24:	f383 8811 	msr	BASEPRI, r3
 8017a28:	f3bf 8f6f 	isb	sy
 8017a2c:	f3bf 8f4f 	dsb	sy
 8017a30:	61bb      	str	r3, [r7, #24]
}
 8017a32:	bf00      	nop
 8017a34:	e7fe      	b.n	8017a34 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017a36:	f002 fc07 	bl	801a248 <vPortValidateInterruptPriority>
	__asm volatile
 8017a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8017a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a42:	f383 8811 	msr	BASEPRI, r3
 8017a46:	f3bf 8f6f 	isb	sy
 8017a4a:	f3bf 8f4f 	dsb	sy
 8017a4e:	617a      	str	r2, [r7, #20]
 8017a50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017a52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017a62:	429a      	cmp	r2, r3
 8017a64:	d22b      	bcs.n	8017abe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a72:	1c5a      	adds	r2, r3, #1
 8017a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a76:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a80:	d112      	bne.n	8017aa8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d016      	beq.n	8017ab8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a8c:	3324      	adds	r3, #36	; 0x24
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f001 fa1a 	bl	8018ec8 <xTaskRemoveFromEventList>
 8017a94:	4603      	mov	r3, r0
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d00e      	beq.n	8017ab8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d00b      	beq.n	8017ab8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	2201      	movs	r2, #1
 8017aa4:	601a      	str	r2, [r3, #0]
 8017aa6:	e007      	b.n	8017ab8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017aac:	3301      	adds	r3, #1
 8017aae:	b2db      	uxtb	r3, r3
 8017ab0:	b25a      	sxtb	r2, r3
 8017ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017ab8:	2301      	movs	r3, #1
 8017aba:	637b      	str	r3, [r7, #52]	; 0x34
 8017abc:	e001      	b.n	8017ac2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8017ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	f383 8811 	msr	BASEPRI, r3
}
 8017acc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	3738      	adds	r7, #56	; 0x38
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}

08017ad8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b08c      	sub	sp, #48	; 0x30
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	60f8      	str	r0, [r7, #12]
 8017ae0:	60b9      	str	r1, [r7, #8]
 8017ae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d10a      	bne.n	8017b08 <xQueueReceive+0x30>
	__asm volatile
 8017af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af6:	f383 8811 	msr	BASEPRI, r3
 8017afa:	f3bf 8f6f 	isb	sy
 8017afe:	f3bf 8f4f 	dsb	sy
 8017b02:	623b      	str	r3, [r7, #32]
}
 8017b04:	bf00      	nop
 8017b06:	e7fe      	b.n	8017b06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d103      	bne.n	8017b16 <xQueueReceive+0x3e>
 8017b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d101      	bne.n	8017b1a <xQueueReceive+0x42>
 8017b16:	2301      	movs	r3, #1
 8017b18:	e000      	b.n	8017b1c <xQueueReceive+0x44>
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d10a      	bne.n	8017b36 <xQueueReceive+0x5e>
	__asm volatile
 8017b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b24:	f383 8811 	msr	BASEPRI, r3
 8017b28:	f3bf 8f6f 	isb	sy
 8017b2c:	f3bf 8f4f 	dsb	sy
 8017b30:	61fb      	str	r3, [r7, #28]
}
 8017b32:	bf00      	nop
 8017b34:	e7fe      	b.n	8017b34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017b36:	f001 fb87 	bl	8019248 <xTaskGetSchedulerState>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d102      	bne.n	8017b46 <xQueueReceive+0x6e>
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d101      	bne.n	8017b4a <xQueueReceive+0x72>
 8017b46:	2301      	movs	r3, #1
 8017b48:	e000      	b.n	8017b4c <xQueueReceive+0x74>
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d10a      	bne.n	8017b66 <xQueueReceive+0x8e>
	__asm volatile
 8017b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b54:	f383 8811 	msr	BASEPRI, r3
 8017b58:	f3bf 8f6f 	isb	sy
 8017b5c:	f3bf 8f4f 	dsb	sy
 8017b60:	61bb      	str	r3, [r7, #24]
}
 8017b62:	bf00      	nop
 8017b64:	e7fe      	b.n	8017b64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017b66:	f002 fa8d 	bl	801a084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d01f      	beq.n	8017bb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017b76:	68b9      	ldr	r1, [r7, #8]
 8017b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b7a:	f000 fa9b 	bl	80180b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b80:	1e5a      	subs	r2, r3, #1
 8017b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b88:	691b      	ldr	r3, [r3, #16]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d00f      	beq.n	8017bae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b90:	3310      	adds	r3, #16
 8017b92:	4618      	mov	r0, r3
 8017b94:	f001 f998 	bl	8018ec8 <xTaskRemoveFromEventList>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d007      	beq.n	8017bae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017b9e:	4b3d      	ldr	r3, [pc, #244]	; (8017c94 <xQueueReceive+0x1bc>)
 8017ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ba4:	601a      	str	r2, [r3, #0]
 8017ba6:	f3bf 8f4f 	dsb	sy
 8017baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017bae:	f002 fa99 	bl	801a0e4 <vPortExitCritical>
				return pdPASS;
 8017bb2:	2301      	movs	r3, #1
 8017bb4:	e069      	b.n	8017c8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d103      	bne.n	8017bc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017bbc:	f002 fa92 	bl	801a0e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	e062      	b.n	8017c8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d106      	bne.n	8017bd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017bca:	f107 0310 	add.w	r3, r7, #16
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f001 f9dc 	bl	8018f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017bd4:	2301      	movs	r3, #1
 8017bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017bd8:	f002 fa84 	bl	801a0e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017bdc:	f000 ff50 	bl	8018a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017be0:	f002 fa50 	bl	801a084 <vPortEnterCritical>
 8017be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017bea:	b25b      	sxtb	r3, r3
 8017bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bf0:	d103      	bne.n	8017bfa <xQueueReceive+0x122>
 8017bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c00:	b25b      	sxtb	r3, r3
 8017c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c06:	d103      	bne.n	8017c10 <xQueueReceive+0x138>
 8017c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017c10:	f002 fa68 	bl	801a0e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017c14:	1d3a      	adds	r2, r7, #4
 8017c16:	f107 0310 	add.w	r3, r7, #16
 8017c1a:	4611      	mov	r1, r2
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f001 f9cb 	bl	8018fb8 <xTaskCheckForTimeOut>
 8017c22:	4603      	mov	r3, r0
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d123      	bne.n	8017c70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c2a:	f000 fabb 	bl	80181a4 <prvIsQueueEmpty>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d017      	beq.n	8017c64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c36:	3324      	adds	r3, #36	; 0x24
 8017c38:	687a      	ldr	r2, [r7, #4]
 8017c3a:	4611      	mov	r1, r2
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f001 f8f3 	bl	8018e28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c44:	f000 fa5c 	bl	8018100 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017c48:	f000 ff28 	bl	8018a9c <xTaskResumeAll>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d189      	bne.n	8017b66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017c52:	4b10      	ldr	r3, [pc, #64]	; (8017c94 <xQueueReceive+0x1bc>)
 8017c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c58:	601a      	str	r2, [r3, #0]
 8017c5a:	f3bf 8f4f 	dsb	sy
 8017c5e:	f3bf 8f6f 	isb	sy
 8017c62:	e780      	b.n	8017b66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c66:	f000 fa4b 	bl	8018100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017c6a:	f000 ff17 	bl	8018a9c <xTaskResumeAll>
 8017c6e:	e77a      	b.n	8017b66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c72:	f000 fa45 	bl	8018100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017c76:	f000 ff11 	bl	8018a9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c7c:	f000 fa92 	bl	80181a4 <prvIsQueueEmpty>
 8017c80:	4603      	mov	r3, r0
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	f43f af6f 	beq.w	8017b66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017c88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	3730      	adds	r7, #48	; 0x30
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	e000ed04 	.word	0xe000ed04

08017c98 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b08e      	sub	sp, #56	; 0x38
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
 8017ca0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017caa:	2300      	movs	r3, #0
 8017cac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d10a      	bne.n	8017cca <xQueueSemaphoreTake+0x32>
	__asm volatile
 8017cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cb8:	f383 8811 	msr	BASEPRI, r3
 8017cbc:	f3bf 8f6f 	isb	sy
 8017cc0:	f3bf 8f4f 	dsb	sy
 8017cc4:	623b      	str	r3, [r7, #32]
}
 8017cc6:	bf00      	nop
 8017cc8:	e7fe      	b.n	8017cc8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d00a      	beq.n	8017ce8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8017cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cd6:	f383 8811 	msr	BASEPRI, r3
 8017cda:	f3bf 8f6f 	isb	sy
 8017cde:	f3bf 8f4f 	dsb	sy
 8017ce2:	61fb      	str	r3, [r7, #28]
}
 8017ce4:	bf00      	nop
 8017ce6:	e7fe      	b.n	8017ce6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017ce8:	f001 faae 	bl	8019248 <xTaskGetSchedulerState>
 8017cec:	4603      	mov	r3, r0
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d102      	bne.n	8017cf8 <xQueueSemaphoreTake+0x60>
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d101      	bne.n	8017cfc <xQueueSemaphoreTake+0x64>
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	e000      	b.n	8017cfe <xQueueSemaphoreTake+0x66>
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d10a      	bne.n	8017d18 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8017d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d06:	f383 8811 	msr	BASEPRI, r3
 8017d0a:	f3bf 8f6f 	isb	sy
 8017d0e:	f3bf 8f4f 	dsb	sy
 8017d12:	61bb      	str	r3, [r7, #24]
}
 8017d14:	bf00      	nop
 8017d16:	e7fe      	b.n	8017d16 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017d18:	f002 f9b4 	bl	801a084 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d20:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d024      	beq.n	8017d72 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d2a:	1e5a      	subs	r2, r3, #1
 8017d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d2e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d104      	bne.n	8017d42 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017d38:	f001 fc2e 	bl	8019598 <pvTaskIncrementMutexHeldCount>
 8017d3c:	4602      	mov	r2, r0
 8017d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d40:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d44:	691b      	ldr	r3, [r3, #16]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d00f      	beq.n	8017d6a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d4c:	3310      	adds	r3, #16
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f001 f8ba 	bl	8018ec8 <xTaskRemoveFromEventList>
 8017d54:	4603      	mov	r3, r0
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d007      	beq.n	8017d6a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017d5a:	4b54      	ldr	r3, [pc, #336]	; (8017eac <xQueueSemaphoreTake+0x214>)
 8017d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d60:	601a      	str	r2, [r3, #0]
 8017d62:	f3bf 8f4f 	dsb	sy
 8017d66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017d6a:	f002 f9bb 	bl	801a0e4 <vPortExitCritical>
				return pdPASS;
 8017d6e:	2301      	movs	r3, #1
 8017d70:	e097      	b.n	8017ea2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017d72:	683b      	ldr	r3, [r7, #0]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d111      	bne.n	8017d9c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d00a      	beq.n	8017d94 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8017d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d82:	f383 8811 	msr	BASEPRI, r3
 8017d86:	f3bf 8f6f 	isb	sy
 8017d8a:	f3bf 8f4f 	dsb	sy
 8017d8e:	617b      	str	r3, [r7, #20]
}
 8017d90:	bf00      	nop
 8017d92:	e7fe      	b.n	8017d92 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017d94:	f002 f9a6 	bl	801a0e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017d98:	2300      	movs	r3, #0
 8017d9a:	e082      	b.n	8017ea2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d106      	bne.n	8017db0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017da2:	f107 030c 	add.w	r3, r7, #12
 8017da6:	4618      	mov	r0, r3
 8017da8:	f001 f8f0 	bl	8018f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017dac:	2301      	movs	r3, #1
 8017dae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017db0:	f002 f998 	bl	801a0e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017db4:	f000 fe64 	bl	8018a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017db8:	f002 f964 	bl	801a084 <vPortEnterCritical>
 8017dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017dc2:	b25b      	sxtb	r3, r3
 8017dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dc8:	d103      	bne.n	8017dd2 <xQueueSemaphoreTake+0x13a>
 8017dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dcc:	2200      	movs	r2, #0
 8017dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017dd8:	b25b      	sxtb	r3, r3
 8017dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dde:	d103      	bne.n	8017de8 <xQueueSemaphoreTake+0x150>
 8017de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de2:	2200      	movs	r2, #0
 8017de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017de8:	f002 f97c 	bl	801a0e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017dec:	463a      	mov	r2, r7
 8017dee:	f107 030c 	add.w	r3, r7, #12
 8017df2:	4611      	mov	r1, r2
 8017df4:	4618      	mov	r0, r3
 8017df6:	f001 f8df 	bl	8018fb8 <xTaskCheckForTimeOut>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d132      	bne.n	8017e66 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017e00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e02:	f000 f9cf 	bl	80181a4 <prvIsQueueEmpty>
 8017e06:	4603      	mov	r3, r0
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d026      	beq.n	8017e5a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d109      	bne.n	8017e28 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8017e14:	f002 f936 	bl	801a084 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e1a:	689b      	ldr	r3, [r3, #8]
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f001 fa31 	bl	8019284 <xTaskPriorityInherit>
 8017e22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8017e24:	f002 f95e 	bl	801a0e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e2a:	3324      	adds	r3, #36	; 0x24
 8017e2c:	683a      	ldr	r2, [r7, #0]
 8017e2e:	4611      	mov	r1, r2
 8017e30:	4618      	mov	r0, r3
 8017e32:	f000 fff9 	bl	8018e28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e38:	f000 f962 	bl	8018100 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017e3c:	f000 fe2e 	bl	8018a9c <xTaskResumeAll>
 8017e40:	4603      	mov	r3, r0
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	f47f af68 	bne.w	8017d18 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017e48:	4b18      	ldr	r3, [pc, #96]	; (8017eac <xQueueSemaphoreTake+0x214>)
 8017e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e4e:	601a      	str	r2, [r3, #0]
 8017e50:	f3bf 8f4f 	dsb	sy
 8017e54:	f3bf 8f6f 	isb	sy
 8017e58:	e75e      	b.n	8017d18 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e5c:	f000 f950 	bl	8018100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017e60:	f000 fe1c 	bl	8018a9c <xTaskResumeAll>
 8017e64:	e758      	b.n	8017d18 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e68:	f000 f94a 	bl	8018100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017e6c:	f000 fe16 	bl	8018a9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e72:	f000 f997 	bl	80181a4 <prvIsQueueEmpty>
 8017e76:	4603      	mov	r3, r0
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	f43f af4d 	beq.w	8017d18 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d00d      	beq.n	8017ea0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8017e84:	f002 f8fe 	bl	801a084 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e8a:	f000 f891 	bl	8017fb0 <prvGetDisinheritPriorityAfterTimeout>
 8017e8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e92:	689b      	ldr	r3, [r3, #8]
 8017e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e96:	4618      	mov	r0, r3
 8017e98:	f001 faf0 	bl	801947c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017e9c:	f002 f922 	bl	801a0e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017ea0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3738      	adds	r7, #56	; 0x38
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	bf00      	nop
 8017eac:	e000ed04 	.word	0xe000ed04

08017eb0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b08e      	sub	sp, #56	; 0x38
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	60f8      	str	r0, [r7, #12]
 8017eb8:	60b9      	str	r1, [r7, #8]
 8017eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d10a      	bne.n	8017edc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8017ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eca:	f383 8811 	msr	BASEPRI, r3
 8017ece:	f3bf 8f6f 	isb	sy
 8017ed2:	f3bf 8f4f 	dsb	sy
 8017ed6:	623b      	str	r3, [r7, #32]
}
 8017ed8:	bf00      	nop
 8017eda:	e7fe      	b.n	8017eda <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017edc:	68bb      	ldr	r3, [r7, #8]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d103      	bne.n	8017eea <xQueueReceiveFromISR+0x3a>
 8017ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d101      	bne.n	8017eee <xQueueReceiveFromISR+0x3e>
 8017eea:	2301      	movs	r3, #1
 8017eec:	e000      	b.n	8017ef0 <xQueueReceiveFromISR+0x40>
 8017eee:	2300      	movs	r3, #0
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d10a      	bne.n	8017f0a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8017ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ef8:	f383 8811 	msr	BASEPRI, r3
 8017efc:	f3bf 8f6f 	isb	sy
 8017f00:	f3bf 8f4f 	dsb	sy
 8017f04:	61fb      	str	r3, [r7, #28]
}
 8017f06:	bf00      	nop
 8017f08:	e7fe      	b.n	8017f08 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017f0a:	f002 f99d 	bl	801a248 <vPortValidateInterruptPriority>
	__asm volatile
 8017f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8017f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f16:	f383 8811 	msr	BASEPRI, r3
 8017f1a:	f3bf 8f6f 	isb	sy
 8017f1e:	f3bf 8f4f 	dsb	sy
 8017f22:	61ba      	str	r2, [r7, #24]
 8017f24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017f26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d02f      	beq.n	8017f96 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017f40:	68b9      	ldr	r1, [r7, #8]
 8017f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f44:	f000 f8b6 	bl	80180b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f4a:	1e5a      	subs	r2, r3, #1
 8017f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f58:	d112      	bne.n	8017f80 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f5c:	691b      	ldr	r3, [r3, #16]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d016      	beq.n	8017f90 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f64:	3310      	adds	r3, #16
 8017f66:	4618      	mov	r0, r3
 8017f68:	f000 ffae 	bl	8018ec8 <xTaskRemoveFromEventList>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d00e      	beq.n	8017f90 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d00b      	beq.n	8017f90 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	2201      	movs	r2, #1
 8017f7c:	601a      	str	r2, [r3, #0]
 8017f7e:	e007      	b.n	8017f90 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f84:	3301      	adds	r3, #1
 8017f86:	b2db      	uxtb	r3, r3
 8017f88:	b25a      	sxtb	r2, r3
 8017f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017f90:	2301      	movs	r3, #1
 8017f92:	637b      	str	r3, [r7, #52]	; 0x34
 8017f94:	e001      	b.n	8017f9a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8017f96:	2300      	movs	r3, #0
 8017f98:	637b      	str	r3, [r7, #52]	; 0x34
 8017f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017f9e:	693b      	ldr	r3, [r7, #16]
 8017fa0:	f383 8811 	msr	BASEPRI, r3
}
 8017fa4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3738      	adds	r7, #56	; 0x38
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}

08017fb0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b085      	sub	sp, #20
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d006      	beq.n	8017fce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	f1c3 0307 	rsb	r3, r3, #7
 8017fca:	60fb      	str	r3, [r7, #12]
 8017fcc:	e001      	b.n	8017fd2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017fce:	2300      	movs	r3, #0
 8017fd0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017fd2:	68fb      	ldr	r3, [r7, #12]
	}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	3714      	adds	r7, #20
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fde:	4770      	bx	lr

08017fe0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b086      	sub	sp, #24
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	60b9      	str	r1, [r7, #8]
 8017fea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017fec:	2300      	movs	r3, #0
 8017fee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ff4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d10d      	bne.n	801801a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d14d      	bne.n	80180a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	689b      	ldr	r3, [r3, #8]
 801800a:	4618      	mov	r0, r3
 801800c:	f001 f9b0 	bl	8019370 <xTaskPriorityDisinherit>
 8018010:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	2200      	movs	r2, #0
 8018016:	609a      	str	r2, [r3, #8]
 8018018:	e043      	b.n	80180a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d119      	bne.n	8018054 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	6858      	ldr	r0, [r3, #4]
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018028:	461a      	mov	r2, r3
 801802a:	68b9      	ldr	r1, [r7, #8]
 801802c:	f011 f911 	bl	8029252 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	685a      	ldr	r2, [r3, #4]
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018038:	441a      	add	r2, r3
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	685a      	ldr	r2, [r3, #4]
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	689b      	ldr	r3, [r3, #8]
 8018046:	429a      	cmp	r2, r3
 8018048:	d32b      	bcc.n	80180a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	681a      	ldr	r2, [r3, #0]
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	605a      	str	r2, [r3, #4]
 8018052:	e026      	b.n	80180a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	68d8      	ldr	r0, [r3, #12]
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801805c:	461a      	mov	r2, r3
 801805e:	68b9      	ldr	r1, [r7, #8]
 8018060:	f011 f8f7 	bl	8029252 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	68da      	ldr	r2, [r3, #12]
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801806c:	425b      	negs	r3, r3
 801806e:	441a      	add	r2, r3
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	68da      	ldr	r2, [r3, #12]
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	429a      	cmp	r2, r3
 801807e:	d207      	bcs.n	8018090 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	689a      	ldr	r2, [r3, #8]
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018088:	425b      	negs	r3, r3
 801808a:	441a      	add	r2, r3
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2b02      	cmp	r3, #2
 8018094:	d105      	bne.n	80180a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018096:	693b      	ldr	r3, [r7, #16]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d002      	beq.n	80180a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801809c:	693b      	ldr	r3, [r7, #16]
 801809e:	3b01      	subs	r3, #1
 80180a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80180a2:	693b      	ldr	r3, [r7, #16]
 80180a4:	1c5a      	adds	r2, r3, #1
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80180aa:	697b      	ldr	r3, [r7, #20]
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	3718      	adds	r7, #24
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}

080180b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
 80180bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d018      	beq.n	80180f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	68da      	ldr	r2, [r3, #12]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ce:	441a      	add	r2, r3
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	68da      	ldr	r2, [r3, #12]
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	689b      	ldr	r3, [r3, #8]
 80180dc:	429a      	cmp	r2, r3
 80180de:	d303      	bcc.n	80180e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	681a      	ldr	r2, [r3, #0]
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	68d9      	ldr	r1, [r3, #12]
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180f0:	461a      	mov	r2, r3
 80180f2:	6838      	ldr	r0, [r7, #0]
 80180f4:	f011 f8ad 	bl	8029252 <memcpy>
	}
}
 80180f8:	bf00      	nop
 80180fa:	3708      	adds	r7, #8
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}

08018100 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b084      	sub	sp, #16
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018108:	f001 ffbc 	bl	801a084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018112:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018114:	e011      	b.n	801813a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801811a:	2b00      	cmp	r3, #0
 801811c:	d012      	beq.n	8018144 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	3324      	adds	r3, #36	; 0x24
 8018122:	4618      	mov	r0, r3
 8018124:	f000 fed0 	bl	8018ec8 <xTaskRemoveFromEventList>
 8018128:	4603      	mov	r3, r0
 801812a:	2b00      	cmp	r3, #0
 801812c:	d001      	beq.n	8018132 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801812e:	f000 ffa5 	bl	801907c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018132:	7bfb      	ldrb	r3, [r7, #15]
 8018134:	3b01      	subs	r3, #1
 8018136:	b2db      	uxtb	r3, r3
 8018138:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801813a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801813e:	2b00      	cmp	r3, #0
 8018140:	dce9      	bgt.n	8018116 <prvUnlockQueue+0x16>
 8018142:	e000      	b.n	8018146 <prvUnlockQueue+0x46>
					break;
 8018144:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	22ff      	movs	r2, #255	; 0xff
 801814a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801814e:	f001 ffc9 	bl	801a0e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018152:	f001 ff97 	bl	801a084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801815c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801815e:	e011      	b.n	8018184 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	691b      	ldr	r3, [r3, #16]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d012      	beq.n	801818e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	3310      	adds	r3, #16
 801816c:	4618      	mov	r0, r3
 801816e:	f000 feab 	bl	8018ec8 <xTaskRemoveFromEventList>
 8018172:	4603      	mov	r3, r0
 8018174:	2b00      	cmp	r3, #0
 8018176:	d001      	beq.n	801817c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018178:	f000 ff80 	bl	801907c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801817c:	7bbb      	ldrb	r3, [r7, #14]
 801817e:	3b01      	subs	r3, #1
 8018180:	b2db      	uxtb	r3, r3
 8018182:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018188:	2b00      	cmp	r3, #0
 801818a:	dce9      	bgt.n	8018160 <prvUnlockQueue+0x60>
 801818c:	e000      	b.n	8018190 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801818e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	22ff      	movs	r2, #255	; 0xff
 8018194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018198:	f001 ffa4 	bl	801a0e4 <vPortExitCritical>
}
 801819c:	bf00      	nop
 801819e:	3710      	adds	r7, #16
 80181a0:	46bd      	mov	sp, r7
 80181a2:	bd80      	pop	{r7, pc}

080181a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b084      	sub	sp, #16
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80181ac:	f001 ff6a 	bl	801a084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d102      	bne.n	80181be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80181b8:	2301      	movs	r3, #1
 80181ba:	60fb      	str	r3, [r7, #12]
 80181bc:	e001      	b.n	80181c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80181be:	2300      	movs	r3, #0
 80181c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80181c2:	f001 ff8f 	bl	801a0e4 <vPortExitCritical>

	return xReturn;
 80181c6:	68fb      	ldr	r3, [r7, #12]
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	3710      	adds	r7, #16
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}

080181d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b084      	sub	sp, #16
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80181d8:	f001 ff54 	bl	801a084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181e4:	429a      	cmp	r2, r3
 80181e6:	d102      	bne.n	80181ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80181e8:	2301      	movs	r3, #1
 80181ea:	60fb      	str	r3, [r7, #12]
 80181ec:	e001      	b.n	80181f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80181ee:	2300      	movs	r3, #0
 80181f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80181f2:	f001 ff77 	bl	801a0e4 <vPortExitCritical>

	return xReturn;
 80181f6:	68fb      	ldr	r3, [r7, #12]
}
 80181f8:	4618      	mov	r0, r3
 80181fa:	3710      	adds	r7, #16
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}

08018200 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018200:	b480      	push	{r7}
 8018202:	b085      	sub	sp, #20
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
 8018208:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801820a:	2300      	movs	r3, #0
 801820c:	60fb      	str	r3, [r7, #12]
 801820e:	e014      	b.n	801823a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018210:	4a0f      	ldr	r2, [pc, #60]	; (8018250 <vQueueAddToRegistry+0x50>)
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d10b      	bne.n	8018234 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801821c:	490c      	ldr	r1, [pc, #48]	; (8018250 <vQueueAddToRegistry+0x50>)
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	683a      	ldr	r2, [r7, #0]
 8018222:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018226:	4a0a      	ldr	r2, [pc, #40]	; (8018250 <vQueueAddToRegistry+0x50>)
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	00db      	lsls	r3, r3, #3
 801822c:	4413      	add	r3, r2
 801822e:	687a      	ldr	r2, [r7, #4]
 8018230:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018232:	e006      	b.n	8018242 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	3301      	adds	r3, #1
 8018238:	60fb      	str	r3, [r7, #12]
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	2b07      	cmp	r3, #7
 801823e:	d9e7      	bls.n	8018210 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018240:	bf00      	nop
 8018242:	bf00      	nop
 8018244:	3714      	adds	r7, #20
 8018246:	46bd      	mov	sp, r7
 8018248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824c:	4770      	bx	lr
 801824e:	bf00      	nop
 8018250:	20009d24 	.word	0x20009d24

08018254 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018254:	b580      	push	{r7, lr}
 8018256:	b086      	sub	sp, #24
 8018258:	af00      	add	r7, sp, #0
 801825a:	60f8      	str	r0, [r7, #12]
 801825c:	60b9      	str	r1, [r7, #8]
 801825e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018264:	f001 ff0e 	bl	801a084 <vPortEnterCritical>
 8018268:	697b      	ldr	r3, [r7, #20]
 801826a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801826e:	b25b      	sxtb	r3, r3
 8018270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018274:	d103      	bne.n	801827e <vQueueWaitForMessageRestricted+0x2a>
 8018276:	697b      	ldr	r3, [r7, #20]
 8018278:	2200      	movs	r2, #0
 801827a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801827e:	697b      	ldr	r3, [r7, #20]
 8018280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018284:	b25b      	sxtb	r3, r3
 8018286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801828a:	d103      	bne.n	8018294 <vQueueWaitForMessageRestricted+0x40>
 801828c:	697b      	ldr	r3, [r7, #20]
 801828e:	2200      	movs	r2, #0
 8018290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018294:	f001 ff26 	bl	801a0e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018298:	697b      	ldr	r3, [r7, #20]
 801829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801829c:	2b00      	cmp	r3, #0
 801829e:	d106      	bne.n	80182ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80182a0:	697b      	ldr	r3, [r7, #20]
 80182a2:	3324      	adds	r3, #36	; 0x24
 80182a4:	687a      	ldr	r2, [r7, #4]
 80182a6:	68b9      	ldr	r1, [r7, #8]
 80182a8:	4618      	mov	r0, r3
 80182aa:	f000 fde1 	bl	8018e70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80182ae:	6978      	ldr	r0, [r7, #20]
 80182b0:	f7ff ff26 	bl	8018100 <prvUnlockQueue>
	}
 80182b4:	bf00      	nop
 80182b6:	3718      	adds	r7, #24
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}

080182bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b08e      	sub	sp, #56	; 0x38
 80182c0:	af04      	add	r7, sp, #16
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	60b9      	str	r1, [r7, #8]
 80182c6:	607a      	str	r2, [r7, #4]
 80182c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80182ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d10a      	bne.n	80182e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80182d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182d4:	f383 8811 	msr	BASEPRI, r3
 80182d8:	f3bf 8f6f 	isb	sy
 80182dc:	f3bf 8f4f 	dsb	sy
 80182e0:	623b      	str	r3, [r7, #32]
}
 80182e2:	bf00      	nop
 80182e4:	e7fe      	b.n	80182e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80182e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d10a      	bne.n	8018302 <xTaskCreateStatic+0x46>
	__asm volatile
 80182ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182f0:	f383 8811 	msr	BASEPRI, r3
 80182f4:	f3bf 8f6f 	isb	sy
 80182f8:	f3bf 8f4f 	dsb	sy
 80182fc:	61fb      	str	r3, [r7, #28]
}
 80182fe:	bf00      	nop
 8018300:	e7fe      	b.n	8018300 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018302:	23b4      	movs	r3, #180	; 0xb4
 8018304:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018306:	693b      	ldr	r3, [r7, #16]
 8018308:	2bb4      	cmp	r3, #180	; 0xb4
 801830a:	d00a      	beq.n	8018322 <xTaskCreateStatic+0x66>
	__asm volatile
 801830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018310:	f383 8811 	msr	BASEPRI, r3
 8018314:	f3bf 8f6f 	isb	sy
 8018318:	f3bf 8f4f 	dsb	sy
 801831c:	61bb      	str	r3, [r7, #24]
}
 801831e:	bf00      	nop
 8018320:	e7fe      	b.n	8018320 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018322:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018326:	2b00      	cmp	r3, #0
 8018328:	d01e      	beq.n	8018368 <xTaskCreateStatic+0xac>
 801832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801832c:	2b00      	cmp	r3, #0
 801832e:	d01b      	beq.n	8018368 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018332:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018338:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801833c:	2202      	movs	r2, #2
 801833e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018342:	2300      	movs	r3, #0
 8018344:	9303      	str	r3, [sp, #12]
 8018346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018348:	9302      	str	r3, [sp, #8]
 801834a:	f107 0314 	add.w	r3, r7, #20
 801834e:	9301      	str	r3, [sp, #4]
 8018350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018352:	9300      	str	r3, [sp, #0]
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	687a      	ldr	r2, [r7, #4]
 8018358:	68b9      	ldr	r1, [r7, #8]
 801835a:	68f8      	ldr	r0, [r7, #12]
 801835c:	f000 f850 	bl	8018400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018362:	f000 f8eb 	bl	801853c <prvAddNewTaskToReadyList>
 8018366:	e001      	b.n	801836c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018368:	2300      	movs	r3, #0
 801836a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801836c:	697b      	ldr	r3, [r7, #20]
	}
 801836e:	4618      	mov	r0, r3
 8018370:	3728      	adds	r7, #40	; 0x28
 8018372:	46bd      	mov	sp, r7
 8018374:	bd80      	pop	{r7, pc}

08018376 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018376:	b580      	push	{r7, lr}
 8018378:	b08c      	sub	sp, #48	; 0x30
 801837a:	af04      	add	r7, sp, #16
 801837c:	60f8      	str	r0, [r7, #12]
 801837e:	60b9      	str	r1, [r7, #8]
 8018380:	603b      	str	r3, [r7, #0]
 8018382:	4613      	mov	r3, r2
 8018384:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018386:	88fb      	ldrh	r3, [r7, #6]
 8018388:	009b      	lsls	r3, r3, #2
 801838a:	4618      	mov	r0, r3
 801838c:	f001 ff9c 	bl	801a2c8 <pvPortMalloc>
 8018390:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018392:	697b      	ldr	r3, [r7, #20]
 8018394:	2b00      	cmp	r3, #0
 8018396:	d00e      	beq.n	80183b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018398:	20b4      	movs	r0, #180	; 0xb4
 801839a:	f001 ff95 	bl	801a2c8 <pvPortMalloc>
 801839e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80183a0:	69fb      	ldr	r3, [r7, #28]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d003      	beq.n	80183ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80183a6:	69fb      	ldr	r3, [r7, #28]
 80183a8:	697a      	ldr	r2, [r7, #20]
 80183aa:	631a      	str	r2, [r3, #48]	; 0x30
 80183ac:	e005      	b.n	80183ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80183ae:	6978      	ldr	r0, [r7, #20]
 80183b0:	f002 f856 	bl	801a460 <vPortFree>
 80183b4:	e001      	b.n	80183ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80183b6:	2300      	movs	r3, #0
 80183b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80183ba:	69fb      	ldr	r3, [r7, #28]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d017      	beq.n	80183f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80183c0:	69fb      	ldr	r3, [r7, #28]
 80183c2:	2200      	movs	r2, #0
 80183c4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80183c8:	88fa      	ldrh	r2, [r7, #6]
 80183ca:	2300      	movs	r3, #0
 80183cc:	9303      	str	r3, [sp, #12]
 80183ce:	69fb      	ldr	r3, [r7, #28]
 80183d0:	9302      	str	r3, [sp, #8]
 80183d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183d4:	9301      	str	r3, [sp, #4]
 80183d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d8:	9300      	str	r3, [sp, #0]
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	68b9      	ldr	r1, [r7, #8]
 80183de:	68f8      	ldr	r0, [r7, #12]
 80183e0:	f000 f80e 	bl	8018400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80183e4:	69f8      	ldr	r0, [r7, #28]
 80183e6:	f000 f8a9 	bl	801853c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80183ea:	2301      	movs	r3, #1
 80183ec:	61bb      	str	r3, [r7, #24]
 80183ee:	e002      	b.n	80183f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80183f0:	f04f 33ff 	mov.w	r3, #4294967295
 80183f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80183f6:	69bb      	ldr	r3, [r7, #24]
	}
 80183f8:	4618      	mov	r0, r3
 80183fa:	3720      	adds	r7, #32
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}

08018400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b088      	sub	sp, #32
 8018404:	af00      	add	r7, sp, #0
 8018406:	60f8      	str	r0, [r7, #12]
 8018408:	60b9      	str	r1, [r7, #8]
 801840a:	607a      	str	r2, [r7, #4]
 801840c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018418:	3b01      	subs	r3, #1
 801841a:	009b      	lsls	r3, r3, #2
 801841c:	4413      	add	r3, r2
 801841e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018420:	69bb      	ldr	r3, [r7, #24]
 8018422:	f023 0307 	bic.w	r3, r3, #7
 8018426:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018428:	69bb      	ldr	r3, [r7, #24]
 801842a:	f003 0307 	and.w	r3, r3, #7
 801842e:	2b00      	cmp	r3, #0
 8018430:	d00a      	beq.n	8018448 <prvInitialiseNewTask+0x48>
	__asm volatile
 8018432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018436:	f383 8811 	msr	BASEPRI, r3
 801843a:	f3bf 8f6f 	isb	sy
 801843e:	f3bf 8f4f 	dsb	sy
 8018442:	617b      	str	r3, [r7, #20]
}
 8018444:	bf00      	nop
 8018446:	e7fe      	b.n	8018446 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d01f      	beq.n	801848e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801844e:	2300      	movs	r3, #0
 8018450:	61fb      	str	r3, [r7, #28]
 8018452:	e012      	b.n	801847a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018454:	68ba      	ldr	r2, [r7, #8]
 8018456:	69fb      	ldr	r3, [r7, #28]
 8018458:	4413      	add	r3, r2
 801845a:	7819      	ldrb	r1, [r3, #0]
 801845c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801845e:	69fb      	ldr	r3, [r7, #28]
 8018460:	4413      	add	r3, r2
 8018462:	3334      	adds	r3, #52	; 0x34
 8018464:	460a      	mov	r2, r1
 8018466:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018468:	68ba      	ldr	r2, [r7, #8]
 801846a:	69fb      	ldr	r3, [r7, #28]
 801846c:	4413      	add	r3, r2
 801846e:	781b      	ldrb	r3, [r3, #0]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d006      	beq.n	8018482 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018474:	69fb      	ldr	r3, [r7, #28]
 8018476:	3301      	adds	r3, #1
 8018478:	61fb      	str	r3, [r7, #28]
 801847a:	69fb      	ldr	r3, [r7, #28]
 801847c:	2b0f      	cmp	r3, #15
 801847e:	d9e9      	bls.n	8018454 <prvInitialiseNewTask+0x54>
 8018480:	e000      	b.n	8018484 <prvInitialiseNewTask+0x84>
			{
				break;
 8018482:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018486:	2200      	movs	r2, #0
 8018488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801848c:	e003      	b.n	8018496 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018490:	2200      	movs	r2, #0
 8018492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018498:	2b06      	cmp	r3, #6
 801849a:	d901      	bls.n	80184a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801849c:	2306      	movs	r3, #6
 801849e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80184a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80184a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80184ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ae:	2200      	movs	r2, #0
 80184b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80184b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184b4:	3304      	adds	r3, #4
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7fe fe64 	bl	8017184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80184bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184be:	3318      	adds	r3, #24
 80184c0:	4618      	mov	r0, r3
 80184c2:	f7fe fe5f 	bl	8017184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80184c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ce:	f1c3 0207 	rsb	r2, r3, #7
 80184d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80184d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80184dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184de:	2200      	movs	r2, #0
 80184e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80184e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e6:	2200      	movs	r2, #0
 80184e8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80184ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ee:	334c      	adds	r3, #76	; 0x4c
 80184f0:	2260      	movs	r2, #96	; 0x60
 80184f2:	2100      	movs	r1, #0
 80184f4:	4618      	mov	r0, r3
 80184f6:	f010 feba 	bl	802926e <memset>
 80184fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184fc:	4a0c      	ldr	r2, [pc, #48]	; (8018530 <prvInitialiseNewTask+0x130>)
 80184fe:	651a      	str	r2, [r3, #80]	; 0x50
 8018500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018502:	4a0c      	ldr	r2, [pc, #48]	; (8018534 <prvInitialiseNewTask+0x134>)
 8018504:	655a      	str	r2, [r3, #84]	; 0x54
 8018506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018508:	4a0b      	ldr	r2, [pc, #44]	; (8018538 <prvInitialiseNewTask+0x138>)
 801850a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801850c:	683a      	ldr	r2, [r7, #0]
 801850e:	68f9      	ldr	r1, [r7, #12]
 8018510:	69b8      	ldr	r0, [r7, #24]
 8018512:	f001 fc87 	bl	8019e24 <pxPortInitialiseStack>
 8018516:	4602      	mov	r2, r0
 8018518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801851a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801851e:	2b00      	cmp	r3, #0
 8018520:	d002      	beq.n	8018528 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018526:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018528:	bf00      	nop
 801852a:	3720      	adds	r7, #32
 801852c:	46bd      	mov	sp, r7
 801852e:	bd80      	pop	{r7, pc}
 8018530:	0802a8d4 	.word	0x0802a8d4
 8018534:	0802a8f4 	.word	0x0802a8f4
 8018538:	0802a8b4 	.word	0x0802a8b4

0801853c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b082      	sub	sp, #8
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018544:	f001 fd9e 	bl	801a084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018548:	4b2a      	ldr	r3, [pc, #168]	; (80185f4 <prvAddNewTaskToReadyList+0xb8>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	3301      	adds	r3, #1
 801854e:	4a29      	ldr	r2, [pc, #164]	; (80185f4 <prvAddNewTaskToReadyList+0xb8>)
 8018550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018552:	4b29      	ldr	r3, [pc, #164]	; (80185f8 <prvAddNewTaskToReadyList+0xbc>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	2b00      	cmp	r3, #0
 8018558:	d109      	bne.n	801856e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801855a:	4a27      	ldr	r2, [pc, #156]	; (80185f8 <prvAddNewTaskToReadyList+0xbc>)
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018560:	4b24      	ldr	r3, [pc, #144]	; (80185f4 <prvAddNewTaskToReadyList+0xb8>)
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	2b01      	cmp	r3, #1
 8018566:	d110      	bne.n	801858a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018568:	f000 fdac 	bl	80190c4 <prvInitialiseTaskLists>
 801856c:	e00d      	b.n	801858a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801856e:	4b23      	ldr	r3, [pc, #140]	; (80185fc <prvAddNewTaskToReadyList+0xc0>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d109      	bne.n	801858a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018576:	4b20      	ldr	r3, [pc, #128]	; (80185f8 <prvAddNewTaskToReadyList+0xbc>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018580:	429a      	cmp	r2, r3
 8018582:	d802      	bhi.n	801858a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018584:	4a1c      	ldr	r2, [pc, #112]	; (80185f8 <prvAddNewTaskToReadyList+0xbc>)
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801858a:	4b1d      	ldr	r3, [pc, #116]	; (8018600 <prvAddNewTaskToReadyList+0xc4>)
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	3301      	adds	r3, #1
 8018590:	4a1b      	ldr	r2, [pc, #108]	; (8018600 <prvAddNewTaskToReadyList+0xc4>)
 8018592:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018598:	2201      	movs	r2, #1
 801859a:	409a      	lsls	r2, r3
 801859c:	4b19      	ldr	r3, [pc, #100]	; (8018604 <prvAddNewTaskToReadyList+0xc8>)
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	4313      	orrs	r3, r2
 80185a2:	4a18      	ldr	r2, [pc, #96]	; (8018604 <prvAddNewTaskToReadyList+0xc8>)
 80185a4:	6013      	str	r3, [r2, #0]
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185aa:	4613      	mov	r3, r2
 80185ac:	009b      	lsls	r3, r3, #2
 80185ae:	4413      	add	r3, r2
 80185b0:	009b      	lsls	r3, r3, #2
 80185b2:	4a15      	ldr	r2, [pc, #84]	; (8018608 <prvAddNewTaskToReadyList+0xcc>)
 80185b4:	441a      	add	r2, r3
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	3304      	adds	r3, #4
 80185ba:	4619      	mov	r1, r3
 80185bc:	4610      	mov	r0, r2
 80185be:	f7fe fdee 	bl	801719e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80185c2:	f001 fd8f 	bl	801a0e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80185c6:	4b0d      	ldr	r3, [pc, #52]	; (80185fc <prvAddNewTaskToReadyList+0xc0>)
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d00e      	beq.n	80185ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80185ce:	4b0a      	ldr	r3, [pc, #40]	; (80185f8 <prvAddNewTaskToReadyList+0xbc>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185d8:	429a      	cmp	r2, r3
 80185da:	d207      	bcs.n	80185ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80185dc:	4b0b      	ldr	r3, [pc, #44]	; (801860c <prvAddNewTaskToReadyList+0xd0>)
 80185de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185e2:	601a      	str	r2, [r3, #0]
 80185e4:	f3bf 8f4f 	dsb	sy
 80185e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80185ec:	bf00      	nop
 80185ee:	3708      	adds	r7, #8
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}
 80185f4:	20000964 	.word	0x20000964
 80185f8:	20000864 	.word	0x20000864
 80185fc:	20000970 	.word	0x20000970
 8018600:	20000980 	.word	0x20000980
 8018604:	2000096c 	.word	0x2000096c
 8018608:	20000868 	.word	0x20000868
 801860c:	e000ed04 	.word	0xe000ed04

08018610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018610:	b580      	push	{r7, lr}
 8018612:	b084      	sub	sp, #16
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018618:	2300      	movs	r3, #0
 801861a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d017      	beq.n	8018652 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018622:	4b13      	ldr	r3, [pc, #76]	; (8018670 <vTaskDelay+0x60>)
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d00a      	beq.n	8018640 <vTaskDelay+0x30>
	__asm volatile
 801862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801862e:	f383 8811 	msr	BASEPRI, r3
 8018632:	f3bf 8f6f 	isb	sy
 8018636:	f3bf 8f4f 	dsb	sy
 801863a:	60bb      	str	r3, [r7, #8]
}
 801863c:	bf00      	nop
 801863e:	e7fe      	b.n	801863e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018640:	f000 fa1e 	bl	8018a80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018644:	2100      	movs	r1, #0
 8018646:	6878      	ldr	r0, [r7, #4]
 8018648:	f000 ffba 	bl	80195c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801864c:	f000 fa26 	bl	8018a9c <xTaskResumeAll>
 8018650:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d107      	bne.n	8018668 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018658:	4b06      	ldr	r3, [pc, #24]	; (8018674 <vTaskDelay+0x64>)
 801865a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801865e:	601a      	str	r2, [r3, #0]
 8018660:	f3bf 8f4f 	dsb	sy
 8018664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018668:	bf00      	nop
 801866a:	3710      	adds	r7, #16
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}
 8018670:	2000098c 	.word	0x2000098c
 8018674:	e000ed04 	.word	0xe000ed04

08018678 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8018678:	b580      	push	{r7, lr}
 801867a:	b084      	sub	sp, #16
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018680:	f001 fd00 	bl	801a084 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d102      	bne.n	8018690 <vTaskSuspend+0x18>
 801868a:	4b3c      	ldr	r3, [pc, #240]	; (801877c <vTaskSuspend+0x104>)
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	e000      	b.n	8018692 <vTaskSuspend+0x1a>
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	3304      	adds	r3, #4
 8018698:	4618      	mov	r0, r3
 801869a:	f7fe fddd 	bl	8017258 <uxListRemove>
 801869e:	4603      	mov	r3, r0
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d115      	bne.n	80186d0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186a8:	4935      	ldr	r1, [pc, #212]	; (8018780 <vTaskSuspend+0x108>)
 80186aa:	4613      	mov	r3, r2
 80186ac:	009b      	lsls	r3, r3, #2
 80186ae:	4413      	add	r3, r2
 80186b0:	009b      	lsls	r3, r3, #2
 80186b2:	440b      	add	r3, r1
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d10a      	bne.n	80186d0 <vTaskSuspend+0x58>
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186be:	2201      	movs	r2, #1
 80186c0:	fa02 f303 	lsl.w	r3, r2, r3
 80186c4:	43da      	mvns	r2, r3
 80186c6:	4b2f      	ldr	r3, [pc, #188]	; (8018784 <vTaskSuspend+0x10c>)
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	4013      	ands	r3, r2
 80186cc:	4a2d      	ldr	r2, [pc, #180]	; (8018784 <vTaskSuspend+0x10c>)
 80186ce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d004      	beq.n	80186e2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	3318      	adds	r3, #24
 80186dc:	4618      	mov	r0, r3
 80186de:	f7fe fdbb 	bl	8017258 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	3304      	adds	r3, #4
 80186e6:	4619      	mov	r1, r3
 80186e8:	4827      	ldr	r0, [pc, #156]	; (8018788 <vTaskSuspend+0x110>)
 80186ea:	f7fe fd58 	bl	801719e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80186f4:	b2db      	uxtb	r3, r3
 80186f6:	2b01      	cmp	r3, #1
 80186f8:	d103      	bne.n	8018702 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	2200      	movs	r2, #0
 80186fe:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018702:	f001 fcef 	bl	801a0e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8018706:	4b21      	ldr	r3, [pc, #132]	; (801878c <vTaskSuspend+0x114>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d005      	beq.n	801871a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801870e:	f001 fcb9 	bl	801a084 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018712:	f000 fd79 	bl	8019208 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018716:	f001 fce5 	bl	801a0e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801871a:	4b18      	ldr	r3, [pc, #96]	; (801877c <vTaskSuspend+0x104>)
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	68fa      	ldr	r2, [r7, #12]
 8018720:	429a      	cmp	r2, r3
 8018722:	d127      	bne.n	8018774 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8018724:	4b19      	ldr	r3, [pc, #100]	; (801878c <vTaskSuspend+0x114>)
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	2b00      	cmp	r3, #0
 801872a:	d017      	beq.n	801875c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801872c:	4b18      	ldr	r3, [pc, #96]	; (8018790 <vTaskSuspend+0x118>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d00a      	beq.n	801874a <vTaskSuspend+0xd2>
	__asm volatile
 8018734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018738:	f383 8811 	msr	BASEPRI, r3
 801873c:	f3bf 8f6f 	isb	sy
 8018740:	f3bf 8f4f 	dsb	sy
 8018744:	60bb      	str	r3, [r7, #8]
}
 8018746:	bf00      	nop
 8018748:	e7fe      	b.n	8018748 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801874a:	4b12      	ldr	r3, [pc, #72]	; (8018794 <vTaskSuspend+0x11c>)
 801874c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018750:	601a      	str	r2, [r3, #0]
 8018752:	f3bf 8f4f 	dsb	sy
 8018756:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801875a:	e00b      	b.n	8018774 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801875c:	4b0a      	ldr	r3, [pc, #40]	; (8018788 <vTaskSuspend+0x110>)
 801875e:	681a      	ldr	r2, [r3, #0]
 8018760:	4b0d      	ldr	r3, [pc, #52]	; (8018798 <vTaskSuspend+0x120>)
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	429a      	cmp	r2, r3
 8018766:	d103      	bne.n	8018770 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8018768:	4b04      	ldr	r3, [pc, #16]	; (801877c <vTaskSuspend+0x104>)
 801876a:	2200      	movs	r2, #0
 801876c:	601a      	str	r2, [r3, #0]
	}
 801876e:	e001      	b.n	8018774 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8018770:	f000 faf8 	bl	8018d64 <vTaskSwitchContext>
	}
 8018774:	bf00      	nop
 8018776:	3710      	adds	r7, #16
 8018778:	46bd      	mov	sp, r7
 801877a:	bd80      	pop	{r7, pc}
 801877c:	20000864 	.word	0x20000864
 8018780:	20000868 	.word	0x20000868
 8018784:	2000096c 	.word	0x2000096c
 8018788:	20000950 	.word	0x20000950
 801878c:	20000970 	.word	0x20000970
 8018790:	2000098c 	.word	0x2000098c
 8018794:	e000ed04 	.word	0xe000ed04
 8018798:	20000964 	.word	0x20000964

0801879c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801879c:	b480      	push	{r7}
 801879e:	b087      	sub	sp, #28
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80187a4:	2300      	movs	r3, #0
 80187a6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d10a      	bne.n	80187c8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80187b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187b6:	f383 8811 	msr	BASEPRI, r3
 80187ba:	f3bf 8f6f 	isb	sy
 80187be:	f3bf 8f4f 	dsb	sy
 80187c2:	60fb      	str	r3, [r7, #12]
}
 80187c4:	bf00      	nop
 80187c6:	e7fe      	b.n	80187c6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80187c8:	693b      	ldr	r3, [r7, #16]
 80187ca:	695b      	ldr	r3, [r3, #20]
 80187cc:	4a0a      	ldr	r2, [pc, #40]	; (80187f8 <prvTaskIsTaskSuspended+0x5c>)
 80187ce:	4293      	cmp	r3, r2
 80187d0:	d10a      	bne.n	80187e8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80187d2:	693b      	ldr	r3, [r7, #16]
 80187d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187d6:	4a09      	ldr	r2, [pc, #36]	; (80187fc <prvTaskIsTaskSuspended+0x60>)
 80187d8:	4293      	cmp	r3, r2
 80187da:	d005      	beq.n	80187e8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80187dc:	693b      	ldr	r3, [r7, #16]
 80187de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d101      	bne.n	80187e8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80187e4:	2301      	movs	r3, #1
 80187e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80187e8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80187ea:	4618      	mov	r0, r3
 80187ec:	371c      	adds	r7, #28
 80187ee:	46bd      	mov	sp, r7
 80187f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f4:	4770      	bx	lr
 80187f6:	bf00      	nop
 80187f8:	20000950 	.word	0x20000950
 80187fc:	20000924 	.word	0x20000924

08018800 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018800:	b580      	push	{r7, lr}
 8018802:	b084      	sub	sp, #16
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d10a      	bne.n	8018828 <vTaskResume+0x28>
	__asm volatile
 8018812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018816:	f383 8811 	msr	BASEPRI, r3
 801881a:	f3bf 8f6f 	isb	sy
 801881e:	f3bf 8f4f 	dsb	sy
 8018822:	60bb      	str	r3, [r7, #8]
}
 8018824:	bf00      	nop
 8018826:	e7fe      	b.n	8018826 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018828:	4b20      	ldr	r3, [pc, #128]	; (80188ac <vTaskResume+0xac>)
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	68fa      	ldr	r2, [r7, #12]
 801882e:	429a      	cmp	r2, r3
 8018830:	d037      	beq.n	80188a2 <vTaskResume+0xa2>
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d034      	beq.n	80188a2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8018838:	f001 fc24 	bl	801a084 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801883c:	68f8      	ldr	r0, [r7, #12]
 801883e:	f7ff ffad 	bl	801879c <prvTaskIsTaskSuspended>
 8018842:	4603      	mov	r3, r0
 8018844:	2b00      	cmp	r3, #0
 8018846:	d02a      	beq.n	801889e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	3304      	adds	r3, #4
 801884c:	4618      	mov	r0, r3
 801884e:	f7fe fd03 	bl	8017258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018856:	2201      	movs	r2, #1
 8018858:	409a      	lsls	r2, r3
 801885a:	4b15      	ldr	r3, [pc, #84]	; (80188b0 <vTaskResume+0xb0>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	4313      	orrs	r3, r2
 8018860:	4a13      	ldr	r2, [pc, #76]	; (80188b0 <vTaskResume+0xb0>)
 8018862:	6013      	str	r3, [r2, #0]
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018868:	4613      	mov	r3, r2
 801886a:	009b      	lsls	r3, r3, #2
 801886c:	4413      	add	r3, r2
 801886e:	009b      	lsls	r3, r3, #2
 8018870:	4a10      	ldr	r2, [pc, #64]	; (80188b4 <vTaskResume+0xb4>)
 8018872:	441a      	add	r2, r3
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	3304      	adds	r3, #4
 8018878:	4619      	mov	r1, r3
 801887a:	4610      	mov	r0, r2
 801887c:	f7fe fc8f 	bl	801719e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018884:	4b09      	ldr	r3, [pc, #36]	; (80188ac <vTaskResume+0xac>)
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801888a:	429a      	cmp	r2, r3
 801888c:	d307      	bcc.n	801889e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801888e:	4b0a      	ldr	r3, [pc, #40]	; (80188b8 <vTaskResume+0xb8>)
 8018890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018894:	601a      	str	r2, [r3, #0]
 8018896:	f3bf 8f4f 	dsb	sy
 801889a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801889e:	f001 fc21 	bl	801a0e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80188a2:	bf00      	nop
 80188a4:	3710      	adds	r7, #16
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bd80      	pop	{r7, pc}
 80188aa:	bf00      	nop
 80188ac:	20000864 	.word	0x20000864
 80188b0:	2000096c 	.word	0x2000096c
 80188b4:	20000868 	.word	0x20000868
 80188b8:	e000ed04 	.word	0xe000ed04

080188bc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b08a      	sub	sp, #40	; 0x28
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80188c4:	2300      	movs	r3, #0
 80188c6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d10a      	bne.n	80188e8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80188d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188d6:	f383 8811 	msr	BASEPRI, r3
 80188da:	f3bf 8f6f 	isb	sy
 80188de:	f3bf 8f4f 	dsb	sy
 80188e2:	61bb      	str	r3, [r7, #24]
}
 80188e4:	bf00      	nop
 80188e6:	e7fe      	b.n	80188e6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80188e8:	f001 fcae 	bl	801a248 <vPortValidateInterruptPriority>
	__asm volatile
 80188ec:	f3ef 8211 	mrs	r2, BASEPRI
 80188f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188f4:	f383 8811 	msr	BASEPRI, r3
 80188f8:	f3bf 8f6f 	isb	sy
 80188fc:	f3bf 8f4f 	dsb	sy
 8018900:	617a      	str	r2, [r7, #20]
 8018902:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018904:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018906:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018908:	6a38      	ldr	r0, [r7, #32]
 801890a:	f7ff ff47 	bl	801879c <prvTaskIsTaskSuspended>
 801890e:	4603      	mov	r3, r0
 8018910:	2b00      	cmp	r3, #0
 8018912:	d02f      	beq.n	8018974 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018914:	4b1d      	ldr	r3, [pc, #116]	; (801898c <xTaskResumeFromISR+0xd0>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d125      	bne.n	8018968 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801891c:	6a3b      	ldr	r3, [r7, #32]
 801891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018920:	4b1b      	ldr	r3, [pc, #108]	; (8018990 <xTaskResumeFromISR+0xd4>)
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018926:	429a      	cmp	r2, r3
 8018928:	d301      	bcc.n	801892e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801892a:	2301      	movs	r3, #1
 801892c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801892e:	6a3b      	ldr	r3, [r7, #32]
 8018930:	3304      	adds	r3, #4
 8018932:	4618      	mov	r0, r3
 8018934:	f7fe fc90 	bl	8017258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018938:	6a3b      	ldr	r3, [r7, #32]
 801893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801893c:	2201      	movs	r2, #1
 801893e:	409a      	lsls	r2, r3
 8018940:	4b14      	ldr	r3, [pc, #80]	; (8018994 <xTaskResumeFromISR+0xd8>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	4313      	orrs	r3, r2
 8018946:	4a13      	ldr	r2, [pc, #76]	; (8018994 <xTaskResumeFromISR+0xd8>)
 8018948:	6013      	str	r3, [r2, #0]
 801894a:	6a3b      	ldr	r3, [r7, #32]
 801894c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801894e:	4613      	mov	r3, r2
 8018950:	009b      	lsls	r3, r3, #2
 8018952:	4413      	add	r3, r2
 8018954:	009b      	lsls	r3, r3, #2
 8018956:	4a10      	ldr	r2, [pc, #64]	; (8018998 <xTaskResumeFromISR+0xdc>)
 8018958:	441a      	add	r2, r3
 801895a:	6a3b      	ldr	r3, [r7, #32]
 801895c:	3304      	adds	r3, #4
 801895e:	4619      	mov	r1, r3
 8018960:	4610      	mov	r0, r2
 8018962:	f7fe fc1c 	bl	801719e <vListInsertEnd>
 8018966:	e005      	b.n	8018974 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018968:	6a3b      	ldr	r3, [r7, #32]
 801896a:	3318      	adds	r3, #24
 801896c:	4619      	mov	r1, r3
 801896e:	480b      	ldr	r0, [pc, #44]	; (801899c <xTaskResumeFromISR+0xe0>)
 8018970:	f7fe fc15 	bl	801719e <vListInsertEnd>
 8018974:	69fb      	ldr	r3, [r7, #28]
 8018976:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	f383 8811 	msr	BASEPRI, r3
}
 801897e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8018980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8018982:	4618      	mov	r0, r3
 8018984:	3728      	adds	r7, #40	; 0x28
 8018986:	46bd      	mov	sp, r7
 8018988:	bd80      	pop	{r7, pc}
 801898a:	bf00      	nop
 801898c:	2000098c 	.word	0x2000098c
 8018990:	20000864 	.word	0x20000864
 8018994:	2000096c 	.word	0x2000096c
 8018998:	20000868 	.word	0x20000868
 801899c:	20000924 	.word	0x20000924

080189a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b08a      	sub	sp, #40	; 0x28
 80189a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80189a6:	2300      	movs	r3, #0
 80189a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80189aa:	2300      	movs	r3, #0
 80189ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80189ae:	463a      	mov	r2, r7
 80189b0:	1d39      	adds	r1, r7, #4
 80189b2:	f107 0308 	add.w	r3, r7, #8
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7f7 fdde 	bl	8010578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80189bc:	6839      	ldr	r1, [r7, #0]
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	68ba      	ldr	r2, [r7, #8]
 80189c2:	9202      	str	r2, [sp, #8]
 80189c4:	9301      	str	r3, [sp, #4]
 80189c6:	2300      	movs	r3, #0
 80189c8:	9300      	str	r3, [sp, #0]
 80189ca:	2300      	movs	r3, #0
 80189cc:	460a      	mov	r2, r1
 80189ce:	4924      	ldr	r1, [pc, #144]	; (8018a60 <vTaskStartScheduler+0xc0>)
 80189d0:	4824      	ldr	r0, [pc, #144]	; (8018a64 <vTaskStartScheduler+0xc4>)
 80189d2:	f7ff fc73 	bl	80182bc <xTaskCreateStatic>
 80189d6:	4603      	mov	r3, r0
 80189d8:	4a23      	ldr	r2, [pc, #140]	; (8018a68 <vTaskStartScheduler+0xc8>)
 80189da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80189dc:	4b22      	ldr	r3, [pc, #136]	; (8018a68 <vTaskStartScheduler+0xc8>)
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d002      	beq.n	80189ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80189e4:	2301      	movs	r3, #1
 80189e6:	617b      	str	r3, [r7, #20]
 80189e8:	e001      	b.n	80189ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80189ea:	2300      	movs	r3, #0
 80189ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80189ee:	697b      	ldr	r3, [r7, #20]
 80189f0:	2b01      	cmp	r3, #1
 80189f2:	d102      	bne.n	80189fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80189f4:	f000 fe4a 	bl	801968c <xTimerCreateTimerTask>
 80189f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80189fa:	697b      	ldr	r3, [r7, #20]
 80189fc:	2b01      	cmp	r3, #1
 80189fe:	d11b      	bne.n	8018a38 <vTaskStartScheduler+0x98>
	__asm volatile
 8018a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a04:	f383 8811 	msr	BASEPRI, r3
 8018a08:	f3bf 8f6f 	isb	sy
 8018a0c:	f3bf 8f4f 	dsb	sy
 8018a10:	613b      	str	r3, [r7, #16]
}
 8018a12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018a14:	4b15      	ldr	r3, [pc, #84]	; (8018a6c <vTaskStartScheduler+0xcc>)
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	334c      	adds	r3, #76	; 0x4c
 8018a1a:	4a15      	ldr	r2, [pc, #84]	; (8018a70 <vTaskStartScheduler+0xd0>)
 8018a1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018a1e:	4b15      	ldr	r3, [pc, #84]	; (8018a74 <vTaskStartScheduler+0xd4>)
 8018a20:	f04f 32ff 	mov.w	r2, #4294967295
 8018a24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018a26:	4b14      	ldr	r3, [pc, #80]	; (8018a78 <vTaskStartScheduler+0xd8>)
 8018a28:	2201      	movs	r2, #1
 8018a2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018a2c:	4b13      	ldr	r3, [pc, #76]	; (8018a7c <vTaskStartScheduler+0xdc>)
 8018a2e:	2200      	movs	r2, #0
 8018a30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018a32:	f001 fa85 	bl	8019f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018a36:	e00e      	b.n	8018a56 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018a38:	697b      	ldr	r3, [r7, #20]
 8018a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a3e:	d10a      	bne.n	8018a56 <vTaskStartScheduler+0xb6>
	__asm volatile
 8018a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a44:	f383 8811 	msr	BASEPRI, r3
 8018a48:	f3bf 8f6f 	isb	sy
 8018a4c:	f3bf 8f4f 	dsb	sy
 8018a50:	60fb      	str	r3, [r7, #12]
}
 8018a52:	bf00      	nop
 8018a54:	e7fe      	b.n	8018a54 <vTaskStartScheduler+0xb4>
}
 8018a56:	bf00      	nop
 8018a58:	3718      	adds	r7, #24
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd80      	pop	{r7, pc}
 8018a5e:	bf00      	nop
 8018a60:	0802a418 	.word	0x0802a418
 8018a64:	08019095 	.word	0x08019095
 8018a68:	20000988 	.word	0x20000988
 8018a6c:	20000864 	.word	0x20000864
 8018a70:	20000070 	.word	0x20000070
 8018a74:	20000984 	.word	0x20000984
 8018a78:	20000970 	.word	0x20000970
 8018a7c:	20000968 	.word	0x20000968

08018a80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018a80:	b480      	push	{r7}
 8018a82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018a84:	4b04      	ldr	r3, [pc, #16]	; (8018a98 <vTaskSuspendAll+0x18>)
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	3301      	adds	r3, #1
 8018a8a:	4a03      	ldr	r2, [pc, #12]	; (8018a98 <vTaskSuspendAll+0x18>)
 8018a8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018a8e:	bf00      	nop
 8018a90:	46bd      	mov	sp, r7
 8018a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a96:	4770      	bx	lr
 8018a98:	2000098c 	.word	0x2000098c

08018a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	b084      	sub	sp, #16
 8018aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018aaa:	4b41      	ldr	r3, [pc, #260]	; (8018bb0 <xTaskResumeAll+0x114>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d10a      	bne.n	8018ac8 <xTaskResumeAll+0x2c>
	__asm volatile
 8018ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ab6:	f383 8811 	msr	BASEPRI, r3
 8018aba:	f3bf 8f6f 	isb	sy
 8018abe:	f3bf 8f4f 	dsb	sy
 8018ac2:	603b      	str	r3, [r7, #0]
}
 8018ac4:	bf00      	nop
 8018ac6:	e7fe      	b.n	8018ac6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018ac8:	f001 fadc 	bl	801a084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018acc:	4b38      	ldr	r3, [pc, #224]	; (8018bb0 <xTaskResumeAll+0x114>)
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	3b01      	subs	r3, #1
 8018ad2:	4a37      	ldr	r2, [pc, #220]	; (8018bb0 <xTaskResumeAll+0x114>)
 8018ad4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018ad6:	4b36      	ldr	r3, [pc, #216]	; (8018bb0 <xTaskResumeAll+0x114>)
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d161      	bne.n	8018ba2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018ade:	4b35      	ldr	r3, [pc, #212]	; (8018bb4 <xTaskResumeAll+0x118>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d05d      	beq.n	8018ba2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018ae6:	e02e      	b.n	8018b46 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ae8:	4b33      	ldr	r3, [pc, #204]	; (8018bb8 <xTaskResumeAll+0x11c>)
 8018aea:	68db      	ldr	r3, [r3, #12]
 8018aec:	68db      	ldr	r3, [r3, #12]
 8018aee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	3318      	adds	r3, #24
 8018af4:	4618      	mov	r0, r3
 8018af6:	f7fe fbaf 	bl	8017258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	3304      	adds	r3, #4
 8018afe:	4618      	mov	r0, r3
 8018b00:	f7fe fbaa 	bl	8017258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b08:	2201      	movs	r2, #1
 8018b0a:	409a      	lsls	r2, r3
 8018b0c:	4b2b      	ldr	r3, [pc, #172]	; (8018bbc <xTaskResumeAll+0x120>)
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	4313      	orrs	r3, r2
 8018b12:	4a2a      	ldr	r2, [pc, #168]	; (8018bbc <xTaskResumeAll+0x120>)
 8018b14:	6013      	str	r3, [r2, #0]
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b1a:	4613      	mov	r3, r2
 8018b1c:	009b      	lsls	r3, r3, #2
 8018b1e:	4413      	add	r3, r2
 8018b20:	009b      	lsls	r3, r3, #2
 8018b22:	4a27      	ldr	r2, [pc, #156]	; (8018bc0 <xTaskResumeAll+0x124>)
 8018b24:	441a      	add	r2, r3
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	3304      	adds	r3, #4
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	4610      	mov	r0, r2
 8018b2e:	f7fe fb36 	bl	801719e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b36:	4b23      	ldr	r3, [pc, #140]	; (8018bc4 <xTaskResumeAll+0x128>)
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b3c:	429a      	cmp	r2, r3
 8018b3e:	d302      	bcc.n	8018b46 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8018b40:	4b21      	ldr	r3, [pc, #132]	; (8018bc8 <xTaskResumeAll+0x12c>)
 8018b42:	2201      	movs	r2, #1
 8018b44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018b46:	4b1c      	ldr	r3, [pc, #112]	; (8018bb8 <xTaskResumeAll+0x11c>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d1cc      	bne.n	8018ae8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d001      	beq.n	8018b58 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018b54:	f000 fb58 	bl	8019208 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018b58:	4b1c      	ldr	r3, [pc, #112]	; (8018bcc <xTaskResumeAll+0x130>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d010      	beq.n	8018b86 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018b64:	f000 f846 	bl	8018bf4 <xTaskIncrementTick>
 8018b68:	4603      	mov	r3, r0
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d002      	beq.n	8018b74 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8018b6e:	4b16      	ldr	r3, [pc, #88]	; (8018bc8 <xTaskResumeAll+0x12c>)
 8018b70:	2201      	movs	r2, #1
 8018b72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	3b01      	subs	r3, #1
 8018b78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d1f1      	bne.n	8018b64 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8018b80:	4b12      	ldr	r3, [pc, #72]	; (8018bcc <xTaskResumeAll+0x130>)
 8018b82:	2200      	movs	r2, #0
 8018b84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018b86:	4b10      	ldr	r3, [pc, #64]	; (8018bc8 <xTaskResumeAll+0x12c>)
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d009      	beq.n	8018ba2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018b8e:	2301      	movs	r3, #1
 8018b90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018b92:	4b0f      	ldr	r3, [pc, #60]	; (8018bd0 <xTaskResumeAll+0x134>)
 8018b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b98:	601a      	str	r2, [r3, #0]
 8018b9a:	f3bf 8f4f 	dsb	sy
 8018b9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018ba2:	f001 fa9f 	bl	801a0e4 <vPortExitCritical>

	return xAlreadyYielded;
 8018ba6:	68bb      	ldr	r3, [r7, #8]
}
 8018ba8:	4618      	mov	r0, r3
 8018baa:	3710      	adds	r7, #16
 8018bac:	46bd      	mov	sp, r7
 8018bae:	bd80      	pop	{r7, pc}
 8018bb0:	2000098c 	.word	0x2000098c
 8018bb4:	20000964 	.word	0x20000964
 8018bb8:	20000924 	.word	0x20000924
 8018bbc:	2000096c 	.word	0x2000096c
 8018bc0:	20000868 	.word	0x20000868
 8018bc4:	20000864 	.word	0x20000864
 8018bc8:	20000978 	.word	0x20000978
 8018bcc:	20000974 	.word	0x20000974
 8018bd0:	e000ed04 	.word	0xe000ed04

08018bd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018bd4:	b480      	push	{r7}
 8018bd6:	b083      	sub	sp, #12
 8018bd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018bda:	4b05      	ldr	r3, [pc, #20]	; (8018bf0 <xTaskGetTickCount+0x1c>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018be0:	687b      	ldr	r3, [r7, #4]
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	370c      	adds	r7, #12
 8018be6:	46bd      	mov	sp, r7
 8018be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bec:	4770      	bx	lr
 8018bee:	bf00      	nop
 8018bf0:	20000968 	.word	0x20000968

08018bf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b086      	sub	sp, #24
 8018bf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018bfe:	4b4e      	ldr	r3, [pc, #312]	; (8018d38 <xTaskIncrementTick+0x144>)
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	f040 808e 	bne.w	8018d24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018c08:	4b4c      	ldr	r3, [pc, #304]	; (8018d3c <xTaskIncrementTick+0x148>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	3301      	adds	r3, #1
 8018c0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018c10:	4a4a      	ldr	r2, [pc, #296]	; (8018d3c <xTaskIncrementTick+0x148>)
 8018c12:	693b      	ldr	r3, [r7, #16]
 8018c14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018c16:	693b      	ldr	r3, [r7, #16]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d120      	bne.n	8018c5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018c1c:	4b48      	ldr	r3, [pc, #288]	; (8018d40 <xTaskIncrementTick+0x14c>)
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d00a      	beq.n	8018c3c <xTaskIncrementTick+0x48>
	__asm volatile
 8018c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c2a:	f383 8811 	msr	BASEPRI, r3
 8018c2e:	f3bf 8f6f 	isb	sy
 8018c32:	f3bf 8f4f 	dsb	sy
 8018c36:	603b      	str	r3, [r7, #0]
}
 8018c38:	bf00      	nop
 8018c3a:	e7fe      	b.n	8018c3a <xTaskIncrementTick+0x46>
 8018c3c:	4b40      	ldr	r3, [pc, #256]	; (8018d40 <xTaskIncrementTick+0x14c>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	60fb      	str	r3, [r7, #12]
 8018c42:	4b40      	ldr	r3, [pc, #256]	; (8018d44 <xTaskIncrementTick+0x150>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	4a3e      	ldr	r2, [pc, #248]	; (8018d40 <xTaskIncrementTick+0x14c>)
 8018c48:	6013      	str	r3, [r2, #0]
 8018c4a:	4a3e      	ldr	r2, [pc, #248]	; (8018d44 <xTaskIncrementTick+0x150>)
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	6013      	str	r3, [r2, #0]
 8018c50:	4b3d      	ldr	r3, [pc, #244]	; (8018d48 <xTaskIncrementTick+0x154>)
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	3301      	adds	r3, #1
 8018c56:	4a3c      	ldr	r2, [pc, #240]	; (8018d48 <xTaskIncrementTick+0x154>)
 8018c58:	6013      	str	r3, [r2, #0]
 8018c5a:	f000 fad5 	bl	8019208 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018c5e:	4b3b      	ldr	r3, [pc, #236]	; (8018d4c <xTaskIncrementTick+0x158>)
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	693a      	ldr	r2, [r7, #16]
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d348      	bcc.n	8018cfa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018c68:	4b35      	ldr	r3, [pc, #212]	; (8018d40 <xTaskIncrementTick+0x14c>)
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d104      	bne.n	8018c7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c72:	4b36      	ldr	r3, [pc, #216]	; (8018d4c <xTaskIncrementTick+0x158>)
 8018c74:	f04f 32ff 	mov.w	r2, #4294967295
 8018c78:	601a      	str	r2, [r3, #0]
					break;
 8018c7a:	e03e      	b.n	8018cfa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c7c:	4b30      	ldr	r3, [pc, #192]	; (8018d40 <xTaskIncrementTick+0x14c>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	68db      	ldr	r3, [r3, #12]
 8018c82:	68db      	ldr	r3, [r3, #12]
 8018c84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018c86:	68bb      	ldr	r3, [r7, #8]
 8018c88:	685b      	ldr	r3, [r3, #4]
 8018c8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018c8c:	693a      	ldr	r2, [r7, #16]
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	429a      	cmp	r2, r3
 8018c92:	d203      	bcs.n	8018c9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018c94:	4a2d      	ldr	r2, [pc, #180]	; (8018d4c <xTaskIncrementTick+0x158>)
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018c9a:	e02e      	b.n	8018cfa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018c9c:	68bb      	ldr	r3, [r7, #8]
 8018c9e:	3304      	adds	r3, #4
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7fe fad9 	bl	8017258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018ca6:	68bb      	ldr	r3, [r7, #8]
 8018ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d004      	beq.n	8018cb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018cae:	68bb      	ldr	r3, [r7, #8]
 8018cb0:	3318      	adds	r3, #24
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	f7fe fad0 	bl	8017258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018cb8:	68bb      	ldr	r3, [r7, #8]
 8018cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cbc:	2201      	movs	r2, #1
 8018cbe:	409a      	lsls	r2, r3
 8018cc0:	4b23      	ldr	r3, [pc, #140]	; (8018d50 <xTaskIncrementTick+0x15c>)
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	4313      	orrs	r3, r2
 8018cc6:	4a22      	ldr	r2, [pc, #136]	; (8018d50 <xTaskIncrementTick+0x15c>)
 8018cc8:	6013      	str	r3, [r2, #0]
 8018cca:	68bb      	ldr	r3, [r7, #8]
 8018ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cce:	4613      	mov	r3, r2
 8018cd0:	009b      	lsls	r3, r3, #2
 8018cd2:	4413      	add	r3, r2
 8018cd4:	009b      	lsls	r3, r3, #2
 8018cd6:	4a1f      	ldr	r2, [pc, #124]	; (8018d54 <xTaskIncrementTick+0x160>)
 8018cd8:	441a      	add	r2, r3
 8018cda:	68bb      	ldr	r3, [r7, #8]
 8018cdc:	3304      	adds	r3, #4
 8018cde:	4619      	mov	r1, r3
 8018ce0:	4610      	mov	r0, r2
 8018ce2:	f7fe fa5c 	bl	801719e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ce6:	68bb      	ldr	r3, [r7, #8]
 8018ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cea:	4b1b      	ldr	r3, [pc, #108]	; (8018d58 <xTaskIncrementTick+0x164>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cf0:	429a      	cmp	r2, r3
 8018cf2:	d3b9      	bcc.n	8018c68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018cf8:	e7b6      	b.n	8018c68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018cfa:	4b17      	ldr	r3, [pc, #92]	; (8018d58 <xTaskIncrementTick+0x164>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d00:	4914      	ldr	r1, [pc, #80]	; (8018d54 <xTaskIncrementTick+0x160>)
 8018d02:	4613      	mov	r3, r2
 8018d04:	009b      	lsls	r3, r3, #2
 8018d06:	4413      	add	r3, r2
 8018d08:	009b      	lsls	r3, r3, #2
 8018d0a:	440b      	add	r3, r1
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	2b01      	cmp	r3, #1
 8018d10:	d901      	bls.n	8018d16 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8018d12:	2301      	movs	r3, #1
 8018d14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018d16:	4b11      	ldr	r3, [pc, #68]	; (8018d5c <xTaskIncrementTick+0x168>)
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d007      	beq.n	8018d2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8018d1e:	2301      	movs	r3, #1
 8018d20:	617b      	str	r3, [r7, #20]
 8018d22:	e004      	b.n	8018d2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018d24:	4b0e      	ldr	r3, [pc, #56]	; (8018d60 <xTaskIncrementTick+0x16c>)
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	3301      	adds	r3, #1
 8018d2a:	4a0d      	ldr	r2, [pc, #52]	; (8018d60 <xTaskIncrementTick+0x16c>)
 8018d2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018d2e:	697b      	ldr	r3, [r7, #20]
}
 8018d30:	4618      	mov	r0, r3
 8018d32:	3718      	adds	r7, #24
 8018d34:	46bd      	mov	sp, r7
 8018d36:	bd80      	pop	{r7, pc}
 8018d38:	2000098c 	.word	0x2000098c
 8018d3c:	20000968 	.word	0x20000968
 8018d40:	2000091c 	.word	0x2000091c
 8018d44:	20000920 	.word	0x20000920
 8018d48:	2000097c 	.word	0x2000097c
 8018d4c:	20000984 	.word	0x20000984
 8018d50:	2000096c 	.word	0x2000096c
 8018d54:	20000868 	.word	0x20000868
 8018d58:	20000864 	.word	0x20000864
 8018d5c:	20000978 	.word	0x20000978
 8018d60:	20000974 	.word	0x20000974

08018d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018d64:	b480      	push	{r7}
 8018d66:	b087      	sub	sp, #28
 8018d68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018d6a:	4b29      	ldr	r3, [pc, #164]	; (8018e10 <vTaskSwitchContext+0xac>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d003      	beq.n	8018d7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018d72:	4b28      	ldr	r3, [pc, #160]	; (8018e14 <vTaskSwitchContext+0xb0>)
 8018d74:	2201      	movs	r2, #1
 8018d76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018d78:	e044      	b.n	8018e04 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8018d7a:	4b26      	ldr	r3, [pc, #152]	; (8018e14 <vTaskSwitchContext+0xb0>)
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d80:	4b25      	ldr	r3, [pc, #148]	; (8018e18 <vTaskSwitchContext+0xb4>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	fab3 f383 	clz	r3, r3
 8018d8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018d8e:	7afb      	ldrb	r3, [r7, #11]
 8018d90:	f1c3 031f 	rsb	r3, r3, #31
 8018d94:	617b      	str	r3, [r7, #20]
 8018d96:	4921      	ldr	r1, [pc, #132]	; (8018e1c <vTaskSwitchContext+0xb8>)
 8018d98:	697a      	ldr	r2, [r7, #20]
 8018d9a:	4613      	mov	r3, r2
 8018d9c:	009b      	lsls	r3, r3, #2
 8018d9e:	4413      	add	r3, r2
 8018da0:	009b      	lsls	r3, r3, #2
 8018da2:	440b      	add	r3, r1
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d10a      	bne.n	8018dc0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8018daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dae:	f383 8811 	msr	BASEPRI, r3
 8018db2:	f3bf 8f6f 	isb	sy
 8018db6:	f3bf 8f4f 	dsb	sy
 8018dba:	607b      	str	r3, [r7, #4]
}
 8018dbc:	bf00      	nop
 8018dbe:	e7fe      	b.n	8018dbe <vTaskSwitchContext+0x5a>
 8018dc0:	697a      	ldr	r2, [r7, #20]
 8018dc2:	4613      	mov	r3, r2
 8018dc4:	009b      	lsls	r3, r3, #2
 8018dc6:	4413      	add	r3, r2
 8018dc8:	009b      	lsls	r3, r3, #2
 8018dca:	4a14      	ldr	r2, [pc, #80]	; (8018e1c <vTaskSwitchContext+0xb8>)
 8018dcc:	4413      	add	r3, r2
 8018dce:	613b      	str	r3, [r7, #16]
 8018dd0:	693b      	ldr	r3, [r7, #16]
 8018dd2:	685b      	ldr	r3, [r3, #4]
 8018dd4:	685a      	ldr	r2, [r3, #4]
 8018dd6:	693b      	ldr	r3, [r7, #16]
 8018dd8:	605a      	str	r2, [r3, #4]
 8018dda:	693b      	ldr	r3, [r7, #16]
 8018ddc:	685a      	ldr	r2, [r3, #4]
 8018dde:	693b      	ldr	r3, [r7, #16]
 8018de0:	3308      	adds	r3, #8
 8018de2:	429a      	cmp	r2, r3
 8018de4:	d104      	bne.n	8018df0 <vTaskSwitchContext+0x8c>
 8018de6:	693b      	ldr	r3, [r7, #16]
 8018de8:	685b      	ldr	r3, [r3, #4]
 8018dea:	685a      	ldr	r2, [r3, #4]
 8018dec:	693b      	ldr	r3, [r7, #16]
 8018dee:	605a      	str	r2, [r3, #4]
 8018df0:	693b      	ldr	r3, [r7, #16]
 8018df2:	685b      	ldr	r3, [r3, #4]
 8018df4:	68db      	ldr	r3, [r3, #12]
 8018df6:	4a0a      	ldr	r2, [pc, #40]	; (8018e20 <vTaskSwitchContext+0xbc>)
 8018df8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018dfa:	4b09      	ldr	r3, [pc, #36]	; (8018e20 <vTaskSwitchContext+0xbc>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	334c      	adds	r3, #76	; 0x4c
 8018e00:	4a08      	ldr	r2, [pc, #32]	; (8018e24 <vTaskSwitchContext+0xc0>)
 8018e02:	6013      	str	r3, [r2, #0]
}
 8018e04:	bf00      	nop
 8018e06:	371c      	adds	r7, #28
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0e:	4770      	bx	lr
 8018e10:	2000098c 	.word	0x2000098c
 8018e14:	20000978 	.word	0x20000978
 8018e18:	2000096c 	.word	0x2000096c
 8018e1c:	20000868 	.word	0x20000868
 8018e20:	20000864 	.word	0x20000864
 8018e24:	20000070 	.word	0x20000070

08018e28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b084      	sub	sp, #16
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
 8018e30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d10a      	bne.n	8018e4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e3c:	f383 8811 	msr	BASEPRI, r3
 8018e40:	f3bf 8f6f 	isb	sy
 8018e44:	f3bf 8f4f 	dsb	sy
 8018e48:	60fb      	str	r3, [r7, #12]
}
 8018e4a:	bf00      	nop
 8018e4c:	e7fe      	b.n	8018e4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018e4e:	4b07      	ldr	r3, [pc, #28]	; (8018e6c <vTaskPlaceOnEventList+0x44>)
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	3318      	adds	r3, #24
 8018e54:	4619      	mov	r1, r3
 8018e56:	6878      	ldr	r0, [r7, #4]
 8018e58:	f7fe f9c5 	bl	80171e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018e5c:	2101      	movs	r1, #1
 8018e5e:	6838      	ldr	r0, [r7, #0]
 8018e60:	f000 fbae 	bl	80195c0 <prvAddCurrentTaskToDelayedList>
}
 8018e64:	bf00      	nop
 8018e66:	3710      	adds	r7, #16
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	bd80      	pop	{r7, pc}
 8018e6c:	20000864 	.word	0x20000864

08018e70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b086      	sub	sp, #24
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	60f8      	str	r0, [r7, #12]
 8018e78:	60b9      	str	r1, [r7, #8]
 8018e7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d10a      	bne.n	8018e98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e86:	f383 8811 	msr	BASEPRI, r3
 8018e8a:	f3bf 8f6f 	isb	sy
 8018e8e:	f3bf 8f4f 	dsb	sy
 8018e92:	617b      	str	r3, [r7, #20]
}
 8018e94:	bf00      	nop
 8018e96:	e7fe      	b.n	8018e96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018e98:	4b0a      	ldr	r3, [pc, #40]	; (8018ec4 <vTaskPlaceOnEventListRestricted+0x54>)
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	3318      	adds	r3, #24
 8018e9e:	4619      	mov	r1, r3
 8018ea0:	68f8      	ldr	r0, [r7, #12]
 8018ea2:	f7fe f97c 	bl	801719e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d002      	beq.n	8018eb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018eac:	f04f 33ff 	mov.w	r3, #4294967295
 8018eb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018eb2:	6879      	ldr	r1, [r7, #4]
 8018eb4:	68b8      	ldr	r0, [r7, #8]
 8018eb6:	f000 fb83 	bl	80195c0 <prvAddCurrentTaskToDelayedList>
	}
 8018eba:	bf00      	nop
 8018ebc:	3718      	adds	r7, #24
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}
 8018ec2:	bf00      	nop
 8018ec4:	20000864 	.word	0x20000864

08018ec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b086      	sub	sp, #24
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	68db      	ldr	r3, [r3, #12]
 8018ed4:	68db      	ldr	r3, [r3, #12]
 8018ed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018ed8:	693b      	ldr	r3, [r7, #16]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d10a      	bne.n	8018ef4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ee2:	f383 8811 	msr	BASEPRI, r3
 8018ee6:	f3bf 8f6f 	isb	sy
 8018eea:	f3bf 8f4f 	dsb	sy
 8018eee:	60fb      	str	r3, [r7, #12]
}
 8018ef0:	bf00      	nop
 8018ef2:	e7fe      	b.n	8018ef2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018ef4:	693b      	ldr	r3, [r7, #16]
 8018ef6:	3318      	adds	r3, #24
 8018ef8:	4618      	mov	r0, r3
 8018efa:	f7fe f9ad 	bl	8017258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018efe:	4b1d      	ldr	r3, [pc, #116]	; (8018f74 <xTaskRemoveFromEventList+0xac>)
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d11c      	bne.n	8018f40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	3304      	adds	r3, #4
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f7fe f9a4 	bl	8017258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018f10:	693b      	ldr	r3, [r7, #16]
 8018f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f14:	2201      	movs	r2, #1
 8018f16:	409a      	lsls	r2, r3
 8018f18:	4b17      	ldr	r3, [pc, #92]	; (8018f78 <xTaskRemoveFromEventList+0xb0>)
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	4313      	orrs	r3, r2
 8018f1e:	4a16      	ldr	r2, [pc, #88]	; (8018f78 <xTaskRemoveFromEventList+0xb0>)
 8018f20:	6013      	str	r3, [r2, #0]
 8018f22:	693b      	ldr	r3, [r7, #16]
 8018f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f26:	4613      	mov	r3, r2
 8018f28:	009b      	lsls	r3, r3, #2
 8018f2a:	4413      	add	r3, r2
 8018f2c:	009b      	lsls	r3, r3, #2
 8018f2e:	4a13      	ldr	r2, [pc, #76]	; (8018f7c <xTaskRemoveFromEventList+0xb4>)
 8018f30:	441a      	add	r2, r3
 8018f32:	693b      	ldr	r3, [r7, #16]
 8018f34:	3304      	adds	r3, #4
 8018f36:	4619      	mov	r1, r3
 8018f38:	4610      	mov	r0, r2
 8018f3a:	f7fe f930 	bl	801719e <vListInsertEnd>
 8018f3e:	e005      	b.n	8018f4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018f40:	693b      	ldr	r3, [r7, #16]
 8018f42:	3318      	adds	r3, #24
 8018f44:	4619      	mov	r1, r3
 8018f46:	480e      	ldr	r0, [pc, #56]	; (8018f80 <xTaskRemoveFromEventList+0xb8>)
 8018f48:	f7fe f929 	bl	801719e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018f4c:	693b      	ldr	r3, [r7, #16]
 8018f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f50:	4b0c      	ldr	r3, [pc, #48]	; (8018f84 <xTaskRemoveFromEventList+0xbc>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f56:	429a      	cmp	r2, r3
 8018f58:	d905      	bls.n	8018f66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018f5e:	4b0a      	ldr	r3, [pc, #40]	; (8018f88 <xTaskRemoveFromEventList+0xc0>)
 8018f60:	2201      	movs	r2, #1
 8018f62:	601a      	str	r2, [r3, #0]
 8018f64:	e001      	b.n	8018f6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8018f66:	2300      	movs	r3, #0
 8018f68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018f6a:	697b      	ldr	r3, [r7, #20]
}
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	3718      	adds	r7, #24
 8018f70:	46bd      	mov	sp, r7
 8018f72:	bd80      	pop	{r7, pc}
 8018f74:	2000098c 	.word	0x2000098c
 8018f78:	2000096c 	.word	0x2000096c
 8018f7c:	20000868 	.word	0x20000868
 8018f80:	20000924 	.word	0x20000924
 8018f84:	20000864 	.word	0x20000864
 8018f88:	20000978 	.word	0x20000978

08018f8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018f8c:	b480      	push	{r7}
 8018f8e:	b083      	sub	sp, #12
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018f94:	4b06      	ldr	r3, [pc, #24]	; (8018fb0 <vTaskInternalSetTimeOutState+0x24>)
 8018f96:	681a      	ldr	r2, [r3, #0]
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018f9c:	4b05      	ldr	r3, [pc, #20]	; (8018fb4 <vTaskInternalSetTimeOutState+0x28>)
 8018f9e:	681a      	ldr	r2, [r3, #0]
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	605a      	str	r2, [r3, #4]
}
 8018fa4:	bf00      	nop
 8018fa6:	370c      	adds	r7, #12
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fae:	4770      	bx	lr
 8018fb0:	2000097c 	.word	0x2000097c
 8018fb4:	20000968 	.word	0x20000968

08018fb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b088      	sub	sp, #32
 8018fbc:	af00      	add	r7, sp, #0
 8018fbe:	6078      	str	r0, [r7, #4]
 8018fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d10a      	bne.n	8018fde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fcc:	f383 8811 	msr	BASEPRI, r3
 8018fd0:	f3bf 8f6f 	isb	sy
 8018fd4:	f3bf 8f4f 	dsb	sy
 8018fd8:	613b      	str	r3, [r7, #16]
}
 8018fda:	bf00      	nop
 8018fdc:	e7fe      	b.n	8018fdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d10a      	bne.n	8018ffa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fe8:	f383 8811 	msr	BASEPRI, r3
 8018fec:	f3bf 8f6f 	isb	sy
 8018ff0:	f3bf 8f4f 	dsb	sy
 8018ff4:	60fb      	str	r3, [r7, #12]
}
 8018ff6:	bf00      	nop
 8018ff8:	e7fe      	b.n	8018ff8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018ffa:	f001 f843 	bl	801a084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018ffe:	4b1d      	ldr	r3, [pc, #116]	; (8019074 <xTaskCheckForTimeOut+0xbc>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	685b      	ldr	r3, [r3, #4]
 8019008:	69ba      	ldr	r2, [r7, #24]
 801900a:	1ad3      	subs	r3, r2, r3
 801900c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019016:	d102      	bne.n	801901e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019018:	2300      	movs	r3, #0
 801901a:	61fb      	str	r3, [r7, #28]
 801901c:	e023      	b.n	8019066 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681a      	ldr	r2, [r3, #0]
 8019022:	4b15      	ldr	r3, [pc, #84]	; (8019078 <xTaskCheckForTimeOut+0xc0>)
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	429a      	cmp	r2, r3
 8019028:	d007      	beq.n	801903a <xTaskCheckForTimeOut+0x82>
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	685b      	ldr	r3, [r3, #4]
 801902e:	69ba      	ldr	r2, [r7, #24]
 8019030:	429a      	cmp	r2, r3
 8019032:	d302      	bcc.n	801903a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019034:	2301      	movs	r3, #1
 8019036:	61fb      	str	r3, [r7, #28]
 8019038:	e015      	b.n	8019066 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	697a      	ldr	r2, [r7, #20]
 8019040:	429a      	cmp	r2, r3
 8019042:	d20b      	bcs.n	801905c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019044:	683b      	ldr	r3, [r7, #0]
 8019046:	681a      	ldr	r2, [r3, #0]
 8019048:	697b      	ldr	r3, [r7, #20]
 801904a:	1ad2      	subs	r2, r2, r3
 801904c:	683b      	ldr	r3, [r7, #0]
 801904e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	f7ff ff9b 	bl	8018f8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019056:	2300      	movs	r3, #0
 8019058:	61fb      	str	r3, [r7, #28]
 801905a:	e004      	b.n	8019066 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	2200      	movs	r2, #0
 8019060:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019062:	2301      	movs	r3, #1
 8019064:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019066:	f001 f83d 	bl	801a0e4 <vPortExitCritical>

	return xReturn;
 801906a:	69fb      	ldr	r3, [r7, #28]
}
 801906c:	4618      	mov	r0, r3
 801906e:	3720      	adds	r7, #32
 8019070:	46bd      	mov	sp, r7
 8019072:	bd80      	pop	{r7, pc}
 8019074:	20000968 	.word	0x20000968
 8019078:	2000097c 	.word	0x2000097c

0801907c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801907c:	b480      	push	{r7}
 801907e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019080:	4b03      	ldr	r3, [pc, #12]	; (8019090 <vTaskMissedYield+0x14>)
 8019082:	2201      	movs	r2, #1
 8019084:	601a      	str	r2, [r3, #0]
}
 8019086:	bf00      	nop
 8019088:	46bd      	mov	sp, r7
 801908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908e:	4770      	bx	lr
 8019090:	20000978 	.word	0x20000978

08019094 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b082      	sub	sp, #8
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801909c:	f000 f852 	bl	8019144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80190a0:	4b06      	ldr	r3, [pc, #24]	; (80190bc <prvIdleTask+0x28>)
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	2b01      	cmp	r3, #1
 80190a6:	d9f9      	bls.n	801909c <prvIdleTask+0x8>
			{
				taskYIELD();
 80190a8:	4b05      	ldr	r3, [pc, #20]	; (80190c0 <prvIdleTask+0x2c>)
 80190aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190ae:	601a      	str	r2, [r3, #0]
 80190b0:	f3bf 8f4f 	dsb	sy
 80190b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80190b8:	e7f0      	b.n	801909c <prvIdleTask+0x8>
 80190ba:	bf00      	nop
 80190bc:	20000868 	.word	0x20000868
 80190c0:	e000ed04 	.word	0xe000ed04

080190c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	b082      	sub	sp, #8
 80190c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80190ca:	2300      	movs	r3, #0
 80190cc:	607b      	str	r3, [r7, #4]
 80190ce:	e00c      	b.n	80190ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80190d0:	687a      	ldr	r2, [r7, #4]
 80190d2:	4613      	mov	r3, r2
 80190d4:	009b      	lsls	r3, r3, #2
 80190d6:	4413      	add	r3, r2
 80190d8:	009b      	lsls	r3, r3, #2
 80190da:	4a12      	ldr	r2, [pc, #72]	; (8019124 <prvInitialiseTaskLists+0x60>)
 80190dc:	4413      	add	r3, r2
 80190de:	4618      	mov	r0, r3
 80190e0:	f7fe f830 	bl	8017144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	3301      	adds	r3, #1
 80190e8:	607b      	str	r3, [r7, #4]
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	2b06      	cmp	r3, #6
 80190ee:	d9ef      	bls.n	80190d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80190f0:	480d      	ldr	r0, [pc, #52]	; (8019128 <prvInitialiseTaskLists+0x64>)
 80190f2:	f7fe f827 	bl	8017144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80190f6:	480d      	ldr	r0, [pc, #52]	; (801912c <prvInitialiseTaskLists+0x68>)
 80190f8:	f7fe f824 	bl	8017144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80190fc:	480c      	ldr	r0, [pc, #48]	; (8019130 <prvInitialiseTaskLists+0x6c>)
 80190fe:	f7fe f821 	bl	8017144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019102:	480c      	ldr	r0, [pc, #48]	; (8019134 <prvInitialiseTaskLists+0x70>)
 8019104:	f7fe f81e 	bl	8017144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019108:	480b      	ldr	r0, [pc, #44]	; (8019138 <prvInitialiseTaskLists+0x74>)
 801910a:	f7fe f81b 	bl	8017144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801910e:	4b0b      	ldr	r3, [pc, #44]	; (801913c <prvInitialiseTaskLists+0x78>)
 8019110:	4a05      	ldr	r2, [pc, #20]	; (8019128 <prvInitialiseTaskLists+0x64>)
 8019112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019114:	4b0a      	ldr	r3, [pc, #40]	; (8019140 <prvInitialiseTaskLists+0x7c>)
 8019116:	4a05      	ldr	r2, [pc, #20]	; (801912c <prvInitialiseTaskLists+0x68>)
 8019118:	601a      	str	r2, [r3, #0]
}
 801911a:	bf00      	nop
 801911c:	3708      	adds	r7, #8
 801911e:	46bd      	mov	sp, r7
 8019120:	bd80      	pop	{r7, pc}
 8019122:	bf00      	nop
 8019124:	20000868 	.word	0x20000868
 8019128:	200008f4 	.word	0x200008f4
 801912c:	20000908 	.word	0x20000908
 8019130:	20000924 	.word	0x20000924
 8019134:	20000938 	.word	0x20000938
 8019138:	20000950 	.word	0x20000950
 801913c:	2000091c 	.word	0x2000091c
 8019140:	20000920 	.word	0x20000920

08019144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b082      	sub	sp, #8
 8019148:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801914a:	e019      	b.n	8019180 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801914c:	f000 ff9a 	bl	801a084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019150:	4b10      	ldr	r3, [pc, #64]	; (8019194 <prvCheckTasksWaitingTermination+0x50>)
 8019152:	68db      	ldr	r3, [r3, #12]
 8019154:	68db      	ldr	r3, [r3, #12]
 8019156:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	3304      	adds	r3, #4
 801915c:	4618      	mov	r0, r3
 801915e:	f7fe f87b 	bl	8017258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019162:	4b0d      	ldr	r3, [pc, #52]	; (8019198 <prvCheckTasksWaitingTermination+0x54>)
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	3b01      	subs	r3, #1
 8019168:	4a0b      	ldr	r2, [pc, #44]	; (8019198 <prvCheckTasksWaitingTermination+0x54>)
 801916a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801916c:	4b0b      	ldr	r3, [pc, #44]	; (801919c <prvCheckTasksWaitingTermination+0x58>)
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	3b01      	subs	r3, #1
 8019172:	4a0a      	ldr	r2, [pc, #40]	; (801919c <prvCheckTasksWaitingTermination+0x58>)
 8019174:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8019176:	f000 ffb5 	bl	801a0e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801917a:	6878      	ldr	r0, [r7, #4]
 801917c:	f000 f810 	bl	80191a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019180:	4b06      	ldr	r3, [pc, #24]	; (801919c <prvCheckTasksWaitingTermination+0x58>)
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d1e1      	bne.n	801914c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019188:	bf00      	nop
 801918a:	bf00      	nop
 801918c:	3708      	adds	r7, #8
 801918e:	46bd      	mov	sp, r7
 8019190:	bd80      	pop	{r7, pc}
 8019192:	bf00      	nop
 8019194:	20000938 	.word	0x20000938
 8019198:	20000964 	.word	0x20000964
 801919c:	2000094c 	.word	0x2000094c

080191a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b084      	sub	sp, #16
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	334c      	adds	r3, #76	; 0x4c
 80191ac:	4618      	mov	r0, r3
 80191ae:	f010 f945 	bl	802943c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d108      	bne.n	80191ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191c0:	4618      	mov	r0, r3
 80191c2:	f001 f94d 	bl	801a460 <vPortFree>
				vPortFree( pxTCB );
 80191c6:	6878      	ldr	r0, [r7, #4]
 80191c8:	f001 f94a 	bl	801a460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80191cc:	e018      	b.n	8019200 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80191d4:	2b01      	cmp	r3, #1
 80191d6:	d103      	bne.n	80191e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80191d8:	6878      	ldr	r0, [r7, #4]
 80191da:	f001 f941 	bl	801a460 <vPortFree>
	}
 80191de:	e00f      	b.n	8019200 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80191e6:	2b02      	cmp	r3, #2
 80191e8:	d00a      	beq.n	8019200 <prvDeleteTCB+0x60>
	__asm volatile
 80191ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191ee:	f383 8811 	msr	BASEPRI, r3
 80191f2:	f3bf 8f6f 	isb	sy
 80191f6:	f3bf 8f4f 	dsb	sy
 80191fa:	60fb      	str	r3, [r7, #12]
}
 80191fc:	bf00      	nop
 80191fe:	e7fe      	b.n	80191fe <prvDeleteTCB+0x5e>
	}
 8019200:	bf00      	nop
 8019202:	3710      	adds	r7, #16
 8019204:	46bd      	mov	sp, r7
 8019206:	bd80      	pop	{r7, pc}

08019208 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019208:	b480      	push	{r7}
 801920a:	b083      	sub	sp, #12
 801920c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801920e:	4b0c      	ldr	r3, [pc, #48]	; (8019240 <prvResetNextTaskUnblockTime+0x38>)
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d104      	bne.n	8019222 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019218:	4b0a      	ldr	r3, [pc, #40]	; (8019244 <prvResetNextTaskUnblockTime+0x3c>)
 801921a:	f04f 32ff 	mov.w	r2, #4294967295
 801921e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019220:	e008      	b.n	8019234 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019222:	4b07      	ldr	r3, [pc, #28]	; (8019240 <prvResetNextTaskUnblockTime+0x38>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	68db      	ldr	r3, [r3, #12]
 8019228:	68db      	ldr	r3, [r3, #12]
 801922a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	685b      	ldr	r3, [r3, #4]
 8019230:	4a04      	ldr	r2, [pc, #16]	; (8019244 <prvResetNextTaskUnblockTime+0x3c>)
 8019232:	6013      	str	r3, [r2, #0]
}
 8019234:	bf00      	nop
 8019236:	370c      	adds	r7, #12
 8019238:	46bd      	mov	sp, r7
 801923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923e:	4770      	bx	lr
 8019240:	2000091c 	.word	0x2000091c
 8019244:	20000984 	.word	0x20000984

08019248 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019248:	b480      	push	{r7}
 801924a:	b083      	sub	sp, #12
 801924c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801924e:	4b0b      	ldr	r3, [pc, #44]	; (801927c <xTaskGetSchedulerState+0x34>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d102      	bne.n	801925c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019256:	2301      	movs	r3, #1
 8019258:	607b      	str	r3, [r7, #4]
 801925a:	e008      	b.n	801926e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801925c:	4b08      	ldr	r3, [pc, #32]	; (8019280 <xTaskGetSchedulerState+0x38>)
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	2b00      	cmp	r3, #0
 8019262:	d102      	bne.n	801926a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019264:	2302      	movs	r3, #2
 8019266:	607b      	str	r3, [r7, #4]
 8019268:	e001      	b.n	801926e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801926a:	2300      	movs	r3, #0
 801926c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801926e:	687b      	ldr	r3, [r7, #4]
	}
 8019270:	4618      	mov	r0, r3
 8019272:	370c      	adds	r7, #12
 8019274:	46bd      	mov	sp, r7
 8019276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927a:	4770      	bx	lr
 801927c:	20000970 	.word	0x20000970
 8019280:	2000098c 	.word	0x2000098c

08019284 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8019284:	b580      	push	{r7, lr}
 8019286:	b084      	sub	sp, #16
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019290:	2300      	movs	r3, #0
 8019292:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d05e      	beq.n	8019358 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801929e:	4b31      	ldr	r3, [pc, #196]	; (8019364 <xTaskPriorityInherit+0xe0>)
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192a4:	429a      	cmp	r2, r3
 80192a6:	d24e      	bcs.n	8019346 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80192a8:	68bb      	ldr	r3, [r7, #8]
 80192aa:	699b      	ldr	r3, [r3, #24]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	db06      	blt.n	80192be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192b0:	4b2c      	ldr	r3, [pc, #176]	; (8019364 <xTaskPriorityInherit+0xe0>)
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192b6:	f1c3 0207 	rsb	r2, r3, #7
 80192ba:	68bb      	ldr	r3, [r7, #8]
 80192bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80192be:	68bb      	ldr	r3, [r7, #8]
 80192c0:	6959      	ldr	r1, [r3, #20]
 80192c2:	68bb      	ldr	r3, [r7, #8]
 80192c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192c6:	4613      	mov	r3, r2
 80192c8:	009b      	lsls	r3, r3, #2
 80192ca:	4413      	add	r3, r2
 80192cc:	009b      	lsls	r3, r3, #2
 80192ce:	4a26      	ldr	r2, [pc, #152]	; (8019368 <xTaskPriorityInherit+0xe4>)
 80192d0:	4413      	add	r3, r2
 80192d2:	4299      	cmp	r1, r3
 80192d4:	d12f      	bne.n	8019336 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80192d6:	68bb      	ldr	r3, [r7, #8]
 80192d8:	3304      	adds	r3, #4
 80192da:	4618      	mov	r0, r3
 80192dc:	f7fd ffbc 	bl	8017258 <uxListRemove>
 80192e0:	4603      	mov	r3, r0
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d10a      	bne.n	80192fc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80192e6:	68bb      	ldr	r3, [r7, #8]
 80192e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192ea:	2201      	movs	r2, #1
 80192ec:	fa02 f303 	lsl.w	r3, r2, r3
 80192f0:	43da      	mvns	r2, r3
 80192f2:	4b1e      	ldr	r3, [pc, #120]	; (801936c <xTaskPriorityInherit+0xe8>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	4013      	ands	r3, r2
 80192f8:	4a1c      	ldr	r2, [pc, #112]	; (801936c <xTaskPriorityInherit+0xe8>)
 80192fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80192fc:	4b19      	ldr	r3, [pc, #100]	; (8019364 <xTaskPriorityInherit+0xe0>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019306:	68bb      	ldr	r3, [r7, #8]
 8019308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801930a:	2201      	movs	r2, #1
 801930c:	409a      	lsls	r2, r3
 801930e:	4b17      	ldr	r3, [pc, #92]	; (801936c <xTaskPriorityInherit+0xe8>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	4313      	orrs	r3, r2
 8019314:	4a15      	ldr	r2, [pc, #84]	; (801936c <xTaskPriorityInherit+0xe8>)
 8019316:	6013      	str	r3, [r2, #0]
 8019318:	68bb      	ldr	r3, [r7, #8]
 801931a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801931c:	4613      	mov	r3, r2
 801931e:	009b      	lsls	r3, r3, #2
 8019320:	4413      	add	r3, r2
 8019322:	009b      	lsls	r3, r3, #2
 8019324:	4a10      	ldr	r2, [pc, #64]	; (8019368 <xTaskPriorityInherit+0xe4>)
 8019326:	441a      	add	r2, r3
 8019328:	68bb      	ldr	r3, [r7, #8]
 801932a:	3304      	adds	r3, #4
 801932c:	4619      	mov	r1, r3
 801932e:	4610      	mov	r0, r2
 8019330:	f7fd ff35 	bl	801719e <vListInsertEnd>
 8019334:	e004      	b.n	8019340 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019336:	4b0b      	ldr	r3, [pc, #44]	; (8019364 <xTaskPriorityInherit+0xe0>)
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801933c:	68bb      	ldr	r3, [r7, #8]
 801933e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8019340:	2301      	movs	r3, #1
 8019342:	60fb      	str	r3, [r7, #12]
 8019344:	e008      	b.n	8019358 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019346:	68bb      	ldr	r3, [r7, #8]
 8019348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801934a:	4b06      	ldr	r3, [pc, #24]	; (8019364 <xTaskPriorityInherit+0xe0>)
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019350:	429a      	cmp	r2, r3
 8019352:	d201      	bcs.n	8019358 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8019354:	2301      	movs	r3, #1
 8019356:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019358:	68fb      	ldr	r3, [r7, #12]
	}
 801935a:	4618      	mov	r0, r3
 801935c:	3710      	adds	r7, #16
 801935e:	46bd      	mov	sp, r7
 8019360:	bd80      	pop	{r7, pc}
 8019362:	bf00      	nop
 8019364:	20000864 	.word	0x20000864
 8019368:	20000868 	.word	0x20000868
 801936c:	2000096c 	.word	0x2000096c

08019370 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019370:	b580      	push	{r7, lr}
 8019372:	b086      	sub	sp, #24
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801937c:	2300      	movs	r3, #0
 801937e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d06e      	beq.n	8019464 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019386:	4b3a      	ldr	r3, [pc, #232]	; (8019470 <xTaskPriorityDisinherit+0x100>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	693a      	ldr	r2, [r7, #16]
 801938c:	429a      	cmp	r2, r3
 801938e:	d00a      	beq.n	80193a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019394:	f383 8811 	msr	BASEPRI, r3
 8019398:	f3bf 8f6f 	isb	sy
 801939c:	f3bf 8f4f 	dsb	sy
 80193a0:	60fb      	str	r3, [r7, #12]
}
 80193a2:	bf00      	nop
 80193a4:	e7fe      	b.n	80193a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80193a6:	693b      	ldr	r3, [r7, #16]
 80193a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d10a      	bne.n	80193c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80193ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193b2:	f383 8811 	msr	BASEPRI, r3
 80193b6:	f3bf 8f6f 	isb	sy
 80193ba:	f3bf 8f4f 	dsb	sy
 80193be:	60bb      	str	r3, [r7, #8]
}
 80193c0:	bf00      	nop
 80193c2:	e7fe      	b.n	80193c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80193c4:	693b      	ldr	r3, [r7, #16]
 80193c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80193c8:	1e5a      	subs	r2, r3, #1
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80193ce:	693b      	ldr	r3, [r7, #16]
 80193d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193d2:	693b      	ldr	r3, [r7, #16]
 80193d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193d6:	429a      	cmp	r2, r3
 80193d8:	d044      	beq.n	8019464 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80193da:	693b      	ldr	r3, [r7, #16]
 80193dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d140      	bne.n	8019464 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80193e2:	693b      	ldr	r3, [r7, #16]
 80193e4:	3304      	adds	r3, #4
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7fd ff36 	bl	8017258 <uxListRemove>
 80193ec:	4603      	mov	r3, r0
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d115      	bne.n	801941e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80193f2:	693b      	ldr	r3, [r7, #16]
 80193f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193f6:	491f      	ldr	r1, [pc, #124]	; (8019474 <xTaskPriorityDisinherit+0x104>)
 80193f8:	4613      	mov	r3, r2
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	4413      	add	r3, r2
 80193fe:	009b      	lsls	r3, r3, #2
 8019400:	440b      	add	r3, r1
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d10a      	bne.n	801941e <xTaskPriorityDisinherit+0xae>
 8019408:	693b      	ldr	r3, [r7, #16]
 801940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801940c:	2201      	movs	r2, #1
 801940e:	fa02 f303 	lsl.w	r3, r2, r3
 8019412:	43da      	mvns	r2, r3
 8019414:	4b18      	ldr	r3, [pc, #96]	; (8019478 <xTaskPriorityDisinherit+0x108>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	4013      	ands	r3, r2
 801941a:	4a17      	ldr	r2, [pc, #92]	; (8019478 <xTaskPriorityDisinherit+0x108>)
 801941c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801941e:	693b      	ldr	r3, [r7, #16]
 8019420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019422:	693b      	ldr	r3, [r7, #16]
 8019424:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019426:	693b      	ldr	r3, [r7, #16]
 8019428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801942a:	f1c3 0207 	rsb	r2, r3, #7
 801942e:	693b      	ldr	r3, [r7, #16]
 8019430:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019432:	693b      	ldr	r3, [r7, #16]
 8019434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019436:	2201      	movs	r2, #1
 8019438:	409a      	lsls	r2, r3
 801943a:	4b0f      	ldr	r3, [pc, #60]	; (8019478 <xTaskPriorityDisinherit+0x108>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	4313      	orrs	r3, r2
 8019440:	4a0d      	ldr	r2, [pc, #52]	; (8019478 <xTaskPriorityDisinherit+0x108>)
 8019442:	6013      	str	r3, [r2, #0]
 8019444:	693b      	ldr	r3, [r7, #16]
 8019446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019448:	4613      	mov	r3, r2
 801944a:	009b      	lsls	r3, r3, #2
 801944c:	4413      	add	r3, r2
 801944e:	009b      	lsls	r3, r3, #2
 8019450:	4a08      	ldr	r2, [pc, #32]	; (8019474 <xTaskPriorityDisinherit+0x104>)
 8019452:	441a      	add	r2, r3
 8019454:	693b      	ldr	r3, [r7, #16]
 8019456:	3304      	adds	r3, #4
 8019458:	4619      	mov	r1, r3
 801945a:	4610      	mov	r0, r2
 801945c:	f7fd fe9f 	bl	801719e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019460:	2301      	movs	r3, #1
 8019462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019464:	697b      	ldr	r3, [r7, #20]
	}
 8019466:	4618      	mov	r0, r3
 8019468:	3718      	adds	r7, #24
 801946a:	46bd      	mov	sp, r7
 801946c:	bd80      	pop	{r7, pc}
 801946e:	bf00      	nop
 8019470:	20000864 	.word	0x20000864
 8019474:	20000868 	.word	0x20000868
 8019478:	2000096c 	.word	0x2000096c

0801947c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801947c:	b580      	push	{r7, lr}
 801947e:	b088      	sub	sp, #32
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
 8019484:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801948a:	2301      	movs	r3, #1
 801948c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	2b00      	cmp	r3, #0
 8019492:	d077      	beq.n	8019584 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8019494:	69bb      	ldr	r3, [r7, #24]
 8019496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019498:	2b00      	cmp	r3, #0
 801949a:	d10a      	bne.n	80194b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194a0:	f383 8811 	msr	BASEPRI, r3
 80194a4:	f3bf 8f6f 	isb	sy
 80194a8:	f3bf 8f4f 	dsb	sy
 80194ac:	60fb      	str	r3, [r7, #12]
}
 80194ae:	bf00      	nop
 80194b0:	e7fe      	b.n	80194b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80194b2:	69bb      	ldr	r3, [r7, #24]
 80194b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194b6:	683a      	ldr	r2, [r7, #0]
 80194b8:	429a      	cmp	r2, r3
 80194ba:	d902      	bls.n	80194c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80194bc:	683b      	ldr	r3, [r7, #0]
 80194be:	61fb      	str	r3, [r7, #28]
 80194c0:	e002      	b.n	80194c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80194c2:	69bb      	ldr	r3, [r7, #24]
 80194c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80194c8:	69bb      	ldr	r3, [r7, #24]
 80194ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194cc:	69fa      	ldr	r2, [r7, #28]
 80194ce:	429a      	cmp	r2, r3
 80194d0:	d058      	beq.n	8019584 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80194d2:	69bb      	ldr	r3, [r7, #24]
 80194d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80194d6:	697a      	ldr	r2, [r7, #20]
 80194d8:	429a      	cmp	r2, r3
 80194da:	d153      	bne.n	8019584 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80194dc:	4b2b      	ldr	r3, [pc, #172]	; (801958c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	69ba      	ldr	r2, [r7, #24]
 80194e2:	429a      	cmp	r2, r3
 80194e4:	d10a      	bne.n	80194fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80194e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194ea:	f383 8811 	msr	BASEPRI, r3
 80194ee:	f3bf 8f6f 	isb	sy
 80194f2:	f3bf 8f4f 	dsb	sy
 80194f6:	60bb      	str	r3, [r7, #8]
}
 80194f8:	bf00      	nop
 80194fa:	e7fe      	b.n	80194fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80194fc:	69bb      	ldr	r3, [r7, #24]
 80194fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019500:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019502:	69bb      	ldr	r3, [r7, #24]
 8019504:	69fa      	ldr	r2, [r7, #28]
 8019506:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019508:	69bb      	ldr	r3, [r7, #24]
 801950a:	699b      	ldr	r3, [r3, #24]
 801950c:	2b00      	cmp	r3, #0
 801950e:	db04      	blt.n	801951a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019510:	69fb      	ldr	r3, [r7, #28]
 8019512:	f1c3 0207 	rsb	r2, r3, #7
 8019516:	69bb      	ldr	r3, [r7, #24]
 8019518:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801951a:	69bb      	ldr	r3, [r7, #24]
 801951c:	6959      	ldr	r1, [r3, #20]
 801951e:	693a      	ldr	r2, [r7, #16]
 8019520:	4613      	mov	r3, r2
 8019522:	009b      	lsls	r3, r3, #2
 8019524:	4413      	add	r3, r2
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	4a19      	ldr	r2, [pc, #100]	; (8019590 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801952a:	4413      	add	r3, r2
 801952c:	4299      	cmp	r1, r3
 801952e:	d129      	bne.n	8019584 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019530:	69bb      	ldr	r3, [r7, #24]
 8019532:	3304      	adds	r3, #4
 8019534:	4618      	mov	r0, r3
 8019536:	f7fd fe8f 	bl	8017258 <uxListRemove>
 801953a:	4603      	mov	r3, r0
 801953c:	2b00      	cmp	r3, #0
 801953e:	d10a      	bne.n	8019556 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8019540:	69bb      	ldr	r3, [r7, #24]
 8019542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019544:	2201      	movs	r2, #1
 8019546:	fa02 f303 	lsl.w	r3, r2, r3
 801954a:	43da      	mvns	r2, r3
 801954c:	4b11      	ldr	r3, [pc, #68]	; (8019594 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	4013      	ands	r3, r2
 8019552:	4a10      	ldr	r2, [pc, #64]	; (8019594 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8019554:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8019556:	69bb      	ldr	r3, [r7, #24]
 8019558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801955a:	2201      	movs	r2, #1
 801955c:	409a      	lsls	r2, r3
 801955e:	4b0d      	ldr	r3, [pc, #52]	; (8019594 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	4313      	orrs	r3, r2
 8019564:	4a0b      	ldr	r2, [pc, #44]	; (8019594 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8019566:	6013      	str	r3, [r2, #0]
 8019568:	69bb      	ldr	r3, [r7, #24]
 801956a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801956c:	4613      	mov	r3, r2
 801956e:	009b      	lsls	r3, r3, #2
 8019570:	4413      	add	r3, r2
 8019572:	009b      	lsls	r3, r3, #2
 8019574:	4a06      	ldr	r2, [pc, #24]	; (8019590 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8019576:	441a      	add	r2, r3
 8019578:	69bb      	ldr	r3, [r7, #24]
 801957a:	3304      	adds	r3, #4
 801957c:	4619      	mov	r1, r3
 801957e:	4610      	mov	r0, r2
 8019580:	f7fd fe0d 	bl	801719e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019584:	bf00      	nop
 8019586:	3720      	adds	r7, #32
 8019588:	46bd      	mov	sp, r7
 801958a:	bd80      	pop	{r7, pc}
 801958c:	20000864 	.word	0x20000864
 8019590:	20000868 	.word	0x20000868
 8019594:	2000096c 	.word	0x2000096c

08019598 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8019598:	b480      	push	{r7}
 801959a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801959c:	4b07      	ldr	r3, [pc, #28]	; (80195bc <pvTaskIncrementMutexHeldCount+0x24>)
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d004      	beq.n	80195ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80195a4:	4b05      	ldr	r3, [pc, #20]	; (80195bc <pvTaskIncrementMutexHeldCount+0x24>)
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80195aa:	3201      	adds	r2, #1
 80195ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80195ae:	4b03      	ldr	r3, [pc, #12]	; (80195bc <pvTaskIncrementMutexHeldCount+0x24>)
 80195b0:	681b      	ldr	r3, [r3, #0]
	}
 80195b2:	4618      	mov	r0, r3
 80195b4:	46bd      	mov	sp, r7
 80195b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ba:	4770      	bx	lr
 80195bc:	20000864 	.word	0x20000864

080195c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b084      	sub	sp, #16
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
 80195c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80195ca:	4b29      	ldr	r3, [pc, #164]	; (8019670 <prvAddCurrentTaskToDelayedList+0xb0>)
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80195d0:	4b28      	ldr	r3, [pc, #160]	; (8019674 <prvAddCurrentTaskToDelayedList+0xb4>)
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	3304      	adds	r3, #4
 80195d6:	4618      	mov	r0, r3
 80195d8:	f7fd fe3e 	bl	8017258 <uxListRemove>
 80195dc:	4603      	mov	r3, r0
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d10b      	bne.n	80195fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80195e2:	4b24      	ldr	r3, [pc, #144]	; (8019674 <prvAddCurrentTaskToDelayedList+0xb4>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195e8:	2201      	movs	r2, #1
 80195ea:	fa02 f303 	lsl.w	r3, r2, r3
 80195ee:	43da      	mvns	r2, r3
 80195f0:	4b21      	ldr	r3, [pc, #132]	; (8019678 <prvAddCurrentTaskToDelayedList+0xb8>)
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	4013      	ands	r3, r2
 80195f6:	4a20      	ldr	r2, [pc, #128]	; (8019678 <prvAddCurrentTaskToDelayedList+0xb8>)
 80195f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019600:	d10a      	bne.n	8019618 <prvAddCurrentTaskToDelayedList+0x58>
 8019602:	683b      	ldr	r3, [r7, #0]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d007      	beq.n	8019618 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019608:	4b1a      	ldr	r3, [pc, #104]	; (8019674 <prvAddCurrentTaskToDelayedList+0xb4>)
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	3304      	adds	r3, #4
 801960e:	4619      	mov	r1, r3
 8019610:	481a      	ldr	r0, [pc, #104]	; (801967c <prvAddCurrentTaskToDelayedList+0xbc>)
 8019612:	f7fd fdc4 	bl	801719e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019616:	e026      	b.n	8019666 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019618:	68fa      	ldr	r2, [r7, #12]
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	4413      	add	r3, r2
 801961e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019620:	4b14      	ldr	r3, [pc, #80]	; (8019674 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	68ba      	ldr	r2, [r7, #8]
 8019626:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019628:	68ba      	ldr	r2, [r7, #8]
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	429a      	cmp	r2, r3
 801962e:	d209      	bcs.n	8019644 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019630:	4b13      	ldr	r3, [pc, #76]	; (8019680 <prvAddCurrentTaskToDelayedList+0xc0>)
 8019632:	681a      	ldr	r2, [r3, #0]
 8019634:	4b0f      	ldr	r3, [pc, #60]	; (8019674 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	3304      	adds	r3, #4
 801963a:	4619      	mov	r1, r3
 801963c:	4610      	mov	r0, r2
 801963e:	f7fd fdd2 	bl	80171e6 <vListInsert>
}
 8019642:	e010      	b.n	8019666 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019644:	4b0f      	ldr	r3, [pc, #60]	; (8019684 <prvAddCurrentTaskToDelayedList+0xc4>)
 8019646:	681a      	ldr	r2, [r3, #0]
 8019648:	4b0a      	ldr	r3, [pc, #40]	; (8019674 <prvAddCurrentTaskToDelayedList+0xb4>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	3304      	adds	r3, #4
 801964e:	4619      	mov	r1, r3
 8019650:	4610      	mov	r0, r2
 8019652:	f7fd fdc8 	bl	80171e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019656:	4b0c      	ldr	r3, [pc, #48]	; (8019688 <prvAddCurrentTaskToDelayedList+0xc8>)
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	68ba      	ldr	r2, [r7, #8]
 801965c:	429a      	cmp	r2, r3
 801965e:	d202      	bcs.n	8019666 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8019660:	4a09      	ldr	r2, [pc, #36]	; (8019688 <prvAddCurrentTaskToDelayedList+0xc8>)
 8019662:	68bb      	ldr	r3, [r7, #8]
 8019664:	6013      	str	r3, [r2, #0]
}
 8019666:	bf00      	nop
 8019668:	3710      	adds	r7, #16
 801966a:	46bd      	mov	sp, r7
 801966c:	bd80      	pop	{r7, pc}
 801966e:	bf00      	nop
 8019670:	20000968 	.word	0x20000968
 8019674:	20000864 	.word	0x20000864
 8019678:	2000096c 	.word	0x2000096c
 801967c:	20000950 	.word	0x20000950
 8019680:	20000920 	.word	0x20000920
 8019684:	2000091c 	.word	0x2000091c
 8019688:	20000984 	.word	0x20000984

0801968c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b08a      	sub	sp, #40	; 0x28
 8019690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019692:	2300      	movs	r3, #0
 8019694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019696:	f000 fb85 	bl	8019da4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801969a:	4b1c      	ldr	r3, [pc, #112]	; (801970c <xTimerCreateTimerTask+0x80>)
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d021      	beq.n	80196e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80196a2:	2300      	movs	r3, #0
 80196a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80196a6:	2300      	movs	r3, #0
 80196a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80196aa:	1d3a      	adds	r2, r7, #4
 80196ac:	f107 0108 	add.w	r1, r7, #8
 80196b0:	f107 030c 	add.w	r3, r7, #12
 80196b4:	4618      	mov	r0, r3
 80196b6:	f7f6 ff79 	bl	80105ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80196ba:	6879      	ldr	r1, [r7, #4]
 80196bc:	68bb      	ldr	r3, [r7, #8]
 80196be:	68fa      	ldr	r2, [r7, #12]
 80196c0:	9202      	str	r2, [sp, #8]
 80196c2:	9301      	str	r3, [sp, #4]
 80196c4:	2305      	movs	r3, #5
 80196c6:	9300      	str	r3, [sp, #0]
 80196c8:	2300      	movs	r3, #0
 80196ca:	460a      	mov	r2, r1
 80196cc:	4910      	ldr	r1, [pc, #64]	; (8019710 <xTimerCreateTimerTask+0x84>)
 80196ce:	4811      	ldr	r0, [pc, #68]	; (8019714 <xTimerCreateTimerTask+0x88>)
 80196d0:	f7fe fdf4 	bl	80182bc <xTaskCreateStatic>
 80196d4:	4603      	mov	r3, r0
 80196d6:	4a10      	ldr	r2, [pc, #64]	; (8019718 <xTimerCreateTimerTask+0x8c>)
 80196d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80196da:	4b0f      	ldr	r3, [pc, #60]	; (8019718 <xTimerCreateTimerTask+0x8c>)
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d001      	beq.n	80196e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80196e2:	2301      	movs	r3, #1
 80196e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80196e6:	697b      	ldr	r3, [r7, #20]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d10a      	bne.n	8019702 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80196ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196f0:	f383 8811 	msr	BASEPRI, r3
 80196f4:	f3bf 8f6f 	isb	sy
 80196f8:	f3bf 8f4f 	dsb	sy
 80196fc:	613b      	str	r3, [r7, #16]
}
 80196fe:	bf00      	nop
 8019700:	e7fe      	b.n	8019700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019702:	697b      	ldr	r3, [r7, #20]
}
 8019704:	4618      	mov	r0, r3
 8019706:	3718      	adds	r7, #24
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}
 801970c:	200009c0 	.word	0x200009c0
 8019710:	0802a420 	.word	0x0802a420
 8019714:	08019985 	.word	0x08019985
 8019718:	200009c4 	.word	0x200009c4

0801971c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801971c:	b580      	push	{r7, lr}
 801971e:	b088      	sub	sp, #32
 8019720:	af02      	add	r7, sp, #8
 8019722:	60f8      	str	r0, [r7, #12]
 8019724:	60b9      	str	r1, [r7, #8]
 8019726:	607a      	str	r2, [r7, #4]
 8019728:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801972a:	2028      	movs	r0, #40	; 0x28
 801972c:	f000 fdcc 	bl	801a2c8 <pvPortMalloc>
 8019730:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8019732:	697b      	ldr	r3, [r7, #20]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d00d      	beq.n	8019754 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8019738:	697b      	ldr	r3, [r7, #20]
 801973a:	2200      	movs	r2, #0
 801973c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8019740:	697b      	ldr	r3, [r7, #20]
 8019742:	9301      	str	r3, [sp, #4]
 8019744:	6a3b      	ldr	r3, [r7, #32]
 8019746:	9300      	str	r3, [sp, #0]
 8019748:	683b      	ldr	r3, [r7, #0]
 801974a:	687a      	ldr	r2, [r7, #4]
 801974c:	68b9      	ldr	r1, [r7, #8]
 801974e:	68f8      	ldr	r0, [r7, #12]
 8019750:	f000 f843 	bl	80197da <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8019754:	697b      	ldr	r3, [r7, #20]
	}
 8019756:	4618      	mov	r0, r3
 8019758:	3718      	adds	r7, #24
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}

0801975e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801975e:	b580      	push	{r7, lr}
 8019760:	b08a      	sub	sp, #40	; 0x28
 8019762:	af02      	add	r7, sp, #8
 8019764:	60f8      	str	r0, [r7, #12]
 8019766:	60b9      	str	r1, [r7, #8]
 8019768:	607a      	str	r2, [r7, #4]
 801976a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801976c:	2328      	movs	r3, #40	; 0x28
 801976e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8019770:	693b      	ldr	r3, [r7, #16]
 8019772:	2b28      	cmp	r3, #40	; 0x28
 8019774:	d00a      	beq.n	801978c <xTimerCreateStatic+0x2e>
	__asm volatile
 8019776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801977a:	f383 8811 	msr	BASEPRI, r3
 801977e:	f3bf 8f6f 	isb	sy
 8019782:	f3bf 8f4f 	dsb	sy
 8019786:	61bb      	str	r3, [r7, #24]
}
 8019788:	bf00      	nop
 801978a:	e7fe      	b.n	801978a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801978c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801978e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019790:	2b00      	cmp	r3, #0
 8019792:	d10a      	bne.n	80197aa <xTimerCreateStatic+0x4c>
	__asm volatile
 8019794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019798:	f383 8811 	msr	BASEPRI, r3
 801979c:	f3bf 8f6f 	isb	sy
 80197a0:	f3bf 8f4f 	dsb	sy
 80197a4:	617b      	str	r3, [r7, #20]
}
 80197a6:	bf00      	nop
 80197a8:	e7fe      	b.n	80197a8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80197aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ac:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80197ae:	69fb      	ldr	r3, [r7, #28]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d00d      	beq.n	80197d0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80197b4:	69fb      	ldr	r3, [r7, #28]
 80197b6:	2202      	movs	r2, #2
 80197b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80197bc:	69fb      	ldr	r3, [r7, #28]
 80197be:	9301      	str	r3, [sp, #4]
 80197c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197c2:	9300      	str	r3, [sp, #0]
 80197c4:	683b      	ldr	r3, [r7, #0]
 80197c6:	687a      	ldr	r2, [r7, #4]
 80197c8:	68b9      	ldr	r1, [r7, #8]
 80197ca:	68f8      	ldr	r0, [r7, #12]
 80197cc:	f000 f805 	bl	80197da <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80197d0:	69fb      	ldr	r3, [r7, #28]
	}
 80197d2:	4618      	mov	r0, r3
 80197d4:	3720      	adds	r7, #32
 80197d6:	46bd      	mov	sp, r7
 80197d8:	bd80      	pop	{r7, pc}

080197da <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80197da:	b580      	push	{r7, lr}
 80197dc:	b086      	sub	sp, #24
 80197de:	af00      	add	r7, sp, #0
 80197e0:	60f8      	str	r0, [r7, #12]
 80197e2:	60b9      	str	r1, [r7, #8]
 80197e4:	607a      	str	r2, [r7, #4]
 80197e6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80197e8:	68bb      	ldr	r3, [r7, #8]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d10a      	bne.n	8019804 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80197ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197f2:	f383 8811 	msr	BASEPRI, r3
 80197f6:	f3bf 8f6f 	isb	sy
 80197fa:	f3bf 8f4f 	dsb	sy
 80197fe:	617b      	str	r3, [r7, #20]
}
 8019800:	bf00      	nop
 8019802:	e7fe      	b.n	8019802 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8019804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019806:	2b00      	cmp	r3, #0
 8019808:	d01e      	beq.n	8019848 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801980a:	f000 facb 	bl	8019da4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019810:	68fa      	ldr	r2, [r7, #12]
 8019812:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8019814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019816:	68ba      	ldr	r2, [r7, #8]
 8019818:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801981c:	683a      	ldr	r2, [r7, #0]
 801981e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8019820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019822:	6a3a      	ldr	r2, [r7, #32]
 8019824:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8019826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019828:	3304      	adds	r3, #4
 801982a:	4618      	mov	r0, r3
 801982c:	f7fd fcaa 	bl	8017184 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	2b00      	cmp	r3, #0
 8019834:	d008      	beq.n	8019848 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8019836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801983c:	f043 0304 	orr.w	r3, r3, #4
 8019840:	b2da      	uxtb	r2, r3
 8019842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8019848:	bf00      	nop
 801984a:	3718      	adds	r7, #24
 801984c:	46bd      	mov	sp, r7
 801984e:	bd80      	pop	{r7, pc}

08019850 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019850:	b580      	push	{r7, lr}
 8019852:	b08a      	sub	sp, #40	; 0x28
 8019854:	af00      	add	r7, sp, #0
 8019856:	60f8      	str	r0, [r7, #12]
 8019858:	60b9      	str	r1, [r7, #8]
 801985a:	607a      	str	r2, [r7, #4]
 801985c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801985e:	2300      	movs	r3, #0
 8019860:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d10a      	bne.n	801987e <xTimerGenericCommand+0x2e>
	__asm volatile
 8019868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801986c:	f383 8811 	msr	BASEPRI, r3
 8019870:	f3bf 8f6f 	isb	sy
 8019874:	f3bf 8f4f 	dsb	sy
 8019878:	623b      	str	r3, [r7, #32]
}
 801987a:	bf00      	nop
 801987c:	e7fe      	b.n	801987c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801987e:	4b1a      	ldr	r3, [pc, #104]	; (80198e8 <xTimerGenericCommand+0x98>)
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d02a      	beq.n	80198dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019892:	68bb      	ldr	r3, [r7, #8]
 8019894:	2b05      	cmp	r3, #5
 8019896:	dc18      	bgt.n	80198ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019898:	f7ff fcd6 	bl	8019248 <xTaskGetSchedulerState>
 801989c:	4603      	mov	r3, r0
 801989e:	2b02      	cmp	r3, #2
 80198a0:	d109      	bne.n	80198b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80198a2:	4b11      	ldr	r3, [pc, #68]	; (80198e8 <xTimerGenericCommand+0x98>)
 80198a4:	6818      	ldr	r0, [r3, #0]
 80198a6:	f107 0114 	add.w	r1, r7, #20
 80198aa:	2300      	movs	r3, #0
 80198ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80198ae:	f7fd feed 	bl	801768c <xQueueGenericSend>
 80198b2:	6278      	str	r0, [r7, #36]	; 0x24
 80198b4:	e012      	b.n	80198dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80198b6:	4b0c      	ldr	r3, [pc, #48]	; (80198e8 <xTimerGenericCommand+0x98>)
 80198b8:	6818      	ldr	r0, [r3, #0]
 80198ba:	f107 0114 	add.w	r1, r7, #20
 80198be:	2300      	movs	r3, #0
 80198c0:	2200      	movs	r2, #0
 80198c2:	f7fd fee3 	bl	801768c <xQueueGenericSend>
 80198c6:	6278      	str	r0, [r7, #36]	; 0x24
 80198c8:	e008      	b.n	80198dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80198ca:	4b07      	ldr	r3, [pc, #28]	; (80198e8 <xTimerGenericCommand+0x98>)
 80198cc:	6818      	ldr	r0, [r3, #0]
 80198ce:	f107 0114 	add.w	r1, r7, #20
 80198d2:	2300      	movs	r3, #0
 80198d4:	683a      	ldr	r2, [r7, #0]
 80198d6:	f7fd ffd7 	bl	8017888 <xQueueGenericSendFromISR>
 80198da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80198dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80198de:	4618      	mov	r0, r3
 80198e0:	3728      	adds	r7, #40	; 0x28
 80198e2:	46bd      	mov	sp, r7
 80198e4:	bd80      	pop	{r7, pc}
 80198e6:	bf00      	nop
 80198e8:	200009c0 	.word	0x200009c0

080198ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b088      	sub	sp, #32
 80198f0:	af02      	add	r7, sp, #8
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198f6:	4b22      	ldr	r3, [pc, #136]	; (8019980 <prvProcessExpiredTimer+0x94>)
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	68db      	ldr	r3, [r3, #12]
 80198fc:	68db      	ldr	r3, [r3, #12]
 80198fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019900:	697b      	ldr	r3, [r7, #20]
 8019902:	3304      	adds	r3, #4
 8019904:	4618      	mov	r0, r3
 8019906:	f7fd fca7 	bl	8017258 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801990a:	697b      	ldr	r3, [r7, #20]
 801990c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019910:	f003 0304 	and.w	r3, r3, #4
 8019914:	2b00      	cmp	r3, #0
 8019916:	d022      	beq.n	801995e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019918:	697b      	ldr	r3, [r7, #20]
 801991a:	699a      	ldr	r2, [r3, #24]
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	18d1      	adds	r1, r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	683a      	ldr	r2, [r7, #0]
 8019924:	6978      	ldr	r0, [r7, #20]
 8019926:	f000 f8d1 	bl	8019acc <prvInsertTimerInActiveList>
 801992a:	4603      	mov	r3, r0
 801992c:	2b00      	cmp	r3, #0
 801992e:	d01f      	beq.n	8019970 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019930:	2300      	movs	r3, #0
 8019932:	9300      	str	r3, [sp, #0]
 8019934:	2300      	movs	r3, #0
 8019936:	687a      	ldr	r2, [r7, #4]
 8019938:	2100      	movs	r1, #0
 801993a:	6978      	ldr	r0, [r7, #20]
 801993c:	f7ff ff88 	bl	8019850 <xTimerGenericCommand>
 8019940:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019942:	693b      	ldr	r3, [r7, #16]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d113      	bne.n	8019970 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801994c:	f383 8811 	msr	BASEPRI, r3
 8019950:	f3bf 8f6f 	isb	sy
 8019954:	f3bf 8f4f 	dsb	sy
 8019958:	60fb      	str	r3, [r7, #12]
}
 801995a:	bf00      	nop
 801995c:	e7fe      	b.n	801995c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801995e:	697b      	ldr	r3, [r7, #20]
 8019960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019964:	f023 0301 	bic.w	r3, r3, #1
 8019968:	b2da      	uxtb	r2, r3
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019970:	697b      	ldr	r3, [r7, #20]
 8019972:	6a1b      	ldr	r3, [r3, #32]
 8019974:	6978      	ldr	r0, [r7, #20]
 8019976:	4798      	blx	r3
}
 8019978:	bf00      	nop
 801997a:	3718      	adds	r7, #24
 801997c:	46bd      	mov	sp, r7
 801997e:	bd80      	pop	{r7, pc}
 8019980:	200009b8 	.word	0x200009b8

08019984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b084      	sub	sp, #16
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801998c:	f107 0308 	add.w	r3, r7, #8
 8019990:	4618      	mov	r0, r3
 8019992:	f000 f857 	bl	8019a44 <prvGetNextExpireTime>
 8019996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019998:	68bb      	ldr	r3, [r7, #8]
 801999a:	4619      	mov	r1, r3
 801999c:	68f8      	ldr	r0, [r7, #12]
 801999e:	f000 f803 	bl	80199a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80199a2:	f000 f8d5 	bl	8019b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80199a6:	e7f1      	b.n	801998c <prvTimerTask+0x8>

080199a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b084      	sub	sp, #16
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
 80199b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80199b2:	f7ff f865 	bl	8018a80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80199b6:	f107 0308 	add.w	r3, r7, #8
 80199ba:	4618      	mov	r0, r3
 80199bc:	f000 f866 	bl	8019a8c <prvSampleTimeNow>
 80199c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80199c2:	68bb      	ldr	r3, [r7, #8]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d130      	bne.n	8019a2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80199c8:	683b      	ldr	r3, [r7, #0]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d10a      	bne.n	80199e4 <prvProcessTimerOrBlockTask+0x3c>
 80199ce:	687a      	ldr	r2, [r7, #4]
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	429a      	cmp	r2, r3
 80199d4:	d806      	bhi.n	80199e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80199d6:	f7ff f861 	bl	8018a9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80199da:	68f9      	ldr	r1, [r7, #12]
 80199dc:	6878      	ldr	r0, [r7, #4]
 80199de:	f7ff ff85 	bl	80198ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80199e2:	e024      	b.n	8019a2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d008      	beq.n	80199fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80199ea:	4b13      	ldr	r3, [pc, #76]	; (8019a38 <prvProcessTimerOrBlockTask+0x90>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d101      	bne.n	80199f8 <prvProcessTimerOrBlockTask+0x50>
 80199f4:	2301      	movs	r3, #1
 80199f6:	e000      	b.n	80199fa <prvProcessTimerOrBlockTask+0x52>
 80199f8:	2300      	movs	r3, #0
 80199fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80199fc:	4b0f      	ldr	r3, [pc, #60]	; (8019a3c <prvProcessTimerOrBlockTask+0x94>)
 80199fe:	6818      	ldr	r0, [r3, #0]
 8019a00:	687a      	ldr	r2, [r7, #4]
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	1ad3      	subs	r3, r2, r3
 8019a06:	683a      	ldr	r2, [r7, #0]
 8019a08:	4619      	mov	r1, r3
 8019a0a:	f7fe fc23 	bl	8018254 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019a0e:	f7ff f845 	bl	8018a9c <xTaskResumeAll>
 8019a12:	4603      	mov	r3, r0
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d10a      	bne.n	8019a2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019a18:	4b09      	ldr	r3, [pc, #36]	; (8019a40 <prvProcessTimerOrBlockTask+0x98>)
 8019a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a1e:	601a      	str	r2, [r3, #0]
 8019a20:	f3bf 8f4f 	dsb	sy
 8019a24:	f3bf 8f6f 	isb	sy
}
 8019a28:	e001      	b.n	8019a2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019a2a:	f7ff f837 	bl	8018a9c <xTaskResumeAll>
}
 8019a2e:	bf00      	nop
 8019a30:	3710      	adds	r7, #16
 8019a32:	46bd      	mov	sp, r7
 8019a34:	bd80      	pop	{r7, pc}
 8019a36:	bf00      	nop
 8019a38:	200009bc 	.word	0x200009bc
 8019a3c:	200009c0 	.word	0x200009c0
 8019a40:	e000ed04 	.word	0xe000ed04

08019a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019a44:	b480      	push	{r7}
 8019a46:	b085      	sub	sp, #20
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019a4c:	4b0e      	ldr	r3, [pc, #56]	; (8019a88 <prvGetNextExpireTime+0x44>)
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d101      	bne.n	8019a5a <prvGetNextExpireTime+0x16>
 8019a56:	2201      	movs	r2, #1
 8019a58:	e000      	b.n	8019a5c <prvGetNextExpireTime+0x18>
 8019a5a:	2200      	movs	r2, #0
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d105      	bne.n	8019a74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019a68:	4b07      	ldr	r3, [pc, #28]	; (8019a88 <prvGetNextExpireTime+0x44>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	68db      	ldr	r3, [r3, #12]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	60fb      	str	r3, [r7, #12]
 8019a72:	e001      	b.n	8019a78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019a74:	2300      	movs	r3, #0
 8019a76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019a78:	68fb      	ldr	r3, [r7, #12]
}
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	3714      	adds	r7, #20
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a84:	4770      	bx	lr
 8019a86:	bf00      	nop
 8019a88:	200009b8 	.word	0x200009b8

08019a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b084      	sub	sp, #16
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019a94:	f7ff f89e 	bl	8018bd4 <xTaskGetTickCount>
 8019a98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019a9a:	4b0b      	ldr	r3, [pc, #44]	; (8019ac8 <prvSampleTimeNow+0x3c>)
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	68fa      	ldr	r2, [r7, #12]
 8019aa0:	429a      	cmp	r2, r3
 8019aa2:	d205      	bcs.n	8019ab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019aa4:	f000 f91a 	bl	8019cdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	2201      	movs	r2, #1
 8019aac:	601a      	str	r2, [r3, #0]
 8019aae:	e002      	b.n	8019ab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019ab6:	4a04      	ldr	r2, [pc, #16]	; (8019ac8 <prvSampleTimeNow+0x3c>)
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019abc:	68fb      	ldr	r3, [r7, #12]
}
 8019abe:	4618      	mov	r0, r3
 8019ac0:	3710      	adds	r7, #16
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	bd80      	pop	{r7, pc}
 8019ac6:	bf00      	nop
 8019ac8:	200009c8 	.word	0x200009c8

08019acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b086      	sub	sp, #24
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	60f8      	str	r0, [r7, #12]
 8019ad4:	60b9      	str	r1, [r7, #8]
 8019ad6:	607a      	str	r2, [r7, #4]
 8019ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019ada:	2300      	movs	r3, #0
 8019adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	68ba      	ldr	r2, [r7, #8]
 8019ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	68fa      	ldr	r2, [r7, #12]
 8019ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019aea:	68ba      	ldr	r2, [r7, #8]
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	429a      	cmp	r2, r3
 8019af0:	d812      	bhi.n	8019b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019af2:	687a      	ldr	r2, [r7, #4]
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	1ad2      	subs	r2, r2, r3
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	699b      	ldr	r3, [r3, #24]
 8019afc:	429a      	cmp	r2, r3
 8019afe:	d302      	bcc.n	8019b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019b00:	2301      	movs	r3, #1
 8019b02:	617b      	str	r3, [r7, #20]
 8019b04:	e01b      	b.n	8019b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019b06:	4b10      	ldr	r3, [pc, #64]	; (8019b48 <prvInsertTimerInActiveList+0x7c>)
 8019b08:	681a      	ldr	r2, [r3, #0]
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	3304      	adds	r3, #4
 8019b0e:	4619      	mov	r1, r3
 8019b10:	4610      	mov	r0, r2
 8019b12:	f7fd fb68 	bl	80171e6 <vListInsert>
 8019b16:	e012      	b.n	8019b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019b18:	687a      	ldr	r2, [r7, #4]
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	429a      	cmp	r2, r3
 8019b1e:	d206      	bcs.n	8019b2e <prvInsertTimerInActiveList+0x62>
 8019b20:	68ba      	ldr	r2, [r7, #8]
 8019b22:	683b      	ldr	r3, [r7, #0]
 8019b24:	429a      	cmp	r2, r3
 8019b26:	d302      	bcc.n	8019b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019b28:	2301      	movs	r3, #1
 8019b2a:	617b      	str	r3, [r7, #20]
 8019b2c:	e007      	b.n	8019b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019b2e:	4b07      	ldr	r3, [pc, #28]	; (8019b4c <prvInsertTimerInActiveList+0x80>)
 8019b30:	681a      	ldr	r2, [r3, #0]
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	3304      	adds	r3, #4
 8019b36:	4619      	mov	r1, r3
 8019b38:	4610      	mov	r0, r2
 8019b3a:	f7fd fb54 	bl	80171e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019b3e:	697b      	ldr	r3, [r7, #20]
}
 8019b40:	4618      	mov	r0, r3
 8019b42:	3718      	adds	r7, #24
 8019b44:	46bd      	mov	sp, r7
 8019b46:	bd80      	pop	{r7, pc}
 8019b48:	200009bc 	.word	0x200009bc
 8019b4c:	200009b8 	.word	0x200009b8

08019b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b08c      	sub	sp, #48	; 0x30
 8019b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019b56:	e0ae      	b.n	8019cb6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019b58:	68bb      	ldr	r3, [r7, #8]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	f2c0 80aa 	blt.w	8019cb4 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019b60:	693b      	ldr	r3, [r7, #16]
 8019b62:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b66:	695b      	ldr	r3, [r3, #20]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d004      	beq.n	8019b76 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b6e:	3304      	adds	r3, #4
 8019b70:	4618      	mov	r0, r3
 8019b72:	f7fd fb71 	bl	8017258 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b76:	1d3b      	adds	r3, r7, #4
 8019b78:	4618      	mov	r0, r3
 8019b7a:	f7ff ff87 	bl	8019a8c <prvSampleTimeNow>
 8019b7e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8019b80:	68bb      	ldr	r3, [r7, #8]
 8019b82:	2b09      	cmp	r3, #9
 8019b84:	f200 8097 	bhi.w	8019cb6 <prvProcessReceivedCommands+0x166>
 8019b88:	a201      	add	r2, pc, #4	; (adr r2, 8019b90 <prvProcessReceivedCommands+0x40>)
 8019b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b8e:	bf00      	nop
 8019b90:	08019bb9 	.word	0x08019bb9
 8019b94:	08019bb9 	.word	0x08019bb9
 8019b98:	08019bb9 	.word	0x08019bb9
 8019b9c:	08019c2d 	.word	0x08019c2d
 8019ba0:	08019c41 	.word	0x08019c41
 8019ba4:	08019c8b 	.word	0x08019c8b
 8019ba8:	08019bb9 	.word	0x08019bb9
 8019bac:	08019bb9 	.word	0x08019bb9
 8019bb0:	08019c2d 	.word	0x08019c2d
 8019bb4:	08019c41 	.word	0x08019c41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019bbe:	f043 0301 	orr.w	r3, r3, #1
 8019bc2:	b2da      	uxtb	r2, r3
 8019bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019bca:	68fa      	ldr	r2, [r7, #12]
 8019bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bce:	699b      	ldr	r3, [r3, #24]
 8019bd0:	18d1      	adds	r1, r2, r3
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	6a3a      	ldr	r2, [r7, #32]
 8019bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019bd8:	f7ff ff78 	bl	8019acc <prvInsertTimerInActiveList>
 8019bdc:	4603      	mov	r3, r0
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d069      	beq.n	8019cb6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be4:	6a1b      	ldr	r3, [r3, #32]
 8019be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019be8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019bf0:	f003 0304 	and.w	r3, r3, #4
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d05e      	beq.n	8019cb6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019bf8:	68fa      	ldr	r2, [r7, #12]
 8019bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfc:	699b      	ldr	r3, [r3, #24]
 8019bfe:	441a      	add	r2, r3
 8019c00:	2300      	movs	r3, #0
 8019c02:	9300      	str	r3, [sp, #0]
 8019c04:	2300      	movs	r3, #0
 8019c06:	2100      	movs	r1, #0
 8019c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c0a:	f7ff fe21 	bl	8019850 <xTimerGenericCommand>
 8019c0e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8019c10:	69fb      	ldr	r3, [r7, #28]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d14f      	bne.n	8019cb6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8019c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c1a:	f383 8811 	msr	BASEPRI, r3
 8019c1e:	f3bf 8f6f 	isb	sy
 8019c22:	f3bf 8f4f 	dsb	sy
 8019c26:	61bb      	str	r3, [r7, #24]
}
 8019c28:	bf00      	nop
 8019c2a:	e7fe      	b.n	8019c2a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019c32:	f023 0301 	bic.w	r3, r3, #1
 8019c36:	b2da      	uxtb	r2, r3
 8019c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8019c3e:	e03a      	b.n	8019cb6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019c46:	f043 0301 	orr.w	r3, r3, #1
 8019c4a:	b2da      	uxtb	r2, r3
 8019c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019c52:	68fa      	ldr	r2, [r7, #12]
 8019c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c5a:	699b      	ldr	r3, [r3, #24]
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d10a      	bne.n	8019c76 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8019c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c64:	f383 8811 	msr	BASEPRI, r3
 8019c68:	f3bf 8f6f 	isb	sy
 8019c6c:	f3bf 8f4f 	dsb	sy
 8019c70:	617b      	str	r3, [r7, #20]
}
 8019c72:	bf00      	nop
 8019c74:	e7fe      	b.n	8019c74 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c78:	699a      	ldr	r2, [r3, #24]
 8019c7a:	6a3b      	ldr	r3, [r7, #32]
 8019c7c:	18d1      	adds	r1, r2, r3
 8019c7e:	6a3b      	ldr	r3, [r7, #32]
 8019c80:	6a3a      	ldr	r2, [r7, #32]
 8019c82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c84:	f7ff ff22 	bl	8019acc <prvInsertTimerInActiveList>
					break;
 8019c88:	e015      	b.n	8019cb6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019c90:	f003 0302 	and.w	r3, r3, #2
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d103      	bne.n	8019ca0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8019c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c9a:	f000 fbe1 	bl	801a460 <vPortFree>
 8019c9e:	e00a      	b.n	8019cb6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019ca6:	f023 0301 	bic.w	r3, r3, #1
 8019caa:	b2da      	uxtb	r2, r3
 8019cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019cb2:	e000      	b.n	8019cb6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019cb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019cb6:	4b08      	ldr	r3, [pc, #32]	; (8019cd8 <prvProcessReceivedCommands+0x188>)
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	f107 0108 	add.w	r1, r7, #8
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	f7fd ff09 	bl	8017ad8 <xQueueReceive>
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	f47f af45 	bne.w	8019b58 <prvProcessReceivedCommands+0x8>
	}
}
 8019cce:	bf00      	nop
 8019cd0:	bf00      	nop
 8019cd2:	3728      	adds	r7, #40	; 0x28
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	bd80      	pop	{r7, pc}
 8019cd8:	200009c0 	.word	0x200009c0

08019cdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	b088      	sub	sp, #32
 8019ce0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019ce2:	e048      	b.n	8019d76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019ce4:	4b2d      	ldr	r3, [pc, #180]	; (8019d9c <prvSwitchTimerLists+0xc0>)
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	68db      	ldr	r3, [r3, #12]
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019cee:	4b2b      	ldr	r3, [pc, #172]	; (8019d9c <prvSwitchTimerLists+0xc0>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	68db      	ldr	r3, [r3, #12]
 8019cf4:	68db      	ldr	r3, [r3, #12]
 8019cf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	3304      	adds	r3, #4
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	f7fd faab 	bl	8017258 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	6a1b      	ldr	r3, [r3, #32]
 8019d06:	68f8      	ldr	r0, [r7, #12]
 8019d08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019d10:	f003 0304 	and.w	r3, r3, #4
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d02e      	beq.n	8019d76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	699b      	ldr	r3, [r3, #24]
 8019d1c:	693a      	ldr	r2, [r7, #16]
 8019d1e:	4413      	add	r3, r2
 8019d20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019d22:	68ba      	ldr	r2, [r7, #8]
 8019d24:	693b      	ldr	r3, [r7, #16]
 8019d26:	429a      	cmp	r2, r3
 8019d28:	d90e      	bls.n	8019d48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	68ba      	ldr	r2, [r7, #8]
 8019d2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	68fa      	ldr	r2, [r7, #12]
 8019d34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019d36:	4b19      	ldr	r3, [pc, #100]	; (8019d9c <prvSwitchTimerLists+0xc0>)
 8019d38:	681a      	ldr	r2, [r3, #0]
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	3304      	adds	r3, #4
 8019d3e:	4619      	mov	r1, r3
 8019d40:	4610      	mov	r0, r2
 8019d42:	f7fd fa50 	bl	80171e6 <vListInsert>
 8019d46:	e016      	b.n	8019d76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019d48:	2300      	movs	r3, #0
 8019d4a:	9300      	str	r3, [sp, #0]
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	693a      	ldr	r2, [r7, #16]
 8019d50:	2100      	movs	r1, #0
 8019d52:	68f8      	ldr	r0, [r7, #12]
 8019d54:	f7ff fd7c 	bl	8019850 <xTimerGenericCommand>
 8019d58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d10a      	bne.n	8019d76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d64:	f383 8811 	msr	BASEPRI, r3
 8019d68:	f3bf 8f6f 	isb	sy
 8019d6c:	f3bf 8f4f 	dsb	sy
 8019d70:	603b      	str	r3, [r7, #0]
}
 8019d72:	bf00      	nop
 8019d74:	e7fe      	b.n	8019d74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019d76:	4b09      	ldr	r3, [pc, #36]	; (8019d9c <prvSwitchTimerLists+0xc0>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d1b1      	bne.n	8019ce4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019d80:	4b06      	ldr	r3, [pc, #24]	; (8019d9c <prvSwitchTimerLists+0xc0>)
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019d86:	4b06      	ldr	r3, [pc, #24]	; (8019da0 <prvSwitchTimerLists+0xc4>)
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	4a04      	ldr	r2, [pc, #16]	; (8019d9c <prvSwitchTimerLists+0xc0>)
 8019d8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019d8e:	4a04      	ldr	r2, [pc, #16]	; (8019da0 <prvSwitchTimerLists+0xc4>)
 8019d90:	697b      	ldr	r3, [r7, #20]
 8019d92:	6013      	str	r3, [r2, #0]
}
 8019d94:	bf00      	nop
 8019d96:	3718      	adds	r7, #24
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd80      	pop	{r7, pc}
 8019d9c:	200009b8 	.word	0x200009b8
 8019da0:	200009bc 	.word	0x200009bc

08019da4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b082      	sub	sp, #8
 8019da8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019daa:	f000 f96b 	bl	801a084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019dae:	4b15      	ldr	r3, [pc, #84]	; (8019e04 <prvCheckForValidListAndQueue+0x60>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d120      	bne.n	8019df8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019db6:	4814      	ldr	r0, [pc, #80]	; (8019e08 <prvCheckForValidListAndQueue+0x64>)
 8019db8:	f7fd f9c4 	bl	8017144 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019dbc:	4813      	ldr	r0, [pc, #76]	; (8019e0c <prvCheckForValidListAndQueue+0x68>)
 8019dbe:	f7fd f9c1 	bl	8017144 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019dc2:	4b13      	ldr	r3, [pc, #76]	; (8019e10 <prvCheckForValidListAndQueue+0x6c>)
 8019dc4:	4a10      	ldr	r2, [pc, #64]	; (8019e08 <prvCheckForValidListAndQueue+0x64>)
 8019dc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019dc8:	4b12      	ldr	r3, [pc, #72]	; (8019e14 <prvCheckForValidListAndQueue+0x70>)
 8019dca:	4a10      	ldr	r2, [pc, #64]	; (8019e0c <prvCheckForValidListAndQueue+0x68>)
 8019dcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019dce:	2300      	movs	r3, #0
 8019dd0:	9300      	str	r3, [sp, #0]
 8019dd2:	4b11      	ldr	r3, [pc, #68]	; (8019e18 <prvCheckForValidListAndQueue+0x74>)
 8019dd4:	4a11      	ldr	r2, [pc, #68]	; (8019e1c <prvCheckForValidListAndQueue+0x78>)
 8019dd6:	210c      	movs	r1, #12
 8019dd8:	200a      	movs	r0, #10
 8019dda:	f7fd facf 	bl	801737c <xQueueGenericCreateStatic>
 8019dde:	4603      	mov	r3, r0
 8019de0:	4a08      	ldr	r2, [pc, #32]	; (8019e04 <prvCheckForValidListAndQueue+0x60>)
 8019de2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019de4:	4b07      	ldr	r3, [pc, #28]	; (8019e04 <prvCheckForValidListAndQueue+0x60>)
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d005      	beq.n	8019df8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019dec:	4b05      	ldr	r3, [pc, #20]	; (8019e04 <prvCheckForValidListAndQueue+0x60>)
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	490b      	ldr	r1, [pc, #44]	; (8019e20 <prvCheckForValidListAndQueue+0x7c>)
 8019df2:	4618      	mov	r0, r3
 8019df4:	f7fe fa04 	bl	8018200 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019df8:	f000 f974 	bl	801a0e4 <vPortExitCritical>
}
 8019dfc:	bf00      	nop
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bd80      	pop	{r7, pc}
 8019e02:	bf00      	nop
 8019e04:	200009c0 	.word	0x200009c0
 8019e08:	20000990 	.word	0x20000990
 8019e0c:	200009a4 	.word	0x200009a4
 8019e10:	200009b8 	.word	0x200009b8
 8019e14:	200009bc 	.word	0x200009bc
 8019e18:	20000a44 	.word	0x20000a44
 8019e1c:	200009cc 	.word	0x200009cc
 8019e20:	0802a428 	.word	0x0802a428

08019e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019e24:	b480      	push	{r7}
 8019e26:	b085      	sub	sp, #20
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	60f8      	str	r0, [r7, #12]
 8019e2c:	60b9      	str	r1, [r7, #8]
 8019e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	3b04      	subs	r3, #4
 8019e34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	3b04      	subs	r3, #4
 8019e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019e44:	68bb      	ldr	r3, [r7, #8]
 8019e46:	f023 0201 	bic.w	r2, r3, #1
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	3b04      	subs	r3, #4
 8019e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019e54:	4a0c      	ldr	r2, [pc, #48]	; (8019e88 <pxPortInitialiseStack+0x64>)
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	3b14      	subs	r3, #20
 8019e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019e60:	687a      	ldr	r2, [r7, #4]
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	3b04      	subs	r3, #4
 8019e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	f06f 0202 	mvn.w	r2, #2
 8019e72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	3b20      	subs	r3, #32
 8019e78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019e7a:	68fb      	ldr	r3, [r7, #12]
}
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	3714      	adds	r7, #20
 8019e80:	46bd      	mov	sp, r7
 8019e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e86:	4770      	bx	lr
 8019e88:	08019e8d 	.word	0x08019e8d

08019e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019e8c:	b480      	push	{r7}
 8019e8e:	b085      	sub	sp, #20
 8019e90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019e92:	2300      	movs	r3, #0
 8019e94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019e96:	4b12      	ldr	r3, [pc, #72]	; (8019ee0 <prvTaskExitError+0x54>)
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e9e:	d00a      	beq.n	8019eb6 <prvTaskExitError+0x2a>
	__asm volatile
 8019ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ea4:	f383 8811 	msr	BASEPRI, r3
 8019ea8:	f3bf 8f6f 	isb	sy
 8019eac:	f3bf 8f4f 	dsb	sy
 8019eb0:	60fb      	str	r3, [r7, #12]
}
 8019eb2:	bf00      	nop
 8019eb4:	e7fe      	b.n	8019eb4 <prvTaskExitError+0x28>
	__asm volatile
 8019eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019eba:	f383 8811 	msr	BASEPRI, r3
 8019ebe:	f3bf 8f6f 	isb	sy
 8019ec2:	f3bf 8f4f 	dsb	sy
 8019ec6:	60bb      	str	r3, [r7, #8]
}
 8019ec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019eca:	bf00      	nop
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d0fc      	beq.n	8019ecc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019ed2:	bf00      	nop
 8019ed4:	bf00      	nop
 8019ed6:	3714      	adds	r7, #20
 8019ed8:	46bd      	mov	sp, r7
 8019eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ede:	4770      	bx	lr
 8019ee0:	2000000c 	.word	0x2000000c
	...

08019ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019ef0:	4b07      	ldr	r3, [pc, #28]	; (8019f10 <pxCurrentTCBConst2>)
 8019ef2:	6819      	ldr	r1, [r3, #0]
 8019ef4:	6808      	ldr	r0, [r1, #0]
 8019ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019efa:	f380 8809 	msr	PSP, r0
 8019efe:	f3bf 8f6f 	isb	sy
 8019f02:	f04f 0000 	mov.w	r0, #0
 8019f06:	f380 8811 	msr	BASEPRI, r0
 8019f0a:	4770      	bx	lr
 8019f0c:	f3af 8000 	nop.w

08019f10 <pxCurrentTCBConst2>:
 8019f10:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019f14:	bf00      	nop
 8019f16:	bf00      	nop

08019f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019f18:	4808      	ldr	r0, [pc, #32]	; (8019f3c <prvPortStartFirstTask+0x24>)
 8019f1a:	6800      	ldr	r0, [r0, #0]
 8019f1c:	6800      	ldr	r0, [r0, #0]
 8019f1e:	f380 8808 	msr	MSP, r0
 8019f22:	f04f 0000 	mov.w	r0, #0
 8019f26:	f380 8814 	msr	CONTROL, r0
 8019f2a:	b662      	cpsie	i
 8019f2c:	b661      	cpsie	f
 8019f2e:	f3bf 8f4f 	dsb	sy
 8019f32:	f3bf 8f6f 	isb	sy
 8019f36:	df00      	svc	0
 8019f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019f3a:	bf00      	nop
 8019f3c:	e000ed08 	.word	0xe000ed08

08019f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b086      	sub	sp, #24
 8019f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019f46:	4b46      	ldr	r3, [pc, #280]	; (801a060 <xPortStartScheduler+0x120>)
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	4a46      	ldr	r2, [pc, #280]	; (801a064 <xPortStartScheduler+0x124>)
 8019f4c:	4293      	cmp	r3, r2
 8019f4e:	d10a      	bne.n	8019f66 <xPortStartScheduler+0x26>
	__asm volatile
 8019f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f54:	f383 8811 	msr	BASEPRI, r3
 8019f58:	f3bf 8f6f 	isb	sy
 8019f5c:	f3bf 8f4f 	dsb	sy
 8019f60:	613b      	str	r3, [r7, #16]
}
 8019f62:	bf00      	nop
 8019f64:	e7fe      	b.n	8019f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019f66:	4b3e      	ldr	r3, [pc, #248]	; (801a060 <xPortStartScheduler+0x120>)
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	4a3f      	ldr	r2, [pc, #252]	; (801a068 <xPortStartScheduler+0x128>)
 8019f6c:	4293      	cmp	r3, r2
 8019f6e:	d10a      	bne.n	8019f86 <xPortStartScheduler+0x46>
	__asm volatile
 8019f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f74:	f383 8811 	msr	BASEPRI, r3
 8019f78:	f3bf 8f6f 	isb	sy
 8019f7c:	f3bf 8f4f 	dsb	sy
 8019f80:	60fb      	str	r3, [r7, #12]
}
 8019f82:	bf00      	nop
 8019f84:	e7fe      	b.n	8019f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019f86:	4b39      	ldr	r3, [pc, #228]	; (801a06c <xPortStartScheduler+0x12c>)
 8019f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019f8a:	697b      	ldr	r3, [r7, #20]
 8019f8c:	781b      	ldrb	r3, [r3, #0]
 8019f8e:	b2db      	uxtb	r3, r3
 8019f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019f92:	697b      	ldr	r3, [r7, #20]
 8019f94:	22ff      	movs	r2, #255	; 0xff
 8019f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019f98:	697b      	ldr	r3, [r7, #20]
 8019f9a:	781b      	ldrb	r3, [r3, #0]
 8019f9c:	b2db      	uxtb	r3, r3
 8019f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019fa0:	78fb      	ldrb	r3, [r7, #3]
 8019fa2:	b2db      	uxtb	r3, r3
 8019fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019fa8:	b2da      	uxtb	r2, r3
 8019faa:	4b31      	ldr	r3, [pc, #196]	; (801a070 <xPortStartScheduler+0x130>)
 8019fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019fae:	4b31      	ldr	r3, [pc, #196]	; (801a074 <xPortStartScheduler+0x134>)
 8019fb0:	2207      	movs	r2, #7
 8019fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019fb4:	e009      	b.n	8019fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019fb6:	4b2f      	ldr	r3, [pc, #188]	; (801a074 <xPortStartScheduler+0x134>)
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	3b01      	subs	r3, #1
 8019fbc:	4a2d      	ldr	r2, [pc, #180]	; (801a074 <xPortStartScheduler+0x134>)
 8019fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019fc0:	78fb      	ldrb	r3, [r7, #3]
 8019fc2:	b2db      	uxtb	r3, r3
 8019fc4:	005b      	lsls	r3, r3, #1
 8019fc6:	b2db      	uxtb	r3, r3
 8019fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019fca:	78fb      	ldrb	r3, [r7, #3]
 8019fcc:	b2db      	uxtb	r3, r3
 8019fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019fd2:	2b80      	cmp	r3, #128	; 0x80
 8019fd4:	d0ef      	beq.n	8019fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019fd6:	4b27      	ldr	r3, [pc, #156]	; (801a074 <xPortStartScheduler+0x134>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	f1c3 0307 	rsb	r3, r3, #7
 8019fde:	2b04      	cmp	r3, #4
 8019fe0:	d00a      	beq.n	8019ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8019fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fe6:	f383 8811 	msr	BASEPRI, r3
 8019fea:	f3bf 8f6f 	isb	sy
 8019fee:	f3bf 8f4f 	dsb	sy
 8019ff2:	60bb      	str	r3, [r7, #8]
}
 8019ff4:	bf00      	nop
 8019ff6:	e7fe      	b.n	8019ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019ff8:	4b1e      	ldr	r3, [pc, #120]	; (801a074 <xPortStartScheduler+0x134>)
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	021b      	lsls	r3, r3, #8
 8019ffe:	4a1d      	ldr	r2, [pc, #116]	; (801a074 <xPortStartScheduler+0x134>)
 801a000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a002:	4b1c      	ldr	r3, [pc, #112]	; (801a074 <xPortStartScheduler+0x134>)
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a00a:	4a1a      	ldr	r2, [pc, #104]	; (801a074 <xPortStartScheduler+0x134>)
 801a00c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	b2da      	uxtb	r2, r3
 801a012:	697b      	ldr	r3, [r7, #20]
 801a014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a016:	4b18      	ldr	r3, [pc, #96]	; (801a078 <xPortStartScheduler+0x138>)
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	4a17      	ldr	r2, [pc, #92]	; (801a078 <xPortStartScheduler+0x138>)
 801a01c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a022:	4b15      	ldr	r3, [pc, #84]	; (801a078 <xPortStartScheduler+0x138>)
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	4a14      	ldr	r2, [pc, #80]	; (801a078 <xPortStartScheduler+0x138>)
 801a028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a02c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a02e:	f000 f8dd 	bl	801a1ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a032:	4b12      	ldr	r3, [pc, #72]	; (801a07c <xPortStartScheduler+0x13c>)
 801a034:	2200      	movs	r2, #0
 801a036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a038:	f000 f8fc 	bl	801a234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a03c:	4b10      	ldr	r3, [pc, #64]	; (801a080 <xPortStartScheduler+0x140>)
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	4a0f      	ldr	r2, [pc, #60]	; (801a080 <xPortStartScheduler+0x140>)
 801a042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a048:	f7ff ff66 	bl	8019f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a04c:	f7fe fe8a 	bl	8018d64 <vTaskSwitchContext>
	prvTaskExitError();
 801a050:	f7ff ff1c 	bl	8019e8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a054:	2300      	movs	r3, #0
}
 801a056:	4618      	mov	r0, r3
 801a058:	3718      	adds	r7, #24
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd80      	pop	{r7, pc}
 801a05e:	bf00      	nop
 801a060:	e000ed00 	.word	0xe000ed00
 801a064:	410fc271 	.word	0x410fc271
 801a068:	410fc270 	.word	0x410fc270
 801a06c:	e000e400 	.word	0xe000e400
 801a070:	20000a8c 	.word	0x20000a8c
 801a074:	20000a90 	.word	0x20000a90
 801a078:	e000ed20 	.word	0xe000ed20
 801a07c:	2000000c 	.word	0x2000000c
 801a080:	e000ef34 	.word	0xe000ef34

0801a084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a084:	b480      	push	{r7}
 801a086:	b083      	sub	sp, #12
 801a088:	af00      	add	r7, sp, #0
	__asm volatile
 801a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a08e:	f383 8811 	msr	BASEPRI, r3
 801a092:	f3bf 8f6f 	isb	sy
 801a096:	f3bf 8f4f 	dsb	sy
 801a09a:	607b      	str	r3, [r7, #4]
}
 801a09c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a09e:	4b0f      	ldr	r3, [pc, #60]	; (801a0dc <vPortEnterCritical+0x58>)
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	3301      	adds	r3, #1
 801a0a4:	4a0d      	ldr	r2, [pc, #52]	; (801a0dc <vPortEnterCritical+0x58>)
 801a0a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a0a8:	4b0c      	ldr	r3, [pc, #48]	; (801a0dc <vPortEnterCritical+0x58>)
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	2b01      	cmp	r3, #1
 801a0ae:	d10f      	bne.n	801a0d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a0b0:	4b0b      	ldr	r3, [pc, #44]	; (801a0e0 <vPortEnterCritical+0x5c>)
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	b2db      	uxtb	r3, r3
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d00a      	beq.n	801a0d0 <vPortEnterCritical+0x4c>
	__asm volatile
 801a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0be:	f383 8811 	msr	BASEPRI, r3
 801a0c2:	f3bf 8f6f 	isb	sy
 801a0c6:	f3bf 8f4f 	dsb	sy
 801a0ca:	603b      	str	r3, [r7, #0]
}
 801a0cc:	bf00      	nop
 801a0ce:	e7fe      	b.n	801a0ce <vPortEnterCritical+0x4a>
	}
}
 801a0d0:	bf00      	nop
 801a0d2:	370c      	adds	r7, #12
 801a0d4:	46bd      	mov	sp, r7
 801a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0da:	4770      	bx	lr
 801a0dc:	2000000c 	.word	0x2000000c
 801a0e0:	e000ed04 	.word	0xe000ed04

0801a0e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a0e4:	b480      	push	{r7}
 801a0e6:	b083      	sub	sp, #12
 801a0e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a0ea:	4b12      	ldr	r3, [pc, #72]	; (801a134 <vPortExitCritical+0x50>)
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d10a      	bne.n	801a108 <vPortExitCritical+0x24>
	__asm volatile
 801a0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0f6:	f383 8811 	msr	BASEPRI, r3
 801a0fa:	f3bf 8f6f 	isb	sy
 801a0fe:	f3bf 8f4f 	dsb	sy
 801a102:	607b      	str	r3, [r7, #4]
}
 801a104:	bf00      	nop
 801a106:	e7fe      	b.n	801a106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a108:	4b0a      	ldr	r3, [pc, #40]	; (801a134 <vPortExitCritical+0x50>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	3b01      	subs	r3, #1
 801a10e:	4a09      	ldr	r2, [pc, #36]	; (801a134 <vPortExitCritical+0x50>)
 801a110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a112:	4b08      	ldr	r3, [pc, #32]	; (801a134 <vPortExitCritical+0x50>)
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d105      	bne.n	801a126 <vPortExitCritical+0x42>
 801a11a:	2300      	movs	r3, #0
 801a11c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a11e:	683b      	ldr	r3, [r7, #0]
 801a120:	f383 8811 	msr	BASEPRI, r3
}
 801a124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a126:	bf00      	nop
 801a128:	370c      	adds	r7, #12
 801a12a:	46bd      	mov	sp, r7
 801a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a130:	4770      	bx	lr
 801a132:	bf00      	nop
 801a134:	2000000c 	.word	0x2000000c
	...

0801a140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a140:	f3ef 8009 	mrs	r0, PSP
 801a144:	f3bf 8f6f 	isb	sy
 801a148:	4b15      	ldr	r3, [pc, #84]	; (801a1a0 <pxCurrentTCBConst>)
 801a14a:	681a      	ldr	r2, [r3, #0]
 801a14c:	f01e 0f10 	tst.w	lr, #16
 801a150:	bf08      	it	eq
 801a152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a15a:	6010      	str	r0, [r2, #0]
 801a15c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a160:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a164:	f380 8811 	msr	BASEPRI, r0
 801a168:	f3bf 8f4f 	dsb	sy
 801a16c:	f3bf 8f6f 	isb	sy
 801a170:	f7fe fdf8 	bl	8018d64 <vTaskSwitchContext>
 801a174:	f04f 0000 	mov.w	r0, #0
 801a178:	f380 8811 	msr	BASEPRI, r0
 801a17c:	bc09      	pop	{r0, r3}
 801a17e:	6819      	ldr	r1, [r3, #0]
 801a180:	6808      	ldr	r0, [r1, #0]
 801a182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a186:	f01e 0f10 	tst.w	lr, #16
 801a18a:	bf08      	it	eq
 801a18c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a190:	f380 8809 	msr	PSP, r0
 801a194:	f3bf 8f6f 	isb	sy
 801a198:	4770      	bx	lr
 801a19a:	bf00      	nop
 801a19c:	f3af 8000 	nop.w

0801a1a0 <pxCurrentTCBConst>:
 801a1a0:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a1a4:	bf00      	nop
 801a1a6:	bf00      	nop

0801a1a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b082      	sub	sp, #8
 801a1ac:	af00      	add	r7, sp, #0
	__asm volatile
 801a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1b2:	f383 8811 	msr	BASEPRI, r3
 801a1b6:	f3bf 8f6f 	isb	sy
 801a1ba:	f3bf 8f4f 	dsb	sy
 801a1be:	607b      	str	r3, [r7, #4]
}
 801a1c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a1c2:	f7fe fd17 	bl	8018bf4 <xTaskIncrementTick>
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d003      	beq.n	801a1d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a1cc:	4b06      	ldr	r3, [pc, #24]	; (801a1e8 <SysTick_Handler+0x40>)
 801a1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1d2:	601a      	str	r2, [r3, #0]
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	f383 8811 	msr	BASEPRI, r3
}
 801a1de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a1e0:	bf00      	nop
 801a1e2:	3708      	adds	r7, #8
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}
 801a1e8:	e000ed04 	.word	0xe000ed04

0801a1ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a1ec:	b480      	push	{r7}
 801a1ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a1f0:	4b0b      	ldr	r3, [pc, #44]	; (801a220 <vPortSetupTimerInterrupt+0x34>)
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a1f6:	4b0b      	ldr	r3, [pc, #44]	; (801a224 <vPortSetupTimerInterrupt+0x38>)
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a1fc:	4b0a      	ldr	r3, [pc, #40]	; (801a228 <vPortSetupTimerInterrupt+0x3c>)
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	4a0a      	ldr	r2, [pc, #40]	; (801a22c <vPortSetupTimerInterrupt+0x40>)
 801a202:	fba2 2303 	umull	r2, r3, r2, r3
 801a206:	099b      	lsrs	r3, r3, #6
 801a208:	4a09      	ldr	r2, [pc, #36]	; (801a230 <vPortSetupTimerInterrupt+0x44>)
 801a20a:	3b01      	subs	r3, #1
 801a20c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a20e:	4b04      	ldr	r3, [pc, #16]	; (801a220 <vPortSetupTimerInterrupt+0x34>)
 801a210:	2207      	movs	r2, #7
 801a212:	601a      	str	r2, [r3, #0]
}
 801a214:	bf00      	nop
 801a216:	46bd      	mov	sp, r7
 801a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a21c:	4770      	bx	lr
 801a21e:	bf00      	nop
 801a220:	e000e010 	.word	0xe000e010
 801a224:	e000e018 	.word	0xe000e018
 801a228:	20000000 	.word	0x20000000
 801a22c:	10624dd3 	.word	0x10624dd3
 801a230:	e000e014 	.word	0xe000e014

0801a234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a244 <vPortEnableVFP+0x10>
 801a238:	6801      	ldr	r1, [r0, #0]
 801a23a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a23e:	6001      	str	r1, [r0, #0]
 801a240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a242:	bf00      	nop
 801a244:	e000ed88 	.word	0xe000ed88

0801a248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a248:	b480      	push	{r7}
 801a24a:	b085      	sub	sp, #20
 801a24c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a24e:	f3ef 8305 	mrs	r3, IPSR
 801a252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	2b0f      	cmp	r3, #15
 801a258:	d914      	bls.n	801a284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a25a:	4a17      	ldr	r2, [pc, #92]	; (801a2b8 <vPortValidateInterruptPriority+0x70>)
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	4413      	add	r3, r2
 801a260:	781b      	ldrb	r3, [r3, #0]
 801a262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a264:	4b15      	ldr	r3, [pc, #84]	; (801a2bc <vPortValidateInterruptPriority+0x74>)
 801a266:	781b      	ldrb	r3, [r3, #0]
 801a268:	7afa      	ldrb	r2, [r7, #11]
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d20a      	bcs.n	801a284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a272:	f383 8811 	msr	BASEPRI, r3
 801a276:	f3bf 8f6f 	isb	sy
 801a27a:	f3bf 8f4f 	dsb	sy
 801a27e:	607b      	str	r3, [r7, #4]
}
 801a280:	bf00      	nop
 801a282:	e7fe      	b.n	801a282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a284:	4b0e      	ldr	r3, [pc, #56]	; (801a2c0 <vPortValidateInterruptPriority+0x78>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a28c:	4b0d      	ldr	r3, [pc, #52]	; (801a2c4 <vPortValidateInterruptPriority+0x7c>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	429a      	cmp	r2, r3
 801a292:	d90a      	bls.n	801a2aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a298:	f383 8811 	msr	BASEPRI, r3
 801a29c:	f3bf 8f6f 	isb	sy
 801a2a0:	f3bf 8f4f 	dsb	sy
 801a2a4:	603b      	str	r3, [r7, #0]
}
 801a2a6:	bf00      	nop
 801a2a8:	e7fe      	b.n	801a2a8 <vPortValidateInterruptPriority+0x60>
	}
 801a2aa:	bf00      	nop
 801a2ac:	3714      	adds	r7, #20
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b4:	4770      	bx	lr
 801a2b6:	bf00      	nop
 801a2b8:	e000e3f0 	.word	0xe000e3f0
 801a2bc:	20000a8c 	.word	0x20000a8c
 801a2c0:	e000ed0c 	.word	0xe000ed0c
 801a2c4:	20000a90 	.word	0x20000a90

0801a2c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b08a      	sub	sp, #40	; 0x28
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a2d4:	f7fe fbd4 	bl	8018a80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a2d8:	4b5b      	ldr	r3, [pc, #364]	; (801a448 <pvPortMalloc+0x180>)
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d101      	bne.n	801a2e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a2e0:	f000 f920 	bl	801a524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a2e4:	4b59      	ldr	r3, [pc, #356]	; (801a44c <pvPortMalloc+0x184>)
 801a2e6:	681a      	ldr	r2, [r3, #0]
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	4013      	ands	r3, r2
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	f040 8093 	bne.w	801a418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d01d      	beq.n	801a334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a2f8:	2208      	movs	r2, #8
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	4413      	add	r3, r2
 801a2fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	f003 0307 	and.w	r3, r3, #7
 801a306:	2b00      	cmp	r3, #0
 801a308:	d014      	beq.n	801a334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	f023 0307 	bic.w	r3, r3, #7
 801a310:	3308      	adds	r3, #8
 801a312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	f003 0307 	and.w	r3, r3, #7
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d00a      	beq.n	801a334 <pvPortMalloc+0x6c>
	__asm volatile
 801a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a322:	f383 8811 	msr	BASEPRI, r3
 801a326:	f3bf 8f6f 	isb	sy
 801a32a:	f3bf 8f4f 	dsb	sy
 801a32e:	617b      	str	r3, [r7, #20]
}
 801a330:	bf00      	nop
 801a332:	e7fe      	b.n	801a332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d06e      	beq.n	801a418 <pvPortMalloc+0x150>
 801a33a:	4b45      	ldr	r3, [pc, #276]	; (801a450 <pvPortMalloc+0x188>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	687a      	ldr	r2, [r7, #4]
 801a340:	429a      	cmp	r2, r3
 801a342:	d869      	bhi.n	801a418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a344:	4b43      	ldr	r3, [pc, #268]	; (801a454 <pvPortMalloc+0x18c>)
 801a346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a348:	4b42      	ldr	r3, [pc, #264]	; (801a454 <pvPortMalloc+0x18c>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a34e:	e004      	b.n	801a35a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a35c:	685b      	ldr	r3, [r3, #4]
 801a35e:	687a      	ldr	r2, [r7, #4]
 801a360:	429a      	cmp	r2, r3
 801a362:	d903      	bls.n	801a36c <pvPortMalloc+0xa4>
 801a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d1f1      	bne.n	801a350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a36c:	4b36      	ldr	r3, [pc, #216]	; (801a448 <pvPortMalloc+0x180>)
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a372:	429a      	cmp	r2, r3
 801a374:	d050      	beq.n	801a418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a376:	6a3b      	ldr	r3, [r7, #32]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	2208      	movs	r2, #8
 801a37c:	4413      	add	r3, r2
 801a37e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a382:	681a      	ldr	r2, [r3, #0]
 801a384:	6a3b      	ldr	r3, [r7, #32]
 801a386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a38a:	685a      	ldr	r2, [r3, #4]
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	1ad2      	subs	r2, r2, r3
 801a390:	2308      	movs	r3, #8
 801a392:	005b      	lsls	r3, r3, #1
 801a394:	429a      	cmp	r2, r3
 801a396:	d91f      	bls.n	801a3d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	4413      	add	r3, r2
 801a39e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a3a0:	69bb      	ldr	r3, [r7, #24]
 801a3a2:	f003 0307 	and.w	r3, r3, #7
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d00a      	beq.n	801a3c0 <pvPortMalloc+0xf8>
	__asm volatile
 801a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3ae:	f383 8811 	msr	BASEPRI, r3
 801a3b2:	f3bf 8f6f 	isb	sy
 801a3b6:	f3bf 8f4f 	dsb	sy
 801a3ba:	613b      	str	r3, [r7, #16]
}
 801a3bc:	bf00      	nop
 801a3be:	e7fe      	b.n	801a3be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c2:	685a      	ldr	r2, [r3, #4]
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	1ad2      	subs	r2, r2, r3
 801a3c8:	69bb      	ldr	r3, [r7, #24]
 801a3ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ce:	687a      	ldr	r2, [r7, #4]
 801a3d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a3d2:	69b8      	ldr	r0, [r7, #24]
 801a3d4:	f000 f908 	bl	801a5e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a3d8:	4b1d      	ldr	r3, [pc, #116]	; (801a450 <pvPortMalloc+0x188>)
 801a3da:	681a      	ldr	r2, [r3, #0]
 801a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3de:	685b      	ldr	r3, [r3, #4]
 801a3e0:	1ad3      	subs	r3, r2, r3
 801a3e2:	4a1b      	ldr	r2, [pc, #108]	; (801a450 <pvPortMalloc+0x188>)
 801a3e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a3e6:	4b1a      	ldr	r3, [pc, #104]	; (801a450 <pvPortMalloc+0x188>)
 801a3e8:	681a      	ldr	r2, [r3, #0]
 801a3ea:	4b1b      	ldr	r3, [pc, #108]	; (801a458 <pvPortMalloc+0x190>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	429a      	cmp	r2, r3
 801a3f0:	d203      	bcs.n	801a3fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a3f2:	4b17      	ldr	r3, [pc, #92]	; (801a450 <pvPortMalloc+0x188>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	4a18      	ldr	r2, [pc, #96]	; (801a458 <pvPortMalloc+0x190>)
 801a3f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3fc:	685a      	ldr	r2, [r3, #4]
 801a3fe:	4b13      	ldr	r3, [pc, #76]	; (801a44c <pvPortMalloc+0x184>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	431a      	orrs	r2, r3
 801a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a40a:	2200      	movs	r2, #0
 801a40c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a40e:	4b13      	ldr	r3, [pc, #76]	; (801a45c <pvPortMalloc+0x194>)
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	3301      	adds	r3, #1
 801a414:	4a11      	ldr	r2, [pc, #68]	; (801a45c <pvPortMalloc+0x194>)
 801a416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a418:	f7fe fb40 	bl	8018a9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a41c:	69fb      	ldr	r3, [r7, #28]
 801a41e:	f003 0307 	and.w	r3, r3, #7
 801a422:	2b00      	cmp	r3, #0
 801a424:	d00a      	beq.n	801a43c <pvPortMalloc+0x174>
	__asm volatile
 801a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a42a:	f383 8811 	msr	BASEPRI, r3
 801a42e:	f3bf 8f6f 	isb	sy
 801a432:	f3bf 8f4f 	dsb	sy
 801a436:	60fb      	str	r3, [r7, #12]
}
 801a438:	bf00      	nop
 801a43a:	e7fe      	b.n	801a43a <pvPortMalloc+0x172>
	return pvReturn;
 801a43c:	69fb      	ldr	r3, [r7, #28]
}
 801a43e:	4618      	mov	r0, r3
 801a440:	3728      	adds	r7, #40	; 0x28
 801a442:	46bd      	mov	sp, r7
 801a444:	bd80      	pop	{r7, pc}
 801a446:	bf00      	nop
 801a448:	20007fcc 	.word	0x20007fcc
 801a44c:	20007fe0 	.word	0x20007fe0
 801a450:	20007fd0 	.word	0x20007fd0
 801a454:	20007fc4 	.word	0x20007fc4
 801a458:	20007fd4 	.word	0x20007fd4
 801a45c:	20007fd8 	.word	0x20007fd8

0801a460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b086      	sub	sp, #24
 801a464:	af00      	add	r7, sp, #0
 801a466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d04d      	beq.n	801a50e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a472:	2308      	movs	r3, #8
 801a474:	425b      	negs	r3, r3
 801a476:	697a      	ldr	r2, [r7, #20]
 801a478:	4413      	add	r3, r2
 801a47a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a47c:	697b      	ldr	r3, [r7, #20]
 801a47e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a480:	693b      	ldr	r3, [r7, #16]
 801a482:	685a      	ldr	r2, [r3, #4]
 801a484:	4b24      	ldr	r3, [pc, #144]	; (801a518 <vPortFree+0xb8>)
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	4013      	ands	r3, r2
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d10a      	bne.n	801a4a4 <vPortFree+0x44>
	__asm volatile
 801a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a492:	f383 8811 	msr	BASEPRI, r3
 801a496:	f3bf 8f6f 	isb	sy
 801a49a:	f3bf 8f4f 	dsb	sy
 801a49e:	60fb      	str	r3, [r7, #12]
}
 801a4a0:	bf00      	nop
 801a4a2:	e7fe      	b.n	801a4a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a4a4:	693b      	ldr	r3, [r7, #16]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d00a      	beq.n	801a4c2 <vPortFree+0x62>
	__asm volatile
 801a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4b0:	f383 8811 	msr	BASEPRI, r3
 801a4b4:	f3bf 8f6f 	isb	sy
 801a4b8:	f3bf 8f4f 	dsb	sy
 801a4bc:	60bb      	str	r3, [r7, #8]
}
 801a4be:	bf00      	nop
 801a4c0:	e7fe      	b.n	801a4c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a4c2:	693b      	ldr	r3, [r7, #16]
 801a4c4:	685a      	ldr	r2, [r3, #4]
 801a4c6:	4b14      	ldr	r3, [pc, #80]	; (801a518 <vPortFree+0xb8>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	4013      	ands	r3, r2
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d01e      	beq.n	801a50e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a4d0:	693b      	ldr	r3, [r7, #16]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d11a      	bne.n	801a50e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a4d8:	693b      	ldr	r3, [r7, #16]
 801a4da:	685a      	ldr	r2, [r3, #4]
 801a4dc:	4b0e      	ldr	r3, [pc, #56]	; (801a518 <vPortFree+0xb8>)
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	43db      	mvns	r3, r3
 801a4e2:	401a      	ands	r2, r3
 801a4e4:	693b      	ldr	r3, [r7, #16]
 801a4e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a4e8:	f7fe faca 	bl	8018a80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a4ec:	693b      	ldr	r3, [r7, #16]
 801a4ee:	685a      	ldr	r2, [r3, #4]
 801a4f0:	4b0a      	ldr	r3, [pc, #40]	; (801a51c <vPortFree+0xbc>)
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	4413      	add	r3, r2
 801a4f6:	4a09      	ldr	r2, [pc, #36]	; (801a51c <vPortFree+0xbc>)
 801a4f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a4fa:	6938      	ldr	r0, [r7, #16]
 801a4fc:	f000 f874 	bl	801a5e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a500:	4b07      	ldr	r3, [pc, #28]	; (801a520 <vPortFree+0xc0>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	3301      	adds	r3, #1
 801a506:	4a06      	ldr	r2, [pc, #24]	; (801a520 <vPortFree+0xc0>)
 801a508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a50a:	f7fe fac7 	bl	8018a9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a50e:	bf00      	nop
 801a510:	3718      	adds	r7, #24
 801a512:	46bd      	mov	sp, r7
 801a514:	bd80      	pop	{r7, pc}
 801a516:	bf00      	nop
 801a518:	20007fe0 	.word	0x20007fe0
 801a51c:	20007fd0 	.word	0x20007fd0
 801a520:	20007fdc 	.word	0x20007fdc

0801a524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a524:	b480      	push	{r7}
 801a526:	b085      	sub	sp, #20
 801a528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a52a:	f247 5330 	movw	r3, #30000	; 0x7530
 801a52e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a530:	4b27      	ldr	r3, [pc, #156]	; (801a5d0 <prvHeapInit+0xac>)
 801a532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	f003 0307 	and.w	r3, r3, #7
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d00c      	beq.n	801a558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	3307      	adds	r3, #7
 801a542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	f023 0307 	bic.w	r3, r3, #7
 801a54a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a54c:	68ba      	ldr	r2, [r7, #8]
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	1ad3      	subs	r3, r2, r3
 801a552:	4a1f      	ldr	r2, [pc, #124]	; (801a5d0 <prvHeapInit+0xac>)
 801a554:	4413      	add	r3, r2
 801a556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a55c:	4a1d      	ldr	r2, [pc, #116]	; (801a5d4 <prvHeapInit+0xb0>)
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a562:	4b1c      	ldr	r3, [pc, #112]	; (801a5d4 <prvHeapInit+0xb0>)
 801a564:	2200      	movs	r2, #0
 801a566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	68ba      	ldr	r2, [r7, #8]
 801a56c:	4413      	add	r3, r2
 801a56e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a570:	2208      	movs	r2, #8
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	1a9b      	subs	r3, r3, r2
 801a576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	f023 0307 	bic.w	r3, r3, #7
 801a57e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	4a15      	ldr	r2, [pc, #84]	; (801a5d8 <prvHeapInit+0xb4>)
 801a584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a586:	4b14      	ldr	r3, [pc, #80]	; (801a5d8 <prvHeapInit+0xb4>)
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	2200      	movs	r2, #0
 801a58c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a58e:	4b12      	ldr	r3, [pc, #72]	; (801a5d8 <prvHeapInit+0xb4>)
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	2200      	movs	r2, #0
 801a594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a59a:	683b      	ldr	r3, [r7, #0]
 801a59c:	68fa      	ldr	r2, [r7, #12]
 801a59e:	1ad2      	subs	r2, r2, r3
 801a5a0:	683b      	ldr	r3, [r7, #0]
 801a5a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a5a4:	4b0c      	ldr	r3, [pc, #48]	; (801a5d8 <prvHeapInit+0xb4>)
 801a5a6:	681a      	ldr	r2, [r3, #0]
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	4a0a      	ldr	r2, [pc, #40]	; (801a5dc <prvHeapInit+0xb8>)
 801a5b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5b4:	683b      	ldr	r3, [r7, #0]
 801a5b6:	685b      	ldr	r3, [r3, #4]
 801a5b8:	4a09      	ldr	r2, [pc, #36]	; (801a5e0 <prvHeapInit+0xbc>)
 801a5ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a5bc:	4b09      	ldr	r3, [pc, #36]	; (801a5e4 <prvHeapInit+0xc0>)
 801a5be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a5c2:	601a      	str	r2, [r3, #0]
}
 801a5c4:	bf00      	nop
 801a5c6:	3714      	adds	r7, #20
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ce:	4770      	bx	lr
 801a5d0:	20000a94 	.word	0x20000a94
 801a5d4:	20007fc4 	.word	0x20007fc4
 801a5d8:	20007fcc 	.word	0x20007fcc
 801a5dc:	20007fd4 	.word	0x20007fd4
 801a5e0:	20007fd0 	.word	0x20007fd0
 801a5e4:	20007fe0 	.word	0x20007fe0

0801a5e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a5e8:	b480      	push	{r7}
 801a5ea:	b085      	sub	sp, #20
 801a5ec:	af00      	add	r7, sp, #0
 801a5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a5f0:	4b28      	ldr	r3, [pc, #160]	; (801a694 <prvInsertBlockIntoFreeList+0xac>)
 801a5f2:	60fb      	str	r3, [r7, #12]
 801a5f4:	e002      	b.n	801a5fc <prvInsertBlockIntoFreeList+0x14>
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	60fb      	str	r3, [r7, #12]
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	687a      	ldr	r2, [r7, #4]
 801a602:	429a      	cmp	r2, r3
 801a604:	d8f7      	bhi.n	801a5f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	685b      	ldr	r3, [r3, #4]
 801a60e:	68ba      	ldr	r2, [r7, #8]
 801a610:	4413      	add	r3, r2
 801a612:	687a      	ldr	r2, [r7, #4]
 801a614:	429a      	cmp	r2, r3
 801a616:	d108      	bne.n	801a62a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	685a      	ldr	r2, [r3, #4]
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	685b      	ldr	r3, [r3, #4]
 801a620:	441a      	add	r2, r3
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	685b      	ldr	r3, [r3, #4]
 801a632:	68ba      	ldr	r2, [r7, #8]
 801a634:	441a      	add	r2, r3
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	429a      	cmp	r2, r3
 801a63c:	d118      	bne.n	801a670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	681a      	ldr	r2, [r3, #0]
 801a642:	4b15      	ldr	r3, [pc, #84]	; (801a698 <prvInsertBlockIntoFreeList+0xb0>)
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	429a      	cmp	r2, r3
 801a648:	d00d      	beq.n	801a666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	685a      	ldr	r2, [r3, #4]
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	685b      	ldr	r3, [r3, #4]
 801a654:	441a      	add	r2, r3
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	681a      	ldr	r2, [r3, #0]
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	601a      	str	r2, [r3, #0]
 801a664:	e008      	b.n	801a678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a666:	4b0c      	ldr	r3, [pc, #48]	; (801a698 <prvInsertBlockIntoFreeList+0xb0>)
 801a668:	681a      	ldr	r2, [r3, #0]
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	601a      	str	r2, [r3, #0]
 801a66e:	e003      	b.n	801a678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	681a      	ldr	r2, [r3, #0]
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a678:	68fa      	ldr	r2, [r7, #12]
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	429a      	cmp	r2, r3
 801a67e:	d002      	beq.n	801a686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	687a      	ldr	r2, [r7, #4]
 801a684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a686:	bf00      	nop
 801a688:	3714      	adds	r7, #20
 801a68a:	46bd      	mov	sp, r7
 801a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a690:	4770      	bx	lr
 801a692:	bf00      	nop
 801a694:	20007fc4 	.word	0x20007fc4
 801a698:	20007fcc 	.word	0x20007fcc

0801a69c <ThreadArmingTask>:
extern control_register_struct control_registers;
extern status_register_struct status_registers;
extern volatile uint8_t security_control_temp;

void ThreadArmingTask(void const * argument)
{
 801a69c:	b580      	push	{r7, lr}
 801a69e:	b088      	sub	sp, #32
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	6078      	str	r0, [r7, #4]
	uint16_t arming_time_counter = 0; // счетчик времени процесса постановки на охрану
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	83fb      	strh	r3, [r7, #30]
	uint8_t control_loop_arming = 0; // переменная для сравнения с перечнем контролируемых шлейфов
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	737b      	strb	r3, [r7, #13]

	uint8_t button_state_arm1=0; // переменные состояния шлейфов при процессе постановки на охрану, если переменная примет значение 10, значит шлейф замкнут
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	777b      	strb	r3, [r7, #29]
	uint8_t button_state_arm2=0;
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	773b      	strb	r3, [r7, #28]
	uint8_t button_state_arm3=0;
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	76fb      	strb	r3, [r7, #27]
	uint8_t button_state_arm4=0;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	76bb      	strb	r3, [r7, #26]
	uint8_t button_state_arm5=0;
 801a6bc:	2300      	movs	r3, #0
 801a6be:	767b      	strb	r3, [r7, #25]
	uint8_t button_state_arm6=0;
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	763b      	strb	r3, [r7, #24]
	uint8_t button_state_arm7=0;
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	75fb      	strb	r3, [r7, #23]
	uint8_t button_state_arm8=0;
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	75bb      	strb	r3, [r7, #22]

	uint8_t state_arm1 = 0;
 801a6cc:	2300      	movs	r3, #0
 801a6ce:	757b      	strb	r3, [r7, #21]
	uint8_t state_arm2 = 0;
 801a6d0:	2300      	movs	r3, #0
 801a6d2:	753b      	strb	r3, [r7, #20]
	uint8_t state_arm3 = 0;
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	74fb      	strb	r3, [r7, #19]
	uint8_t state_arm4 = 0;
 801a6d8:	2300      	movs	r3, #0
 801a6da:	74bb      	strb	r3, [r7, #18]
	uint8_t state_arm5 = 0;
 801a6dc:	2300      	movs	r3, #0
 801a6de:	747b      	strb	r3, [r7, #17]
	uint8_t state_arm6 = 0;
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	743b      	strb	r3, [r7, #16]
	uint8_t state_arm7 = 0;
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	73fb      	strb	r3, [r7, #15]
	uint8_t state_arm8 = 0;
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	73bb      	strb	r3, [r7, #14]


	for(;;)
	{

		if( status_registers.security_status_reg == ARMING_PROCESS ) // если запущен процесс потановки на охрану
 801a6ec:	4bae      	ldr	r3, [pc, #696]	; (801a9a8 <ThreadArmingTask+0x30c>)
 801a6ee:	885b      	ldrh	r3, [r3, #2]
 801a6f0:	2b06      	cmp	r3, #6
 801a6f2:	f040 828f 	bne.w	801ac14 <ThreadArmingTask+0x578>
		{
			//----Контроль шлейфа №1--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x01) != 0x00 ) )
 801a6f6:	2104      	movs	r1, #4
 801a6f8:	48ac      	ldr	r0, [pc, #688]	; (801a9ac <ThreadArmingTask+0x310>)
 801a6fa:	f7f8 fd53 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a6fe:	4603      	mov	r3, r0
 801a700:	2b01      	cmp	r3, #1
 801a702:	d112      	bne.n	801a72a <ThreadArmingTask+0x8e>
 801a704:	4baa      	ldr	r3, [pc, #680]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a706:	885b      	ldrh	r3, [r3, #2]
 801a708:	f003 0301 	and.w	r3, r3, #1
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d00c      	beq.n	801a72a <ThreadArmingTask+0x8e>
			{
				if(button_state_arm1<10){button_state_arm1++;}
 801a710:	7f7b      	ldrb	r3, [r7, #29]
 801a712:	2b09      	cmp	r3, #9
 801a714:	d803      	bhi.n	801a71e <ThreadArmingTask+0x82>
 801a716:	7f7b      	ldrb	r3, [r7, #29]
 801a718:	3301      	adds	r3, #1
 801a71a:	777b      	strb	r3, [r7, #29]
 801a71c:	e01a      	b.n	801a754 <ThreadArmingTask+0xb8>
				else if(button_state_arm1>=10){state_arm1=1;}
 801a71e:	7f7b      	ldrb	r3, [r7, #29]
 801a720:	2b09      	cmp	r3, #9
 801a722:	d917      	bls.n	801a754 <ThreadArmingTask+0xb8>
 801a724:	2301      	movs	r3, #1
 801a726:	757b      	strb	r3, [r7, #21]
				if(button_state_arm1<10){button_state_arm1++;}
 801a728:	e014      	b.n	801a754 <ThreadArmingTask+0xb8>

			}
			else if( (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x01) != 0x00 ) )
 801a72a:	2104      	movs	r1, #4
 801a72c:	489f      	ldr	r0, [pc, #636]	; (801a9ac <ThreadArmingTask+0x310>)
 801a72e:	f7f8 fd39 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a732:	4603      	mov	r3, r0
 801a734:	2b00      	cmp	r3, #0
 801a736:	d10e      	bne.n	801a756 <ThreadArmingTask+0xba>
 801a738:	4b9d      	ldr	r3, [pc, #628]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a73a:	885b      	ldrh	r3, [r3, #2]
 801a73c:	f003 0301 	and.w	r3, r3, #1
 801a740:	2b00      	cmp	r3, #0
 801a742:	d008      	beq.n	801a756 <ThreadArmingTask+0xba>
			{
				if(button_state_arm1>0){button_state_arm1=0; state_arm1=0;}
 801a744:	7f7b      	ldrb	r3, [r7, #29]
 801a746:	2b00      	cmp	r3, #0
 801a748:	d005      	beq.n	801a756 <ThreadArmingTask+0xba>
 801a74a:	2300      	movs	r3, #0
 801a74c:	777b      	strb	r3, [r7, #29]
 801a74e:	2300      	movs	r3, #0
 801a750:	757b      	strb	r3, [r7, #21]
 801a752:	e000      	b.n	801a756 <ThreadArmingTask+0xba>
				if(button_state_arm1<10){button_state_arm1++;}
 801a754:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №2--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x02) != 0x00 ) )
 801a756:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801a75a:	4896      	ldr	r0, [pc, #600]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a75c:	f7f8 fd22 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a760:	4603      	mov	r3, r0
 801a762:	2b01      	cmp	r3, #1
 801a764:	d112      	bne.n	801a78c <ThreadArmingTask+0xf0>
 801a766:	4b92      	ldr	r3, [pc, #584]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a768:	885b      	ldrh	r3, [r3, #2]
 801a76a:	f003 0302 	and.w	r3, r3, #2
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d00c      	beq.n	801a78c <ThreadArmingTask+0xf0>
			{
				if(button_state_arm2<10){button_state_arm2++;}
 801a772:	7f3b      	ldrb	r3, [r7, #28]
 801a774:	2b09      	cmp	r3, #9
 801a776:	d803      	bhi.n	801a780 <ThreadArmingTask+0xe4>
 801a778:	7f3b      	ldrb	r3, [r7, #28]
 801a77a:	3301      	adds	r3, #1
 801a77c:	773b      	strb	r3, [r7, #28]
 801a77e:	e01b      	b.n	801a7b8 <ThreadArmingTask+0x11c>
				else if(button_state_arm2>=10){state_arm2=1;}
 801a780:	7f3b      	ldrb	r3, [r7, #28]
 801a782:	2b09      	cmp	r3, #9
 801a784:	d918      	bls.n	801a7b8 <ThreadArmingTask+0x11c>
 801a786:	2301      	movs	r3, #1
 801a788:	753b      	strb	r3, [r7, #20]
				if(button_state_arm2<10){button_state_arm2++;}
 801a78a:	e015      	b.n	801a7b8 <ThreadArmingTask+0x11c>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x02) != 0x00 ) )
 801a78c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801a790:	4888      	ldr	r0, [pc, #544]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a792:	f7f8 fd07 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a796:	4603      	mov	r3, r0
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d10e      	bne.n	801a7ba <ThreadArmingTask+0x11e>
 801a79c:	4b84      	ldr	r3, [pc, #528]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a79e:	885b      	ldrh	r3, [r3, #2]
 801a7a0:	f003 0302 	and.w	r3, r3, #2
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d008      	beq.n	801a7ba <ThreadArmingTask+0x11e>
			{
				if(button_state_arm2>0){button_state_arm2=0; state_arm2=0;}
 801a7a8:	7f3b      	ldrb	r3, [r7, #28]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d005      	beq.n	801a7ba <ThreadArmingTask+0x11e>
 801a7ae:	2300      	movs	r3, #0
 801a7b0:	773b      	strb	r3, [r7, #28]
 801a7b2:	2300      	movs	r3, #0
 801a7b4:	753b      	strb	r3, [r7, #20]
 801a7b6:	e000      	b.n	801a7ba <ThreadArmingTask+0x11e>
				if(button_state_arm2<10){button_state_arm2++;}
 801a7b8:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №3--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x04) != 0x00 ) )
 801a7ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801a7be:	487d      	ldr	r0, [pc, #500]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a7c0:	f7f8 fcf0 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a7c4:	4603      	mov	r3, r0
 801a7c6:	2b01      	cmp	r3, #1
 801a7c8:	d112      	bne.n	801a7f0 <ThreadArmingTask+0x154>
 801a7ca:	4b79      	ldr	r3, [pc, #484]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a7cc:	885b      	ldrh	r3, [r3, #2]
 801a7ce:	f003 0304 	and.w	r3, r3, #4
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d00c      	beq.n	801a7f0 <ThreadArmingTask+0x154>
			{
				if(button_state_arm3<10){button_state_arm3++;}
 801a7d6:	7efb      	ldrb	r3, [r7, #27]
 801a7d8:	2b09      	cmp	r3, #9
 801a7da:	d803      	bhi.n	801a7e4 <ThreadArmingTask+0x148>
 801a7dc:	7efb      	ldrb	r3, [r7, #27]
 801a7de:	3301      	adds	r3, #1
 801a7e0:	76fb      	strb	r3, [r7, #27]
 801a7e2:	e01b      	b.n	801a81c <ThreadArmingTask+0x180>
				else if(button_state_arm3>=10){state_arm3=1;}
 801a7e4:	7efb      	ldrb	r3, [r7, #27]
 801a7e6:	2b09      	cmp	r3, #9
 801a7e8:	d918      	bls.n	801a81c <ThreadArmingTask+0x180>
 801a7ea:	2301      	movs	r3, #1
 801a7ec:	74fb      	strb	r3, [r7, #19]
				if(button_state_arm3<10){button_state_arm3++;}
 801a7ee:	e015      	b.n	801a81c <ThreadArmingTask+0x180>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x04) != 0x00 ) )
 801a7f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801a7f4:	486f      	ldr	r0, [pc, #444]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a7f6:	f7f8 fcd5 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a7fa:	4603      	mov	r3, r0
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d10e      	bne.n	801a81e <ThreadArmingTask+0x182>
 801a800:	4b6b      	ldr	r3, [pc, #428]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a802:	885b      	ldrh	r3, [r3, #2]
 801a804:	f003 0304 	and.w	r3, r3, #4
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d008      	beq.n	801a81e <ThreadArmingTask+0x182>
			{
				if(button_state_arm3>0){button_state_arm3=0; state_arm3=0;}
 801a80c:	7efb      	ldrb	r3, [r7, #27]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d005      	beq.n	801a81e <ThreadArmingTask+0x182>
 801a812:	2300      	movs	r3, #0
 801a814:	76fb      	strb	r3, [r7, #27]
 801a816:	2300      	movs	r3, #0
 801a818:	74fb      	strb	r3, [r7, #19]
 801a81a:	e000      	b.n	801a81e <ThreadArmingTask+0x182>
				if(button_state_arm3<10){button_state_arm3++;}
 801a81c:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №4--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x08) != 0x00 ) )
 801a81e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801a822:	4864      	ldr	r0, [pc, #400]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a824:	f7f8 fcbe 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a828:	4603      	mov	r3, r0
 801a82a:	2b01      	cmp	r3, #1
 801a82c:	d112      	bne.n	801a854 <ThreadArmingTask+0x1b8>
 801a82e:	4b60      	ldr	r3, [pc, #384]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a830:	885b      	ldrh	r3, [r3, #2]
 801a832:	f003 0308 	and.w	r3, r3, #8
 801a836:	2b00      	cmp	r3, #0
 801a838:	d00c      	beq.n	801a854 <ThreadArmingTask+0x1b8>
			{
				if(button_state_arm4<10){button_state_arm4++;}
 801a83a:	7ebb      	ldrb	r3, [r7, #26]
 801a83c:	2b09      	cmp	r3, #9
 801a83e:	d803      	bhi.n	801a848 <ThreadArmingTask+0x1ac>
 801a840:	7ebb      	ldrb	r3, [r7, #26]
 801a842:	3301      	adds	r3, #1
 801a844:	76bb      	strb	r3, [r7, #26]
 801a846:	e01b      	b.n	801a880 <ThreadArmingTask+0x1e4>
				else if(button_state_arm4>=10){state_arm4=1;}
 801a848:	7ebb      	ldrb	r3, [r7, #26]
 801a84a:	2b09      	cmp	r3, #9
 801a84c:	d918      	bls.n	801a880 <ThreadArmingTask+0x1e4>
 801a84e:	2301      	movs	r3, #1
 801a850:	74bb      	strb	r3, [r7, #18]
				if(button_state_arm4<10){button_state_arm4++;}
 801a852:	e015      	b.n	801a880 <ThreadArmingTask+0x1e4>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x08) != 0x00 ) )
 801a854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801a858:	4856      	ldr	r0, [pc, #344]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a85a:	f7f8 fca3 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a85e:	4603      	mov	r3, r0
 801a860:	2b00      	cmp	r3, #0
 801a862:	d10e      	bne.n	801a882 <ThreadArmingTask+0x1e6>
 801a864:	4b52      	ldr	r3, [pc, #328]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a866:	885b      	ldrh	r3, [r3, #2]
 801a868:	f003 0308 	and.w	r3, r3, #8
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d008      	beq.n	801a882 <ThreadArmingTask+0x1e6>
			{
				if(button_state_arm4>0){button_state_arm4=0; state_arm4=0;}
 801a870:	7ebb      	ldrb	r3, [r7, #26]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d005      	beq.n	801a882 <ThreadArmingTask+0x1e6>
 801a876:	2300      	movs	r3, #0
 801a878:	76bb      	strb	r3, [r7, #26]
 801a87a:	2300      	movs	r3, #0
 801a87c:	74bb      	strb	r3, [r7, #18]
 801a87e:	e000      	b.n	801a882 <ThreadArmingTask+0x1e6>
				if(button_state_arm4<10){button_state_arm4++;}
 801a880:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №5--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x10) != 0x00 ) )
 801a882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801a886:	484b      	ldr	r0, [pc, #300]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a888:	f7f8 fc8c 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a88c:	4603      	mov	r3, r0
 801a88e:	2b01      	cmp	r3, #1
 801a890:	d112      	bne.n	801a8b8 <ThreadArmingTask+0x21c>
 801a892:	4b47      	ldr	r3, [pc, #284]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a894:	885b      	ldrh	r3, [r3, #2]
 801a896:	f003 0310 	and.w	r3, r3, #16
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d00c      	beq.n	801a8b8 <ThreadArmingTask+0x21c>
			{
				if(button_state_arm5<10){button_state_arm5++;}
 801a89e:	7e7b      	ldrb	r3, [r7, #25]
 801a8a0:	2b09      	cmp	r3, #9
 801a8a2:	d803      	bhi.n	801a8ac <ThreadArmingTask+0x210>
 801a8a4:	7e7b      	ldrb	r3, [r7, #25]
 801a8a6:	3301      	adds	r3, #1
 801a8a8:	767b      	strb	r3, [r7, #25]
 801a8aa:	e01b      	b.n	801a8e4 <ThreadArmingTask+0x248>
				else if(button_state_arm5>=10){state_arm5=1;}
 801a8ac:	7e7b      	ldrb	r3, [r7, #25]
 801a8ae:	2b09      	cmp	r3, #9
 801a8b0:	d918      	bls.n	801a8e4 <ThreadArmingTask+0x248>
 801a8b2:	2301      	movs	r3, #1
 801a8b4:	747b      	strb	r3, [r7, #17]
				if(button_state_arm5<10){button_state_arm5++;}
 801a8b6:	e015      	b.n	801a8e4 <ThreadArmingTask+0x248>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x10) != 0x00 ) )
 801a8b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801a8bc:	483d      	ldr	r0, [pc, #244]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a8be:	f7f8 fc71 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d10e      	bne.n	801a8e6 <ThreadArmingTask+0x24a>
 801a8c8:	4b39      	ldr	r3, [pc, #228]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a8ca:	885b      	ldrh	r3, [r3, #2]
 801a8cc:	f003 0310 	and.w	r3, r3, #16
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d008      	beq.n	801a8e6 <ThreadArmingTask+0x24a>
			{
				if(button_state_arm5>0){button_state_arm5=0; state_arm5=0;}
 801a8d4:	7e7b      	ldrb	r3, [r7, #25]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d005      	beq.n	801a8e6 <ThreadArmingTask+0x24a>
 801a8da:	2300      	movs	r3, #0
 801a8dc:	767b      	strb	r3, [r7, #25]
 801a8de:	2300      	movs	r3, #0
 801a8e0:	747b      	strb	r3, [r7, #17]
 801a8e2:	e000      	b.n	801a8e6 <ThreadArmingTask+0x24a>
				if(button_state_arm5<10){button_state_arm5++;}
 801a8e4:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №6--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x20) != 0x00 ) )
 801a8e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801a8ea:	4832      	ldr	r0, [pc, #200]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a8ec:	f7f8 fc5a 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a8f0:	4603      	mov	r3, r0
 801a8f2:	2b01      	cmp	r3, #1
 801a8f4:	d112      	bne.n	801a91c <ThreadArmingTask+0x280>
 801a8f6:	4b2e      	ldr	r3, [pc, #184]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a8f8:	885b      	ldrh	r3, [r3, #2]
 801a8fa:	f003 0320 	and.w	r3, r3, #32
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d00c      	beq.n	801a91c <ThreadArmingTask+0x280>
			{
				if(button_state_arm6<10){button_state_arm6++;}
 801a902:	7e3b      	ldrb	r3, [r7, #24]
 801a904:	2b09      	cmp	r3, #9
 801a906:	d803      	bhi.n	801a910 <ThreadArmingTask+0x274>
 801a908:	7e3b      	ldrb	r3, [r7, #24]
 801a90a:	3301      	adds	r3, #1
 801a90c:	763b      	strb	r3, [r7, #24]
 801a90e:	e01b      	b.n	801a948 <ThreadArmingTask+0x2ac>
				else if(button_state_arm6>=10){state_arm6=1;}
 801a910:	7e3b      	ldrb	r3, [r7, #24]
 801a912:	2b09      	cmp	r3, #9
 801a914:	d918      	bls.n	801a948 <ThreadArmingTask+0x2ac>
 801a916:	2301      	movs	r3, #1
 801a918:	743b      	strb	r3, [r7, #16]
				if(button_state_arm6<10){button_state_arm6++;}
 801a91a:	e015      	b.n	801a948 <ThreadArmingTask+0x2ac>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x20) != 0x00 ) )
 801a91c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801a920:	4824      	ldr	r0, [pc, #144]	; (801a9b4 <ThreadArmingTask+0x318>)
 801a922:	f7f8 fc3f 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a926:	4603      	mov	r3, r0
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d10e      	bne.n	801a94a <ThreadArmingTask+0x2ae>
 801a92c:	4b20      	ldr	r3, [pc, #128]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a92e:	885b      	ldrh	r3, [r3, #2]
 801a930:	f003 0320 	and.w	r3, r3, #32
 801a934:	2b00      	cmp	r3, #0
 801a936:	d008      	beq.n	801a94a <ThreadArmingTask+0x2ae>
			{
				if(button_state_arm6>0){button_state_arm6=0; state_arm6=0;}
 801a938:	7e3b      	ldrb	r3, [r7, #24]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d005      	beq.n	801a94a <ThreadArmingTask+0x2ae>
 801a93e:	2300      	movs	r3, #0
 801a940:	763b      	strb	r3, [r7, #24]
 801a942:	2300      	movs	r3, #0
 801a944:	743b      	strb	r3, [r7, #16]
 801a946:	e000      	b.n	801a94a <ThreadArmingTask+0x2ae>
				if(button_state_arm6<10){button_state_arm6++;}
 801a948:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №7--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x40) != 0x00 ) )
 801a94a:	2101      	movs	r1, #1
 801a94c:	481a      	ldr	r0, [pc, #104]	; (801a9b8 <ThreadArmingTask+0x31c>)
 801a94e:	f7f8 fc29 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a952:	4603      	mov	r3, r0
 801a954:	2b01      	cmp	r3, #1
 801a956:	d112      	bne.n	801a97e <ThreadArmingTask+0x2e2>
 801a958:	4b15      	ldr	r3, [pc, #84]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a95a:	885b      	ldrh	r3, [r3, #2]
 801a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a960:	2b00      	cmp	r3, #0
 801a962:	d00c      	beq.n	801a97e <ThreadArmingTask+0x2e2>
			{
				if(button_state_arm7<10){button_state_arm7++;}
 801a964:	7dfb      	ldrb	r3, [r7, #23]
 801a966:	2b09      	cmp	r3, #9
 801a968:	d803      	bhi.n	801a972 <ThreadArmingTask+0x2d6>
 801a96a:	7dfb      	ldrb	r3, [r7, #23]
 801a96c:	3301      	adds	r3, #1
 801a96e:	75fb      	strb	r3, [r7, #23]
 801a970:	e024      	b.n	801a9bc <ThreadArmingTask+0x320>
				else if(button_state_arm7>=10){state_arm7=1;}
 801a972:	7dfb      	ldrb	r3, [r7, #23]
 801a974:	2b09      	cmp	r3, #9
 801a976:	d921      	bls.n	801a9bc <ThreadArmingTask+0x320>
 801a978:	2301      	movs	r3, #1
 801a97a:	73fb      	strb	r3, [r7, #15]
				if(button_state_arm7<10){button_state_arm7++;}
 801a97c:	e01e      	b.n	801a9bc <ThreadArmingTask+0x320>
			}
			else if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x40) != 0x00 ) )
 801a97e:	2101      	movs	r1, #1
 801a980:	480d      	ldr	r0, [pc, #52]	; (801a9b8 <ThreadArmingTask+0x31c>)
 801a982:	f7f8 fc0f 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a986:	4603      	mov	r3, r0
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d118      	bne.n	801a9be <ThreadArmingTask+0x322>
 801a98c:	4b08      	ldr	r3, [pc, #32]	; (801a9b0 <ThreadArmingTask+0x314>)
 801a98e:	885b      	ldrh	r3, [r3, #2]
 801a990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a994:	2b00      	cmp	r3, #0
 801a996:	d012      	beq.n	801a9be <ThreadArmingTask+0x322>
			{
				if(button_state_arm7>0){button_state_arm7=0; state_arm7=0;}
 801a998:	7dfb      	ldrb	r3, [r7, #23]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d00f      	beq.n	801a9be <ThreadArmingTask+0x322>
 801a99e:	2300      	movs	r3, #0
 801a9a0:	75fb      	strb	r3, [r7, #23]
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	73fb      	strb	r3, [r7, #15]
 801a9a6:	e00a      	b.n	801a9be <ThreadArmingTask+0x322>
 801a9a8:	2000a10c 	.word	0x2000a10c
 801a9ac:	40020400 	.word	0x40020400
 801a9b0:	2000a1cc 	.word	0x2000a1cc
 801a9b4:	40021400 	.word	0x40021400
 801a9b8:	40021800 	.word	0x40021800
				if(button_state_arm7<10){button_state_arm7++;}
 801a9bc:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №8--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x80) != 0x00 ) )
 801a9be:	2102      	movs	r1, #2
 801a9c0:	4896      	ldr	r0, [pc, #600]	; (801ac1c <ThreadArmingTask+0x580>)
 801a9c2:	f7f8 fbef 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	2b01      	cmp	r3, #1
 801a9ca:	d112      	bne.n	801a9f2 <ThreadArmingTask+0x356>
 801a9cc:	4b94      	ldr	r3, [pc, #592]	; (801ac20 <ThreadArmingTask+0x584>)
 801a9ce:	885b      	ldrh	r3, [r3, #2]
 801a9d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d00c      	beq.n	801a9f2 <ThreadArmingTask+0x356>
			{
				if(button_state_arm8<10){button_state_arm8++;}
 801a9d8:	7dbb      	ldrb	r3, [r7, #22]
 801a9da:	2b09      	cmp	r3, #9
 801a9dc:	d803      	bhi.n	801a9e6 <ThreadArmingTask+0x34a>
 801a9de:	7dbb      	ldrb	r3, [r7, #22]
 801a9e0:	3301      	adds	r3, #1
 801a9e2:	75bb      	strb	r3, [r7, #22]
 801a9e4:	e01a      	b.n	801aa1c <ThreadArmingTask+0x380>
				else if(button_state_arm8>=10){state_arm8=1;}
 801a9e6:	7dbb      	ldrb	r3, [r7, #22]
 801a9e8:	2b09      	cmp	r3, #9
 801a9ea:	d917      	bls.n	801aa1c <ThreadArmingTask+0x380>
 801a9ec:	2301      	movs	r3, #1
 801a9ee:	73bb      	strb	r3, [r7, #14]
				if(button_state_arm8<10){button_state_arm8++;}
 801a9f0:	e014      	b.n	801aa1c <ThreadArmingTask+0x380>
			}
			else if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x80) != 0x00 ) )
 801a9f2:	2102      	movs	r1, #2
 801a9f4:	4889      	ldr	r0, [pc, #548]	; (801ac1c <ThreadArmingTask+0x580>)
 801a9f6:	f7f8 fbd5 	bl	80131a4 <HAL_GPIO_ReadPin>
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d10e      	bne.n	801aa1e <ThreadArmingTask+0x382>
 801aa00:	4b87      	ldr	r3, [pc, #540]	; (801ac20 <ThreadArmingTask+0x584>)
 801aa02:	885b      	ldrh	r3, [r3, #2]
 801aa04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d008      	beq.n	801aa1e <ThreadArmingTask+0x382>
			{
				if(button_state_arm8>0){button_state_arm8=0; state_arm8=0;}
 801aa0c:	7dbb      	ldrb	r3, [r7, #22]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d005      	beq.n	801aa1e <ThreadArmingTask+0x382>
 801aa12:	2300      	movs	r3, #0
 801aa14:	75bb      	strb	r3, [r7, #22]
 801aa16:	2300      	movs	r3, #0
 801aa18:	73bb      	strb	r3, [r7, #14]
 801aa1a:	e000      	b.n	801aa1e <ThreadArmingTask+0x382>
				if(button_state_arm8<10){button_state_arm8++;}
 801aa1c:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			arming_time_counter++;
 801aa1e:	8bfb      	ldrh	r3, [r7, #30]
 801aa20:	3301      	adds	r3, #1
 801aa22:	83fb      	strh	r3, [r7, #30]
			if( arming_time_counter > control_registers.arming_timeleft_reg)
 801aa24:	4b7e      	ldr	r3, [pc, #504]	; (801ac20 <ThreadArmingTask+0x584>)
 801aa26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801aa2a:	8bfa      	ldrh	r2, [r7, #30]
 801aa2c:	429a      	cmp	r2, r3
 801aa2e:	f240 80f1 	bls.w	801ac14 <ThreadArmingTask+0x578>
			{
				arming_time_counter = 0;
 801aa32:	2300      	movs	r3, #0
 801aa34:	83fb      	strh	r3, [r7, #30]
				control_loop_arming = 0;
 801aa36:	2300      	movs	r3, #0
 801aa38:	737b      	strb	r3, [r7, #13]
				control_loop_arming = state_arm1|(state_arm2<<1)|(state_arm3<<2)|(state_arm4<<3)|(state_arm5<<4)|(state_arm6<<5)|(state_arm7<<6)|(state_arm8<<7);
 801aa3a:	7d3b      	ldrb	r3, [r7, #20]
 801aa3c:	005b      	lsls	r3, r3, #1
 801aa3e:	b25a      	sxtb	r2, r3
 801aa40:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801aa44:	4313      	orrs	r3, r2
 801aa46:	b25a      	sxtb	r2, r3
 801aa48:	7cfb      	ldrb	r3, [r7, #19]
 801aa4a:	009b      	lsls	r3, r3, #2
 801aa4c:	b25b      	sxtb	r3, r3
 801aa4e:	4313      	orrs	r3, r2
 801aa50:	b25a      	sxtb	r2, r3
 801aa52:	7cbb      	ldrb	r3, [r7, #18]
 801aa54:	00db      	lsls	r3, r3, #3
 801aa56:	b25b      	sxtb	r3, r3
 801aa58:	4313      	orrs	r3, r2
 801aa5a:	b25a      	sxtb	r2, r3
 801aa5c:	7c7b      	ldrb	r3, [r7, #17]
 801aa5e:	011b      	lsls	r3, r3, #4
 801aa60:	b25b      	sxtb	r3, r3
 801aa62:	4313      	orrs	r3, r2
 801aa64:	b25a      	sxtb	r2, r3
 801aa66:	7c3b      	ldrb	r3, [r7, #16]
 801aa68:	015b      	lsls	r3, r3, #5
 801aa6a:	b25b      	sxtb	r3, r3
 801aa6c:	4313      	orrs	r3, r2
 801aa6e:	b25a      	sxtb	r2, r3
 801aa70:	7bfb      	ldrb	r3, [r7, #15]
 801aa72:	019b      	lsls	r3, r3, #6
 801aa74:	b25b      	sxtb	r3, r3
 801aa76:	4313      	orrs	r3, r2
 801aa78:	b25a      	sxtb	r2, r3
 801aa7a:	7bbb      	ldrb	r3, [r7, #14]
 801aa7c:	01db      	lsls	r3, r3, #7
 801aa7e:	b25b      	sxtb	r3, r3
 801aa80:	4313      	orrs	r3, r2
 801aa82:	b25b      	sxtb	r3, r3
 801aa84:	737b      	strb	r3, [r7, #13]
				if( control_loop_arming == control_registers.control_loop_reg)
 801aa86:	7b7b      	ldrb	r3, [r7, #13]
 801aa88:	b29a      	uxth	r2, r3
 801aa8a:	4b65      	ldr	r3, [pc, #404]	; (801ac20 <ThreadArmingTask+0x584>)
 801aa8c:	885b      	ldrh	r3, [r3, #2]
 801aa8e:	429a      	cmp	r2, r3
 801aa90:	d160      	bne.n	801ab54 <ThreadArmingTask+0x4b8>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801aa92:	4b64      	ldr	r3, [pc, #400]	; (801ac24 <ThreadArmingTask+0x588>)
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	f04f 31ff 	mov.w	r1, #4294967295
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	f7fc f900 	bl	8016ca0 <osMutexWait>
					fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 801aaa0:	2100      	movs	r1, #0
 801aaa2:	f242 1020 	movw	r0, #8480	; 0x2120
 801aaa6:	f00a fccd 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 801aaaa:	2100      	movs	r1, #0
 801aaac:	f242 1021 	movw	r0, #8481	; 0x2121
 801aab0:	f00a fcc8 	bl	8025444 <fm25v02_write>
					control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT;
 801aab4:	4b5a      	ldr	r3, [pc, #360]	; (801ac20 <ThreadArmingTask+0x584>)
 801aab6:	2200      	movs	r2, #0
 801aab8:	801a      	strh	r2, [r3, #0]
					fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801aaba:	2100      	movs	r1, #0
 801aabc:	f242 0002 	movw	r0, #8194	; 0x2002
 801aac0:	f00a fcc0 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*SECURITY_STATUS_REG+1, security_control_temp);
 801aac4:	4b58      	ldr	r3, [pc, #352]	; (801ac28 <ThreadArmingTask+0x58c>)
 801aac6:	781b      	ldrb	r3, [r3, #0]
 801aac8:	b2db      	uxtb	r3, r3
 801aaca:	4619      	mov	r1, r3
 801aacc:	f242 0003 	movw	r0, #8195	; 0x2003
 801aad0:	f00a fcb8 	bl	8025444 <fm25v02_write>
					status_registers.security_status_reg = security_control_temp;
 801aad4:	4b54      	ldr	r3, [pc, #336]	; (801ac28 <ThreadArmingTask+0x58c>)
 801aad6:	781b      	ldrb	r3, [r3, #0]
 801aad8:	b2db      	uxtb	r3, r3
 801aada:	b29a      	uxth	r2, r3
 801aadc:	4b53      	ldr	r3, [pc, #332]	; (801ac2c <ThreadArmingTask+0x590>)
 801aade:	805a      	strh	r2, [r3, #2]
					osMutexRelease(Fm25v02MutexHandle);
 801aae0:	4b50      	ldr	r3, [pc, #320]	; (801ac24 <ThreadArmingTask+0x588>)
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	4618      	mov	r0, r3
 801aae6:	f7fc f929 	bl	8016d3c <osMutexRelease>

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801aaea:	4b4e      	ldr	r3, [pc, #312]	; (801ac24 <ThreadArmingTask+0x588>)
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	f04f 31ff 	mov.w	r1, #4294967295
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	f7fc f8d4 	bl	8016ca0 <osMutexWait>
					fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801aaf8:	2100      	movs	r1, #0
 801aafa:	f242 106e 	movw	r0, #8558	; 0x216e
 801aafe:	f00a fca1 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801ab02:	2101      	movs	r1, #1
 801ab04:	f242 106f 	movw	r0, #8559	; 0x216f
 801ab08:	f00a fc9c 	bl	8025444 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 801ab0c:	4b45      	ldr	r3, [pc, #276]	; (801ac24 <ThreadArmingTask+0x588>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	4618      	mov	r0, r3
 801ab12:	f7fc f913 	bl	8016d3c <osMutexRelease>

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ab16:	4b43      	ldr	r3, [pc, #268]	; (801ac24 <ThreadArmingTask+0x588>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	f04f 31ff 	mov.w	r1, #4294967295
 801ab1e:	4618      	mov	r0, r3
 801ab20:	f7fc f8be 	bl	8016ca0 <osMutexWait>
					fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801ab24:	2100      	movs	r1, #0
 801ab26:	f242 0020 	movw	r0, #8224	; 0x2020
 801ab2a:	f00a fc8b 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*SYSTEM_STATUS_REG+1, TURN_ON_STATE_ALARM);
 801ab2e:	2106      	movs	r1, #6
 801ab30:	f242 0021 	movw	r0, #8225	; 0x2021
 801ab34:	f00a fc86 	bl	8025444 <fm25v02_write>
					status_registers.system_status_reg = TURN_ON_STATE_ALARM;
 801ab38:	4b3c      	ldr	r3, [pc, #240]	; (801ac2c <ThreadArmingTask+0x590>)
 801ab3a:	2206      	movs	r2, #6
 801ab3c:	841a      	strh	r2, [r3, #32]
					osMutexRelease(Fm25v02MutexHandle);
 801ab3e:	4b39      	ldr	r3, [pc, #228]	; (801ac24 <ThreadArmingTask+0x588>)
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	4618      	mov	r0, r3
 801ab44:	f7fc f8fa 	bl	8016d3c <osMutexRelease>

					osThreadResume(EventWriteTaskHandle);
 801ab48:	4b39      	ldr	r3, [pc, #228]	; (801ac30 <ThreadArmingTask+0x594>)
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	f7fc fad7 	bl	8017100 <osThreadResume>
 801ab52:	e05f      	b.n	801ac14 <ThreadArmingTask+0x578>
				}
				else if( control_loop_arming != control_registers.control_loop_reg)
 801ab54:	7b7b      	ldrb	r3, [r7, #13]
 801ab56:	b29a      	uxth	r2, r3
 801ab58:	4b31      	ldr	r3, [pc, #196]	; (801ac20 <ThreadArmingTask+0x584>)
 801ab5a:	885b      	ldrh	r3, [r3, #2]
 801ab5c:	429a      	cmp	r2, r3
 801ab5e:	d059      	beq.n	801ac14 <ThreadArmingTask+0x578>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ab60:	4b30      	ldr	r3, [pc, #192]	; (801ac24 <ThreadArmingTask+0x588>)
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	f04f 31ff 	mov.w	r1, #4294967295
 801ab68:	4618      	mov	r0, r3
 801ab6a:	f7fc f899 	bl	8016ca0 <osMutexWait>
					fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 801ab6e:	2100      	movs	r1, #0
 801ab70:	f242 1020 	movw	r0, #8480	; 0x2120
 801ab74:	f00a fc66 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 801ab78:	2100      	movs	r1, #0
 801ab7a:	f242 1021 	movw	r0, #8481	; 0x2121
 801ab7e:	f00a fc61 	bl	8025444 <fm25v02_write>
					control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT;
 801ab82:	4b27      	ldr	r3, [pc, #156]	; (801ac20 <ThreadArmingTask+0x584>)
 801ab84:	2200      	movs	r2, #0
 801ab86:	801a      	strh	r2, [r3, #0]
					fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801ab88:	2100      	movs	r1, #0
 801ab8a:	f242 0002 	movw	r0, #8194	; 0x2002
 801ab8e:	f00a fc59 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*SECURITY_STATUS_REG+1, ARMING_ERROR);
 801ab92:	2107      	movs	r1, #7
 801ab94:	f242 0003 	movw	r0, #8195	; 0x2003
 801ab98:	f00a fc54 	bl	8025444 <fm25v02_write>
					status_registers.security_status_reg = ARMING_ERROR;
 801ab9c:	4b23      	ldr	r3, [pc, #140]	; (801ac2c <ThreadArmingTask+0x590>)
 801ab9e:	2207      	movs	r2, #7
 801aba0:	805a      	strh	r2, [r3, #2]
					osMutexRelease(Fm25v02MutexHandle);
 801aba2:	4b20      	ldr	r3, [pc, #128]	; (801ac24 <ThreadArmingTask+0x588>)
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	4618      	mov	r0, r3
 801aba8:	f7fc f8c8 	bl	8016d3c <osMutexRelease>

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801abac:	4b1d      	ldr	r3, [pc, #116]	; (801ac24 <ThreadArmingTask+0x588>)
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	f04f 31ff 	mov.w	r1, #4294967295
 801abb4:	4618      	mov	r0, r3
 801abb6:	f7fc f873 	bl	8016ca0 <osMutexWait>
					fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801abba:	2100      	movs	r1, #0
 801abbc:	f242 106e 	movw	r0, #8558	; 0x216e
 801abc0:	f00a fc40 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801abc4:	2101      	movs	r1, #1
 801abc6:	f242 106f 	movw	r0, #8559	; 0x216f
 801abca:	f00a fc3b 	bl	8025444 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 801abce:	4b15      	ldr	r3, [pc, #84]	; (801ac24 <ThreadArmingTask+0x588>)
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	4618      	mov	r0, r3
 801abd4:	f7fc f8b2 	bl	8016d3c <osMutexRelease>

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801abd8:	4b12      	ldr	r3, [pc, #72]	; (801ac24 <ThreadArmingTask+0x588>)
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	f04f 31ff 	mov.w	r1, #4294967295
 801abe0:	4618      	mov	r0, r3
 801abe2:	f7fc f85d 	bl	8016ca0 <osMutexWait>
					fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801abe6:	2100      	movs	r1, #0
 801abe8:	f242 0020 	movw	r0, #8224	; 0x2020
 801abec:	f00a fc2a 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*SYSTEM_STATUS_REG+1, TURN_ON_ALARM_ERROR);
 801abf0:	2108      	movs	r1, #8
 801abf2:	f242 0021 	movw	r0, #8225	; 0x2021
 801abf6:	f00a fc25 	bl	8025444 <fm25v02_write>
					status_registers.system_status_reg = TURN_ON_ALARM_ERROR;
 801abfa:	4b0c      	ldr	r3, [pc, #48]	; (801ac2c <ThreadArmingTask+0x590>)
 801abfc:	2208      	movs	r2, #8
 801abfe:	841a      	strh	r2, [r3, #32]
					osMutexRelease(Fm25v02MutexHandle);
 801ac00:	4b08      	ldr	r3, [pc, #32]	; (801ac24 <ThreadArmingTask+0x588>)
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	4618      	mov	r0, r3
 801ac06:	f7fc f899 	bl	8016d3c <osMutexRelease>

					osThreadResume(EventWriteTaskHandle);
 801ac0a:	4b09      	ldr	r3, [pc, #36]	; (801ac30 <ThreadArmingTask+0x594>)
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	4618      	mov	r0, r3
 801ac10:	f7fc fa76 	bl	8017100 <osThreadResume>
				}
			}
		}


		osDelay(10); // вызываем процесс один раз в 10 мс
 801ac14:	200a      	movs	r0, #10
 801ac16:	f7fb ff62 	bl	8016ade <osDelay>
		if( status_registers.security_status_reg == ARMING_PROCESS ) // если запущен процесс потановки на охрану
 801ac1a:	e567      	b.n	801a6ec <ThreadArmingTask+0x50>
 801ac1c:	40021800 	.word	0x40021800
 801ac20:	2000a1cc 	.word	0x2000a1cc
 801ac24:	20009a6c 	.word	0x20009a6c
 801ac28:	20007fed 	.word	0x20007fed
 801ac2c:	2000a10c 	.word	0x2000a10c
 801ac30:	2000969c 	.word	0x2000969c

0801ac34 <ThreadCallRingCenterTask>:
extern osMutexId UartMutexHandle;
extern control_register_struct control_registers;


void ThreadCallRingCenterTask(void const * argument)
{
 801ac34:	b580      	push	{r7, lr}
 801ac36:	b082      	sub	sp, #8
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]



	for(;;)
	{
		osThreadSuspend(CallRingCenterTaskHandle); // переходим в спящий режим и ждем
 801ac3c:	4b0e      	ldr	r3, [pc, #56]	; (801ac78 <ThreadCallRingCenterTask+0x44>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	4618      	mov	r0, r3
 801ac42:	f7fc fa51 	bl	80170e8 <osThreadSuspend>

		while(control_registers.gprs_call_reg != CALL_ON) // пока регистр флага дозвона в центр не включен, ничего не делаем
 801ac46:	bf00      	nop
 801ac48:	4b0c      	ldr	r3, [pc, #48]	; (801ac7c <ThreadCallRingCenterTask+0x48>)
 801ac4a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801ac4e:	2b01      	cmp	r3, #1
 801ac50:	d1fa      	bne.n	801ac48 <ThreadCallRingCenterTask+0x14>
		{

		}

			osMutexWait(UartMutexHandle, osWaitForever);
 801ac52:	4b0b      	ldr	r3, [pc, #44]	; (801ac80 <ThreadCallRingCenterTask+0x4c>)
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	f04f 31ff 	mov.w	r1, #4294967295
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f7fc f820 	bl	8016ca0 <osMutexWait>
			request_to_server(); // делаем запрос на сервер
 801ac60:	f00c f962 	bl	8026f28 <request_to_server>
			//while(request_to_server() != AT_OK){}; // делаем запрос на сервер
			osMutexRelease(UartMutexHandle);
 801ac64:	4b06      	ldr	r3, [pc, #24]	; (801ac80 <ThreadCallRingCenterTask+0x4c>)
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	4618      	mov	r0, r3
 801ac6a:	f7fc f867 	bl	8016d3c <osMutexRelease>

		osDelay(5000); // ждем, если флаг не сброшен запрос повторяется
 801ac6e:	f241 3088 	movw	r0, #5000	; 0x1388
 801ac72:	f7fb ff34 	bl	8016ade <osDelay>
		osThreadSuspend(CallRingCenterTaskHandle); // переходим в спящий режим и ждем
 801ac76:	e7e1      	b.n	801ac3c <ThreadCallRingCenterTask+0x8>
 801ac78:	2000827c 	.word	0x2000827c
 801ac7c:	2000a1cc 	.word	0x2000a1cc
 801ac80:	200096a0 	.word	0x200096a0

0801ac84 <ThreadEventWriteTask>:
volatile uint16_t address_event_temp; // переменная для записи адреса последнего записанного события
volatile uint8_t read_temp; // временная переменная для чтения из памяти


void ThreadEventWriteTask(void const * argument)
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b084      	sub	sp, #16
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
	//uint8_t temp_data[30]; // буфер для записи событий
	//uint16_t address_event_temp; // переменная для записи адреса последнего записанного события
	//uint8_t read_temp; // временная переменная для чтения из памяти

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // выставляем адрес начала записи событий по умолчанию
 801ac8c:	4ba0      	ldr	r3, [pc, #640]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	f04f 31ff 	mov.w	r1, #4294967295
 801ac94:	4618      	mov	r0, r3
 801ac96:	f7fc f803 	bl	8016ca0 <osMutexWait>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_H_REG, 0x00);
 801ac9a:	2100      	movs	r1, #0
 801ac9c:	f242 0018 	movw	r0, #8216	; 0x2018
 801aca0:	f00a fbd0 	bl	8025444 <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_H_REG+1, 0x20);
 801aca4:	2120      	movs	r1, #32
 801aca6:	f242 0019 	movw	r0, #8217	; 0x2019
 801acaa:	f00a fbcb 	bl	8025444 <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_L_REG, 0x00);
 801acae:	2100      	movs	r1, #0
 801acb0:	f242 001a 	movw	r0, #8218	; 0x201a
 801acb4:	f00a fbc6 	bl	8025444 <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_L_REG+1, 0x00);
 801acb8:	2100      	movs	r1, #0
 801acba:	f242 001b 	movw	r0, #8219	; 0x201b
 801acbe:	f00a fbc1 	bl	8025444 <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 801acc2:	4b93      	ldr	r3, [pc, #588]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	4618      	mov	r0, r3
 801acc8:	f7fc f838 	bl	8016d3c <osMutexRelease>

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // вычитывавем из памяти значение адреса последнего события
 801accc:	4b90      	ldr	r3, [pc, #576]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	f04f 31ff 	mov.w	r1, #4294967295
 801acd4:	4618      	mov	r0, r3
 801acd6:	f7fb ffe3 	bl	8016ca0 <osMutexWait>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &read_temp);
 801acda:	498e      	ldr	r1, [pc, #568]	; (801af14 <ThreadEventWriteTask+0x290>)
 801acdc:	f242 001d 	movw	r0, #8221	; 0x201d
 801ace0:	f00a fb76 	bl	80253d0 <fm25v02_read>
	status_registers.address_last_event_h_reg = (uint16_t)read_temp;
 801ace4:	4b8b      	ldr	r3, [pc, #556]	; (801af14 <ThreadEventWriteTask+0x290>)
 801ace6:	781b      	ldrb	r3, [r3, #0]
 801ace8:	b2db      	uxtb	r3, r3
 801acea:	b29a      	uxth	r2, r3
 801acec:	4b8a      	ldr	r3, [pc, #552]	; (801af18 <ThreadEventWriteTask+0x294>)
 801acee:	839a      	strh	r2, [r3, #28]
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &read_temp);
 801acf0:	4988      	ldr	r1, [pc, #544]	; (801af14 <ThreadEventWriteTask+0x290>)
 801acf2:	f242 001f 	movw	r0, #8223	; 0x201f
 801acf6:	f00a fb6b 	bl	80253d0 <fm25v02_read>
	status_registers.address_last_event_l_reg = (uint16_t)read_temp;
 801acfa:	4b86      	ldr	r3, [pc, #536]	; (801af14 <ThreadEventWriteTask+0x290>)
 801acfc:	781b      	ldrb	r3, [r3, #0]
 801acfe:	b2db      	uxtb	r3, r3
 801ad00:	b29a      	uxth	r2, r3
 801ad02:	4b85      	ldr	r3, [pc, #532]	; (801af18 <ThreadEventWriteTask+0x294>)
 801ad04:	83da      	strh	r2, [r3, #30]
	osMutexRelease(Fm25v02MutexHandle);
 801ad06:	4b82      	ldr	r3, [pc, #520]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	f7fc f816 	bl	8016d3c <osMutexRelease>

	address_event_temp = ((((status_registers.address_last_event_h_reg)<<8)&0xFF00)|(status_registers.address_last_event_l_reg&0x00FF)); // высчитываем адрес последнего события
 801ad10:	4b81      	ldr	r3, [pc, #516]	; (801af18 <ThreadEventWriteTask+0x294>)
 801ad12:	8b9b      	ldrh	r3, [r3, #28]
 801ad14:	021b      	lsls	r3, r3, #8
 801ad16:	b21a      	sxth	r2, r3
 801ad18:	4b7f      	ldr	r3, [pc, #508]	; (801af18 <ThreadEventWriteTask+0x294>)
 801ad1a:	8bdb      	ldrh	r3, [r3, #30]
 801ad1c:	b21b      	sxth	r3, r3
 801ad1e:	b2db      	uxtb	r3, r3
 801ad20:	b21b      	sxth	r3, r3
 801ad22:	4313      	orrs	r3, r2
 801ad24:	b21b      	sxth	r3, r3
 801ad26:	b29a      	uxth	r2, r3
 801ad28:	4b7c      	ldr	r3, [pc, #496]	; (801af1c <ThreadEventWriteTask+0x298>)
 801ad2a:	801a      	strh	r2, [r3, #0]

	if( (address_event_temp < 0x2000) || (address_event_temp > 0x288E) ) // проверяем, входит ли значение последнего события в диапазон памяти событий, если нет, то выставляем по умолчанию
 801ad2c:	4b7b      	ldr	r3, [pc, #492]	; (801af1c <ThreadEventWriteTask+0x298>)
 801ad2e:	881b      	ldrh	r3, [r3, #0]
 801ad30:	b29b      	uxth	r3, r3
 801ad32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ad36:	d306      	bcc.n	801ad46 <ThreadEventWriteTask+0xc2>
 801ad38:	4b78      	ldr	r3, [pc, #480]	; (801af1c <ThreadEventWriteTask+0x298>)
 801ad3a:	881b      	ldrh	r3, [r3, #0]
 801ad3c:	b29b      	uxth	r3, r3
 801ad3e:	f642 028e 	movw	r2, #10382	; 0x288e
 801ad42:	4293      	cmp	r3, r2
 801ad44:	d925      	bls.n	801ad92 <ThreadEventWriteTask+0x10e>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ad46:	4b72      	ldr	r3, [pc, #456]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	f04f 31ff 	mov.w	r1, #4294967295
 801ad4e:	4618      	mov	r0, r3
 801ad50:	f7fb ffa6 	bl	8016ca0 <osMutexWait>
		fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 801ad54:	2100      	movs	r1, #0
 801ad56:	f242 001c 	movw	r0, #8220	; 0x201c
 801ad5a:	f00a fb73 	bl	8025444 <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 801ad5e:	2120      	movs	r1, #32
 801ad60:	f242 001d 	movw	r0, #8221	; 0x201d
 801ad64:	f00a fb6e 	bl	8025444 <fm25v02_write>
		status_registers.address_last_event_h_reg = 0x0020;
 801ad68:	4b6b      	ldr	r3, [pc, #428]	; (801af18 <ThreadEventWriteTask+0x294>)
 801ad6a:	2220      	movs	r2, #32
 801ad6c:	839a      	strh	r2, [r3, #28]
		fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 801ad6e:	2100      	movs	r1, #0
 801ad70:	f242 001e 	movw	r0, #8222	; 0x201e
 801ad74:	f00a fb66 	bl	8025444 <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 801ad78:	2100      	movs	r1, #0
 801ad7a:	f242 001f 	movw	r0, #8223	; 0x201f
 801ad7e:	f00a fb61 	bl	8025444 <fm25v02_write>
		status_registers.address_last_event_l_reg = 0x0000;
 801ad82:	4b65      	ldr	r3, [pc, #404]	; (801af18 <ThreadEventWriteTask+0x294>)
 801ad84:	2200      	movs	r2, #0
 801ad86:	83da      	strh	r2, [r3, #30]
		osMutexRelease(Fm25v02MutexHandle);
 801ad88:	4b61      	ldr	r3, [pc, #388]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	f7fb ffd5 	bl	8016d3c <osMutexRelease>



	for(;;)
	{
		osThreadSuspend(EventWriteTaskHandle);
 801ad92:	4b63      	ldr	r3, [pc, #396]	; (801af20 <ThreadEventWriteTask+0x29c>)
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	4618      	mov	r0, r3
 801ad98:	f7fc f9a6 	bl	80170e8 <osThreadSuspend>

		osMutexWait(Fm25v02MutexHandle, osWaitForever); // вычитывавем из памяти значение последнего события
 801ad9c:	4b5c      	ldr	r3, [pc, #368]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	f04f 31ff 	mov.w	r1, #4294967295
 801ada4:	4618      	mov	r0, r3
 801ada6:	f7fb ff7b 	bl	8016ca0 <osMutexWait>
		fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &read_temp);
 801adaa:	495a      	ldr	r1, [pc, #360]	; (801af14 <ThreadEventWriteTask+0x290>)
 801adac:	f242 001d 	movw	r0, #8221	; 0x201d
 801adb0:	f00a fb0e 	bl	80253d0 <fm25v02_read>
		status_registers.address_last_event_h_reg = read_temp;
 801adb4:	4b57      	ldr	r3, [pc, #348]	; (801af14 <ThreadEventWriteTask+0x290>)
 801adb6:	781b      	ldrb	r3, [r3, #0]
 801adb8:	b2db      	uxtb	r3, r3
 801adba:	b29a      	uxth	r2, r3
 801adbc:	4b56      	ldr	r3, [pc, #344]	; (801af18 <ThreadEventWriteTask+0x294>)
 801adbe:	839a      	strh	r2, [r3, #28]
		fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &read_temp);
 801adc0:	4954      	ldr	r1, [pc, #336]	; (801af14 <ThreadEventWriteTask+0x290>)
 801adc2:	f242 001f 	movw	r0, #8223	; 0x201f
 801adc6:	f00a fb03 	bl	80253d0 <fm25v02_read>
		status_registers.address_last_event_l_reg = read_temp;
 801adca:	4b52      	ldr	r3, [pc, #328]	; (801af14 <ThreadEventWriteTask+0x290>)
 801adcc:	781b      	ldrb	r3, [r3, #0]
 801adce:	b2db      	uxtb	r3, r3
 801add0:	b29a      	uxth	r2, r3
 801add2:	4b51      	ldr	r3, [pc, #324]	; (801af18 <ThreadEventWriteTask+0x294>)
 801add4:	83da      	strh	r2, [r3, #30]
		osMutexRelease(Fm25v02MutexHandle);
 801add6:	4b4e      	ldr	r3, [pc, #312]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	4618      	mov	r0, r3
 801addc:	f7fb ffae 	bl	8016d3c <osMutexRelease>

		address_event_temp = ((((status_registers.address_last_event_h_reg)<<8)&0xFF00)|(status_registers.address_last_event_l_reg&0x00FF)); // считаем значение адреса последнего события
 801ade0:	4b4d      	ldr	r3, [pc, #308]	; (801af18 <ThreadEventWriteTask+0x294>)
 801ade2:	8b9b      	ldrh	r3, [r3, #28]
 801ade4:	021b      	lsls	r3, r3, #8
 801ade6:	b21a      	sxth	r2, r3
 801ade8:	4b4b      	ldr	r3, [pc, #300]	; (801af18 <ThreadEventWriteTask+0x294>)
 801adea:	8bdb      	ldrh	r3, [r3, #30]
 801adec:	b21b      	sxth	r3, r3
 801adee:	b2db      	uxtb	r3, r3
 801adf0:	b21b      	sxth	r3, r3
 801adf2:	4313      	orrs	r3, r2
 801adf4:	b21b      	sxth	r3, r3
 801adf6:	b29a      	uxth	r2, r3
 801adf8:	4b48      	ldr	r3, [pc, #288]	; (801af1c <ThreadEventWriteTask+0x298>)
 801adfa:	801a      	strh	r2, [r3, #0]

		if( (address_event_temp >= 0x2000) && (address_event_temp <= 0x288E) ) // проверяем, чтобы значение адреса события лежало в области памяти ведения протокола событий
 801adfc:	4b47      	ldr	r3, [pc, #284]	; (801af1c <ThreadEventWriteTask+0x298>)
 801adfe:	881b      	ldrh	r3, [r3, #0]
 801ae00:	b29b      	uxth	r3, r3
 801ae02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ae06:	f0c0 8162 	bcc.w	801b0ce <ThreadEventWriteTask+0x44a>
 801ae0a:	4b44      	ldr	r3, [pc, #272]	; (801af1c <ThreadEventWriteTask+0x298>)
 801ae0c:	881b      	ldrh	r3, [r3, #0]
 801ae0e:	b29b      	uxth	r3, r3
 801ae10:	f642 028e 	movw	r2, #10382	; 0x288e
 801ae14:	4293      	cmp	r3, r2
 801ae16:	f200 815a 	bhi.w	801b0ce <ThreadEventWriteTask+0x44a>
		{

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ae1a:	4b3d      	ldr	r3, [pc, #244]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	f04f 31ff 	mov.w	r1, #4294967295
 801ae22:	4618      	mov	r0, r3
 801ae24:	f7fb ff3c 	bl	8016ca0 <osMutexWait>

			fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &temp_data[0]);
 801ae28:	493e      	ldr	r1, [pc, #248]	; (801af24 <ThreadEventWriteTask+0x2a0>)
 801ae2a:	f242 000b 	movw	r0, #8203	; 0x200b
 801ae2e:	f00a facf 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &temp_data[1]);
 801ae32:	493d      	ldr	r1, [pc, #244]	; (801af28 <ThreadEventWriteTask+0x2a4>)
 801ae34:	f242 000d 	movw	r0, #8205	; 0x200d
 801ae38:	f00a faca 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &temp_data[2]);
 801ae3c:	493b      	ldr	r1, [pc, #236]	; (801af2c <ThreadEventWriteTask+0x2a8>)
 801ae3e:	f242 000f 	movw	r0, #8207	; 0x200f
 801ae42:	f00a fac5 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &temp_data[3]);
 801ae46:	493a      	ldr	r1, [pc, #232]	; (801af30 <ThreadEventWriteTask+0x2ac>)
 801ae48:	f242 0011 	movw	r0, #8209	; 0x2011
 801ae4c:	f00a fac0 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &temp_data[4]);
 801ae50:	4938      	ldr	r1, [pc, #224]	; (801af34 <ThreadEventWriteTask+0x2b0>)
 801ae52:	f242 0013 	movw	r0, #8211	; 0x2013
 801ae56:	f00a fabb 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &temp_data[5]);
 801ae5a:	4937      	ldr	r1, [pc, #220]	; (801af38 <ThreadEventWriteTask+0x2b4>)
 801ae5c:	f242 0015 	movw	r0, #8213	; 0x2015
 801ae60:	f00a fab6 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*SYSTEM_STATUS_REG+1, &temp_data[6]);
 801ae64:	4935      	ldr	r1, [pc, #212]	; (801af3c <ThreadEventWriteTask+0x2b8>)
 801ae66:	f242 0021 	movw	r0, #8225	; 0x2021
 801ae6a:	f00a fab1 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*SECURITY_STATUS_REG+1, &temp_data[7]);
 801ae6e:	4934      	ldr	r1, [pc, #208]	; (801af40 <ThreadEventWriteTask+0x2bc>)
 801ae70:	f242 0003 	movw	r0, #8195	; 0x2003
 801ae74:	f00a faac 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*STATUS_LOOP_REG+1, &temp_data[8]);
 801ae78:	4932      	ldr	r1, [pc, #200]	; (801af44 <ThreadEventWriteTask+0x2c0>)
 801ae7a:	f242 0005 	movw	r0, #8197	; 0x2005
 801ae7e:	f00a faa7 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*ALARM_LOOP_REG+1, &temp_data[9]);
 801ae82:	4931      	ldr	r1, [pc, #196]	; (801af48 <ThreadEventWriteTask+0x2c4>)
 801ae84:	f242 0009 	movw	r0, #8201	; 0x2009
 801ae88:	f00a faa2 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*ERROR_LOOP_REG+1, &temp_data[10]);
 801ae8c:	492f      	ldr	r1, [pc, #188]	; (801af4c <ThreadEventWriteTask+0x2c8>)
 801ae8e:	f242 0007 	movw	r0, #8199	; 0x2007
 801ae92:	f00a fa9d 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &temp_data[11]);
 801ae96:	492e      	ldr	r1, [pc, #184]	; (801af50 <ThreadEventWriteTask+0x2cc>)
 801ae98:	f242 002b 	movw	r0, #8235	; 0x202b
 801ae9c:	f00a fa98 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &temp_data[12]);
 801aea0:	492c      	ldr	r1, [pc, #176]	; (801af54 <ThreadEventWriteTask+0x2d0>)
 801aea2:	f242 002d 	movw	r0, #8237	; 0x202d
 801aea6:	f00a fa93 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &temp_data[13]);
 801aeaa:	492b      	ldr	r1, [pc, #172]	; (801af58 <ThreadEventWriteTask+0x2d4>)
 801aeac:	f242 002f 	movw	r0, #8239	; 0x202f
 801aeb0:	f00a fa8e 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &temp_data[14]);
 801aeb4:	4929      	ldr	r1, [pc, #164]	; (801af5c <ThreadEventWriteTask+0x2d8>)
 801aeb6:	f242 0031 	movw	r0, #8241	; 0x2031
 801aeba:	f00a fa89 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &temp_data[15]);
 801aebe:	4928      	ldr	r1, [pc, #160]	; (801af60 <ThreadEventWriteTask+0x2dc>)
 801aec0:	f242 0033 	movw	r0, #8243	; 0x2033
 801aec4:	f00a fa84 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &temp_data[16]);
 801aec8:	4926      	ldr	r1, [pc, #152]	; (801af64 <ThreadEventWriteTask+0x2e0>)
 801aeca:	f242 0035 	movw	r0, #8245	; 0x2035
 801aece:	f00a fa7f 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &temp_data[17]);
 801aed2:	4925      	ldr	r1, [pc, #148]	; (801af68 <ThreadEventWriteTask+0x2e4>)
 801aed4:	f242 0037 	movw	r0, #8247	; 0x2037
 801aed8:	f00a fa7a 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &temp_data[18]);
 801aedc:	4923      	ldr	r1, [pc, #140]	; (801af6c <ThreadEventWriteTask+0x2e8>)
 801aede:	f242 0039 	movw	r0, #8249	; 0x2039
 801aee2:	f00a fa75 	bl	80253d0 <fm25v02_read>
			fm25v02_read(2*POWER_ON_REG+1, &temp_data[19]);
 801aee6:	4922      	ldr	r1, [pc, #136]	; (801af70 <ThreadEventWriteTask+0x2ec>)
 801aee8:	f242 0023 	movw	r0, #8227	; 0x2023
 801aeec:	f00a fa70 	bl	80253d0 <fm25v02_read>

			osMutexRelease(Fm25v02MutexHandle);
 801aef0:	4b07      	ldr	r3, [pc, #28]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	4618      	mov	r0, r3
 801aef6:	f7fb ff21 	bl	8016d3c <osMutexRelease>

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801aefa:	4b05      	ldr	r3, [pc, #20]	; (801af10 <ThreadEventWriteTask+0x28c>)
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	f04f 31ff 	mov.w	r1, #4294967295
 801af02:	4618      	mov	r0, r3
 801af04:	f7fb fecc 	bl	8016ca0 <osMutexWait>
			//fm25v02_fast_write(address_event_temp, &temp_data[0], 30); // переписываем текущие значения переменных для события в память

			for(uint8_t i=0; i<30; i++) // переписываем текущие значения переменных для события в память
 801af08:	2300      	movs	r3, #0
 801af0a:	73fb      	strb	r3, [r7, #15]
 801af0c:	e055      	b.n	801afba <ThreadEventWriteTask+0x336>
 801af0e:	bf00      	nop
 801af10:	20009a6c 	.word	0x20009a6c
 801af14:	20009d64 	.word	0x20009d64
 801af18:	2000a10c 	.word	0x2000a10c
 801af1c:	20009d86 	.word	0x20009d86
 801af20:	2000969c 	.word	0x2000969c
 801af24:	20009d68 	.word	0x20009d68
 801af28:	20009d69 	.word	0x20009d69
 801af2c:	20009d6a 	.word	0x20009d6a
 801af30:	20009d6b 	.word	0x20009d6b
 801af34:	20009d6c 	.word	0x20009d6c
 801af38:	20009d6d 	.word	0x20009d6d
 801af3c:	20009d6e 	.word	0x20009d6e
 801af40:	20009d6f 	.word	0x20009d6f
 801af44:	20009d70 	.word	0x20009d70
 801af48:	20009d71 	.word	0x20009d71
 801af4c:	20009d72 	.word	0x20009d72
 801af50:	20009d73 	.word	0x20009d73
 801af54:	20009d74 	.word	0x20009d74
 801af58:	20009d75 	.word	0x20009d75
 801af5c:	20009d76 	.word	0x20009d76
 801af60:	20009d77 	.word	0x20009d77
 801af64:	20009d78 	.word	0x20009d78
 801af68:	20009d79 	.word	0x20009d79
 801af6c:	20009d7a 	.word	0x20009d7a
 801af70:	20009d7b 	.word	0x20009d7b
			{
				fm25v02_write(2*(address_event_temp+i), 0x00);
 801af74:	4b58      	ldr	r3, [pc, #352]	; (801b0d8 <ThreadEventWriteTask+0x454>)
 801af76:	881b      	ldrh	r3, [r3, #0]
 801af78:	b29b      	uxth	r3, r3
 801af7a:	461a      	mov	r2, r3
 801af7c:	7bfb      	ldrb	r3, [r7, #15]
 801af7e:	4413      	add	r3, r2
 801af80:	b29b      	uxth	r3, r3
 801af82:	005b      	lsls	r3, r3, #1
 801af84:	b29b      	uxth	r3, r3
 801af86:	2100      	movs	r1, #0
 801af88:	4618      	mov	r0, r3
 801af8a:	f00a fa5b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*(address_event_temp+i)+1, temp_data[i]);
 801af8e:	4b52      	ldr	r3, [pc, #328]	; (801b0d8 <ThreadEventWriteTask+0x454>)
 801af90:	881b      	ldrh	r3, [r3, #0]
 801af92:	b29b      	uxth	r3, r3
 801af94:	461a      	mov	r2, r3
 801af96:	7bfb      	ldrb	r3, [r7, #15]
 801af98:	4413      	add	r3, r2
 801af9a:	b29b      	uxth	r3, r3
 801af9c:	005b      	lsls	r3, r3, #1
 801af9e:	b29b      	uxth	r3, r3
 801afa0:	3301      	adds	r3, #1
 801afa2:	b29a      	uxth	r2, r3
 801afa4:	7bfb      	ldrb	r3, [r7, #15]
 801afa6:	494d      	ldr	r1, [pc, #308]	; (801b0dc <ThreadEventWriteTask+0x458>)
 801afa8:	5ccb      	ldrb	r3, [r1, r3]
 801afaa:	b2db      	uxtb	r3, r3
 801afac:	4619      	mov	r1, r3
 801afae:	4610      	mov	r0, r2
 801afb0:	f00a fa48 	bl	8025444 <fm25v02_write>
			for(uint8_t i=0; i<30; i++) // переписываем текущие значения переменных для события в память
 801afb4:	7bfb      	ldrb	r3, [r7, #15]
 801afb6:	3301      	adds	r3, #1
 801afb8:	73fb      	strb	r3, [r7, #15]
 801afba:	7bfb      	ldrb	r3, [r7, #15]
 801afbc:	2b1d      	cmp	r3, #29
 801afbe:	d9d9      	bls.n	801af74 <ThreadEventWriteTask+0x2f0>
			fm25v02_write(2*(address_event_temp+29)+1, temp_data[29]);
			*/



			osMutexRelease(Fm25v02MutexHandle);
 801afc0:	4b47      	ldr	r3, [pc, #284]	; (801b0e0 <ThreadEventWriteTask+0x45c>)
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	4618      	mov	r0, r3
 801afc6:	f7fb feb9 	bl	8016d3c <osMutexRelease>

			address_event_temp = address_event_temp + 30;
 801afca:	4b43      	ldr	r3, [pc, #268]	; (801b0d8 <ThreadEventWriteTask+0x454>)
 801afcc:	881b      	ldrh	r3, [r3, #0]
 801afce:	b29b      	uxth	r3, r3
 801afd0:	331e      	adds	r3, #30
 801afd2:	b29a      	uxth	r2, r3
 801afd4:	4b40      	ldr	r3, [pc, #256]	; (801b0d8 <ThreadEventWriteTask+0x454>)
 801afd6:	801a      	strh	r2, [r3, #0]

			if( address_event_temp > 0x288E )
 801afd8:	4b3f      	ldr	r3, [pc, #252]	; (801b0d8 <ThreadEventWriteTask+0x454>)
 801afda:	881b      	ldrh	r3, [r3, #0]
 801afdc:	b29b      	uxth	r3, r3
 801afde:	f642 028e 	movw	r2, #10382	; 0x288e
 801afe2:	4293      	cmp	r3, r2
 801afe4:	d926      	bls.n	801b034 <ThreadEventWriteTask+0x3b0>
			{

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801afe6:	4b3e      	ldr	r3, [pc, #248]	; (801b0e0 <ThreadEventWriteTask+0x45c>)
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	f04f 31ff 	mov.w	r1, #4294967295
 801afee:	4618      	mov	r0, r3
 801aff0:	f7fb fe56 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 801aff4:	2100      	movs	r1, #0
 801aff6:	f242 001c 	movw	r0, #8220	; 0x201c
 801affa:	f00a fa23 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 801affe:	2120      	movs	r1, #32
 801b000:	f242 001d 	movw	r0, #8221	; 0x201d
 801b004:	f00a fa1e 	bl	8025444 <fm25v02_write>
				status_registers.address_last_event_h_reg = 0x0020;
 801b008:	4b36      	ldr	r3, [pc, #216]	; (801b0e4 <ThreadEventWriteTask+0x460>)
 801b00a:	2220      	movs	r2, #32
 801b00c:	839a      	strh	r2, [r3, #28]
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 801b00e:	2100      	movs	r1, #0
 801b010:	f242 001e 	movw	r0, #8222	; 0x201e
 801b014:	f00a fa16 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 801b018:	2100      	movs	r1, #0
 801b01a:	f242 001f 	movw	r0, #8223	; 0x201f
 801b01e:	f00a fa11 	bl	8025444 <fm25v02_write>
				status_registers.address_last_event_l_reg = 0x0000;
 801b022:	4b30      	ldr	r3, [pc, #192]	; (801b0e4 <ThreadEventWriteTask+0x460>)
 801b024:	2200      	movs	r2, #0
 801b026:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 801b028:	4b2d      	ldr	r3, [pc, #180]	; (801b0e0 <ThreadEventWriteTask+0x45c>)
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	4618      	mov	r0, r3
 801b02e:	f7fb fe85 	bl	8016d3c <osMutexRelease>
 801b032:	e04c      	b.n	801b0ce <ThreadEventWriteTask+0x44a>

				osMutexRelease(Fm25v02MutexHandle);
				*/

			}
			else if( (address_event_temp >= 0x2000) && (address_event_temp <= 0x288E) )
 801b034:	4b28      	ldr	r3, [pc, #160]	; (801b0d8 <ThreadEventWriteTask+0x454>)
 801b036:	881b      	ldrh	r3, [r3, #0]
 801b038:	b29b      	uxth	r3, r3
 801b03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b03e:	d346      	bcc.n	801b0ce <ThreadEventWriteTask+0x44a>
 801b040:	4b25      	ldr	r3, [pc, #148]	; (801b0d8 <ThreadEventWriteTask+0x454>)
 801b042:	881b      	ldrh	r3, [r3, #0]
 801b044:	b29b      	uxth	r3, r3
 801b046:	f642 028e 	movw	r2, #10382	; 0x288e
 801b04a:	4293      	cmp	r3, r2
 801b04c:	d83f      	bhi.n	801b0ce <ThreadEventWriteTask+0x44a>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b04e:	4b24      	ldr	r3, [pc, #144]	; (801b0e0 <ThreadEventWriteTask+0x45c>)
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	f04f 31ff 	mov.w	r1, #4294967295
 801b056:	4618      	mov	r0, r3
 801b058:	f7fb fe22 	bl	8016ca0 <osMutexWait>

				read_temp = (uint8_t)((address_event_temp>>8)&0x00FF);
 801b05c:	4b1e      	ldr	r3, [pc, #120]	; (801b0d8 <ThreadEventWriteTask+0x454>)
 801b05e:	881b      	ldrh	r3, [r3, #0]
 801b060:	b29b      	uxth	r3, r3
 801b062:	0a1b      	lsrs	r3, r3, #8
 801b064:	b29b      	uxth	r3, r3
 801b066:	b2da      	uxtb	r2, r3
 801b068:	4b1f      	ldr	r3, [pc, #124]	; (801b0e8 <ThreadEventWriteTask+0x464>)
 801b06a:	701a      	strb	r2, [r3, #0]
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 801b06c:	2100      	movs	r1, #0
 801b06e:	f242 001c 	movw	r0, #8220	; 0x201c
 801b072:	f00a f9e7 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, read_temp);
 801b076:	4b1c      	ldr	r3, [pc, #112]	; (801b0e8 <ThreadEventWriteTask+0x464>)
 801b078:	781b      	ldrb	r3, [r3, #0]
 801b07a:	b2db      	uxtb	r3, r3
 801b07c:	4619      	mov	r1, r3
 801b07e:	f242 001d 	movw	r0, #8221	; 0x201d
 801b082:	f00a f9df 	bl	8025444 <fm25v02_write>
				status_registers.address_last_event_h_reg = (uint16_t)read_temp;
 801b086:	4b18      	ldr	r3, [pc, #96]	; (801b0e8 <ThreadEventWriteTask+0x464>)
 801b088:	781b      	ldrb	r3, [r3, #0]
 801b08a:	b2db      	uxtb	r3, r3
 801b08c:	b29a      	uxth	r2, r3
 801b08e:	4b15      	ldr	r3, [pc, #84]	; (801b0e4 <ThreadEventWriteTask+0x460>)
 801b090:	839a      	strh	r2, [r3, #28]

				read_temp = (uint8_t)(address_event_temp&0x00FF);
 801b092:	4b11      	ldr	r3, [pc, #68]	; (801b0d8 <ThreadEventWriteTask+0x454>)
 801b094:	881b      	ldrh	r3, [r3, #0]
 801b096:	b29b      	uxth	r3, r3
 801b098:	b2da      	uxtb	r2, r3
 801b09a:	4b13      	ldr	r3, [pc, #76]	; (801b0e8 <ThreadEventWriteTask+0x464>)
 801b09c:	701a      	strb	r2, [r3, #0]
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 801b09e:	2100      	movs	r1, #0
 801b0a0:	f242 001e 	movw	r0, #8222	; 0x201e
 801b0a4:	f00a f9ce 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, read_temp);
 801b0a8:	4b0f      	ldr	r3, [pc, #60]	; (801b0e8 <ThreadEventWriteTask+0x464>)
 801b0aa:	781b      	ldrb	r3, [r3, #0]
 801b0ac:	b2db      	uxtb	r3, r3
 801b0ae:	4619      	mov	r1, r3
 801b0b0:	f242 001f 	movw	r0, #8223	; 0x201f
 801b0b4:	f00a f9c6 	bl	8025444 <fm25v02_write>
				status_registers.address_last_event_l_reg = (uint16_t)read_temp;
 801b0b8:	4b0b      	ldr	r3, [pc, #44]	; (801b0e8 <ThreadEventWriteTask+0x464>)
 801b0ba:	781b      	ldrb	r3, [r3, #0]
 801b0bc:	b2db      	uxtb	r3, r3
 801b0be:	b29a      	uxth	r2, r3
 801b0c0:	4b08      	ldr	r3, [pc, #32]	; (801b0e4 <ThreadEventWriteTask+0x460>)
 801b0c2:	83da      	strh	r2, [r3, #30]

				osMutexRelease(Fm25v02MutexHandle);
 801b0c4:	4b06      	ldr	r3, [pc, #24]	; (801b0e0 <ThreadEventWriteTask+0x45c>)
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7fb fe37 	bl	8016d3c <osMutexRelease>
		else // здесь должно быть то, что нужно сделать если значение адреса не вошло в область памяти ведения протокола событий, например можно выставить соответствующий флаг и сделать запрос на сервер
		{

		}

		osDelay(1);
 801b0ce:	2001      	movs	r0, #1
 801b0d0:	f7fb fd05 	bl	8016ade <osDelay>
		osThreadSuspend(EventWriteTaskHandle);
 801b0d4:	e65d      	b.n	801ad92 <ThreadEventWriteTask+0x10e>
 801b0d6:	bf00      	nop
 801b0d8:	20009d86 	.word	0x20009d86
 801b0dc:	20009d68 	.word	0x20009d68
 801b0e0:	20009a6c 	.word	0x20009a6c
 801b0e4:	2000a10c 	.word	0x2000a10c
 801b0e8:	20009d64 	.word	0x20009d64

0801b0ec <ThreadIbuttonTask>:
uint32_t t;


//Поток обработки ibutton и постановки на сигнализацию-------------------------
void ThreadIbuttonTask(void const * argument)
{
 801b0ec:	b580      	push	{r7, lr}
 801b0ee:	b086      	sub	sp, #24
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	6078      	str	r0, [r7, #4]
	uint8_t ibutton_temp[8]; //временная переменная для записи номера таблетки
	uint8_t temp;
	osThreadSuspend(IbuttonTaskHandle); // переводим поток ThreadIbuttonTask в спящий режим
 801b0f4:	4b87      	ldr	r3, [pc, #540]	; (801b314 <ThreadIbuttonTask+0x228>)
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	f7fb fff5 	bl	80170e8 <osThreadSuspend>

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b0fe:	4b86      	ldr	r3, [pc, #536]	; (801b318 <ThreadIbuttonTask+0x22c>)
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	f04f 31ff 	mov.w	r1, #4294967295
 801b106:	4618      	mov	r0, r3
 801b108:	f7fb fdca 	bl	8016ca0 <osMutexWait>
	fm25v02_write(2*SECURITY_STATUS_REG, 0x00); // обнуляем старший байт статуса режима охраны
 801b10c:	2100      	movs	r1, #0
 801b10e:	f242 0002 	movw	r0, #8194	; 0x2002
 801b112:	f00a f997 	bl	8025444 <fm25v02_write>
	fm25v02_read(2*SECURITY_STATUS_REG+1, &temp); // читаем младший байт статуса режима охраны
 801b116:	f107 030f 	add.w	r3, r7, #15
 801b11a:	4619      	mov	r1, r3
 801b11c:	f242 0003 	movw	r0, #8195	; 0x2003
 801b120:	f00a f956 	bl	80253d0 <fm25v02_read>
	osMutexRelease(Fm25v02MutexHandle);
 801b124:	4b7c      	ldr	r3, [pc, #496]	; (801b318 <ThreadIbuttonTask+0x22c>)
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	4618      	mov	r0, r3
 801b12a:	f7fb fe07 	bl	8016d3c <osMutexRelease>

	if( (temp<0)||(temp>8) ) // если младший байт статуса режима охраны не входит в диапазон режимов статуса охраны, то обнуляем младший байт статуса режима охраны
 801b12e:	7bfb      	ldrb	r3, [r7, #15]
 801b130:	2b08      	cmp	r3, #8
 801b132:	d915      	bls.n	801b160 <ThreadIbuttonTask+0x74>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b134:	4b78      	ldr	r3, [pc, #480]	; (801b318 <ThreadIbuttonTask+0x22c>)
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	f04f 31ff 	mov.w	r1, #4294967295
 801b13c:	4618      	mov	r0, r3
 801b13e:	f7fb fdaf 	bl	8016ca0 <osMutexWait>
		fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801b142:	2100      	movs	r1, #0
 801b144:	f242 0002 	movw	r0, #8194	; 0x2002
 801b148:	f00a f97c 	bl	8025444 <fm25v02_write>
		fm25v02_write(2*SECURITY_STATUS_REG+1, 0x00); // обнуляем младший байт статуса режима охраны
 801b14c:	2100      	movs	r1, #0
 801b14e:	f242 0003 	movw	r0, #8195	; 0x2003
 801b152:	f00a f977 	bl	8025444 <fm25v02_write>
		osMutexRelease(Fm25v02MutexHandle);
 801b156:	4b70      	ldr	r3, [pc, #448]	; (801b318 <ThreadIbuttonTask+0x22c>)
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	4618      	mov	r0, r3
 801b15c:	f7fb fdee 	bl	8016d3c <osMutexRelease>
	}

	for(;;)
	{
		if( ibutton_reset() == HAL_OK )// Инициализируем ibutton таблетку, проверяем отвечает ли она на сброс, если отвечает, то выполняем чтение ROM
 801b160:	f00a fadc 	bl	802571c <ibutton_reset>
 801b164:	4603      	mov	r3, r0
 801b166:	2b00      	cmp	r3, #0
 801b168:	f040 8174 	bne.w	801b454 <ThreadIbuttonTask+0x368>
		{

			if( ibutton_read_rom(&IbuttonROM) == HAL_OK ) // Считываем ROM-код таблетки
 801b16c:	486b      	ldr	r0, [pc, #428]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b16e:	f00a fb01 	bl	8025774 <ibutton_read_rom>
 801b172:	4603      	mov	r3, r0
 801b174:	2b00      	cmp	r3, #0
 801b176:	f040 816d 	bne.w	801b454 <ThreadIbuttonTask+0x368>
			{
				if( (ibutton_search_rom(&IbuttonROM) == HAL_OK) && (IbuttonROM.IbuttonROM_High != 0) && (IbuttonROM.IbuttonROM_Low != 0) )
 801b17a:	4868      	ldr	r0, [pc, #416]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b17c:	f00a fca4 	bl	8025ac8 <ibutton_search_rom>
 801b180:	4603      	mov	r3, r0
 801b182:	2b00      	cmp	r3, #0
 801b184:	f040 8166 	bne.w	801b454 <ThreadIbuttonTask+0x368>
 801b188:	4b64      	ldr	r3, [pc, #400]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	f000 8161 	beq.w	801b454 <ThreadIbuttonTask+0x368>
 801b192:	4b62      	ldr	r3, [pc, #392]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b194:	685b      	ldr	r3, [r3, #4]
 801b196:	2b00      	cmp	r3, #0
 801b198:	f000 815c 	beq.w	801b454 <ThreadIbuttonTask+0x368>
				{

		  			BUZ_ON();
 801b19c:	f00a fa00 	bl	80255a0 <BUZ_ON>
		  			HAL_Delay(20);
 801b1a0:	2014      	movs	r0, #20
 801b1a2:	f7f6 fd63 	bl	8011c6c <HAL_Delay>
		  			BUZ_OFF();
 801b1a6:	f00a fa07 	bl	80255b8 <BUZ_OFF>

					ibutton_temp[0] = (uint8_t)(IbuttonROM.IbuttonROM_Low); // записываем во временные переменные номер найденной таблетки
 801b1aa:	4b5c      	ldr	r3, [pc, #368]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b1ac:	685b      	ldr	r3, [r3, #4]
 801b1ae:	b2db      	uxtb	r3, r3
 801b1b0:	743b      	strb	r3, [r7, #16]
					ibutton_temp[1] = (uint8_t)(IbuttonROM.IbuttonROM_Low>>8);
 801b1b2:	4b5a      	ldr	r3, [pc, #360]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b1b4:	685b      	ldr	r3, [r3, #4]
 801b1b6:	0a1b      	lsrs	r3, r3, #8
 801b1b8:	b2db      	uxtb	r3, r3
 801b1ba:	747b      	strb	r3, [r7, #17]
					ibutton_temp[2] = (uint8_t)(IbuttonROM.IbuttonROM_Low>>16);
 801b1bc:	4b57      	ldr	r3, [pc, #348]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b1be:	685b      	ldr	r3, [r3, #4]
 801b1c0:	0c1b      	lsrs	r3, r3, #16
 801b1c2:	b2db      	uxtb	r3, r3
 801b1c4:	74bb      	strb	r3, [r7, #18]
					ibutton_temp[3] = (uint8_t)(IbuttonROM.IbuttonROM_Low>>24);
 801b1c6:	4b55      	ldr	r3, [pc, #340]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b1c8:	685b      	ldr	r3, [r3, #4]
 801b1ca:	0e1b      	lsrs	r3, r3, #24
 801b1cc:	b2db      	uxtb	r3, r3
 801b1ce:	74fb      	strb	r3, [r7, #19]
					ibutton_temp[4] = (uint8_t)(IbuttonROM.IbuttonROM_High);
 801b1d0:	4b52      	ldr	r3, [pc, #328]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	b2db      	uxtb	r3, r3
 801b1d6:	753b      	strb	r3, [r7, #20]
					ibutton_temp[5] = (uint8_t)(IbuttonROM.IbuttonROM_High>>8);
 801b1d8:	4b50      	ldr	r3, [pc, #320]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	0a1b      	lsrs	r3, r3, #8
 801b1de:	b2db      	uxtb	r3, r3
 801b1e0:	757b      	strb	r3, [r7, #21]
					ibutton_temp[6] = (uint8_t)(IbuttonROM.IbuttonROM_High>>16);
 801b1e2:	4b4e      	ldr	r3, [pc, #312]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	0c1b      	lsrs	r3, r3, #16
 801b1e8:	b2db      	uxtb	r3, r3
 801b1ea:	75bb      	strb	r3, [r7, #22]
					ibutton_temp[7] = (uint8_t)(IbuttonROM.IbuttonROM_High>>24);
 801b1ec:	4b4b      	ldr	r3, [pc, #300]	; (801b31c <ThreadIbuttonTask+0x230>)
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	0e1b      	lsrs	r3, r3, #24
 801b1f2:	b2db      	uxtb	r3, r3
 801b1f4:	75fb      	strb	r3, [r7, #23]

					if( (status_registers.security_status_reg == DISABLED_BY_IBUTTON) || (status_registers.security_status_reg == DISABLED_BY_SERVER) || (status_registers.security_status_reg == RESERVED_0) ) // Если сигнализация выключена, ставим на охрану
 801b1f6:	4b4a      	ldr	r3, [pc, #296]	; (801b320 <ThreadIbuttonTask+0x234>)
 801b1f8:	885b      	ldrh	r3, [r3, #2]
 801b1fa:	2b04      	cmp	r3, #4
 801b1fc:	d008      	beq.n	801b210 <ThreadIbuttonTask+0x124>
 801b1fe:	4b48      	ldr	r3, [pc, #288]	; (801b320 <ThreadIbuttonTask+0x234>)
 801b200:	885b      	ldrh	r3, [r3, #2]
 801b202:	2b02      	cmp	r3, #2
 801b204:	d004      	beq.n	801b210 <ThreadIbuttonTask+0x124>
 801b206:	4b46      	ldr	r3, [pc, #280]	; (801b320 <ThreadIbuttonTask+0x234>)
 801b208:	885b      	ldrh	r3, [r3, #2]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	f040 808c 	bne.w	801b328 <ThreadIbuttonTask+0x23c>
			  		{

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b210:	4b41      	ldr	r3, [pc, #260]	; (801b318 <ThreadIbuttonTask+0x22c>)
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	f04f 31ff 	mov.w	r1, #4294967295
 801b218:	4618      	mov	r0, r3
 801b21a:	f7fb fd41 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*IBUTTON_COMPLETE_0_REG, 0x00);
 801b21e:	2100      	movs	r1, #0
 801b220:	f242 002a 	movw	r0, #8234	; 0x202a
 801b224:	f00a f90e 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_0_REG+1, ibutton_temp[0]);
 801b228:	7c3b      	ldrb	r3, [r7, #16]
 801b22a:	4619      	mov	r1, r3
 801b22c:	f242 002b 	movw	r0, #8235	; 0x202b
 801b230:	f00a f908 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_1_REG, 0x00);
 801b234:	2100      	movs	r1, #0
 801b236:	f242 002c 	movw	r0, #8236	; 0x202c
 801b23a:	f00a f903 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_1_REG+1, ibutton_temp[1]);
 801b23e:	7c7b      	ldrb	r3, [r7, #17]
 801b240:	4619      	mov	r1, r3
 801b242:	f242 002d 	movw	r0, #8237	; 0x202d
 801b246:	f00a f8fd 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_2_REG, 0x00);
 801b24a:	2100      	movs	r1, #0
 801b24c:	f242 002e 	movw	r0, #8238	; 0x202e
 801b250:	f00a f8f8 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_2_REG+1, ibutton_temp[2]);
 801b254:	7cbb      	ldrb	r3, [r7, #18]
 801b256:	4619      	mov	r1, r3
 801b258:	f242 002f 	movw	r0, #8239	; 0x202f
 801b25c:	f00a f8f2 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_3_REG, 0x00);
 801b260:	2100      	movs	r1, #0
 801b262:	f242 0030 	movw	r0, #8240	; 0x2030
 801b266:	f00a f8ed 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_3_REG+1, ibutton_temp[3]);
 801b26a:	7cfb      	ldrb	r3, [r7, #19]
 801b26c:	4619      	mov	r1, r3
 801b26e:	f242 0031 	movw	r0, #8241	; 0x2031
 801b272:	f00a f8e7 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_4_REG, 0x00);
 801b276:	2100      	movs	r1, #0
 801b278:	f242 0032 	movw	r0, #8242	; 0x2032
 801b27c:	f00a f8e2 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_4_REG+1, ibutton_temp[4]);
 801b280:	7d3b      	ldrb	r3, [r7, #20]
 801b282:	4619      	mov	r1, r3
 801b284:	f242 0033 	movw	r0, #8243	; 0x2033
 801b288:	f00a f8dc 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_5_REG, 0x00);
 801b28c:	2100      	movs	r1, #0
 801b28e:	f242 0034 	movw	r0, #8244	; 0x2034
 801b292:	f00a f8d7 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_5_REG+1, ibutton_temp[5]);
 801b296:	7d7b      	ldrb	r3, [r7, #21]
 801b298:	4619      	mov	r1, r3
 801b29a:	f242 0035 	movw	r0, #8245	; 0x2035
 801b29e:	f00a f8d1 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_6_REG, 0x00);
 801b2a2:	2100      	movs	r1, #0
 801b2a4:	f242 0036 	movw	r0, #8246	; 0x2036
 801b2a8:	f00a f8cc 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_6_REG+1, ibutton_temp[6]);
 801b2ac:	7dbb      	ldrb	r3, [r7, #22]
 801b2ae:	4619      	mov	r1, r3
 801b2b0:	f242 0037 	movw	r0, #8247	; 0x2037
 801b2b4:	f00a f8c6 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_7_REG, 0x00);
 801b2b8:	2100      	movs	r1, #0
 801b2ba:	f242 0038 	movw	r0, #8248	; 0x2038
 801b2be:	f00a f8c1 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_7_REG+1, ibutton_temp[7]);
 801b2c2:	7dfb      	ldrb	r3, [r7, #23]
 801b2c4:	4619      	mov	r1, r3
 801b2c6:	f242 0039 	movw	r0, #8249	; 0x2039
 801b2ca:	f00a f8bb 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801b2ce:	4b12      	ldr	r3, [pc, #72]	; (801b318 <ThreadIbuttonTask+0x22c>)
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	f7fb fd32 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b2d8:	4b0f      	ldr	r3, [pc, #60]	; (801b318 <ThreadIbuttonTask+0x22c>)
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	f04f 31ff 	mov.w	r1, #4294967295
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	f7fb fcdd 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_CONTROL_REG, 0x00); // запускаем процесс постановки на охрану
 801b2e6:	2100      	movs	r1, #0
 801b2e8:	f242 1020 	movw	r0, #8480	; 0x2120
 801b2ec:	f00a f8aa 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_CONTROL_REG+1, ENABLE_FROM_IBUTTON);
 801b2f0:	2103      	movs	r1, #3
 801b2f2:	f242 1021 	movw	r0, #8481	; 0x2121
 801b2f6:	f00a f8a5 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801b2fa:	4b07      	ldr	r3, [pc, #28]	; (801b318 <ThreadIbuttonTask+0x22c>)
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	4618      	mov	r0, r3
 801b300:	f7fb fd1c 	bl	8016d3c <osMutexRelease>

						control_registers.security_control_reg = ENABLE_FROM_IBUTTON;
 801b304:	4b07      	ldr	r3, [pc, #28]	; (801b324 <ThreadIbuttonTask+0x238>)
 801b306:	2203      	movs	r2, #3
 801b308:	801a      	strh	r2, [r3, #0]

						HAL_Delay(10000); // делаем паузу
 801b30a:	f242 7010 	movw	r0, #10000	; 0x2710
 801b30e:	f7f6 fcad 	bl	8011c6c <HAL_Delay>
 801b312:	e09f      	b.n	801b454 <ThreadIbuttonTask+0x368>
 801b314:	20008114 	.word	0x20008114
 801b318:	20009a6c 	.word	0x20009a6c
 801b31c:	20009d8c 	.word	0x20009d8c
 801b320:	2000a10c 	.word	0x2000a10c
 801b324:	2000a1cc 	.word	0x2000a1cc

			  		}

					else if( (status_registers.security_status_reg == ENABLED_BY_IBUTTON) || (status_registers.security_status_reg == ENABLED_BY_SERVER) || ( status_registers.security_status_reg == DOOR_OPEN_ALARM ) || ( status_registers.security_status_reg == ARMING_ERROR ) || ( status_registers.security_status_reg == DOOR_OPEN_POWER_OFF) ) // если сигнализация включена, снимаем с охраны
 801b328:	4b4c      	ldr	r3, [pc, #304]	; (801b45c <ThreadIbuttonTask+0x370>)
 801b32a:	885b      	ldrh	r3, [r3, #2]
 801b32c:	2b03      	cmp	r3, #3
 801b32e:	d010      	beq.n	801b352 <ThreadIbuttonTask+0x266>
 801b330:	4b4a      	ldr	r3, [pc, #296]	; (801b45c <ThreadIbuttonTask+0x370>)
 801b332:	885b      	ldrh	r3, [r3, #2]
 801b334:	2b01      	cmp	r3, #1
 801b336:	d00c      	beq.n	801b352 <ThreadIbuttonTask+0x266>
 801b338:	4b48      	ldr	r3, [pc, #288]	; (801b45c <ThreadIbuttonTask+0x370>)
 801b33a:	885b      	ldrh	r3, [r3, #2]
 801b33c:	2b05      	cmp	r3, #5
 801b33e:	d008      	beq.n	801b352 <ThreadIbuttonTask+0x266>
 801b340:	4b46      	ldr	r3, [pc, #280]	; (801b45c <ThreadIbuttonTask+0x370>)
 801b342:	885b      	ldrh	r3, [r3, #2]
 801b344:	2b07      	cmp	r3, #7
 801b346:	d004      	beq.n	801b352 <ThreadIbuttonTask+0x266>
 801b348:	4b44      	ldr	r3, [pc, #272]	; (801b45c <ThreadIbuttonTask+0x370>)
 801b34a:	885b      	ldrh	r3, [r3, #2]
 801b34c:	2b08      	cmp	r3, #8
 801b34e:	f040 8081 	bne.w	801b454 <ThreadIbuttonTask+0x368>
			  		{

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b352:	4b43      	ldr	r3, [pc, #268]	; (801b460 <ThreadIbuttonTask+0x374>)
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	f04f 31ff 	mov.w	r1, #4294967295
 801b35a:	4618      	mov	r0, r3
 801b35c:	f7fb fca0 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*IBUTTON_COMPLETE_0_REG, 0x00);
 801b360:	2100      	movs	r1, #0
 801b362:	f242 002a 	movw	r0, #8234	; 0x202a
 801b366:	f00a f86d 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_0_REG+1, ibutton_temp[0]);
 801b36a:	7c3b      	ldrb	r3, [r7, #16]
 801b36c:	4619      	mov	r1, r3
 801b36e:	f242 002b 	movw	r0, #8235	; 0x202b
 801b372:	f00a f867 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_1_REG, 0x00);
 801b376:	2100      	movs	r1, #0
 801b378:	f242 002c 	movw	r0, #8236	; 0x202c
 801b37c:	f00a f862 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_1_REG+1, ibutton_temp[1]);
 801b380:	7c7b      	ldrb	r3, [r7, #17]
 801b382:	4619      	mov	r1, r3
 801b384:	f242 002d 	movw	r0, #8237	; 0x202d
 801b388:	f00a f85c 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_2_REG, 0x00);
 801b38c:	2100      	movs	r1, #0
 801b38e:	f242 002e 	movw	r0, #8238	; 0x202e
 801b392:	f00a f857 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_2_REG+1, ibutton_temp[2]);
 801b396:	7cbb      	ldrb	r3, [r7, #18]
 801b398:	4619      	mov	r1, r3
 801b39a:	f242 002f 	movw	r0, #8239	; 0x202f
 801b39e:	f00a f851 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_3_REG, 0x00);
 801b3a2:	2100      	movs	r1, #0
 801b3a4:	f242 0030 	movw	r0, #8240	; 0x2030
 801b3a8:	f00a f84c 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_3_REG+1, ibutton_temp[3]);
 801b3ac:	7cfb      	ldrb	r3, [r7, #19]
 801b3ae:	4619      	mov	r1, r3
 801b3b0:	f242 0031 	movw	r0, #8241	; 0x2031
 801b3b4:	f00a f846 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_4_REG, 0x00);
 801b3b8:	2100      	movs	r1, #0
 801b3ba:	f242 0032 	movw	r0, #8242	; 0x2032
 801b3be:	f00a f841 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_4_REG+1, ibutton_temp[4]);
 801b3c2:	7d3b      	ldrb	r3, [r7, #20]
 801b3c4:	4619      	mov	r1, r3
 801b3c6:	f242 0033 	movw	r0, #8243	; 0x2033
 801b3ca:	f00a f83b 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_5_REG, 0x00);
 801b3ce:	2100      	movs	r1, #0
 801b3d0:	f242 0034 	movw	r0, #8244	; 0x2034
 801b3d4:	f00a f836 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_5_REG+1, ibutton_temp[5]);
 801b3d8:	7d7b      	ldrb	r3, [r7, #21]
 801b3da:	4619      	mov	r1, r3
 801b3dc:	f242 0035 	movw	r0, #8245	; 0x2035
 801b3e0:	f00a f830 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_6_REG, 0x00);
 801b3e4:	2100      	movs	r1, #0
 801b3e6:	f242 0036 	movw	r0, #8246	; 0x2036
 801b3ea:	f00a f82b 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_6_REG+1, ibutton_temp[6]);
 801b3ee:	7dbb      	ldrb	r3, [r7, #22]
 801b3f0:	4619      	mov	r1, r3
 801b3f2:	f242 0037 	movw	r0, #8247	; 0x2037
 801b3f6:	f00a f825 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_7_REG, 0x00);
 801b3fa:	2100      	movs	r1, #0
 801b3fc:	f242 0038 	movw	r0, #8248	; 0x2038
 801b400:	f00a f820 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_7_REG+1, ibutton_temp[7]);
 801b404:	7dfb      	ldrb	r3, [r7, #23]
 801b406:	4619      	mov	r1, r3
 801b408:	f242 0039 	movw	r0, #8249	; 0x2039
 801b40c:	f00a f81a 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801b410:	4b13      	ldr	r3, [pc, #76]	; (801b460 <ThreadIbuttonTask+0x374>)
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	4618      	mov	r0, r3
 801b416:	f7fb fc91 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b41a:	4b11      	ldr	r3, [pc, #68]	; (801b460 <ThreadIbuttonTask+0x374>)
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	f04f 31ff 	mov.w	r1, #4294967295
 801b422:	4618      	mov	r0, r3
 801b424:	f7fb fc3c 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_CONTROL_REG, 0x00); // запускаем процесс постановки на охрану
 801b428:	2100      	movs	r1, #0
 801b42a:	f242 1020 	movw	r0, #8480	; 0x2120
 801b42e:	f00a f809 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_CONTROL_REG+1, DISABLE_FROM_IBUTTON);
 801b432:	2104      	movs	r1, #4
 801b434:	f242 1021 	movw	r0, #8481	; 0x2121
 801b438:	f00a f804 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801b43c:	4b08      	ldr	r3, [pc, #32]	; (801b460 <ThreadIbuttonTask+0x374>)
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	4618      	mov	r0, r3
 801b442:	f7fb fc7b 	bl	8016d3c <osMutexRelease>

						control_registers.security_control_reg = DISABLE_FROM_IBUTTON;
 801b446:	4b07      	ldr	r3, [pc, #28]	; (801b464 <ThreadIbuttonTask+0x378>)
 801b448:	2204      	movs	r2, #4
 801b44a:	801a      	strh	r2, [r3, #0]

						HAL_Delay(10000);
 801b44c:	f242 7010 	movw	r0, #10000	; 0x2710
 801b450:	f7f6 fc0c 	bl	8011c6c <HAL_Delay>
			}


		}

		osDelay(10);
 801b454:	200a      	movs	r0, #10
 801b456:	f7fb fb42 	bl	8016ade <osDelay>
		if( ibutton_reset() == HAL_OK )// Инициализируем ibutton таблетку, проверяем отвечает ли она на сброс, если отвечает, то выполняем чтение ROM
 801b45a:	e681      	b.n	801b160 <ThreadIbuttonTask+0x74>
 801b45c:	2000a10c 	.word	0x2000a10c
 801b460:	20009a6c 	.word	0x20009a6c
 801b464:	2000a1cc 	.word	0x2000a1cc

0801b468 <ThreadLedTask>:
extern osThreadId IbuttonTaskHandle;
extern status_register_struct status_registers;
extern uint8_t security_state;

void ThreadLedTask(void const * argument)
{
 801b468:	b580      	push	{r7, lr}
 801b46a:	b084      	sub	sp, #16
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	6078      	str	r0, [r7, #4]

	uint8_t door_open_alarm_counter = 0; // счетчик времени для процесса тревоги открытия двери
 801b470:	2300      	movs	r3, #0
 801b472:	73fb      	strb	r3, [r7, #15]
	uint8_t arming_process_counter = 0; // счетчик времени для процесса постановки на охрану
 801b474:	2300      	movs	r3, #0
 801b476:	73bb      	strb	r3, [r7, #14]
	uint8_t arming_error_counter = 0; // счетчик времени для процесса ошибки постановки на охрану
 801b478:	2300      	movs	r3, #0
 801b47a:	737b      	strb	r3, [r7, #13]

	osThreadSuspend(LedTaskHandle); // переводим поток ThreadLedTask в спящий режим
 801b47c:	4b3a      	ldr	r3, [pc, #232]	; (801b568 <ThreadLedTask+0x100>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	4618      	mov	r0, r3
 801b482:	f7fb fe31 	bl	80170e8 <osThreadSuspend>
	osThreadResume(IbuttonTaskHandle); // пробуждаем поток ThreadIbuttonTask из спящего режима
 801b486:	4b39      	ldr	r3, [pc, #228]	; (801b56c <ThreadLedTask+0x104>)
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	4618      	mov	r0, r3
 801b48c:	f7fb fe38 	bl	8017100 <osThreadResume>



	for(;;)
	{
		switch(status_registers.security_status_reg)
 801b490:	4b37      	ldr	r3, [pc, #220]	; (801b570 <ThreadLedTask+0x108>)
 801b492:	885b      	ldrh	r3, [r3, #2]
 801b494:	3b01      	subs	r3, #1
 801b496:	2b07      	cmp	r3, #7
 801b498:	d861      	bhi.n	801b55e <ThreadLedTask+0xf6>
 801b49a:	a201      	add	r2, pc, #4	; (adr r2, 801b4a0 <ThreadLedTask+0x38>)
 801b49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b4a0:	0801b4c1 	.word	0x0801b4c1
 801b4a4:	0801b4cb 	.word	0x0801b4cb
 801b4a8:	0801b4d5 	.word	0x0801b4d5
 801b4ac:	0801b4df 	.word	0x0801b4df
 801b4b0:	0801b4e9 	.word	0x0801b4e9
 801b4b4:	0801b503 	.word	0x0801b503
 801b4b8:	0801b51d 	.word	0x0801b51d
 801b4bc:	0801b537 	.word	0x0801b537
		{
			case(ENABLED_BY_SERVER): // Если включена из центра

				LED_OUT_ON();
 801b4c0:	f00a f886 	bl	80255d0 <LED_OUT_ON>
				LED2_ON();
 801b4c4:	f00a f8d8 	bl	8025678 <LED2_ON>

			break;
 801b4c8:	e049      	b.n	801b55e <ThreadLedTask+0xf6>

			case(DISABLED_BY_SERVER): // Если отключена из центра

				LED_OUT_OFF();
 801b4ca:	f00a f88d 	bl	80255e8 <LED_OUT_OFF>
				LED2_OFF();
 801b4ce:	f00a f8c7 	bl	8025660 <LED2_OFF>

			break;
 801b4d2:	e044      	b.n	801b55e <ThreadLedTask+0xf6>

			case(ENABLED_BY_IBUTTON): // Если включена с таблетки

				LED_OUT_ON();
 801b4d4:	f00a f87c 	bl	80255d0 <LED_OUT_ON>
				LED2_ON();
 801b4d8:	f00a f8ce 	bl	8025678 <LED2_ON>

			break;
 801b4dc:	e03f      	b.n	801b55e <ThreadLedTask+0xf6>

			case(DISABLED_BY_IBUTTON): // Если отключена с таблетки

				LED_OUT_OFF();
 801b4de:	f00a f883 	bl	80255e8 <LED_OUT_OFF>
				LED2_OFF();
 801b4e2:	f00a f8bd 	bl	8025660 <LED2_OFF>

			break;
 801b4e6:	e03a      	b.n	801b55e <ThreadLedTask+0xf6>

			case(DOOR_OPEN_ALARM): // Если тревога открытия двери

				door_open_alarm_counter++; // увеличиваем значение счетчика времени для процесса тревоги открытия двери
 801b4e8:	7bfb      	ldrb	r3, [r7, #15]
 801b4ea:	3301      	adds	r3, #1
 801b4ec:	73fb      	strb	r3, [r7, #15]

				if(door_open_alarm_counter>=20)
 801b4ee:	7bfb      	ldrb	r3, [r7, #15]
 801b4f0:	2b13      	cmp	r3, #19
 801b4f2:	d92d      	bls.n	801b550 <ThreadLedTask+0xe8>
				{
					door_open_alarm_counter = 0;
 801b4f4:	2300      	movs	r3, #0
 801b4f6:	73fb      	strb	r3, [r7, #15]
					LED_OUT_TOGGLE();
 801b4f8:	f00a f882 	bl	8025600 <LED_OUT_TOGGLE>
					LED2_TOGGLE();
 801b4fc:	f00a f8c8 	bl	8025690 <LED2_TOGGLE>
				}

			break;
 801b500:	e026      	b.n	801b550 <ThreadLedTask+0xe8>

			case(ARMING_PROCESS): // Если в процессе постановки на охрану

				arming_process_counter++; // увеличиваем значение счетчика времени для процесса постановки на охрану
 801b502:	7bbb      	ldrb	r3, [r7, #14]
 801b504:	3301      	adds	r3, #1
 801b506:	73bb      	strb	r3, [r7, #14]

				if(arming_process_counter>=100)
 801b508:	7bbb      	ldrb	r3, [r7, #14]
 801b50a:	2b63      	cmp	r3, #99	; 0x63
 801b50c:	d922      	bls.n	801b554 <ThreadLedTask+0xec>
				{
					arming_process_counter = 0;
 801b50e:	2300      	movs	r3, #0
 801b510:	73bb      	strb	r3, [r7, #14]
					LED_OUT_TOGGLE();
 801b512:	f00a f875 	bl	8025600 <LED_OUT_TOGGLE>
					LED2_TOGGLE();
 801b516:	f00a f8bb 	bl	8025690 <LED2_TOGGLE>
				}

			break;
 801b51a:	e01b      	b.n	801b554 <ThreadLedTask+0xec>

			case(ARMING_ERROR): // Если ошибка постановки на охрану

				arming_error_counter++; // увеличиваем значение счетчика времени для процесса ошибки постановки на охрану
 801b51c:	7b7b      	ldrb	r3, [r7, #13]
 801b51e:	3301      	adds	r3, #1
 801b520:	737b      	strb	r3, [r7, #13]

				if(arming_error_counter>=10)
 801b522:	7b7b      	ldrb	r3, [r7, #13]
 801b524:	2b09      	cmp	r3, #9
 801b526:	d917      	bls.n	801b558 <ThreadLedTask+0xf0>
				{
					arming_error_counter = 0;
 801b528:	2300      	movs	r3, #0
 801b52a:	737b      	strb	r3, [r7, #13]
					LED_OUT_TOGGLE();
 801b52c:	f00a f868 	bl	8025600 <LED_OUT_TOGGLE>
					LED2_TOGGLE();
 801b530:	f00a f8ae 	bl	8025690 <LED2_TOGGLE>
				}

			break;
 801b534:	e010      	b.n	801b558 <ThreadLedTask+0xf0>

			case(DOOR_OPEN_POWER_OFF): // Если тревога открытия двери

				door_open_alarm_counter++; // увеличиваем значение счетчика времени для процесса тревоги открытия двери
 801b536:	7bfb      	ldrb	r3, [r7, #15]
 801b538:	3301      	adds	r3, #1
 801b53a:	73fb      	strb	r3, [r7, #15]

				if(door_open_alarm_counter>=20)
 801b53c:	7bfb      	ldrb	r3, [r7, #15]
 801b53e:	2b13      	cmp	r3, #19
 801b540:	d90c      	bls.n	801b55c <ThreadLedTask+0xf4>
				{
					door_open_alarm_counter = 0;
 801b542:	2300      	movs	r3, #0
 801b544:	73fb      	strb	r3, [r7, #15]
					LED_OUT_TOGGLE();
 801b546:	f00a f85b 	bl	8025600 <LED_OUT_TOGGLE>
					LED2_TOGGLE();
 801b54a:	f00a f8a1 	bl	8025690 <LED2_TOGGLE>
				}

			break;
 801b54e:	e005      	b.n	801b55c <ThreadLedTask+0xf4>
			break;
 801b550:	bf00      	nop
 801b552:	e004      	b.n	801b55e <ThreadLedTask+0xf6>
			break;
 801b554:	bf00      	nop
 801b556:	e002      	b.n	801b55e <ThreadLedTask+0xf6>
			break;
 801b558:	bf00      	nop
 801b55a:	e000      	b.n	801b55e <ThreadLedTask+0xf6>
			break;
 801b55c:	bf00      	nop
		}


		osDelay(10); // вызываем процесс один раз в 10 мс
 801b55e:	200a      	movs	r0, #10
 801b560:	f7fb fabd 	bl	8016ade <osDelay>
		switch(status_registers.security_status_reg)
 801b564:	e794      	b.n	801b490 <ThreadLedTask+0x28>
 801b566:	bf00      	nop
 801b568:	200098d8 	.word	0x200098d8
 801b56c:	20008114 	.word	0x20008114
 801b570:	2000a10c 	.word	0x2000a10c

0801b574 <ThreadM95Task>:




void ThreadM95Task(void const * argument)
{
 801b574:	b590      	push	{r4, r7, lr}
 801b576:	b085      	sub	sp, #20
 801b578:	af02      	add	r7, sp, #8
 801b57a:	6078      	str	r0, [r7, #4]
	osThreadSuspend(M95TaskHandle);
 801b57c:	4bbe      	ldr	r3, [pc, #760]	; (801b878 <ThreadM95Task+0x304>)
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	4618      	mov	r0, r3
 801b582:	f7fb fdb1 	bl	80170e8 <osThreadSuspend>
	osSemaphoreWait(TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 801b586:	4bbd      	ldr	r3, [pc, #756]	; (801b87c <ThreadM95Task+0x308>)
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	f04f 31ff 	mov.w	r1, #4294967295
 801b58e:	4618      	mov	r0, r3
 801b590:	f7fb fc4a 	bl	8016e28 <osSemaphoreWait>
	osSemaphoreWait(ReceiveStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 801b594:	4bba      	ldr	r3, [pc, #744]	; (801b880 <ThreadM95Task+0x30c>)
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	f04f 31ff 	mov.w	r1, #4294967295
 801b59c:	4618      	mov	r0, r3
 801b59e:	f7fb fc43 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(Ring_Center_TimerHandle, 60000); // запускаем таймер для перезагрузки по его окончанию
 801b5a2:	4bb8      	ldr	r3, [pc, #736]	; (801b884 <ThreadM95Task+0x310>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	f64e 2160 	movw	r1, #60000	; 0xea60
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	f7fb fae0 	bl	8016b70 <osTimerStart>
	*/


	// сервер освещения Главный, неопределено 239

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b5b0:	4bb5      	ldr	r3, [pc, #724]	; (801b888 <ThreadM95Task+0x314>)
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	f04f 31ff 	mov.w	r1, #4294967295
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	f7fb fb71 	bl	8016ca0 <osMutexWait>
	fm25v02_write(2*VERSION_REG, 0x03);
 801b5be:	2103      	movs	r1, #3
 801b5c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801b5c4:	f009 ff3e 	bl	8025444 <fm25v02_write>
	fm25v02_write(2*VERSION_REG+1, 0x0E);
 801b5c8:	210e      	movs	r1, #14
 801b5ca:	f242 0001 	movw	r0, #8193	; 0x2001
 801b5ce:	f009 ff39 	bl	8025444 <fm25v02_write>
	//fm25v02_write(2*ERROR_LOOP_REG+1, 0x00);

	//fm25v02_write(2*ALARM_LOOP_REG, 0);
	//fm25v02_write(2*ALARM_LOOP_REG+1, 0x00);

	osMutexRelease(Fm25v02MutexHandle);
 801b5d2:	4bad      	ldr	r3, [pc, #692]	; (801b888 <ThreadM95Task+0x314>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	f7fb fbb0 	bl	8016d3c <osMutexRelease>


	for(;;)
	{

		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b5dc:	4baa      	ldr	r3, [pc, #680]	; (801b888 <ThreadM95Task+0x314>)
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	f04f 31ff 	mov.w	r1, #4294967295
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7fb fb5b 	bl	8016ca0 <osMutexWait>

		fm25v02_read(2*IP_1_REG+1, &ip1); // читаем значение IP адреса сервера из памяти
 801b5ea:	49a8      	ldr	r1, [pc, #672]	; (801b88c <ThreadM95Task+0x318>)
 801b5ec:	f242 105f 	movw	r0, #8543	; 0x215f
 801b5f0:	f009 feee 	bl	80253d0 <fm25v02_read>
		fm25v02_read(2*IP_2_REG+1, &ip2);
 801b5f4:	49a6      	ldr	r1, [pc, #664]	; (801b890 <ThreadM95Task+0x31c>)
 801b5f6:	f242 1061 	movw	r0, #8545	; 0x2161
 801b5fa:	f009 fee9 	bl	80253d0 <fm25v02_read>
		fm25v02_read(2*IP_3_REG+1, &ip3);
 801b5fe:	49a5      	ldr	r1, [pc, #660]	; (801b894 <ThreadM95Task+0x320>)
 801b600:	f242 1063 	movw	r0, #8547	; 0x2163
 801b604:	f009 fee4 	bl	80253d0 <fm25v02_read>
		fm25v02_read(2*IP_4_REG+1, &ip4);
 801b608:	49a3      	ldr	r1, [pc, #652]	; (801b898 <ThreadM95Task+0x324>)
 801b60a:	f242 1065 	movw	r0, #8549	; 0x2165
 801b60e:	f009 fedf 	bl	80253d0 <fm25v02_read>
		fm25v02_read(2*PORT_HIGH_REG+1, &port_high_reg); // читаем значение старшего байта порта сервера
 801b612:	49a2      	ldr	r1, [pc, #648]	; (801b89c <ThreadM95Task+0x328>)
 801b614:	f242 1067 	movw	r0, #8551	; 0x2167
 801b618:	f009 feda 	bl	80253d0 <fm25v02_read>
		fm25v02_read(2*PORT_LOW_REG+1, &port_low_reg); // читаем занчение младшего байта порта сервера
 801b61c:	49a0      	ldr	r1, [pc, #640]	; (801b8a0 <ThreadM95Task+0x32c>)
 801b61e:	f242 1069 	movw	r0, #8553	; 0x2169
 801b622:	f009 fed5 	bl	80253d0 <fm25v02_read>

		osMutexRelease(Fm25v02MutexHandle);
 801b626:	4b98      	ldr	r3, [pc, #608]	; (801b888 <ThreadM95Task+0x314>)
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	4618      	mov	r0, r3
 801b62c:	f7fb fb86 	bl	8016d3c <osMutexRelease>

		port = (((uint16_t)port_high_reg)<<8)|((uint16_t)port_low_reg); // вычисляем общее значение регистра порта
 801b630:	4b9a      	ldr	r3, [pc, #616]	; (801b89c <ThreadM95Task+0x328>)
 801b632:	781b      	ldrb	r3, [r3, #0]
 801b634:	b2db      	uxtb	r3, r3
 801b636:	021b      	lsls	r3, r3, #8
 801b638:	b21a      	sxth	r2, r3
 801b63a:	4b99      	ldr	r3, [pc, #612]	; (801b8a0 <ThreadM95Task+0x32c>)
 801b63c:	781b      	ldrb	r3, [r3, #0]
 801b63e:	b2db      	uxtb	r3, r3
 801b640:	b21b      	sxth	r3, r3
 801b642:	4313      	orrs	r3, r2
 801b644:	b21b      	sxth	r3, r3
 801b646:	b29a      	uxth	r2, r3
 801b648:	4b96      	ldr	r3, [pc, #600]	; (801b8a4 <ThreadM95Task+0x330>)
 801b64a:	801a      	strh	r2, [r3, #0]

		if ( (ip1==0)&&(ip2==0)&&(ip3==0)&&(ip4==0)&&(port==0) ) // Если значения ip адреса сервера и его номера порта при инициализации нулевые, то выставляем их значения по умолчанию
 801b64c:	4b8f      	ldr	r3, [pc, #572]	; (801b88c <ThreadM95Task+0x318>)
 801b64e:	781b      	ldrb	r3, [r3, #0]
 801b650:	b2db      	uxtb	r3, r3
 801b652:	2b00      	cmp	r3, #0
 801b654:	d123      	bne.n	801b69e <ThreadM95Task+0x12a>
 801b656:	4b8e      	ldr	r3, [pc, #568]	; (801b890 <ThreadM95Task+0x31c>)
 801b658:	781b      	ldrb	r3, [r3, #0]
 801b65a:	b2db      	uxtb	r3, r3
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d11e      	bne.n	801b69e <ThreadM95Task+0x12a>
 801b660:	4b8c      	ldr	r3, [pc, #560]	; (801b894 <ThreadM95Task+0x320>)
 801b662:	781b      	ldrb	r3, [r3, #0]
 801b664:	b2db      	uxtb	r3, r3
 801b666:	2b00      	cmp	r3, #0
 801b668:	d119      	bne.n	801b69e <ThreadM95Task+0x12a>
 801b66a:	4b8b      	ldr	r3, [pc, #556]	; (801b898 <ThreadM95Task+0x324>)
 801b66c:	781b      	ldrb	r3, [r3, #0]
 801b66e:	b2db      	uxtb	r3, r3
 801b670:	2b00      	cmp	r3, #0
 801b672:	d114      	bne.n	801b69e <ThreadM95Task+0x12a>
 801b674:	4b8b      	ldr	r3, [pc, #556]	; (801b8a4 <ThreadM95Task+0x330>)
 801b676:	881b      	ldrh	r3, [r3, #0]
 801b678:	b29b      	uxth	r3, r3
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d10f      	bne.n	801b69e <ThreadM95Task+0x12a>
		{
			// сервер сигнализации
			ip1 = 195;    // значение по умолчанию
 801b67e:	4b83      	ldr	r3, [pc, #524]	; (801b88c <ThreadM95Task+0x318>)
 801b680:	22c3      	movs	r2, #195	; 0xc3
 801b682:	701a      	strb	r2, [r3, #0]
			ip2 = 208;    // значение по умолчанию
 801b684:	4b82      	ldr	r3, [pc, #520]	; (801b890 <ThreadM95Task+0x31c>)
 801b686:	22d0      	movs	r2, #208	; 0xd0
 801b688:	701a      	strb	r2, [r3, #0]
			ip3 = 163;    // значение по умолчанию
 801b68a:	4b82      	ldr	r3, [pc, #520]	; (801b894 <ThreadM95Task+0x320>)
 801b68c:	22a3      	movs	r2, #163	; 0xa3
 801b68e:	701a      	strb	r2, [r3, #0]
			ip4 = 67;     // значение по умолчанию
 801b690:	4b81      	ldr	r3, [pc, #516]	; (801b898 <ThreadM95Task+0x324>)
 801b692:	2243      	movs	r2, #67	; 0x43
 801b694:	701a      	strb	r2, [r3, #0]
			port = 35050; // значение по умолчанию
 801b696:	4b83      	ldr	r3, [pc, #524]	; (801b8a4 <ThreadM95Task+0x330>)
 801b698:	f648 02ea 	movw	r2, #35050	; 0x88ea
 801b69c:	801a      	strh	r2, [r3, #0]
			//ip4 = 67;     // значение по умолчанию
			//port = 35070; // значение по умолчанию
		}


		osMutexWait(UartMutexHandle, osWaitForever);
 801b69e:	4b82      	ldr	r3, [pc, #520]	; (801b8a8 <ThreadM95Task+0x334>)
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	f04f 31ff 	mov.w	r1, #4294967295
 801b6a6:	4618      	mov	r0, r3
 801b6a8:	f7fb fafa 	bl	8016ca0 <osMutexWait>

		if(AT()==AT_ERROR) // два раза проверяем, есть ли ответ на команду АТ, если нет, включаем питание
 801b6ac:	f00a fb3a 	bl	8025d24 <AT>
 801b6b0:	4603      	mov	r3, r0
 801b6b2:	2b01      	cmp	r3, #1
 801b6b4:	d106      	bne.n	801b6c4 <ThreadM95Task+0x150>
		{
			if(AT()==AT_ERROR)
 801b6b6:	f00a fb35 	bl	8025d24 <AT>
 801b6ba:	4603      	mov	r3, r0
 801b6bc:	2b01      	cmp	r3, #1
 801b6be:	d101      	bne.n	801b6c4 <ThreadM95Task+0x150>
			{
				m95_power_on();
 801b6c0:	f00a fa88 	bl	8025bd4 <m95_power_on>
			}
		}

		if( ATE0() == AT_OK )
 801b6c4:	f00a fad8 	bl	8025c78 <ATE0>
		{

		}

		osMutexRelease(UartMutexHandle);
 801b6c8:	4b77      	ldr	r3, [pc, #476]	; (801b8a8 <ThreadM95Task+0x334>)
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f7fb fb35 	bl	8016d3c <osMutexRelease>

		osMutexWait(UartMutexHandle, osWaitForever);
 801b6d2:	4b75      	ldr	r3, [pc, #468]	; (801b8a8 <ThreadM95Task+0x334>)
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	f04f 31ff 	mov.w	r1, #4294967295
 801b6da:	4618      	mov	r0, r3
 801b6dc:	f7fb fae0 	bl	8016ca0 <osMutexWait>

		switch(AT_QISTATE())
 801b6e0:	f00b fafa 	bl	8026cd8 <AT_QISTATE>
 801b6e4:	4603      	mov	r3, r0
 801b6e6:	3b01      	subs	r3, #1
 801b6e8:	2b0b      	cmp	r3, #11
 801b6ea:	f200 8157 	bhi.w	801b99c <ThreadM95Task+0x428>
 801b6ee:	a201      	add	r2, pc, #4	; (adr r2, 801b6f4 <ThreadM95Task+0x180>)
 801b6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6f4:	0801b99d 	.word	0x0801b99d
 801b6f8:	0801b725 	.word	0x0801b725
 801b6fc:	0801b825 	.word	0x0801b825
 801b700:	0801b99d 	.word	0x0801b99d
 801b704:	0801b82f 	.word	0x0801b82f
 801b708:	0801b839 	.word	0x0801b839
 801b70c:	0801b993 	.word	0x0801b993
 801b710:	0801b99d 	.word	0x0801b99d
 801b714:	0801b99d 	.word	0x0801b99d
 801b718:	0801b8c1 	.word	0x0801b8c1
 801b71c:	0801b907 	.word	0x0801b907
 801b720:	0801b8fd 	.word	0x0801b8fd
		{
			case IP_INITIAL:

				LED1_OFF();
 801b724:	f009 ff84 	bl	8025630 <LED1_OFF>
				if( AT_QIMUX(0) == AT_OK )
 801b728:	2000      	movs	r0, #0
 801b72a:	f00b f917 	bl	802695c <AT_QIMUX>
				{

				}
				if( AT_COPS() == AT_OK )
 801b72e:	f00a ff57 	bl	80265e0 <AT_COPS>
				{

				}
				if(	AT_QCCID(&id2[0], &id1[0]) == AT_OK ) // читаем CCID сим-карты
 801b732:	495e      	ldr	r1, [pc, #376]	; (801b8ac <ThreadM95Task+0x338>)
 801b734:	485e      	ldr	r0, [pc, #376]	; (801b8b0 <ThreadM95Task+0x33c>)
 801b736:	f00a fbc9 	bl	8025ecc <AT_QCCID>
 801b73a:	4603      	mov	r3, r0
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d16b      	bne.n	801b818 <ThreadM95Task+0x2a4>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b740:	4b51      	ldr	r3, [pc, #324]	; (801b888 <ThreadM95Task+0x314>)
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	f04f 31ff 	mov.w	r1, #4294967295
 801b748:	4618      	mov	r0, r3
 801b74a:	f7fb faa9 	bl	8016ca0 <osMutexWait>
					//fm25v02_fast_write(ICCID_NUMBER_REG1, &id2[0], 8); // записываем в регистры CCID сим-карты
					fm25v02_write(2*ICCID_NUMBER_REG1, 0x00);
 801b74e:	2100      	movs	r1, #0
 801b750:	f242 00b0 	movw	r0, #8368	; 0x20b0
 801b754:	f009 fe76 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG1+1, id2[0]);
 801b758:	4b55      	ldr	r3, [pc, #340]	; (801b8b0 <ThreadM95Task+0x33c>)
 801b75a:	781b      	ldrb	r3, [r3, #0]
 801b75c:	4619      	mov	r1, r3
 801b75e:	f242 00b1 	movw	r0, #8369	; 0x20b1
 801b762:	f009 fe6f 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2, 0x00);
 801b766:	2100      	movs	r1, #0
 801b768:	f242 00b2 	movw	r0, #8370	; 0x20b2
 801b76c:	f009 fe6a 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2+1, id2[1]);
 801b770:	4b4f      	ldr	r3, [pc, #316]	; (801b8b0 <ThreadM95Task+0x33c>)
 801b772:	785b      	ldrb	r3, [r3, #1]
 801b774:	4619      	mov	r1, r3
 801b776:	f242 00b3 	movw	r0, #8371	; 0x20b3
 801b77a:	f009 fe63 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3, 0x00);
 801b77e:	2100      	movs	r1, #0
 801b780:	f242 00b4 	movw	r0, #8372	; 0x20b4
 801b784:	f009 fe5e 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3+1, id2[2]);
 801b788:	4b49      	ldr	r3, [pc, #292]	; (801b8b0 <ThreadM95Task+0x33c>)
 801b78a:	789b      	ldrb	r3, [r3, #2]
 801b78c:	4619      	mov	r1, r3
 801b78e:	f242 00b5 	movw	r0, #8373	; 0x20b5
 801b792:	f009 fe57 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4, 0x00);
 801b796:	2100      	movs	r1, #0
 801b798:	f242 00b6 	movw	r0, #8374	; 0x20b6
 801b79c:	f009 fe52 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4+1, id2[3]);
 801b7a0:	4b43      	ldr	r3, [pc, #268]	; (801b8b0 <ThreadM95Task+0x33c>)
 801b7a2:	78db      	ldrb	r3, [r3, #3]
 801b7a4:	4619      	mov	r1, r3
 801b7a6:	f242 00b7 	movw	r0, #8375	; 0x20b7
 801b7aa:	f009 fe4b 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5, 0x00);
 801b7ae:	2100      	movs	r1, #0
 801b7b0:	f242 00b8 	movw	r0, #8376	; 0x20b8
 801b7b4:	f009 fe46 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5+1, id2[4]);
 801b7b8:	4b3d      	ldr	r3, [pc, #244]	; (801b8b0 <ThreadM95Task+0x33c>)
 801b7ba:	791b      	ldrb	r3, [r3, #4]
 801b7bc:	4619      	mov	r1, r3
 801b7be:	f242 00b9 	movw	r0, #8377	; 0x20b9
 801b7c2:	f009 fe3f 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6, 0x00);
 801b7c6:	2100      	movs	r1, #0
 801b7c8:	f242 00ba 	movw	r0, #8378	; 0x20ba
 801b7cc:	f009 fe3a 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6+1, id2[5]);
 801b7d0:	4b37      	ldr	r3, [pc, #220]	; (801b8b0 <ThreadM95Task+0x33c>)
 801b7d2:	795b      	ldrb	r3, [r3, #5]
 801b7d4:	4619      	mov	r1, r3
 801b7d6:	f242 00bb 	movw	r0, #8379	; 0x20bb
 801b7da:	f009 fe33 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7, 0x00);
 801b7de:	2100      	movs	r1, #0
 801b7e0:	f242 00bc 	movw	r0, #8380	; 0x20bc
 801b7e4:	f009 fe2e 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7+1, id2[6]);
 801b7e8:	4b31      	ldr	r3, [pc, #196]	; (801b8b0 <ThreadM95Task+0x33c>)
 801b7ea:	799b      	ldrb	r3, [r3, #6]
 801b7ec:	4619      	mov	r1, r3
 801b7ee:	f242 00bd 	movw	r0, #8381	; 0x20bd
 801b7f2:	f009 fe27 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8, 0x00);
 801b7f6:	2100      	movs	r1, #0
 801b7f8:	f242 00be 	movw	r0, #8382	; 0x20be
 801b7fc:	f009 fe22 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8+1, id2[7]);
 801b800:	4b2b      	ldr	r3, [pc, #172]	; (801b8b0 <ThreadM95Task+0x33c>)
 801b802:	79db      	ldrb	r3, [r3, #7]
 801b804:	4619      	mov	r1, r3
 801b806:	f242 00bf 	movw	r0, #8383	; 0x20bf
 801b80a:	f009 fe1b 	bl	8025444 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 801b80e:	4b1e      	ldr	r3, [pc, #120]	; (801b888 <ThreadM95Task+0x314>)
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	4618      	mov	r0, r3
 801b814:	f7fb fa92 	bl	8016d3c <osMutexRelease>
				}

				if(AT_QIREGAPP("mts.internet.ru", "mts", "mts") == AT_OK)
 801b818:	4a26      	ldr	r2, [pc, #152]	; (801b8b4 <ThreadM95Task+0x340>)
 801b81a:	4926      	ldr	r1, [pc, #152]	; (801b8b4 <ThreadM95Task+0x340>)
 801b81c:	4826      	ldr	r0, [pc, #152]	; (801b8b8 <ThreadM95Task+0x344>)
 801b81e:	f00b f90b 	bl	8026a38 <AT_QIREGAPP>
				{

				}

			break;
 801b822:	e0c0      	b.n	801b9a6 <ThreadM95Task+0x432>

			case IP_START:

				LED1_OFF();
 801b824:	f009 ff04 	bl	8025630 <LED1_OFF>
				if(AT_QIACT()!=AT_OK)
 801b828:	f00b f982 	bl	8026b30 <AT_QIACT>
				{

				}

			break;
 801b82c:	e0bb      	b.n	801b9a6 <ThreadM95Task+0x432>

			case IP_IND:

				LED1_OFF();
 801b82e:	f009 feff 	bl	8025630 <LED1_OFF>
				if(AT_QIDEACT()!=AT_OK)
 801b832:	f00b f9e7 	bl	8026c04 <AT_QIDEACT>
				{

				}

			break;
 801b836:	e0b6      	b.n	801b9a6 <ThreadM95Task+0x432>

			case IP_GPRSACT:

				LED1_OFF();
 801b838:	f009 fefa 	bl	8025630 <LED1_OFF>
				if( AT_QIOPEN("TCP", ip1, ip2, ip3, ip4, port) == AT_OK )
 801b83c:	4b13      	ldr	r3, [pc, #76]	; (801b88c <ThreadM95Task+0x318>)
 801b83e:	781b      	ldrb	r3, [r3, #0]
 801b840:	b2d9      	uxtb	r1, r3
 801b842:	4b13      	ldr	r3, [pc, #76]	; (801b890 <ThreadM95Task+0x31c>)
 801b844:	781b      	ldrb	r3, [r3, #0]
 801b846:	b2d8      	uxtb	r0, r3
 801b848:	4b12      	ldr	r3, [pc, #72]	; (801b894 <ThreadM95Task+0x320>)
 801b84a:	781b      	ldrb	r3, [r3, #0]
 801b84c:	b2dc      	uxtb	r4, r3
 801b84e:	4b12      	ldr	r3, [pc, #72]	; (801b898 <ThreadM95Task+0x324>)
 801b850:	781b      	ldrb	r3, [r3, #0]
 801b852:	b2db      	uxtb	r3, r3
 801b854:	4a13      	ldr	r2, [pc, #76]	; (801b8a4 <ThreadM95Task+0x330>)
 801b856:	8812      	ldrh	r2, [r2, #0]
 801b858:	b292      	uxth	r2, r2
 801b85a:	9201      	str	r2, [sp, #4]
 801b85c:	9300      	str	r3, [sp, #0]
 801b85e:	4623      	mov	r3, r4
 801b860:	4602      	mov	r2, r0
 801b862:	4816      	ldr	r0, [pc, #88]	; (801b8bc <ThreadM95Task+0x348>)
 801b864:	f00a ff18 	bl	8026698 <AT_QIOPEN>
 801b868:	4603      	mov	r3, r0
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	f000 8098 	beq.w	801b9a0 <ThreadM95Task+0x42c>
				{

				}
				else
				{
					LED1_OFF();
 801b870:	f009 fede 	bl	8025630 <LED1_OFF>
				}

			break;
 801b874:	e094      	b.n	801b9a0 <ThreadM95Task+0x42c>
 801b876:	bf00      	nop
 801b878:	200098e0 	.word	0x200098e0
 801b87c:	20009cb8 	.word	0x20009cb8
 801b880:	20009cd4 	.word	0x20009cd4
 801b884:	200096a4 	.word	0x200096a4
 801b888:	20009a6c 	.word	0x20009a6c
 801b88c:	20007fe4 	.word	0x20007fe4
 801b890:	20007fe5 	.word	0x20007fe5
 801b894:	20007fe6 	.word	0x20007fe6
 801b898:	20007fe7 	.word	0x20007fe7
 801b89c:	20007fe8 	.word	0x20007fe8
 801b8a0:	20007fe9 	.word	0x20007fe9
 801b8a4:	20007fea 	.word	0x20007fea
 801b8a8:	200096a0 	.word	0x200096a0
 801b8ac:	20009dd8 	.word	0x20009dd8
 801b8b0:	20009dcc 	.word	0x20009dcc
 801b8b4:	0802a430 	.word	0x0802a430
 801b8b8:	0802a434 	.word	0x0802a434
 801b8bc:	0802a444 	.word	0x0802a444

			case IP_CLOSE:
				osThreadSuspend(CallRingCenterTaskHandle);
 801b8c0:	4b3e      	ldr	r3, [pc, #248]	; (801b9bc <ThreadM95Task+0x448>)
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	4618      	mov	r0, r3
 801b8c6:	f7fb fc0f 	bl	80170e8 <osThreadSuspend>
				LED1_OFF();
 801b8ca:	f009 feb1 	bl	8025630 <LED1_OFF>
				if( AT_QIOPEN("TCP", ip1 , ip2, ip3, ip4, port) == AT_OK )
 801b8ce:	4b3c      	ldr	r3, [pc, #240]	; (801b9c0 <ThreadM95Task+0x44c>)
 801b8d0:	781b      	ldrb	r3, [r3, #0]
 801b8d2:	b2d9      	uxtb	r1, r3
 801b8d4:	4b3b      	ldr	r3, [pc, #236]	; (801b9c4 <ThreadM95Task+0x450>)
 801b8d6:	781b      	ldrb	r3, [r3, #0]
 801b8d8:	b2d8      	uxtb	r0, r3
 801b8da:	4b3b      	ldr	r3, [pc, #236]	; (801b9c8 <ThreadM95Task+0x454>)
 801b8dc:	781b      	ldrb	r3, [r3, #0]
 801b8de:	b2dc      	uxtb	r4, r3
 801b8e0:	4b3a      	ldr	r3, [pc, #232]	; (801b9cc <ThreadM95Task+0x458>)
 801b8e2:	781b      	ldrb	r3, [r3, #0]
 801b8e4:	b2db      	uxtb	r3, r3
 801b8e6:	4a3a      	ldr	r2, [pc, #232]	; (801b9d0 <ThreadM95Task+0x45c>)
 801b8e8:	8812      	ldrh	r2, [r2, #0]
 801b8ea:	b292      	uxth	r2, r2
 801b8ec:	9201      	str	r2, [sp, #4]
 801b8ee:	9300      	str	r3, [sp, #0]
 801b8f0:	4623      	mov	r3, r4
 801b8f2:	4602      	mov	r2, r0
 801b8f4:	4837      	ldr	r0, [pc, #220]	; (801b9d4 <ThreadM95Task+0x460>)
 801b8f6:	f00a fecf 	bl	8026698 <AT_QIOPEN>
				else
				{

				}

			break;
 801b8fa:	e054      	b.n	801b9a6 <ThreadM95Task+0x432>

			case PDP_DEACT:

				LED1_OFF();
 801b8fc:	f009 fe98 	bl	8025630 <LED1_OFF>
				if(AT_QIACT()!=AT_OK)
 801b900:	f00b f916 	bl	8026b30 <AT_QIACT>
				{

				}
			break;
 801b904:	e04f      	b.n	801b9a6 <ThreadM95Task+0x432>

			case CONNECT_OK: // Если соединение установлено

				//osTimerStart(Ring_Center_TimerHandle, 60000); // запускаем таймер и обнуляем его при каждом ответе о соединении.

				osThreadResume(CallRingCenterTaskHandle); // пробуждаем процесс запроса к серверу
 801b906:	4b2d      	ldr	r3, [pc, #180]	; (801b9bc <ThreadM95Task+0x448>)
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	4618      	mov	r0, r3
 801b90c:	f7fb fbf8 	bl	8017100 <osThreadResume>
				LED1_ON();
 801b910:	f009 fe9a 	bl	8025648 <LED1_ON>
				if( AT_COPS() == AT_OK )
 801b914:	f00a fe64 	bl	80265e0 <AT_COPS>
				{

				}
				if( AT_CSQ(&level) == AT_OK )
 801b918:	482f      	ldr	r0, [pc, #188]	; (801b9d8 <ThreadM95Task+0x464>)
 801b91a:	f00a fa59 	bl	8025dd0 <AT_CSQ>
 801b91e:	4603      	mov	r3, r0
 801b920:	2b00      	cmp	r3, #0
 801b922:	d117      	bne.n	801b954 <ThreadM95Task+0x3e0>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b924:	4b2d      	ldr	r3, [pc, #180]	; (801b9dc <ThreadM95Task+0x468>)
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	f04f 31ff 	mov.w	r1, #4294967295
 801b92c:	4618      	mov	r0, r3
 801b92e:	f7fb f9b7 	bl	8016ca0 <osMutexWait>
					fm25v02_write(2*SIGNAL_LEVEL_REG, 0x00);
 801b932:	2100      	movs	r1, #0
 801b934:	f242 00a6 	movw	r0, #8358	; 0x20a6
 801b938:	f009 fd84 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*SIGNAL_LEVEL_REG+1, level);
 801b93c:	4b26      	ldr	r3, [pc, #152]	; (801b9d8 <ThreadM95Task+0x464>)
 801b93e:	781b      	ldrb	r3, [r3, #0]
 801b940:	4619      	mov	r1, r3
 801b942:	f242 00a7 	movw	r0, #8359	; 0x20a7
 801b946:	f009 fd7d 	bl	8025444 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 801b94a:	4b24      	ldr	r3, [pc, #144]	; (801b9dc <ThreadM95Task+0x468>)
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	4618      	mov	r0, r3
 801b950:	f7fb f9f4 	bl	8016d3c <osMutexRelease>
				if( AT_QIOPEN("TCP", ip1 , ip2, ip3, ip4, port) == AT_OK )
				{

				}
				*/
				if( request_state == 0)
 801b954:	4b22      	ldr	r3, [pc, #136]	; (801b9e0 <ThreadM95Task+0x46c>)
 801b956:	781b      	ldrb	r3, [r3, #0]
 801b958:	b2db      	uxtb	r3, r3
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d122      	bne.n	801b9a4 <ThreadM95Task+0x430>
				{
					request_state = 1;
 801b95e:	4b20      	ldr	r3, [pc, #128]	; (801b9e0 <ThreadM95Task+0x46c>)
 801b960:	2201      	movs	r2, #1
 801b962:	701a      	strb	r2, [r3, #0]
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b964:	4b1d      	ldr	r3, [pc, #116]	; (801b9dc <ThreadM95Task+0x468>)
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	f04f 31ff 	mov.w	r1, #4294967295
 801b96c:	4618      	mov	r0, r3
 801b96e:	f7fb f997 	bl	8016ca0 <osMutexWait>
					fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801b972:	2100      	movs	r1, #0
 801b974:	f242 106e 	movw	r0, #8558	; 0x216e
 801b978:	f009 fd64 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801b97c:	2101      	movs	r1, #1
 801b97e:	f242 106f 	movw	r0, #8559	; 0x216f
 801b982:	f009 fd5f 	bl	8025444 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 801b986:	4b15      	ldr	r3, [pc, #84]	; (801b9dc <ThreadM95Task+0x468>)
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	4618      	mov	r0, r3
 801b98c:	f7fb f9d6 	bl	8016d3c <osMutexRelease>

					//}

				//}

			break;
 801b990:	e008      	b.n	801b9a4 <ThreadM95Task+0x430>

			case IP_STATUS:

				LED1_OFF();
 801b992:	f009 fe4d 	bl	8025630 <LED1_OFF>
				m95_power_off();
 801b996:	f00a f939 	bl	8025c0c <m95_power_off>
				//else
				//{

				//}

			break;
 801b99a:	e004      	b.n	801b9a6 <ThreadM95Task+0x432>

			break;

			default:

			break;
 801b99c:	bf00      	nop
 801b99e:	e002      	b.n	801b9a6 <ThreadM95Task+0x432>
			break;
 801b9a0:	bf00      	nop
 801b9a2:	e000      	b.n	801b9a6 <ThreadM95Task+0x432>
			break;
 801b9a4:	bf00      	nop

		}

		osMutexRelease(UartMutexHandle);
 801b9a6:	4b0f      	ldr	r3, [pc, #60]	; (801b9e4 <ThreadM95Task+0x470>)
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	f7fb f9c6 	bl	8016d3c <osMutexRelease>
		if(AT_QIMODE(0) == AT_OK){}
		if(AT_QIHEAD(1) == AT_OK){}
		if(AT_QISHOWPT(0) == AT_OK){}
		*/

		osDelay(1000);
 801b9b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b9b4:	f7fb f893 	bl	8016ade <osDelay>
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801b9b8:	e610      	b.n	801b5dc <ThreadM95Task+0x68>
 801b9ba:	bf00      	nop
 801b9bc:	2000827c 	.word	0x2000827c
 801b9c0:	20007fe4 	.word	0x20007fe4
 801b9c4:	20007fe5 	.word	0x20007fe5
 801b9c8:	20007fe6 	.word	0x20007fe6
 801b9cc:	20007fe7 	.word	0x20007fe7
 801b9d0:	20007fea 	.word	0x20007fea
 801b9d4:	0802a444 	.word	0x0802a444
 801b9d8:	20009dc9 	.word	0x20009dc9
 801b9dc:	20009a6c 	.word	0x20009a6c
 801b9e0:	20007fec 	.word	0x20007fec
 801b9e4:	200096a0 	.word	0x200096a0

0801b9e8 <__NVIC_SystemReset>:
{
 801b9e8:	b480      	push	{r7}
 801b9ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801b9ec:	f3bf 8f4f 	dsb	sy
}
 801b9f0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801b9f2:	4b06      	ldr	r3, [pc, #24]	; (801ba0c <__NVIC_SystemReset+0x24>)
 801b9f4:	68db      	ldr	r3, [r3, #12]
 801b9f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801b9fa:	4904      	ldr	r1, [pc, #16]	; (801ba0c <__NVIC_SystemReset+0x24>)
 801b9fc:	4b04      	ldr	r3, [pc, #16]	; (801ba10 <__NVIC_SystemReset+0x28>)
 801b9fe:	4313      	orrs	r3, r2
 801ba00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801ba02:	f3bf 8f4f 	dsb	sy
}
 801ba06:	bf00      	nop
    __NOP();
 801ba08:	bf00      	nop
 801ba0a:	e7fd      	b.n	801ba08 <__NVIC_SystemReset+0x20>
 801ba0c:	e000ed00 	.word	0xe000ed00
 801ba10:	05fa0004 	.word	0x05fa0004

0801ba14 <ThreadMainTask>:




void ThreadMainTask(void const * argument)
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b082      	sub	sp, #8
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	6078      	str	r0, [r7, #4]


	osThreadSuspend(MainTaskHandle); // ждем пока не будут вычитаны регистры и не получен статус фаз А1,А2,В1,В2,С1,С2
 801ba1c:	4bb0      	ldr	r3, [pc, #704]	; (801bce0 <ThreadMainTask+0x2cc>)
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	4618      	mov	r0, r3
 801ba22:	f7fb fb61 	bl	80170e8 <osThreadSuspend>


	for(;;)
	{

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET ) // проверяем если есть наличие единицы на пине PFO микросхемы TPS3306-15
 801ba26:	2101      	movs	r1, #1
 801ba28:	48ae      	ldr	r0, [pc, #696]	; (801bce4 <ThreadMainTask+0x2d0>)
 801ba2a:	f7f7 fbbb 	bl	80131a4 <HAL_GPIO_ReadPin>
 801ba2e:	4603      	mov	r3, r0
 801ba30:	2b01      	cmp	r3, #1
 801ba32:	d152      	bne.n	801bada <ThreadMainTask+0xc6>
		{
			if(status_registers.power_on_reg != 1)
 801ba34:	4bac      	ldr	r3, [pc, #688]	; (801bce8 <ThreadMainTask+0x2d4>)
 801ba36:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801ba38:	2b01      	cmp	r3, #1
 801ba3a:	f000 80bc 	beq.w	801bbb6 <ThreadMainTask+0x1a2>
			//if(status_registers.power_on_reg == 0) // если основного питания до этого не было, записываем в регистр наличия питания 1
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ba3e:	4bab      	ldr	r3, [pc, #684]	; (801bcec <ThreadMainTask+0x2d8>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	f04f 31ff 	mov.w	r1, #4294967295
 801ba46:	4618      	mov	r0, r3
 801ba48:	f7fb f92a 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*POWER_ON_REG, 0x00);
 801ba4c:	2100      	movs	r1, #0
 801ba4e:	f242 0022 	movw	r0, #8226	; 0x2022
 801ba52:	f009 fcf7 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*POWER_ON_REG+1, 1);
 801ba56:	2101      	movs	r1, #1
 801ba58:	f242 0023 	movw	r0, #8227	; 0x2023
 801ba5c:	f009 fcf2 	bl	8025444 <fm25v02_write>
				status_registers.power_on_reg = 1;
 801ba60:	4ba1      	ldr	r3, [pc, #644]	; (801bce8 <ThreadMainTask+0x2d4>)
 801ba62:	2201      	movs	r2, #1
 801ba64:	845a      	strh	r2, [r3, #34]	; 0x22
				osMutexRelease(Fm25v02MutexHandle);
 801ba66:	4ba1      	ldr	r3, [pc, #644]	; (801bcec <ThreadMainTask+0x2d8>)
 801ba68:	681b      	ldr	r3, [r3, #0]
 801ba6a:	4618      	mov	r0, r3
 801ba6c:	f7fb f966 	bl	8016d3c <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ba70:	4b9e      	ldr	r3, [pc, #632]	; (801bcec <ThreadMainTask+0x2d8>)
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	f04f 31ff 	mov.w	r1, #4294967295
 801ba78:	4618      	mov	r0, r3
 801ba7a:	f7fb f911 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801ba7e:	2100      	movs	r1, #0
 801ba80:	f242 106e 	movw	r0, #8558	; 0x216e
 801ba84:	f009 fcde 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801ba88:	2101      	movs	r1, #1
 801ba8a:	f242 106f 	movw	r0, #8559	; 0x216f
 801ba8e:	f009 fcd9 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801ba92:	4b96      	ldr	r3, [pc, #600]	; (801bcec <ThreadMainTask+0x2d8>)
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	4618      	mov	r0, r3
 801ba98:	f7fb f950 	bl	8016d3c <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ba9c:	4b93      	ldr	r3, [pc, #588]	; (801bcec <ThreadMainTask+0x2d8>)
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	f04f 31ff 	mov.w	r1, #4294967295
 801baa4:	4618      	mov	r0, r3
 801baa6:	f7fb f8fb 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801baaa:	2100      	movs	r1, #0
 801baac:	f242 0020 	movw	r0, #8224	; 0x2020
 801bab0:	f009 fcc8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_ON);
 801bab4:	2101      	movs	r1, #1
 801bab6:	f242 0021 	movw	r0, #8225	; 0x2021
 801baba:	f009 fcc3 	bl	8025444 <fm25v02_write>
				status_registers.system_status_reg = POWER_ON;
 801babe:	4b8a      	ldr	r3, [pc, #552]	; (801bce8 <ThreadMainTask+0x2d4>)
 801bac0:	2201      	movs	r2, #1
 801bac2:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 801bac4:	4b89      	ldr	r3, [pc, #548]	; (801bcec <ThreadMainTask+0x2d8>)
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	4618      	mov	r0, r3
 801baca:	f7fb f937 	bl	8016d3c <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 801bace:	4b88      	ldr	r3, [pc, #544]	; (801bcf0 <ThreadMainTask+0x2dc>)
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	4618      	mov	r0, r3
 801bad4:	f7fb fb14 	bl	8017100 <osThreadResume>
 801bad8:	e06d      	b.n	801bbb6 <ThreadMainTask+0x1a2>
			}
		}
		else // если на пине PFO микросхемы TPS3306-15 нет наличия единицы
		{
			if(status_registers.power_on_reg == 1)
 801bada:	4b83      	ldr	r3, [pc, #524]	; (801bce8 <ThreadMainTask+0x2d4>)
 801badc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801bade:	2b01      	cmp	r3, #1
 801bae0:	d169      	bne.n	801bbb6 <ThreadMainTask+0x1a2>
			//if(status_registers.power_on_reg != 0)
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bae2:	4b82      	ldr	r3, [pc, #520]	; (801bcec <ThreadMainTask+0x2d8>)
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	f04f 31ff 	mov.w	r1, #4294967295
 801baea:	4618      	mov	r0, r3
 801baec:	f7fb f8d8 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*POWER_ON_REG, 0x00);
 801baf0:	2100      	movs	r1, #0
 801baf2:	f242 0022 	movw	r0, #8226	; 0x2022
 801baf6:	f009 fca5 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*POWER_ON_REG+1, 0x00);
 801bafa:	2100      	movs	r1, #0
 801bafc:	f242 0023 	movw	r0, #8227	; 0x2023
 801bb00:	f009 fca0 	bl	8025444 <fm25v02_write>
				status_registers.power_on_reg = 0;
 801bb04:	4b78      	ldr	r3, [pc, #480]	; (801bce8 <ThreadMainTask+0x2d4>)
 801bb06:	2200      	movs	r2, #0
 801bb08:	845a      	strh	r2, [r3, #34]	; 0x22
				osMutexRelease(Fm25v02MutexHandle);
 801bb0a:	4b78      	ldr	r3, [pc, #480]	; (801bcec <ThreadMainTask+0x2d8>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	4618      	mov	r0, r3
 801bb10:	f7fb f914 	bl	8016d3c <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bb14:	4b75      	ldr	r3, [pc, #468]	; (801bcec <ThreadMainTask+0x2d8>)
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	f04f 31ff 	mov.w	r1, #4294967295
 801bb1c:	4618      	mov	r0, r3
 801bb1e:	f7fb f8bf 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801bb22:	2100      	movs	r1, #0
 801bb24:	f242 0020 	movw	r0, #8224	; 0x2020
 801bb28:	f009 fc8c 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_OFF);
 801bb2c:	2102      	movs	r1, #2
 801bb2e:	f242 0021 	movw	r0, #8225	; 0x2021
 801bb32:	f009 fc87 	bl	8025444 <fm25v02_write>
				status_registers.system_status_reg = POWER_OFF;
 801bb36:	4b6c      	ldr	r3, [pc, #432]	; (801bce8 <ThreadMainTask+0x2d4>)
 801bb38:	2202      	movs	r2, #2
 801bb3a:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 801bb3c:	4b6b      	ldr	r3, [pc, #428]	; (801bcec <ThreadMainTask+0x2d8>)
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	4618      	mov	r0, r3
 801bb42:	f7fb f8fb 	bl	8016d3c <osMutexRelease>

				//---- тест -------------------------------------------------
				if(status_registers.security_status_reg == DOOR_OPEN_ALARM)
 801bb46:	4b68      	ldr	r3, [pc, #416]	; (801bce8 <ThreadMainTask+0x2d4>)
 801bb48:	885b      	ldrh	r3, [r3, #2]
 801bb4a:	2b05      	cmp	r3, #5
 801bb4c:	d118      	bne.n	801bb80 <ThreadMainTask+0x16c>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bb4e:	4b67      	ldr	r3, [pc, #412]	; (801bcec <ThreadMainTask+0x2d8>)
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	f04f 31ff 	mov.w	r1, #4294967295
 801bb56:	4618      	mov	r0, r3
 801bb58:	f7fb f8a2 	bl	8016ca0 <osMutexWait>
					fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801bb5c:	2100      	movs	r1, #0
 801bb5e:	f242 0002 	movw	r0, #8194	; 0x2002
 801bb62:	f009 fc6f 	bl	8025444 <fm25v02_write>
					fm25v02_write(2*SECURITY_STATUS_REG+1, 0x08);
 801bb66:	2108      	movs	r1, #8
 801bb68:	f242 0003 	movw	r0, #8195	; 0x2003
 801bb6c:	f009 fc6a 	bl	8025444 <fm25v02_write>
					status_registers.security_status_reg = 0x08;
 801bb70:	4b5d      	ldr	r3, [pc, #372]	; (801bce8 <ThreadMainTask+0x2d4>)
 801bb72:	2208      	movs	r2, #8
 801bb74:	805a      	strh	r2, [r3, #2]
					osMutexRelease(Fm25v02MutexHandle);
 801bb76:	4b5d      	ldr	r3, [pc, #372]	; (801bcec <ThreadMainTask+0x2d8>)
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	4618      	mov	r0, r3
 801bb7c:	f7fb f8de 	bl	8016d3c <osMutexRelease>
				}
				//-----------------------------------------------------------

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bb80:	4b5a      	ldr	r3, [pc, #360]	; (801bcec <ThreadMainTask+0x2d8>)
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	f04f 31ff 	mov.w	r1, #4294967295
 801bb88:	4618      	mov	r0, r3
 801bb8a:	f7fb f889 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801bb8e:	2100      	movs	r1, #0
 801bb90:	f242 106e 	movw	r0, #8558	; 0x216e
 801bb94:	f009 fc56 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801bb98:	2101      	movs	r1, #1
 801bb9a:	f242 106f 	movw	r0, #8559	; 0x216f
 801bb9e:	f009 fc51 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801bba2:	4b52      	ldr	r3, [pc, #328]	; (801bcec <ThreadMainTask+0x2d8>)
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	4618      	mov	r0, r3
 801bba8:	f7fb f8c8 	bl	8016d3c <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 801bbac:	4b50      	ldr	r3, [pc, #320]	; (801bcf0 <ThreadMainTask+0x2dc>)
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	f7fb faa5 	bl	8017100 <osThreadResume>
			}
		}

		switch(control_registers.security_control_reg) // проверяем значение переменной включения охранной сигнализации
 801bbb6:	4b4f      	ldr	r3, [pc, #316]	; (801bcf4 <ThreadMainTask+0x2e0>)
 801bbb8:	881b      	ldrh	r3, [r3, #0]
 801bbba:	3b01      	subs	r3, #1
 801bbbc:	2b03      	cmp	r3, #3
 801bbbe:	f200 811c 	bhi.w	801bdfa <ThreadMainTask+0x3e6>
 801bbc2:	a201      	add	r2, pc, #4	; (adr r2, 801bbc8 <ThreadMainTask+0x1b4>)
 801bbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bbc8:	0801bc8d 	.word	0x0801bc8d
 801bbcc:	0801bbd9 	.word	0x0801bbd9
 801bbd0:	0801bdad 	.word	0x0801bdad
 801bbd4:	0801bcfd 	.word	0x0801bcfd
		{

			case(DISABLE_FROM_SERVER):

				BUZ_OFF();
 801bbd8:	f009 fcee 	bl	80255b8 <BUZ_OFF>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bbdc:	4b43      	ldr	r3, [pc, #268]	; (801bcec <ThreadMainTask+0x2d8>)
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	f04f 31ff 	mov.w	r1, #4294967295
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	f7fb f85b 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 801bbea:	2100      	movs	r1, #0
 801bbec:	f242 1020 	movw	r0, #8480	; 0x2120
 801bbf0:	f009 fc28 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 801bbf4:	2100      	movs	r1, #0
 801bbf6:	f242 1021 	movw	r0, #8481	; 0x2121
 801bbfa:	f009 fc23 	bl	8025444 <fm25v02_write>
				control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT; // обновляем переменную
 801bbfe:	4b3d      	ldr	r3, [pc, #244]	; (801bcf4 <ThreadMainTask+0x2e0>)
 801bc00:	2200      	movs	r2, #0
 801bc02:	801a      	strh	r2, [r3, #0]
				fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801bc04:	2100      	movs	r1, #0
 801bc06:	f242 0002 	movw	r0, #8194	; 0x2002
 801bc0a:	f009 fc1b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SECURITY_STATUS_REG+1, DISABLED_BY_SERVER);
 801bc0e:	2102      	movs	r1, #2
 801bc10:	f242 0003 	movw	r0, #8195	; 0x2003
 801bc14:	f009 fc16 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801bc18:	4b34      	ldr	r3, [pc, #208]	; (801bcec <ThreadMainTask+0x2d8>)
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	f7fb f88d 	bl	8016d3c <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bc22:	4b32      	ldr	r3, [pc, #200]	; (801bcec <ThreadMainTask+0x2d8>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	f04f 31ff 	mov.w	r1, #4294967295
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	f7fb f838 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801bc30:	2100      	movs	r1, #0
 801bc32:	f242 0020 	movw	r0, #8224	; 0x2020
 801bc36:	f009 fc05 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, TURN_OFF_STATE_ALARM);
 801bc3a:	2107      	movs	r1, #7
 801bc3c:	f242 0021 	movw	r0, #8225	; 0x2021
 801bc40:	f009 fc00 	bl	8025444 <fm25v02_write>
				status_registers.system_status_reg = TURN_OFF_STATE_ALARM;
 801bc44:	4b28      	ldr	r3, [pc, #160]	; (801bce8 <ThreadMainTask+0x2d4>)
 801bc46:	2207      	movs	r2, #7
 801bc48:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 801bc4a:	4b28      	ldr	r3, [pc, #160]	; (801bcec <ThreadMainTask+0x2d8>)
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f7fb f874 	bl	8016d3c <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bc54:	4b25      	ldr	r3, [pc, #148]	; (801bcec <ThreadMainTask+0x2d8>)
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	f04f 31ff 	mov.w	r1, #4294967295
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	f7fb f81f 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801bc62:	2100      	movs	r1, #0
 801bc64:	f242 106e 	movw	r0, #8558	; 0x216e
 801bc68:	f009 fbec 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801bc6c:	2101      	movs	r1, #1
 801bc6e:	f242 106f 	movw	r0, #8559	; 0x216f
 801bc72:	f009 fbe7 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801bc76:	4b1d      	ldr	r3, [pc, #116]	; (801bcec <ThreadMainTask+0x2d8>)
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	4618      	mov	r0, r3
 801bc7c:	f7fb f85e 	bl	8016d3c <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 801bc80:	4b1b      	ldr	r3, [pc, #108]	; (801bcf0 <ThreadMainTask+0x2dc>)
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	4618      	mov	r0, r3
 801bc86:	f7fb fa3b 	bl	8017100 <osThreadResume>

			break;
 801bc8a:	e0b6      	b.n	801bdfa <ThreadMainTask+0x3e6>

			case(ENABLE_FROM_SERVER): // если в регистр поступила команда включить из сервера

				BUZ_OFF();
 801bc8c:	f009 fc94 	bl	80255b8 <BUZ_OFF>

				security_control_temp = ENABLED_BY_SERVER;
 801bc90:	4b19      	ldr	r3, [pc, #100]	; (801bcf8 <ThreadMainTask+0x2e4>)
 801bc92:	2201      	movs	r2, #1
 801bc94:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bc96:	4b15      	ldr	r3, [pc, #84]	; (801bcec <ThreadMainTask+0x2d8>)
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	f04f 31ff 	mov.w	r1, #4294967295
 801bc9e:	4618      	mov	r0, r3
 801bca0:	f7fa fffe 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 801bca4:	2100      	movs	r1, #0
 801bca6:	f242 1020 	movw	r0, #8480	; 0x2120
 801bcaa:	f009 fbcb 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 801bcae:	2100      	movs	r1, #0
 801bcb0:	f242 1021 	movw	r0, #8481	; 0x2121
 801bcb4:	f009 fbc6 	bl	8025444 <fm25v02_write>
				control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT; // обновляем переменную
 801bcb8:	4b0e      	ldr	r3, [pc, #56]	; (801bcf4 <ThreadMainTask+0x2e0>)
 801bcba:	2200      	movs	r2, #0
 801bcbc:	801a      	strh	r2, [r3, #0]
				fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801bcbe:	2100      	movs	r1, #0
 801bcc0:	f242 0002 	movw	r0, #8194	; 0x2002
 801bcc4:	f009 fbbe 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SECURITY_STATUS_REG+1, ARMING_PROCESS);
 801bcc8:	2106      	movs	r1, #6
 801bcca:	f242 0003 	movw	r0, #8195	; 0x2003
 801bcce:	f009 fbb9 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801bcd2:	4b06      	ldr	r3, [pc, #24]	; (801bcec <ThreadMainTask+0x2d8>)
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	f7fb f830 	bl	8016d3c <osMutexRelease>

			break;
 801bcdc:	e08d      	b.n	801bdfa <ThreadMainTask+0x3e6>
 801bcde:	bf00      	nop
 801bce0:	20009718 	.word	0x20009718
 801bce4:	40021000 	.word	0x40021000
 801bce8:	2000a10c 	.word	0x2000a10c
 801bcec:	20009a6c 	.word	0x20009a6c
 801bcf0:	2000969c 	.word	0x2000969c
 801bcf4:	2000a1cc 	.word	0x2000a1cc
 801bcf8:	20007fed 	.word	0x20007fed

			case(DISABLE_FROM_IBUTTON): // если поступила команда выключить из сервера или с таблетки

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bcfc:	4b84      	ldr	r3, [pc, #528]	; (801bf10 <ThreadMainTask+0x4fc>)
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	f04f 31ff 	mov.w	r1, #4294967295
 801bd04:	4618      	mov	r0, r3
 801bd06:	f7fa ffcb 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 801bd0a:	2100      	movs	r1, #0
 801bd0c:	f242 1020 	movw	r0, #8480	; 0x2120
 801bd10:	f009 fb98 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 801bd14:	2100      	movs	r1, #0
 801bd16:	f242 1021 	movw	r0, #8481	; 0x2121
 801bd1a:	f009 fb93 	bl	8025444 <fm25v02_write>
				control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT; // обновляем переменную
 801bd1e:	4b7d      	ldr	r3, [pc, #500]	; (801bf14 <ThreadMainTask+0x500>)
 801bd20:	2200      	movs	r2, #0
 801bd22:	801a      	strh	r2, [r3, #0]
				fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801bd24:	2100      	movs	r1, #0
 801bd26:	f242 0002 	movw	r0, #8194	; 0x2002
 801bd2a:	f009 fb8b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SECURITY_STATUS_REG+1, DISABLED_BY_IBUTTON);
 801bd2e:	2104      	movs	r1, #4
 801bd30:	f242 0003 	movw	r0, #8195	; 0x2003
 801bd34:	f009 fb86 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801bd38:	4b75      	ldr	r3, [pc, #468]	; (801bf10 <ThreadMainTask+0x4fc>)
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	f7fa fffd 	bl	8016d3c <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bd42:	4b73      	ldr	r3, [pc, #460]	; (801bf10 <ThreadMainTask+0x4fc>)
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	f04f 31ff 	mov.w	r1, #4294967295
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	f7fa ffa8 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801bd50:	2100      	movs	r1, #0
 801bd52:	f242 0020 	movw	r0, #8224	; 0x2020
 801bd56:	f009 fb75 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, TURN_OFF_STATE_ALARM);
 801bd5a:	2107      	movs	r1, #7
 801bd5c:	f242 0021 	movw	r0, #8225	; 0x2021
 801bd60:	f009 fb70 	bl	8025444 <fm25v02_write>
				status_registers.system_status_reg = TURN_OFF_STATE_ALARM;
 801bd64:	4b6c      	ldr	r3, [pc, #432]	; (801bf18 <ThreadMainTask+0x504>)
 801bd66:	2207      	movs	r2, #7
 801bd68:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 801bd6a:	4b69      	ldr	r3, [pc, #420]	; (801bf10 <ThreadMainTask+0x4fc>)
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	4618      	mov	r0, r3
 801bd70:	f7fa ffe4 	bl	8016d3c <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bd74:	4b66      	ldr	r3, [pc, #408]	; (801bf10 <ThreadMainTask+0x4fc>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	f04f 31ff 	mov.w	r1, #4294967295
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f7fa ff8f 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801bd82:	2100      	movs	r1, #0
 801bd84:	f242 106e 	movw	r0, #8558	; 0x216e
 801bd88:	f009 fb5c 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801bd8c:	2101      	movs	r1, #1
 801bd8e:	f242 106f 	movw	r0, #8559	; 0x216f
 801bd92:	f009 fb57 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801bd96:	4b5e      	ldr	r3, [pc, #376]	; (801bf10 <ThreadMainTask+0x4fc>)
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	f7fa ffce 	bl	8016d3c <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 801bda0:	4b5e      	ldr	r3, [pc, #376]	; (801bf1c <ThreadMainTask+0x508>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	4618      	mov	r0, r3
 801bda6:	f7fb f9ab 	bl	8017100 <osThreadResume>

			break;
 801bdaa:	e026      	b.n	801bdfa <ThreadMainTask+0x3e6>

			case(ENABLE_FROM_IBUTTON): // если поступила команда включить с таблетки

				security_control_temp = ENABLED_BY_IBUTTON;
 801bdac:	4b5c      	ldr	r3, [pc, #368]	; (801bf20 <ThreadMainTask+0x50c>)
 801bdae:	2203      	movs	r2, #3
 801bdb0:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bdb2:	4b57      	ldr	r3, [pc, #348]	; (801bf10 <ThreadMainTask+0x4fc>)
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	f04f 31ff 	mov.w	r1, #4294967295
 801bdba:	4618      	mov	r0, r3
 801bdbc:	f7fa ff70 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 801bdc0:	2100      	movs	r1, #0
 801bdc2:	f242 1020 	movw	r0, #8480	; 0x2120
 801bdc6:	f009 fb3d 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 801bdca:	2100      	movs	r1, #0
 801bdcc:	f242 1021 	movw	r0, #8481	; 0x2121
 801bdd0:	f009 fb38 	bl	8025444 <fm25v02_write>
				control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT; // обновляем переменную
 801bdd4:	4b4f      	ldr	r3, [pc, #316]	; (801bf14 <ThreadMainTask+0x500>)
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	801a      	strh	r2, [r3, #0]
				fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801bdda:	2100      	movs	r1, #0
 801bddc:	f242 0002 	movw	r0, #8194	; 0x2002
 801bde0:	f009 fb30 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*SECURITY_STATUS_REG+1, ARMING_PROCESS);
 801bde4:	2106      	movs	r1, #6
 801bde6:	f242 0003 	movw	r0, #8195	; 0x2003
 801bdea:	f009 fb2b 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801bdee:	4b48      	ldr	r3, [pc, #288]	; (801bf10 <ThreadMainTask+0x4fc>)
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	4618      	mov	r0, r3
 801bdf4:	f7fa ffa2 	bl	8016d3c <osMutexRelease>

			break;
 801bdf8:	bf00      	nop
		}

		switch(control_registers.time_update_reg) // проверяем значение переменной обновления времени
 801bdfa:	4b46      	ldr	r3, [pc, #280]	; (801bf14 <ThreadMainTask+0x500>)
 801bdfc:	8a1b      	ldrh	r3, [r3, #16]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	f000 8096 	beq.w	801bf30 <ThreadMainTask+0x51c>
 801be04:	2b01      	cmp	r3, #1
 801be06:	f040 8160 	bne.w	801c0ca <ThreadMainTask+0x6b6>
		{
			case(SET_TIME): // Если в регистр записана команда установить время

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801be0a:	4b41      	ldr	r3, [pc, #260]	; (801bf10 <ThreadMainTask+0x4fc>)
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	f04f 31ff 	mov.w	r1, #4294967295
 801be12:	4618      	mov	r0, r3
 801be14:	f7fa ff44 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*TIME_UPDATE_REG, 0x00);
 801be18:	2100      	movs	r1, #0
 801be1a:	f242 1030 	movw	r0, #8496	; 0x2130
 801be1e:	f009 fb11 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_UPDATE_REG+1, SET_TIME_DEFAULT);
 801be22:	2100      	movs	r1, #0
 801be24:	f242 1031 	movw	r0, #8497	; 0x2131
 801be28:	f009 fb0c 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801be2c:	4b38      	ldr	r3, [pc, #224]	; (801bf10 <ThreadMainTask+0x4fc>)
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	4618      	mov	r0, r3
 801be32:	f7fa ff83 	bl	8016d3c <osMutexRelease>

				set_time.Hours = control_registers.time_hour_reg; // записываем в переменные структуры времени значения регистров управления временем
 801be36:	4b37      	ldr	r3, [pc, #220]	; (801bf14 <ThreadMainTask+0x500>)
 801be38:	8b1b      	ldrh	r3, [r3, #24]
 801be3a:	b2da      	uxtb	r2, r3
 801be3c:	4b39      	ldr	r3, [pc, #228]	; (801bf24 <ThreadMainTask+0x510>)
 801be3e:	701a      	strb	r2, [r3, #0]
				set_time.Minutes = control_registers.time_minute_reg;
 801be40:	4b34      	ldr	r3, [pc, #208]	; (801bf14 <ThreadMainTask+0x500>)
 801be42:	8b5b      	ldrh	r3, [r3, #26]
 801be44:	b2da      	uxtb	r2, r3
 801be46:	4b37      	ldr	r3, [pc, #220]	; (801bf24 <ThreadMainTask+0x510>)
 801be48:	705a      	strb	r2, [r3, #1]
				set_time.Seconds = control_registers.time_seconds_reg;
 801be4a:	4b32      	ldr	r3, [pc, #200]	; (801bf14 <ThreadMainTask+0x500>)
 801be4c:	8b9b      	ldrh	r3, [r3, #28]
 801be4e:	b2da      	uxtb	r2, r3
 801be50:	4b34      	ldr	r3, [pc, #208]	; (801bf24 <ThreadMainTask+0x510>)
 801be52:	709a      	strb	r2, [r3, #2]
				set_date.Date = control_registers.time_day_reg;
 801be54:	4b2f      	ldr	r3, [pc, #188]	; (801bf14 <ThreadMainTask+0x500>)
 801be56:	8adb      	ldrh	r3, [r3, #22]
 801be58:	b2da      	uxtb	r2, r3
 801be5a:	4b33      	ldr	r3, [pc, #204]	; (801bf28 <ThreadMainTask+0x514>)
 801be5c:	709a      	strb	r2, [r3, #2]
				set_date.Month = control_registers.time_month_reg;
 801be5e:	4b2d      	ldr	r3, [pc, #180]	; (801bf14 <ThreadMainTask+0x500>)
 801be60:	8a9b      	ldrh	r3, [r3, #20]
 801be62:	b2da      	uxtb	r2, r3
 801be64:	4b30      	ldr	r3, [pc, #192]	; (801bf28 <ThreadMainTask+0x514>)
 801be66:	705a      	strb	r2, [r3, #1]
				set_date.Year = control_registers.time_year_reg;
 801be68:	4b2a      	ldr	r3, [pc, #168]	; (801bf14 <ThreadMainTask+0x500>)
 801be6a:	8a5b      	ldrh	r3, [r3, #18]
 801be6c:	b2da      	uxtb	r2, r3
 801be6e:	4b2e      	ldr	r3, [pc, #184]	; (801bf28 <ThreadMainTask+0x514>)
 801be70:	70da      	strb	r2, [r3, #3]
				set_date.WeekDay = control_registers.time_weekday_reg;
 801be72:	4b28      	ldr	r3, [pc, #160]	; (801bf14 <ThreadMainTask+0x500>)
 801be74:	8bdb      	ldrh	r3, [r3, #30]
 801be76:	b2da      	uxtb	r2, r3
 801be78:	4b2b      	ldr	r3, [pc, #172]	; (801bf28 <ThreadMainTask+0x514>)
 801be7a:	701a      	strb	r2, [r3, #0]

				set_time.Hours = RTC_ByteToBcd2(set_time.Hours); // переводим обычный формат времени в BCD
 801be7c:	4b29      	ldr	r3, [pc, #164]	; (801bf24 <ThreadMainTask+0x510>)
 801be7e:	781b      	ldrb	r3, [r3, #0]
 801be80:	4618      	mov	r0, r3
 801be82:	f7f8 fa4e 	bl	8014322 <RTC_ByteToBcd2>
 801be86:	4603      	mov	r3, r0
 801be88:	461a      	mov	r2, r3
 801be8a:	4b26      	ldr	r3, [pc, #152]	; (801bf24 <ThreadMainTask+0x510>)
 801be8c:	701a      	strb	r2, [r3, #0]
				set_time.Minutes = RTC_ByteToBcd2(set_time.Minutes);
 801be8e:	4b25      	ldr	r3, [pc, #148]	; (801bf24 <ThreadMainTask+0x510>)
 801be90:	785b      	ldrb	r3, [r3, #1]
 801be92:	4618      	mov	r0, r3
 801be94:	f7f8 fa45 	bl	8014322 <RTC_ByteToBcd2>
 801be98:	4603      	mov	r3, r0
 801be9a:	461a      	mov	r2, r3
 801be9c:	4b21      	ldr	r3, [pc, #132]	; (801bf24 <ThreadMainTask+0x510>)
 801be9e:	705a      	strb	r2, [r3, #1]
				set_time.Seconds = RTC_ByteToBcd2(set_time.Seconds);
 801bea0:	4b20      	ldr	r3, [pc, #128]	; (801bf24 <ThreadMainTask+0x510>)
 801bea2:	789b      	ldrb	r3, [r3, #2]
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7f8 fa3c 	bl	8014322 <RTC_ByteToBcd2>
 801beaa:	4603      	mov	r3, r0
 801beac:	461a      	mov	r2, r3
 801beae:	4b1d      	ldr	r3, [pc, #116]	; (801bf24 <ThreadMainTask+0x510>)
 801beb0:	709a      	strb	r2, [r3, #2]
				set_date.Date = RTC_ByteToBcd2(set_date.Date);
 801beb2:	4b1d      	ldr	r3, [pc, #116]	; (801bf28 <ThreadMainTask+0x514>)
 801beb4:	789b      	ldrb	r3, [r3, #2]
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7f8 fa33 	bl	8014322 <RTC_ByteToBcd2>
 801bebc:	4603      	mov	r3, r0
 801bebe:	461a      	mov	r2, r3
 801bec0:	4b19      	ldr	r3, [pc, #100]	; (801bf28 <ThreadMainTask+0x514>)
 801bec2:	709a      	strb	r2, [r3, #2]
				set_date.Month = RTC_ByteToBcd2(set_date.Month);
 801bec4:	4b18      	ldr	r3, [pc, #96]	; (801bf28 <ThreadMainTask+0x514>)
 801bec6:	785b      	ldrb	r3, [r3, #1]
 801bec8:	4618      	mov	r0, r3
 801beca:	f7f8 fa2a 	bl	8014322 <RTC_ByteToBcd2>
 801bece:	4603      	mov	r3, r0
 801bed0:	461a      	mov	r2, r3
 801bed2:	4b15      	ldr	r3, [pc, #84]	; (801bf28 <ThreadMainTask+0x514>)
 801bed4:	705a      	strb	r2, [r3, #1]
				set_date.Year = RTC_ByteToBcd2(set_date.Year);
 801bed6:	4b14      	ldr	r3, [pc, #80]	; (801bf28 <ThreadMainTask+0x514>)
 801bed8:	78db      	ldrb	r3, [r3, #3]
 801beda:	4618      	mov	r0, r3
 801bedc:	f7f8 fa21 	bl	8014322 <RTC_ByteToBcd2>
 801bee0:	4603      	mov	r3, r0
 801bee2:	461a      	mov	r2, r3
 801bee4:	4b10      	ldr	r3, [pc, #64]	; (801bf28 <ThreadMainTask+0x514>)
 801bee6:	70da      	strb	r2, [r3, #3]
				set_date.WeekDay = RTC_ByteToBcd2(set_date.WeekDay);
 801bee8:	4b0f      	ldr	r3, [pc, #60]	; (801bf28 <ThreadMainTask+0x514>)
 801beea:	781b      	ldrb	r3, [r3, #0]
 801beec:	4618      	mov	r0, r3
 801beee:	f7f8 fa18 	bl	8014322 <RTC_ByteToBcd2>
 801bef2:	4603      	mov	r3, r0
 801bef4:	461a      	mov	r2, r3
 801bef6:	4b0c      	ldr	r3, [pc, #48]	; (801bf28 <ThreadMainTask+0x514>)
 801bef8:	701a      	strb	r2, [r3, #0]

				HAL_RTC_SetTime(&hrtc, &set_time, RTC_FORMAT_BCD); // устанавливаем дату и время
 801befa:	2201      	movs	r2, #1
 801befc:	4909      	ldr	r1, [pc, #36]	; (801bf24 <ThreadMainTask+0x510>)
 801befe:	480b      	ldr	r0, [pc, #44]	; (801bf2c <ThreadMainTask+0x518>)
 801bf00:	f7f7 ffc0 	bl	8013e84 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &set_date, RTC_FORMAT_BCD);
 801bf04:	2201      	movs	r2, #1
 801bf06:	4908      	ldr	r1, [pc, #32]	; (801bf28 <ThreadMainTask+0x514>)
 801bf08:	4808      	ldr	r0, [pc, #32]	; (801bf2c <ThreadMainTask+0x518>)
 801bf0a:	f7f8 f8b3 	bl	8014074 <HAL_RTC_SetDate>


			break;
 801bf0e:	e0dc      	b.n	801c0ca <ThreadMainTask+0x6b6>
 801bf10:	20009a6c 	.word	0x20009a6c
 801bf14:	2000a1cc 	.word	0x2000a1cc
 801bf18:	2000a10c 	.word	0x2000a10c
 801bf1c:	2000969c 	.word	0x2000969c
 801bf20:	20007fed 	.word	0x20007fed
 801bf24:	20009e94 	.word	0x20009e94
 801bf28:	20009e90 	.word	0x20009e90
 801bf2c:	20009a30 	.word	0x20009a30

			case(SET_TIME_DEFAULT): // Если в регистр не поступала команда установки времени

				HAL_RTC_GetTime(&hrtc, &current_time , RTC_FORMAT_BCD); // получаем значение даты и времени
 801bf30:	2201      	movs	r2, #1
 801bf32:	4974      	ldr	r1, [pc, #464]	; (801c104 <ThreadMainTask+0x6f0>)
 801bf34:	4874      	ldr	r0, [pc, #464]	; (801c108 <ThreadMainTask+0x6f4>)
 801bf36:	f7f8 f83f 	bl	8013fb8 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &current_date , RTC_FORMAT_BCD);
 801bf3a:	2201      	movs	r2, #1
 801bf3c:	4973      	ldr	r1, [pc, #460]	; (801c10c <ThreadMainTask+0x6f8>)
 801bf3e:	4872      	ldr	r0, [pc, #456]	; (801c108 <ThreadMainTask+0x6f4>)
 801bf40:	f7f8 f91c 	bl	801417c <HAL_RTC_GetDate>

				current_time.Hours = RTC_Bcd2ToByte(current_time.Hours); // переводим из BCD формата в обычный
 801bf44:	4b6f      	ldr	r3, [pc, #444]	; (801c104 <ThreadMainTask+0x6f0>)
 801bf46:	781b      	ldrb	r3, [r3, #0]
 801bf48:	4618      	mov	r0, r3
 801bf4a:	f7f8 fa07 	bl	801435c <RTC_Bcd2ToByte>
 801bf4e:	4603      	mov	r3, r0
 801bf50:	461a      	mov	r2, r3
 801bf52:	4b6c      	ldr	r3, [pc, #432]	; (801c104 <ThreadMainTask+0x6f0>)
 801bf54:	701a      	strb	r2, [r3, #0]
				current_time.Minutes = RTC_Bcd2ToByte(current_time.Minutes);
 801bf56:	4b6b      	ldr	r3, [pc, #428]	; (801c104 <ThreadMainTask+0x6f0>)
 801bf58:	785b      	ldrb	r3, [r3, #1]
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	f7f8 f9fe 	bl	801435c <RTC_Bcd2ToByte>
 801bf60:	4603      	mov	r3, r0
 801bf62:	461a      	mov	r2, r3
 801bf64:	4b67      	ldr	r3, [pc, #412]	; (801c104 <ThreadMainTask+0x6f0>)
 801bf66:	705a      	strb	r2, [r3, #1]
				current_time.Seconds = RTC_Bcd2ToByte(current_time.Seconds);
 801bf68:	4b66      	ldr	r3, [pc, #408]	; (801c104 <ThreadMainTask+0x6f0>)
 801bf6a:	789b      	ldrb	r3, [r3, #2]
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	f7f8 f9f5 	bl	801435c <RTC_Bcd2ToByte>
 801bf72:	4603      	mov	r3, r0
 801bf74:	461a      	mov	r2, r3
 801bf76:	4b63      	ldr	r3, [pc, #396]	; (801c104 <ThreadMainTask+0x6f0>)
 801bf78:	709a      	strb	r2, [r3, #2]
				current_date.Date = RTC_Bcd2ToByte(current_date.Date);
 801bf7a:	4b64      	ldr	r3, [pc, #400]	; (801c10c <ThreadMainTask+0x6f8>)
 801bf7c:	789b      	ldrb	r3, [r3, #2]
 801bf7e:	4618      	mov	r0, r3
 801bf80:	f7f8 f9ec 	bl	801435c <RTC_Bcd2ToByte>
 801bf84:	4603      	mov	r3, r0
 801bf86:	461a      	mov	r2, r3
 801bf88:	4b60      	ldr	r3, [pc, #384]	; (801c10c <ThreadMainTask+0x6f8>)
 801bf8a:	709a      	strb	r2, [r3, #2]
				current_date.Month = RTC_Bcd2ToByte(current_date.Month);
 801bf8c:	4b5f      	ldr	r3, [pc, #380]	; (801c10c <ThreadMainTask+0x6f8>)
 801bf8e:	785b      	ldrb	r3, [r3, #1]
 801bf90:	4618      	mov	r0, r3
 801bf92:	f7f8 f9e3 	bl	801435c <RTC_Bcd2ToByte>
 801bf96:	4603      	mov	r3, r0
 801bf98:	461a      	mov	r2, r3
 801bf9a:	4b5c      	ldr	r3, [pc, #368]	; (801c10c <ThreadMainTask+0x6f8>)
 801bf9c:	705a      	strb	r2, [r3, #1]
				current_date.Year = RTC_Bcd2ToByte(current_date.Year);
 801bf9e:	4b5b      	ldr	r3, [pc, #364]	; (801c10c <ThreadMainTask+0x6f8>)
 801bfa0:	78db      	ldrb	r3, [r3, #3]
 801bfa2:	4618      	mov	r0, r3
 801bfa4:	f7f8 f9da 	bl	801435c <RTC_Bcd2ToByte>
 801bfa8:	4603      	mov	r3, r0
 801bfaa:	461a      	mov	r2, r3
 801bfac:	4b57      	ldr	r3, [pc, #348]	; (801c10c <ThreadMainTask+0x6f8>)
 801bfae:	70da      	strb	r2, [r3, #3]
				current_date.WeekDay = RTC_Bcd2ToByte(current_date.WeekDay);
 801bfb0:	4b56      	ldr	r3, [pc, #344]	; (801c10c <ThreadMainTask+0x6f8>)
 801bfb2:	781b      	ldrb	r3, [r3, #0]
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	f7f8 f9d1 	bl	801435c <RTC_Bcd2ToByte>
 801bfba:	4603      	mov	r3, r0
 801bfbc:	461a      	mov	r2, r3
 801bfbe:	4b53      	ldr	r3, [pc, #332]	; (801c10c <ThreadMainTask+0x6f8>)
 801bfc0:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801bfc2:	4b53      	ldr	r3, [pc, #332]	; (801c110 <ThreadMainTask+0x6fc>)
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	f04f 31ff 	mov.w	r1, #4294967295
 801bfca:	4618      	mov	r0, r3
 801bfcc:	f7fa fe68 	bl	8016ca0 <osMutexWait>

				fm25v02_write(2*TIME_CURRENT_HOUR_REG, 0x00); // записываем в регистры значения даты и времени
 801bfd0:	2100      	movs	r1, #0
 801bfd2:	f242 0010 	movw	r0, #8208	; 0x2010
 801bfd6:	f009 fa35 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_HOUR_REG+1, current_time.Hours);
 801bfda:	4b4a      	ldr	r3, [pc, #296]	; (801c104 <ThreadMainTask+0x6f0>)
 801bfdc:	781b      	ldrb	r3, [r3, #0]
 801bfde:	4619      	mov	r1, r3
 801bfe0:	f242 0011 	movw	r0, #8209	; 0x2011
 801bfe4:	f009 fa2e 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MINUTE_REG, 0x00);
 801bfe8:	2100      	movs	r1, #0
 801bfea:	f242 0012 	movw	r0, #8210	; 0x2012
 801bfee:	f009 fa29 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MINUTE_REG+1, current_time.Minutes);
 801bff2:	4b44      	ldr	r3, [pc, #272]	; (801c104 <ThreadMainTask+0x6f0>)
 801bff4:	785b      	ldrb	r3, [r3, #1]
 801bff6:	4619      	mov	r1, r3
 801bff8:	f242 0013 	movw	r0, #8211	; 0x2013
 801bffc:	f009 fa22 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_SECOND_REG, 0x00);
 801c000:	2100      	movs	r1, #0
 801c002:	f242 0014 	movw	r0, #8212	; 0x2014
 801c006:	f009 fa1d 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_SECOND_REG+1, current_time.Seconds);
 801c00a:	4b3e      	ldr	r3, [pc, #248]	; (801c104 <ThreadMainTask+0x6f0>)
 801c00c:	789b      	ldrb	r3, [r3, #2]
 801c00e:	4619      	mov	r1, r3
 801c010:	f242 0015 	movw	r0, #8213	; 0x2015
 801c014:	f009 fa16 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_DAY_REG, 0x00);
 801c018:	2100      	movs	r1, #0
 801c01a:	f242 000e 	movw	r0, #8206	; 0x200e
 801c01e:	f009 fa11 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_DAY_REG+1, current_date.Date);
 801c022:	4b3a      	ldr	r3, [pc, #232]	; (801c10c <ThreadMainTask+0x6f8>)
 801c024:	789b      	ldrb	r3, [r3, #2]
 801c026:	4619      	mov	r1, r3
 801c028:	f242 000f 	movw	r0, #8207	; 0x200f
 801c02c:	f009 fa0a 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MONTH_REG, 0x00);
 801c030:	2100      	movs	r1, #0
 801c032:	f242 000c 	movw	r0, #8204	; 0x200c
 801c036:	f009 fa05 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MONTH_REG+1, current_date.Month);
 801c03a:	4b34      	ldr	r3, [pc, #208]	; (801c10c <ThreadMainTask+0x6f8>)
 801c03c:	785b      	ldrb	r3, [r3, #1]
 801c03e:	4619      	mov	r1, r3
 801c040:	f242 000d 	movw	r0, #8205	; 0x200d
 801c044:	f009 f9fe 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_YEAR_REG, 0x00);
 801c048:	2100      	movs	r1, #0
 801c04a:	f242 000a 	movw	r0, #8202	; 0x200a
 801c04e:	f009 f9f9 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_YEAR_REG+1, current_date.Year);
 801c052:	4b2e      	ldr	r3, [pc, #184]	; (801c10c <ThreadMainTask+0x6f8>)
 801c054:	78db      	ldrb	r3, [r3, #3]
 801c056:	4619      	mov	r1, r3
 801c058:	f242 000b 	movw	r0, #8203	; 0x200b
 801c05c:	f009 f9f2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_WEEKDAY_REG, 0x00);
 801c060:	2100      	movs	r1, #0
 801c062:	f242 0016 	movw	r0, #8214	; 0x2016
 801c066:	f009 f9ed 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_WEEKDAY_REG+1, current_date.WeekDay);
 801c06a:	4b28      	ldr	r3, [pc, #160]	; (801c10c <ThreadMainTask+0x6f8>)
 801c06c:	781b      	ldrb	r3, [r3, #0]
 801c06e:	4619      	mov	r1, r3
 801c070:	f242 0017 	movw	r0, #8215	; 0x2017
 801c074:	f009 f9e6 	bl	8025444 <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 801c078:	4b25      	ldr	r3, [pc, #148]	; (801c110 <ThreadMainTask+0x6fc>)
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	4618      	mov	r0, r3
 801c07e:	f7fa fe5d 	bl	8016d3c <osMutexRelease>

				status_registers.time_current_hour_reg = current_time.Hours;
 801c082:	4b20      	ldr	r3, [pc, #128]	; (801c104 <ThreadMainTask+0x6f0>)
 801c084:	781b      	ldrb	r3, [r3, #0]
 801c086:	b29a      	uxth	r2, r3
 801c088:	4b22      	ldr	r3, [pc, #136]	; (801c114 <ThreadMainTask+0x700>)
 801c08a:	821a      	strh	r2, [r3, #16]
				status_registers.time_current_minute_reg = current_time.Minutes;
 801c08c:	4b1d      	ldr	r3, [pc, #116]	; (801c104 <ThreadMainTask+0x6f0>)
 801c08e:	785b      	ldrb	r3, [r3, #1]
 801c090:	b29a      	uxth	r2, r3
 801c092:	4b20      	ldr	r3, [pc, #128]	; (801c114 <ThreadMainTask+0x700>)
 801c094:	825a      	strh	r2, [r3, #18]
				status_registers.time_current_second_reg = current_time.Seconds;
 801c096:	4b1b      	ldr	r3, [pc, #108]	; (801c104 <ThreadMainTask+0x6f0>)
 801c098:	789b      	ldrb	r3, [r3, #2]
 801c09a:	b29a      	uxth	r2, r3
 801c09c:	4b1d      	ldr	r3, [pc, #116]	; (801c114 <ThreadMainTask+0x700>)
 801c09e:	829a      	strh	r2, [r3, #20]
				status_registers.time_current_day_reg = current_date.Date;
 801c0a0:	4b1a      	ldr	r3, [pc, #104]	; (801c10c <ThreadMainTask+0x6f8>)
 801c0a2:	789b      	ldrb	r3, [r3, #2]
 801c0a4:	b29a      	uxth	r2, r3
 801c0a6:	4b1b      	ldr	r3, [pc, #108]	; (801c114 <ThreadMainTask+0x700>)
 801c0a8:	81da      	strh	r2, [r3, #14]
				status_registers.time_current_month_reg = current_date.Month;
 801c0aa:	4b18      	ldr	r3, [pc, #96]	; (801c10c <ThreadMainTask+0x6f8>)
 801c0ac:	785b      	ldrb	r3, [r3, #1]
 801c0ae:	b29a      	uxth	r2, r3
 801c0b0:	4b18      	ldr	r3, [pc, #96]	; (801c114 <ThreadMainTask+0x700>)
 801c0b2:	819a      	strh	r2, [r3, #12]
				status_registers.time_current_year_reg = current_date.Year;
 801c0b4:	4b15      	ldr	r3, [pc, #84]	; (801c10c <ThreadMainTask+0x6f8>)
 801c0b6:	78db      	ldrb	r3, [r3, #3]
 801c0b8:	b29a      	uxth	r2, r3
 801c0ba:	4b16      	ldr	r3, [pc, #88]	; (801c114 <ThreadMainTask+0x700>)
 801c0bc:	815a      	strh	r2, [r3, #10]
				status_registers.time_current_weekday_reg = current_date.WeekDay;
 801c0be:	4b13      	ldr	r3, [pc, #76]	; (801c10c <ThreadMainTask+0x6f8>)
 801c0c0:	781b      	ldrb	r3, [r3, #0]
 801c0c2:	b29a      	uxth	r2, r3
 801c0c4:	4b13      	ldr	r3, [pc, #76]	; (801c114 <ThreadMainTask+0x700>)
 801c0c6:	82da      	strh	r2, [r3, #22]


			break;
 801c0c8:	bf00      	nop

		}

		switch(control_registers.reset_control_reg) // удаленная перезагрузка контроллера
 801c0ca:	4b13      	ldr	r3, [pc, #76]	; (801c118 <ThreadMainTask+0x704>)
 801c0cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801c0ce:	2b01      	cmp	r3, #1
 801c0d0:	d124      	bne.n	801c11c <ThreadMainTask+0x708>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c0d2:	4b0f      	ldr	r3, [pc, #60]	; (801c110 <ThreadMainTask+0x6fc>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	f04f 31ff 	mov.w	r1, #4294967295
 801c0da:	4618      	mov	r0, r3
 801c0dc:	f7fa fde0 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*RESET_CONTROL_REG, 0);
 801c0e0:	2100      	movs	r1, #0
 801c0e2:	f242 105a 	movw	r0, #8538	; 0x215a
 801c0e6:	f009 f9ad 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*RESET_CONTROL_REG+1, 0);
 801c0ea:	2100      	movs	r1, #0
 801c0ec:	f242 105b 	movw	r0, #8539	; 0x215b
 801c0f0:	f009 f9a8 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801c0f4:	4b06      	ldr	r3, [pc, #24]	; (801c110 <ThreadMainTask+0x6fc>)
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	4618      	mov	r0, r3
 801c0fa:	f7fa fe1f 	bl	8016d3c <osMutexRelease>
				NVIC_SystemReset();
 801c0fe:	f7ff fc73 	bl	801b9e8 <__NVIC_SystemReset>
 801c102:	bf00      	nop
 801c104:	20009e7c 	.word	0x20009e7c
 801c108:	20009a30 	.word	0x20009a30
 801c10c:	20009e78 	.word	0x20009e78
 801c110:	20009a6c 	.word	0x20009a6c
 801c114:	2000a10c 	.word	0x2000a10c
 801c118:	2000a1cc 	.word	0x2000a1cc
			break;

		}

		switch(control_registers.alarm_loop_clear_reg) // сбросить сработавшие шлейфы
 801c11c:	4b6b      	ldr	r3, [pc, #428]	; (801c2cc <ThreadMainTask+0x8b8>)
 801c11e:	895b      	ldrh	r3, [r3, #10]
 801c120:	2b01      	cmp	r3, #1
 801c122:	d13b      	bne.n	801c19c <ThreadMainTask+0x788>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c124:	4b6a      	ldr	r3, [pc, #424]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	f04f 31ff 	mov.w	r1, #4294967295
 801c12c:	4618      	mov	r0, r3
 801c12e:	f7fa fdb7 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*ALARM_LOOP_CLEAR_REG, 0);
 801c132:	2100      	movs	r1, #0
 801c134:	f242 102a 	movw	r0, #8490	; 0x212a
 801c138:	f009 f984 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_CLEAR_REG+1, 0);
 801c13c:	2100      	movs	r1, #0
 801c13e:	f242 102b 	movw	r0, #8491	; 0x212b
 801c142:	f009 f97f 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_REG, 0);
 801c146:	2100      	movs	r1, #0
 801c148:	f242 0008 	movw	r0, #8200	; 0x2008
 801c14c:	f009 f97a 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_REG+1, 0);
 801c150:	2100      	movs	r1, #0
 801c152:	f242 0009 	movw	r0, #8201	; 0x2009
 801c156:	f009 f975 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801c15a:	4b5d      	ldr	r3, [pc, #372]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	4618      	mov	r0, r3
 801c160:	f7fa fdec 	bl	8016d3c <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c164:	4b5a      	ldr	r3, [pc, #360]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	f04f 31ff 	mov.w	r1, #4294967295
 801c16c:	4618      	mov	r0, r3
 801c16e:	f7fa fd97 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801c172:	2100      	movs	r1, #0
 801c174:	f242 106e 	movw	r0, #8558	; 0x216e
 801c178:	f009 f964 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801c17c:	2101      	movs	r1, #1
 801c17e:	f242 106f 	movw	r0, #8559	; 0x216f
 801c182:	f009 f95f 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801c186:	4b52      	ldr	r3, [pc, #328]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	4618      	mov	r0, r3
 801c18c:	f7fa fdd6 	bl	8016d3c <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 801c190:	4b50      	ldr	r3, [pc, #320]	; (801c2d4 <ThreadMainTask+0x8c0>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	4618      	mov	r0, r3
 801c196:	f7fa ffb3 	bl	8017100 <osThreadResume>

			break;
 801c19a:	bf00      	nop

		}

		switch(control_registers.false_loop_clear_reg) // сбросить неисправные шлейфы
 801c19c:	4b4b      	ldr	r3, [pc, #300]	; (801c2cc <ThreadMainTask+0x8b8>)
 801c19e:	899b      	ldrh	r3, [r3, #12]
 801c1a0:	2b01      	cmp	r3, #1
 801c1a2:	d13b      	bne.n	801c21c <ThreadMainTask+0x808>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c1a4:	4b4a      	ldr	r3, [pc, #296]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	f04f 31ff 	mov.w	r1, #4294967295
 801c1ac:	4618      	mov	r0, r3
 801c1ae:	f7fa fd77 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*FALSE_LOOP_CLEAR_REG, 0);
 801c1b2:	2100      	movs	r1, #0
 801c1b4:	f242 102c 	movw	r0, #8492	; 0x212c
 801c1b8:	f009 f944 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*FALSE_LOOP_CLEAR_REG+1, 0);
 801c1bc:	2100      	movs	r1, #0
 801c1be:	f242 102d 	movw	r0, #8493	; 0x212d
 801c1c2:	f009 f93f 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ERROR_LOOP_REG, 0);
 801c1c6:	2100      	movs	r1, #0
 801c1c8:	f242 0006 	movw	r0, #8198	; 0x2006
 801c1cc:	f009 f93a 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ERROR_LOOP_REG+1, 0);
 801c1d0:	2100      	movs	r1, #0
 801c1d2:	f242 0007 	movw	r0, #8199	; 0x2007
 801c1d6:	f009 f935 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801c1da:	4b3d      	ldr	r3, [pc, #244]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	4618      	mov	r0, r3
 801c1e0:	f7fa fdac 	bl	8016d3c <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c1e4:	4b3a      	ldr	r3, [pc, #232]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	f04f 31ff 	mov.w	r1, #4294967295
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	f7fa fd57 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801c1f2:	2100      	movs	r1, #0
 801c1f4:	f242 106e 	movw	r0, #8558	; 0x216e
 801c1f8:	f009 f924 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801c1fc:	2101      	movs	r1, #1
 801c1fe:	f242 106f 	movw	r0, #8559	; 0x216f
 801c202:	f009 f91f 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801c206:	4b32      	ldr	r3, [pc, #200]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	4618      	mov	r0, r3
 801c20c:	f7fa fd96 	bl	8016d3c <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 801c210:	4b30      	ldr	r3, [pc, #192]	; (801c2d4 <ThreadMainTask+0x8c0>)
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	4618      	mov	r0, r3
 801c216:	f7fa ff73 	bl	8017100 <osThreadResume>


			break;
 801c21a:	bf00      	nop

		}


		switch(control_registers.event_read_reg)
 801c21c:	4b2b      	ldr	r3, [pc, #172]	; (801c2cc <ThreadMainTask+0x8b8>)
 801c21e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c220:	2b01      	cmp	r3, #1
 801c222:	d12a      	bne.n	801c27a <ThreadMainTask+0x866>
		{
			case(1):

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c224:	4b2a      	ldr	r3, [pc, #168]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	f04f 31ff 	mov.w	r1, #4294967295
 801c22c:	4618      	mov	r0, r3
 801c22e:	f7fa fd37 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*EVENT_READ_REG, 0);
 801c232:	2100      	movs	r1, #0
 801c234:	f242 1044 	movw	r0, #8516	; 0x2144
 801c238:	f009 f904 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*EVENT_READ_REG+1, 0);
 801c23c:	2100      	movs	r1, #0
 801c23e:	f242 1045 	movw	r0, #8517	; 0x2145
 801c242:	f009 f8ff 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 801c246:	2100      	movs	r1, #0
 801c248:	f242 001c 	movw	r0, #8220	; 0x201c
 801c24c:	f009 f8fa 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 801c250:	2120      	movs	r1, #32
 801c252:	f242 001d 	movw	r0, #8221	; 0x201d
 801c256:	f009 f8f5 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 801c25a:	2100      	movs	r1, #0
 801c25c:	f242 001e 	movw	r0, #8222	; 0x201e
 801c260:	f009 f8f0 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 801c264:	2100      	movs	r1, #0
 801c266:	f242 001f 	movw	r0, #8223	; 0x201f
 801c26a:	f009 f8eb 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801c26e:	4b18      	ldr	r3, [pc, #96]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	4618      	mov	r0, r3
 801c274:	f7fa fd62 	bl	8016d3c <osMutexRelease>

			break;
 801c278:	bf00      	nop
		}

		switch(bootloader_registers.working_mode_reg)
 801c27a:	4b17      	ldr	r3, [pc, #92]	; (801c2d8 <ThreadMainTask+0x8c4>)
 801c27c:	8b9b      	ldrh	r3, [r3, #28]
 801c27e:	2b01      	cmp	r3, #1
 801c280:	d101      	bne.n	801c286 <ThreadMainTask+0x872>
		{
			case(1):

				NVIC_SystemReset();
 801c282:	f7ff fbb1 	bl	801b9e8 <__NVIC_SystemReset>

			break;
		}

		if( modem_reset_state == 1)
 801c286:	4b15      	ldr	r3, [pc, #84]	; (801c2dc <ThreadMainTask+0x8c8>)
 801c288:	781b      	ldrb	r3, [r3, #0]
 801c28a:	b2db      	uxtb	r3, r3
 801c28c:	2b01      	cmp	r3, #1
 801c28e:	d116      	bne.n	801c2be <ThreadMainTask+0x8aa>
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 801c290:	4b0f      	ldr	r3, [pc, #60]	; (801c2d0 <ThreadMainTask+0x8bc>)
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	f04f 31ff 	mov.w	r1, #4294967295
 801c298:	4618      	mov	r0, r3
 801c29a:	f7fa fd01 	bl	8016ca0 <osMutexWait>
			osThreadSuspend(M95TaskHandle);
 801c29e:	4b10      	ldr	r3, [pc, #64]	; (801c2e0 <ThreadMainTask+0x8cc>)
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f7fa ff20 	bl	80170e8 <osThreadSuspend>
			modem_reset_state = 0;
 801c2a8:	4b0c      	ldr	r3, [pc, #48]	; (801c2dc <ThreadMainTask+0x8c8>)
 801c2aa:	2200      	movs	r2, #0
 801c2ac:	701a      	strb	r2, [r3, #0]
			//AT_QPOWD(0);
			m95_power_off();
 801c2ae:	f009 fcad 	bl	8025c0c <m95_power_off>
			HAL_Delay(5000);
 801c2b2:	f241 3088 	movw	r0, #5000	; 0x1388
 801c2b6:	f7f5 fcd9 	bl	8011c6c <HAL_Delay>
			NVIC_SystemReset();
 801c2ba:	f7ff fb95 	bl	801b9e8 <__NVIC_SystemReset>
		}


		osDelay(500);
 801c2be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801c2c2:	f7fa fc0c 	bl	8016ade <osDelay>
		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET ) // проверяем если есть наличие единицы на пине PFO микросхемы TPS3306-15
 801c2c6:	f7ff bbae 	b.w	801ba26 <ThreadMainTask+0x12>
 801c2ca:	bf00      	nop
 801c2cc:	2000a1cc 	.word	0x2000a1cc
 801c2d0:	20009a6c 	.word	0x20009a6c
 801c2d4:	2000969c 	.word	0x2000969c
 801c2d8:	2000a0c0 	.word	0x2000a0c0
 801c2dc:	2000085e 	.word	0x2000085e
 801c2e0:	200098e0 	.word	0x200098e0

0801c2e4 <ThreadMeterTask>:

uint8_t meter_id;


void ThreadMeterTask(void const * argument)
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	b082      	sub	sp, #8
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]


	osSemaphoreWait(RS485TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 801c2ec:	4b57      	ldr	r3, [pc, #348]	; (801c44c <ThreadMeterTask+0x168>)
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	f04f 31ff 	mov.w	r1, #4294967295
 801c2f4:	4618      	mov	r0, r3
 801c2f6:	f7fa fd97 	bl	8016e28 <osSemaphoreWait>

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // тестово обнуляем регистр ошибки опроса счетчика
 801c2fa:	4b55      	ldr	r3, [pc, #340]	; (801c450 <ThreadMeterTask+0x16c>)
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	f04f 31ff 	mov.w	r1, #4294967295
 801c302:	4618      	mov	r0, r3
 801c304:	f7fa fccc 	bl	8016ca0 <osMutexWait>
	fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 801c308:	2100      	movs	r1, #0
 801c30a:	f242 003c 	movw	r0, #8252	; 0x203c
 801c30e:	f009 f899 	bl	8025444 <fm25v02_write>
	fm25v02_write(2*CE_303_ERROR_REG+1, 0x01);
 801c312:	2101      	movs	r1, #1
 801c314:	f242 003d 	movw	r0, #8253	; 0x203d
 801c318:	f009 f894 	bl	8025444 <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 801c31c:	4b4c      	ldr	r3, [pc, #304]	; (801c450 <ThreadMeterTask+0x16c>)
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	4618      	mov	r0, r3
 801c322:	f7fa fd0b 	bl	8016d3c <osMutexRelease>


	for(;;)
	{
		if(control_registers.meter_polling_reg == 1)
 801c326:	4b4b      	ldr	r3, [pc, #300]	; (801c454 <ThreadMeterTask+0x170>)
 801c328:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c32a:	2b01      	cmp	r3, #1
 801c32c:	f040 8089 	bne.w	801c442 <ThreadMeterTask+0x15e>
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c330:	4b47      	ldr	r3, [pc, #284]	; (801c450 <ThreadMeterTask+0x16c>)
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	f04f 31ff 	mov.w	r1, #4294967295
 801c338:	4618      	mov	r0, r3
 801c33a:	f7fa fcb1 	bl	8016ca0 <osMutexWait>
			fm25v02_read(2*METER_ID_LOW_REG+1, &meter_temp); // вычитываем значение регистра номера счетчика и записываем его в переменную буфера.
 801c33e:	4946      	ldr	r1, [pc, #280]	; (801c458 <ThreadMeterTask+0x174>)
 801c340:	f242 106d 	movw	r0, #8557	; 0x216d
 801c344:	f009 f844 	bl	80253d0 <fm25v02_read>

			osMutexRelease(Fm25v02MutexHandle);
 801c348:	4b41      	ldr	r3, [pc, #260]	; (801c450 <ThreadMeterTask+0x16c>)
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	4618      	mov	r0, r3
 801c34e:	f7fa fcf5 	bl	8016d3c <osMutexRelease>

			if(meter_temp != meter_id)
 801c352:	4b41      	ldr	r3, [pc, #260]	; (801c458 <ThreadMeterTask+0x174>)
 801c354:	781a      	ldrb	r2, [r3, #0]
 801c356:	4b41      	ldr	r3, [pc, #260]	; (801c45c <ThreadMeterTask+0x178>)
 801c358:	781b      	ldrb	r3, [r3, #0]
 801c35a:	429a      	cmp	r2, r3
 801c35c:	d019      	beq.n	801c392 <ThreadMeterTask+0xae>
			{
				meter_id = meter_temp;
 801c35e:	4b3e      	ldr	r3, [pc, #248]	; (801c458 <ThreadMeterTask+0x174>)
 801c360:	781a      	ldrb	r2, [r3, #0]
 801c362:	4b3e      	ldr	r3, [pc, #248]	; (801c45c <ThreadMeterTask+0x178>)
 801c364:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c366:	4b3a      	ldr	r3, [pc, #232]	; (801c450 <ThreadMeterTask+0x16c>)
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	f04f 31ff 	mov.w	r1, #4294967295
 801c36e:	4618      	mov	r0, r3
 801c370:	f7fa fc96 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 801c374:	2100      	movs	r1, #0
 801c376:	f242 003c 	movw	r0, #8252	; 0x203c
 801c37a:	f009 f863 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_ERROR_REG+1, 0x01);
 801c37e:	2101      	movs	r1, #1
 801c380:	f242 003d 	movw	r0, #8253	; 0x203d
 801c384:	f009 f85e 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801c388:	4b31      	ldr	r3, [pc, #196]	; (801c450 <ThreadMeterTask+0x16c>)
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	4618      	mov	r0, r3
 801c38e:	f7fa fcd5 	bl	8016d3c <osMutexRelease>

			}

			ce303_voltage(meter_temp); // читаем напряжение
 801c392:	4b31      	ldr	r3, [pc, #196]	; (801c458 <ThreadMeterTask+0x174>)
 801c394:	781b      	ldrb	r3, [r3, #0]
 801c396:	4618      	mov	r0, r3
 801c398:	f002 fab6 	bl	801e908 <ce303_voltage>
			ce303_current(meter_temp); // читаем ток
 801c39c:	4b2e      	ldr	r3, [pc, #184]	; (801c458 <ThreadMeterTask+0x174>)
 801c39e:	781b      	ldrb	r3, [r3, #0]
 801c3a0:	4618      	mov	r0, r3
 801c3a2:	f003 fcfd 	bl	801fda0 <ce303_current>
			ce303_power(meter_temp); // читаем мощность
 801c3a6:	4b2c      	ldr	r3, [pc, #176]	; (801c458 <ThreadMeterTask+0x174>)
 801c3a8:	781b      	ldrb	r3, [r3, #0]
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	f004 ff42 	bl	8021234 <ce303_power>
			ce303_tarif(meter_temp); // читаем тарифы
 801c3b0:	4b29      	ldr	r3, [pc, #164]	; (801c458 <ThreadMeterTask+0x174>)
 801c3b2:	781b      	ldrb	r3, [r3, #0]
 801c3b4:	4618      	mov	r0, r3
 801c3b6:	f006 f989 	bl	80226cc <ce303_tarif>

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c3ba:	4b25      	ldr	r3, [pc, #148]	; (801c450 <ThreadMeterTask+0x16c>)
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	f04f 31ff 	mov.w	r1, #4294967295
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	f7fa fc6c 	bl	8016ca0 <osMutexWait>
			fm25v02_read(2*METER_ID_LOW_REG+1, &meter_temp);
 801c3c8:	4923      	ldr	r1, [pc, #140]	; (801c458 <ThreadMeterTask+0x174>)
 801c3ca:	f242 106d 	movw	r0, #8557	; 0x216d
 801c3ce:	f008 ffff 	bl	80253d0 <fm25v02_read>
			osMutexRelease(Fm25v02MutexHandle);
 801c3d2:	4b1f      	ldr	r3, [pc, #124]	; (801c450 <ThreadMeterTask+0x16c>)
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	4618      	mov	r0, r3
 801c3d8:	f7fa fcb0 	bl	8016d3c <osMutexRelease>

			if(meter_temp == meter_id)
 801c3dc:	4b1e      	ldr	r3, [pc, #120]	; (801c458 <ThreadMeterTask+0x174>)
 801c3de:	781a      	ldrb	r2, [r3, #0]
 801c3e0:	4b1e      	ldr	r3, [pc, #120]	; (801c45c <ThreadMeterTask+0x178>)
 801c3e2:	781b      	ldrb	r3, [r3, #0]
 801c3e4:	429a      	cmp	r2, r3
 801c3e6:	d116      	bne.n	801c416 <ThreadMeterTask+0x132>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c3e8:	4b19      	ldr	r3, [pc, #100]	; (801c450 <ThreadMeterTask+0x16c>)
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	f04f 31ff 	mov.w	r1, #4294967295
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	f7fa fc55 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 801c3f6:	2100      	movs	r1, #0
 801c3f8:	f242 003c 	movw	r0, #8252	; 0x203c
 801c3fc:	f009 f822 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_ERROR_REG+1, 0x00);
 801c400:	2100      	movs	r1, #0
 801c402:	f242 003d 	movw	r0, #8253	; 0x203d
 801c406:	f009 f81d 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801c40a:	4b11      	ldr	r3, [pc, #68]	; (801c450 <ThreadMeterTask+0x16c>)
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	4618      	mov	r0, r3
 801c410:	f7fa fc94 	bl	8016d3c <osMutexRelease>
 801c414:	e015      	b.n	801c442 <ThreadMeterTask+0x15e>
			}
			else
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c416:	4b0e      	ldr	r3, [pc, #56]	; (801c450 <ThreadMeterTask+0x16c>)
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	f04f 31ff 	mov.w	r1, #4294967295
 801c41e:	4618      	mov	r0, r3
 801c420:	f7fa fc3e 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 801c424:	2100      	movs	r1, #0
 801c426:	f242 003c 	movw	r0, #8252	; 0x203c
 801c42a:	f009 f80b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_ERROR_REG+1, 0x01);
 801c42e:	2101      	movs	r1, #1
 801c430:	f242 003d 	movw	r0, #8253	; 0x203d
 801c434:	f009 f806 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801c438:	4b05      	ldr	r3, [pc, #20]	; (801c450 <ThreadMeterTask+0x16c>)
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	4618      	mov	r0, r3
 801c43e:	f7fa fc7d 	bl	8016d3c <osMutexRelease>
			}

		}


		osDelay(2000);
 801c442:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801c446:	f7fa fb4a 	bl	8016ade <osDelay>
		if(control_registers.meter_polling_reg == 1)
 801c44a:	e76c      	b.n	801c326 <ThreadMeterTask+0x42>
 801c44c:	20009a50 	.word	0x20009a50
 801c450:	20009a6c 	.word	0x20009a6c
 801c454:	2000a1cc 	.word	0x2000a1cc
 801c458:	20009ea9 	.word	0x20009ea9
 801c45c:	20009ea8 	.word	0x20009ea8

0801c460 <ThreadModbusPacketTask>:
uint16_t modbus_address;



void ThreadModbusPacketTask(void const * argument)
{
 801c460:	b580      	push	{r7, lr}
 801c462:	b084      	sub	sp, #16
 801c464:	af00      	add	r7, sp, #0
 801c466:	6078      	str	r0, [r7, #4]
	uint8_t temp_h1;
	uint8_t temp_l1;

	osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 801c468:	4b8b      	ldr	r3, [pc, #556]	; (801c698 <ThreadModbusPacketTask+0x238>)
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	f04f 31ff 	mov.w	r1, #4294967295
 801c470:	4618      	mov	r0, r3
 801c472:	f7fa fcd9 	bl	8016e28 <osSemaphoreWait>



	for(;;)
	{
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 801c476:	4b88      	ldr	r3, [pc, #544]	; (801c698 <ThreadModbusPacketTask+0x238>)
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	f04f 31ff 	mov.w	r1, #4294967295
 801c47e:	4618      	mov	r0, r3
 801c480:	f7fa fcd2 	bl	8016e28 <osSemaphoreWait>

		switch(modbus_buffer[modbus_packet_number1][1]) // проверяем тип поступившей команды MODBUS и формируем соответствующий ответ
 801c484:	4b85      	ldr	r3, [pc, #532]	; (801c69c <ThreadModbusPacketTask+0x23c>)
 801c486:	781b      	ldrb	r3, [r3, #0]
 801c488:	4a85      	ldr	r2, [pc, #532]	; (801c6a0 <ThreadModbusPacketTask+0x240>)
 801c48a:	021b      	lsls	r3, r3, #8
 801c48c:	4413      	add	r3, r2
 801c48e:	3301      	adds	r3, #1
 801c490:	781b      	ldrb	r3, [r3, #0]
 801c492:	2b03      	cmp	r3, #3
 801c494:	d003      	beq.n	801c49e <ThreadModbusPacketTask+0x3e>
 801c496:	2b10      	cmp	r3, #16
 801c498:	f000 80b3 	beq.w	801c602 <ThreadModbusPacketTask+0x1a2>
 801c49c:	e20e      	b.n	801c8bc <ThreadModbusPacketTask+0x45c>
		{
			case(0x03): // чтение регистра

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для чтения
 801c49e:	4b7f      	ldr	r3, [pc, #508]	; (801c69c <ThreadModbusPacketTask+0x23c>)
 801c4a0:	781b      	ldrb	r3, [r3, #0]
 801c4a2:	4a7f      	ldr	r2, [pc, #508]	; (801c6a0 <ThreadModbusPacketTask+0x240>)
 801c4a4:	021b      	lsls	r3, r3, #8
 801c4a6:	4413      	add	r3, r2
 801c4a8:	3302      	adds	r3, #2
 801c4aa:	781b      	ldrb	r3, [r3, #0]
 801c4ac:	021b      	lsls	r3, r3, #8
 801c4ae:	b21a      	sxth	r2, r3
 801c4b0:	4b7a      	ldr	r3, [pc, #488]	; (801c69c <ThreadModbusPacketTask+0x23c>)
 801c4b2:	781b      	ldrb	r3, [r3, #0]
 801c4b4:	497a      	ldr	r1, [pc, #488]	; (801c6a0 <ThreadModbusPacketTask+0x240>)
 801c4b6:	021b      	lsls	r3, r3, #8
 801c4b8:	440b      	add	r3, r1
 801c4ba:	3303      	adds	r3, #3
 801c4bc:	781b      	ldrb	r3, [r3, #0]
 801c4be:	b21b      	sxth	r3, r3
 801c4c0:	4313      	orrs	r3, r2
 801c4c2:	b21b      	sxth	r3, r3
 801c4c4:	b29a      	uxth	r2, r3
 801c4c6:	4b77      	ldr	r3, [pc, #476]	; (801c6a4 <ThreadModbusPacketTask+0x244>)
 801c4c8:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 801c4ca:	4b74      	ldr	r3, [pc, #464]	; (801c69c <ThreadModbusPacketTask+0x23c>)
 801c4cc:	781b      	ldrb	r3, [r3, #0]
 801c4ce:	4a74      	ldr	r2, [pc, #464]	; (801c6a0 <ThreadModbusPacketTask+0x240>)
 801c4d0:	021b      	lsls	r3, r3, #8
 801c4d2:	4413      	add	r3, r2
 801c4d4:	3304      	adds	r3, #4
 801c4d6:	781b      	ldrb	r3, [r3, #0]
 801c4d8:	021b      	lsls	r3, r3, #8
 801c4da:	b21a      	sxth	r2, r3
 801c4dc:	4b6f      	ldr	r3, [pc, #444]	; (801c69c <ThreadModbusPacketTask+0x23c>)
 801c4de:	781b      	ldrb	r3, [r3, #0]
 801c4e0:	496f      	ldr	r1, [pc, #444]	; (801c6a0 <ThreadModbusPacketTask+0x240>)
 801c4e2:	021b      	lsls	r3, r3, #8
 801c4e4:	440b      	add	r3, r1
 801c4e6:	3305      	adds	r3, #5
 801c4e8:	781b      	ldrb	r3, [r3, #0]
 801c4ea:	b21b      	sxth	r3, r3
 801c4ec:	4313      	orrs	r3, r2
 801c4ee:	b21b      	sxth	r3, r3
 801c4f0:	b29a      	uxth	r2, r3
 801c4f2:	4b6d      	ldr	r3, [pc, #436]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c4f4:	801a      	strh	r2, [r3, #0]

				// обработка пакета чтения 16-битного регистра modbus

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c4f6:	4b6d      	ldr	r3, [pc, #436]	; (801c6ac <ThreadModbusPacketTask+0x24c>)
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	f04f 31ff 	mov.w	r1, #4294967295
 801c4fe:	4618      	mov	r0, r3
 801c500:	f7fa fbce 	bl	8016ca0 <osMutexWait>
				fm25v02_fast_read( 2*modbus_address , &buf_out[0] , 2*modbus_size); // читаем из памяти необходимое количество регистров
 801c504:	4b67      	ldr	r3, [pc, #412]	; (801c6a4 <ThreadModbusPacketTask+0x244>)
 801c506:	881b      	ldrh	r3, [r3, #0]
 801c508:	005b      	lsls	r3, r3, #1
 801c50a:	b298      	uxth	r0, r3
 801c50c:	4b66      	ldr	r3, [pc, #408]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c50e:	881b      	ldrh	r3, [r3, #0]
 801c510:	005b      	lsls	r3, r3, #1
 801c512:	b29b      	uxth	r3, r3
 801c514:	461a      	mov	r2, r3
 801c516:	4966      	ldr	r1, [pc, #408]	; (801c6b0 <ThreadModbusPacketTask+0x250>)
 801c518:	f009 f804 	bl	8025524 <fm25v02_fast_read>
				osMutexRelease(Fm25v02MutexHandle);
 801c51c:	4b63      	ldr	r3, [pc, #396]	; (801c6ac <ThreadModbusPacketTask+0x24c>)
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	4618      	mov	r0, r3
 801c522:	f7fa fc0b 	bl	8016d3c <osMutexRelease>

				buf_out1[0] = 0x01;
 801c526:	4b63      	ldr	r3, [pc, #396]	; (801c6b4 <ThreadModbusPacketTask+0x254>)
 801c528:	2201      	movs	r2, #1
 801c52a:	701a      	strb	r2, [r3, #0]
				buf_out1[1] = 0x03;
 801c52c:	4b61      	ldr	r3, [pc, #388]	; (801c6b4 <ThreadModbusPacketTask+0x254>)
 801c52e:	2203      	movs	r2, #3
 801c530:	705a      	strb	r2, [r3, #1]
				buf_out1[2] = 2*modbus_size;
 801c532:	4b5d      	ldr	r3, [pc, #372]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c534:	881b      	ldrh	r3, [r3, #0]
 801c536:	b2db      	uxtb	r3, r3
 801c538:	005b      	lsls	r3, r3, #1
 801c53a:	b2da      	uxtb	r2, r3
 801c53c:	4b5d      	ldr	r3, [pc, #372]	; (801c6b4 <ThreadModbusPacketTask+0x254>)
 801c53e:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<modbus_size; i++)
 801c540:	2300      	movs	r3, #0
 801c542:	73fb      	strb	r3, [r7, #15]
 801c544:	e015      	b.n	801c572 <ThreadModbusPacketTask+0x112>
				{
					buf_out1[2*i+3] = buf_out[2*i];
 801c546:	7bfb      	ldrb	r3, [r7, #15]
 801c548:	005a      	lsls	r2, r3, #1
 801c54a:	7bfb      	ldrb	r3, [r7, #15]
 801c54c:	005b      	lsls	r3, r3, #1
 801c54e:	3303      	adds	r3, #3
 801c550:	4957      	ldr	r1, [pc, #348]	; (801c6b0 <ThreadModbusPacketTask+0x250>)
 801c552:	5c89      	ldrb	r1, [r1, r2]
 801c554:	4a57      	ldr	r2, [pc, #348]	; (801c6b4 <ThreadModbusPacketTask+0x254>)
 801c556:	54d1      	strb	r1, [r2, r3]
					buf_out1[2*i+4] = buf_out[2*i+1];
 801c558:	7bfb      	ldrb	r3, [r7, #15]
 801c55a:	005b      	lsls	r3, r3, #1
 801c55c:	1c5a      	adds	r2, r3, #1
 801c55e:	7bfb      	ldrb	r3, [r7, #15]
 801c560:	3302      	adds	r3, #2
 801c562:	005b      	lsls	r3, r3, #1
 801c564:	4952      	ldr	r1, [pc, #328]	; (801c6b0 <ThreadModbusPacketTask+0x250>)
 801c566:	5c89      	ldrb	r1, [r1, r2]
 801c568:	4a52      	ldr	r2, [pc, #328]	; (801c6b4 <ThreadModbusPacketTask+0x254>)
 801c56a:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0; i<modbus_size; i++)
 801c56c:	7bfb      	ldrb	r3, [r7, #15]
 801c56e:	3301      	adds	r3, #1
 801c570:	73fb      	strb	r3, [r7, #15]
 801c572:	7bfb      	ldrb	r3, [r7, #15]
 801c574:	b29a      	uxth	r2, r3
 801c576:	4b4c      	ldr	r3, [pc, #304]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c578:	881b      	ldrh	r3, [r3, #0]
 801c57a:	429a      	cmp	r2, r3
 801c57c:	d3e3      	bcc.n	801c546 <ThreadModbusPacketTask+0xe6>
				}
				crc_temp = CRC16(&buf_out1[0], 3+2*modbus_size);
 801c57e:	4b4a      	ldr	r3, [pc, #296]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c580:	881b      	ldrh	r3, [r3, #0]
 801c582:	005b      	lsls	r3, r3, #1
 801c584:	3303      	adds	r3, #3
 801c586:	4619      	mov	r1, r3
 801c588:	484a      	ldr	r0, [pc, #296]	; (801c6b4 <ThreadModbusPacketTask+0x254>)
 801c58a:	f00c fd0d 	bl	8028fa8 <CRC16>
 801c58e:	4603      	mov	r3, r0
 801c590:	4a49      	ldr	r2, [pc, #292]	; (801c6b8 <ThreadModbusPacketTask+0x258>)
 801c592:	6013      	str	r3, [r2, #0]
				buf_out1[2*modbus_size+3] = (uint8_t)(crc_temp&0x00FF);
 801c594:	4b48      	ldr	r3, [pc, #288]	; (801c6b8 <ThreadModbusPacketTask+0x258>)
 801c596:	681a      	ldr	r2, [r3, #0]
 801c598:	4b43      	ldr	r3, [pc, #268]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c59a:	881b      	ldrh	r3, [r3, #0]
 801c59c:	005b      	lsls	r3, r3, #1
 801c59e:	3303      	adds	r3, #3
 801c5a0:	b2d1      	uxtb	r1, r2
 801c5a2:	4a44      	ldr	r2, [pc, #272]	; (801c6b4 <ThreadModbusPacketTask+0x254>)
 801c5a4:	54d1      	strb	r1, [r2, r3]
				buf_out1[2*modbus_size+4] = (uint8_t)((crc_temp>>8)&0x00FF);
 801c5a6:	4b44      	ldr	r3, [pc, #272]	; (801c6b8 <ThreadModbusPacketTask+0x258>)
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	0a1a      	lsrs	r2, r3, #8
 801c5ac:	4b3e      	ldr	r3, [pc, #248]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c5ae:	881b      	ldrh	r3, [r3, #0]
 801c5b0:	3302      	adds	r3, #2
 801c5b2:	005b      	lsls	r3, r3, #1
 801c5b4:	b2d1      	uxtb	r1, r2
 801c5b6:	4a3f      	ldr	r2, [pc, #252]	; (801c6b4 <ThreadModbusPacketTask+0x254>)
 801c5b8:	54d1      	strb	r1, [r2, r3]

				osMutexWait(UartMutexHandle, osWaitForever);
 801c5ba:	4b40      	ldr	r3, [pc, #256]	; (801c6bc <ThreadModbusPacketTask+0x25c>)
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	f04f 31ff 	mov.w	r1, #4294967295
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f7fa fb6c 	bl	8016ca0 <osMutexWait>
				if( AT_QISEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
 801c5c8:	4b37      	ldr	r3, [pc, #220]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c5ca:	881b      	ldrh	r3, [r3, #0]
 801c5cc:	005b      	lsls	r3, r3, #1
 801c5ce:	b29b      	uxth	r3, r3
 801c5d0:	3305      	adds	r3, #5
 801c5d2:	b29b      	uxth	r3, r3
 801c5d4:	4619      	mov	r1, r3
 801c5d6:	4837      	ldr	r0, [pc, #220]	; (801c6b4 <ThreadModbusPacketTask+0x254>)
 801c5d8:	f00a f92c 	bl	8026834 <AT_QISEND>
				{
					//LED7_ON();
				}
				osMutexRelease(UartMutexHandle);
 801c5dc:	4b37      	ldr	r3, [pc, #220]	; (801c6bc <ThreadModbusPacketTask+0x25c>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	f7fa fbab 	bl	8016d3c <osMutexRelease>

				if( modbus_address == VERSION_REG ) // если запрашивается адрес версии прошивки обновляем таймер перезагрузки
 801c5e6:	4b2f      	ldr	r3, [pc, #188]	; (801c6a4 <ThreadModbusPacketTask+0x244>)
 801c5e8:	881b      	ldrh	r3, [r3, #0]
 801c5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c5ee:	f040 8162 	bne.w	801c8b6 <ThreadModbusPacketTask+0x456>
				{
					//osTimerStop(Ring_Center_TimerHandle);
					osTimerStart(Ring_Center_TimerHandle, 60000);
 801c5f2:	4b33      	ldr	r3, [pc, #204]	; (801c6c0 <ThreadModbusPacketTask+0x260>)
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	f64e 2160 	movw	r1, #60000	; 0xea60
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	f7fa fab8 	bl	8016b70 <osTimerStart>
				}


			break;
 801c600:	e159      	b.n	801c8b6 <ThreadModbusPacketTask+0x456>

			case(0x10): // запись нескольких регистров

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для записи
 801c602:	4b26      	ldr	r3, [pc, #152]	; (801c69c <ThreadModbusPacketTask+0x23c>)
 801c604:	781b      	ldrb	r3, [r3, #0]
 801c606:	4a26      	ldr	r2, [pc, #152]	; (801c6a0 <ThreadModbusPacketTask+0x240>)
 801c608:	021b      	lsls	r3, r3, #8
 801c60a:	4413      	add	r3, r2
 801c60c:	3302      	adds	r3, #2
 801c60e:	781b      	ldrb	r3, [r3, #0]
 801c610:	021b      	lsls	r3, r3, #8
 801c612:	b21a      	sxth	r2, r3
 801c614:	4b21      	ldr	r3, [pc, #132]	; (801c69c <ThreadModbusPacketTask+0x23c>)
 801c616:	781b      	ldrb	r3, [r3, #0]
 801c618:	4921      	ldr	r1, [pc, #132]	; (801c6a0 <ThreadModbusPacketTask+0x240>)
 801c61a:	021b      	lsls	r3, r3, #8
 801c61c:	440b      	add	r3, r1
 801c61e:	3303      	adds	r3, #3
 801c620:	781b      	ldrb	r3, [r3, #0]
 801c622:	b21b      	sxth	r3, r3
 801c624:	4313      	orrs	r3, r2
 801c626:	b21b      	sxth	r3, r3
 801c628:	b29a      	uxth	r2, r3
 801c62a:	4b1e      	ldr	r3, [pc, #120]	; (801c6a4 <ThreadModbusPacketTask+0x244>)
 801c62c:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 801c62e:	4b1b      	ldr	r3, [pc, #108]	; (801c69c <ThreadModbusPacketTask+0x23c>)
 801c630:	781b      	ldrb	r3, [r3, #0]
 801c632:	4a1b      	ldr	r2, [pc, #108]	; (801c6a0 <ThreadModbusPacketTask+0x240>)
 801c634:	021b      	lsls	r3, r3, #8
 801c636:	4413      	add	r3, r2
 801c638:	3304      	adds	r3, #4
 801c63a:	781b      	ldrb	r3, [r3, #0]
 801c63c:	021b      	lsls	r3, r3, #8
 801c63e:	b21a      	sxth	r2, r3
 801c640:	4b16      	ldr	r3, [pc, #88]	; (801c69c <ThreadModbusPacketTask+0x23c>)
 801c642:	781b      	ldrb	r3, [r3, #0]
 801c644:	4916      	ldr	r1, [pc, #88]	; (801c6a0 <ThreadModbusPacketTask+0x240>)
 801c646:	021b      	lsls	r3, r3, #8
 801c648:	440b      	add	r3, r1
 801c64a:	3305      	adds	r3, #5
 801c64c:	781b      	ldrb	r3, [r3, #0]
 801c64e:	b21b      	sxth	r3, r3
 801c650:	4313      	orrs	r3, r2
 801c652:	b21b      	sxth	r3, r3
 801c654:	b29a      	uxth	r2, r3
 801c656:	4b14      	ldr	r3, [pc, #80]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c658:	801a      	strh	r2, [r3, #0]

				if( !( (modbus_address>=0x1000) && (modbus_address<=0x108F) ) && !( (modbus_address<0x1000) && (modbus_address+modbus_size>0x1000) ) ) // модбас адресс не должен находиться в области статусных регистров, а также запись не должна затрагивать статусные регистры
 801c65a:	4b12      	ldr	r3, [pc, #72]	; (801c6a4 <ThreadModbusPacketTask+0x244>)
 801c65c:	881b      	ldrh	r3, [r3, #0]
 801c65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c662:	d306      	bcc.n	801c672 <ThreadModbusPacketTask+0x212>
 801c664:	4b0f      	ldr	r3, [pc, #60]	; (801c6a4 <ThreadModbusPacketTask+0x244>)
 801c666:	881b      	ldrh	r3, [r3, #0]
 801c668:	f241 028f 	movw	r2, #4239	; 0x108f
 801c66c:	4293      	cmp	r3, r2
 801c66e:	f240 8124 	bls.w	801c8ba <ThreadModbusPacketTask+0x45a>
 801c672:	4b0c      	ldr	r3, [pc, #48]	; (801c6a4 <ThreadModbusPacketTask+0x244>)
 801c674:	881b      	ldrh	r3, [r3, #0]
 801c676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c67a:	d209      	bcs.n	801c690 <ThreadModbusPacketTask+0x230>
 801c67c:	4b09      	ldr	r3, [pc, #36]	; (801c6a4 <ThreadModbusPacketTask+0x244>)
 801c67e:	881b      	ldrh	r3, [r3, #0]
 801c680:	461a      	mov	r2, r3
 801c682:	4b09      	ldr	r3, [pc, #36]	; (801c6a8 <ThreadModbusPacketTask+0x248>)
 801c684:	881b      	ldrh	r3, [r3, #0]
 801c686:	4413      	add	r3, r2
 801c688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c68c:	f300 8115 	bgt.w	801c8ba <ThreadModbusPacketTask+0x45a>
				{

					// обработка пакета записи 16-битного регистра modbus

					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 801c690:	2300      	movs	r3, #0
 801c692:	73bb      	strb	r3, [r7, #14]
 801c694:	e053      	b.n	801c73e <ThreadModbusPacketTask+0x2de>
 801c696:	bf00      	nop
 801c698:	20009a28 	.word	0x20009a28
 801c69c:	20007fef 	.word	0x20007fef
 801c6a0:	20008298 	.word	0x20008298
 801c6a4:	2000a0ac 	.word	0x2000a0ac
 801c6a8:	2000a0ae 	.word	0x2000a0ae
 801c6ac:	20009a6c 	.word	0x20009a6c
 801c6b0:	20009fac 	.word	0x20009fac
 801c6b4:	20009eac 	.word	0x20009eac
 801c6b8:	2000a0bc 	.word	0x2000a0bc
 801c6bc:	200096a0 	.word	0x200096a0
 801c6c0:	200096a4 	.word	0x200096a4
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c6c4:	4b7f      	ldr	r3, [pc, #508]	; (801c8c4 <ThreadModbusPacketTask+0x464>)
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	f04f 31ff 	mov.w	r1, #4294967295
 801c6cc:	4618      	mov	r0, r3
 801c6ce:	f7fa fae7 	bl	8016ca0 <osMutexWait>
						fm25v02_fast_write( (2*modbus_address+2*a), &modbus_buffer[modbus_packet_number1][7+a*2], 1 );
 801c6d2:	4b7d      	ldr	r3, [pc, #500]	; (801c8c8 <ThreadModbusPacketTask+0x468>)
 801c6d4:	881b      	ldrh	r3, [r3, #0]
 801c6d6:	461a      	mov	r2, r3
 801c6d8:	7bbb      	ldrb	r3, [r7, #14]
 801c6da:	4413      	add	r3, r2
 801c6dc:	b29b      	uxth	r3, r3
 801c6de:	005b      	lsls	r3, r3, #1
 801c6e0:	b298      	uxth	r0, r3
 801c6e2:	4b7a      	ldr	r3, [pc, #488]	; (801c8cc <ThreadModbusPacketTask+0x46c>)
 801c6e4:	781b      	ldrb	r3, [r3, #0]
 801c6e6:	461a      	mov	r2, r3
 801c6e8:	7bbb      	ldrb	r3, [r7, #14]
 801c6ea:	005b      	lsls	r3, r3, #1
 801c6ec:	3307      	adds	r3, #7
 801c6ee:	0212      	lsls	r2, r2, #8
 801c6f0:	4413      	add	r3, r2
 801c6f2:	4a77      	ldr	r2, [pc, #476]	; (801c8d0 <ThreadModbusPacketTask+0x470>)
 801c6f4:	4413      	add	r3, r2
 801c6f6:	2201      	movs	r2, #1
 801c6f8:	4619      	mov	r1, r3
 801c6fa:	f008 feef 	bl	80254dc <fm25v02_fast_write>
						fm25v02_fast_write( (2*modbus_address+2*a+1), &modbus_buffer[modbus_packet_number1][8+a*2], 1 );
 801c6fe:	4b72      	ldr	r3, [pc, #456]	; (801c8c8 <ThreadModbusPacketTask+0x468>)
 801c700:	881b      	ldrh	r3, [r3, #0]
 801c702:	461a      	mov	r2, r3
 801c704:	7bbb      	ldrb	r3, [r7, #14]
 801c706:	4413      	add	r3, r2
 801c708:	b29b      	uxth	r3, r3
 801c70a:	005b      	lsls	r3, r3, #1
 801c70c:	b29b      	uxth	r3, r3
 801c70e:	3301      	adds	r3, #1
 801c710:	b298      	uxth	r0, r3
 801c712:	4b6e      	ldr	r3, [pc, #440]	; (801c8cc <ThreadModbusPacketTask+0x46c>)
 801c714:	781b      	ldrb	r3, [r3, #0]
 801c716:	461a      	mov	r2, r3
 801c718:	7bbb      	ldrb	r3, [r7, #14]
 801c71a:	3304      	adds	r3, #4
 801c71c:	005b      	lsls	r3, r3, #1
 801c71e:	0212      	lsls	r2, r2, #8
 801c720:	4413      	add	r3, r2
 801c722:	4a6b      	ldr	r2, [pc, #428]	; (801c8d0 <ThreadModbusPacketTask+0x470>)
 801c724:	4413      	add	r3, r2
 801c726:	2201      	movs	r2, #1
 801c728:	4619      	mov	r1, r3
 801c72a:	f008 fed7 	bl	80254dc <fm25v02_fast_write>
						osMutexRelease(Fm25v02MutexHandle);
 801c72e:	4b65      	ldr	r3, [pc, #404]	; (801c8c4 <ThreadModbusPacketTask+0x464>)
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	4618      	mov	r0, r3
 801c734:	f7fa fb02 	bl	8016d3c <osMutexRelease>
					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 801c738:	7bbb      	ldrb	r3, [r7, #14]
 801c73a:	3301      	adds	r3, #1
 801c73c:	73bb      	strb	r3, [r7, #14]
 801c73e:	4b63      	ldr	r3, [pc, #396]	; (801c8cc <ThreadModbusPacketTask+0x46c>)
 801c740:	781b      	ldrb	r3, [r3, #0]
 801c742:	4a63      	ldr	r2, [pc, #396]	; (801c8d0 <ThreadModbusPacketTask+0x470>)
 801c744:	021b      	lsls	r3, r3, #8
 801c746:	4413      	add	r3, r2
 801c748:	3306      	adds	r3, #6
 801c74a:	781b      	ldrb	r3, [r3, #0]
 801c74c:	085b      	lsrs	r3, r3, #1
 801c74e:	b2db      	uxtb	r3, r3
 801c750:	7bba      	ldrb	r2, [r7, #14]
 801c752:	429a      	cmp	r2, r3
 801c754:	d3b6      	bcc.n	801c6c4 <ThreadModbusPacketTask+0x264>
					}

					buf_out1[0] = 0x01;
 801c756:	4b5f      	ldr	r3, [pc, #380]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c758:	2201      	movs	r2, #1
 801c75a:	701a      	strb	r2, [r3, #0]
					buf_out1[1] = 0x10;
 801c75c:	4b5d      	ldr	r3, [pc, #372]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c75e:	2210      	movs	r2, #16
 801c760:	705a      	strb	r2, [r3, #1]
					buf_out1[2] = modbus_buffer[modbus_packet_number1][2];
 801c762:	4b5a      	ldr	r3, [pc, #360]	; (801c8cc <ThreadModbusPacketTask+0x46c>)
 801c764:	781b      	ldrb	r3, [r3, #0]
 801c766:	4a5a      	ldr	r2, [pc, #360]	; (801c8d0 <ThreadModbusPacketTask+0x470>)
 801c768:	021b      	lsls	r3, r3, #8
 801c76a:	4413      	add	r3, r2
 801c76c:	3302      	adds	r3, #2
 801c76e:	781a      	ldrb	r2, [r3, #0]
 801c770:	4b58      	ldr	r3, [pc, #352]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c772:	709a      	strb	r2, [r3, #2]
					buf_out1[3] = modbus_buffer[modbus_packet_number1][3];
 801c774:	4b55      	ldr	r3, [pc, #340]	; (801c8cc <ThreadModbusPacketTask+0x46c>)
 801c776:	781b      	ldrb	r3, [r3, #0]
 801c778:	4a55      	ldr	r2, [pc, #340]	; (801c8d0 <ThreadModbusPacketTask+0x470>)
 801c77a:	021b      	lsls	r3, r3, #8
 801c77c:	4413      	add	r3, r2
 801c77e:	3303      	adds	r3, #3
 801c780:	781a      	ldrb	r2, [r3, #0]
 801c782:	4b54      	ldr	r3, [pc, #336]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c784:	70da      	strb	r2, [r3, #3]
					buf_out1[4] = modbus_buffer[modbus_packet_number1][4];
 801c786:	4b51      	ldr	r3, [pc, #324]	; (801c8cc <ThreadModbusPacketTask+0x46c>)
 801c788:	781b      	ldrb	r3, [r3, #0]
 801c78a:	4a51      	ldr	r2, [pc, #324]	; (801c8d0 <ThreadModbusPacketTask+0x470>)
 801c78c:	021b      	lsls	r3, r3, #8
 801c78e:	4413      	add	r3, r2
 801c790:	3304      	adds	r3, #4
 801c792:	781a      	ldrb	r2, [r3, #0]
 801c794:	4b4f      	ldr	r3, [pc, #316]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c796:	711a      	strb	r2, [r3, #4]
					buf_out1[5] = modbus_buffer[modbus_packet_number1][5];
 801c798:	4b4c      	ldr	r3, [pc, #304]	; (801c8cc <ThreadModbusPacketTask+0x46c>)
 801c79a:	781b      	ldrb	r3, [r3, #0]
 801c79c:	4a4c      	ldr	r2, [pc, #304]	; (801c8d0 <ThreadModbusPacketTask+0x470>)
 801c79e:	021b      	lsls	r3, r3, #8
 801c7a0:	4413      	add	r3, r2
 801c7a2:	3305      	adds	r3, #5
 801c7a4:	781a      	ldrb	r2, [r3, #0]
 801c7a6:	4b4b      	ldr	r3, [pc, #300]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c7a8:	715a      	strb	r2, [r3, #5]

					crc_temp = CRC16(&buf_out1[0], 6);
 801c7aa:	2106      	movs	r1, #6
 801c7ac:	4849      	ldr	r0, [pc, #292]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c7ae:	f00c fbfb 	bl	8028fa8 <CRC16>
 801c7b2:	4603      	mov	r3, r0
 801c7b4:	4a48      	ldr	r2, [pc, #288]	; (801c8d8 <ThreadModbusPacketTask+0x478>)
 801c7b6:	6013      	str	r3, [r2, #0]

					buf_out1[6] = (uint8_t)(crc_temp&0x00FF);
 801c7b8:	4b47      	ldr	r3, [pc, #284]	; (801c8d8 <ThreadModbusPacketTask+0x478>)
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	b2da      	uxtb	r2, r3
 801c7be:	4b45      	ldr	r3, [pc, #276]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c7c0:	719a      	strb	r2, [r3, #6]
					buf_out1[7] = (uint8_t)((crc_temp>>8)&0x00FF);
 801c7c2:	4b45      	ldr	r3, [pc, #276]	; (801c8d8 <ThreadModbusPacketTask+0x478>)
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	0a1b      	lsrs	r3, r3, #8
 801c7c8:	b2da      	uxtb	r2, r3
 801c7ca:	4b42      	ldr	r3, [pc, #264]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c7cc:	71da      	strb	r2, [r3, #7]

					osMutexWait(UartMutexHandle, osWaitForever);
 801c7ce:	4b43      	ldr	r3, [pc, #268]	; (801c8dc <ThreadModbusPacketTask+0x47c>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	f04f 31ff 	mov.w	r1, #4294967295
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	f7fa fa62 	bl	8016ca0 <osMutexWait>
					if( AT_QISEND(&buf_out1[0], 8) != AT_OK )
 801c7dc:	2108      	movs	r1, #8
 801c7de:	483d      	ldr	r0, [pc, #244]	; (801c8d4 <ThreadModbusPacketTask+0x474>)
 801c7e0:	f00a f828 	bl	8026834 <AT_QISEND>
					{

					}
					osMutexRelease(UartMutexHandle);
 801c7e4:	4b3d      	ldr	r3, [pc, #244]	; (801c8dc <ThreadModbusPacketTask+0x47c>)
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	4618      	mov	r0, r3
 801c7ea:	f7fa faa7 	bl	8016d3c <osMutexRelease>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
						osMutexRelease(Fm25v02MutexHandle);
					}
					*/
					if( modbus_address == 0x2710)
 801c7ee:	4b36      	ldr	r3, [pc, #216]	; (801c8c8 <ThreadModbusPacketTask+0x468>)
 801c7f0:	881b      	ldrh	r3, [r3, #0]
 801c7f2:	f242 7210 	movw	r2, #10000	; 0x2710
 801c7f6:	4293      	cmp	r3, r2
 801c7f8:	d115      	bne.n	801c826 <ThreadModbusPacketTask+0x3c6>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c7fa:	4b32      	ldr	r3, [pc, #200]	; (801c8c4 <ThreadModbusPacketTask+0x464>)
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	f04f 31ff 	mov.w	r1, #4294967295
 801c802:	4618      	mov	r0, r3
 801c804:	f7fa fa4c 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801c808:	2100      	movs	r1, #0
 801c80a:	f242 106e 	movw	r0, #8558	; 0x216e
 801c80e:	f008 fe19 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801c812:	2101      	movs	r1, #1
 801c814:	f242 106f 	movw	r0, #8559	; 0x216f
 801c818:	f008 fe14 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801c81c:	4b29      	ldr	r3, [pc, #164]	; (801c8c4 <ThreadModbusPacketTask+0x464>)
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	4618      	mov	r0, r3
 801c822:	f7fa fa8b 	bl	8016d3c <osMutexRelease>
					}

					if( modbus_address == LIGHT_CONTROL_REG)
 801c826:	4b28      	ldr	r3, [pc, #160]	; (801c8c8 <ThreadModbusPacketTask+0x468>)
 801c828:	881b      	ldrh	r3, [r3, #0]
 801c82a:	f241 02c1 	movw	r2, #4289	; 0x10c1
 801c82e:	4293      	cmp	r3, r2
 801c830:	d124      	bne.n	801c87c <ThreadModbusPacketTask+0x41c>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c832:	4b24      	ldr	r3, [pc, #144]	; (801c8c4 <ThreadModbusPacketTask+0x464>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	f04f 31ff 	mov.w	r1, #4294967295
 801c83a:	4618      	mov	r0, r3
 801c83c:	f7fa fa30 	bl	8016ca0 <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h1);
 801c840:	f107 030d 	add.w	r3, r7, #13
 801c844:	4619      	mov	r1, r3
 801c846:	f242 1082 	movw	r0, #8578	; 0x2182
 801c84a:	f008 fdc1 	bl	80253d0 <fm25v02_read>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l1);
 801c84e:	f107 030c 	add.w	r3, r7, #12
 801c852:	4619      	mov	r1, r3
 801c854:	f242 1083 	movw	r0, #8579	; 0x2183
 801c858:	f008 fdba 	bl	80253d0 <fm25v02_read>
						control_registers.light_control_reg = (((uint16_t)temp_h1)<<8)|temp_l1;
 801c85c:	7b7b      	ldrb	r3, [r7, #13]
 801c85e:	021b      	lsls	r3, r3, #8
 801c860:	b21a      	sxth	r2, r3
 801c862:	7b3b      	ldrb	r3, [r7, #12]
 801c864:	b21b      	sxth	r3, r3
 801c866:	4313      	orrs	r3, r2
 801c868:	b21b      	sxth	r3, r3
 801c86a:	b29a      	uxth	r2, r3
 801c86c:	4b1c      	ldr	r3, [pc, #112]	; (801c8e0 <ThreadModbusPacketTask+0x480>)
 801c86e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
						osMutexRelease(Fm25v02MutexHandle);
 801c872:	4b14      	ldr	r3, [pc, #80]	; (801c8c4 <ThreadModbusPacketTask+0x464>)
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	4618      	mov	r0, r3
 801c878:	f7fa fa60 	bl	8016d3c <osMutexRelease>

					}

					if( modbus_address == METER_ID_LOW_REG) // тест
 801c87c:	4b12      	ldr	r3, [pc, #72]	; (801c8c8 <ThreadModbusPacketTask+0x468>)
 801c87e:	881b      	ldrh	r3, [r3, #0]
 801c880:	f241 02b6 	movw	r2, #4278	; 0x10b6
 801c884:	4293      	cmp	r3, r2
 801c886:	d118      	bne.n	801c8ba <ThreadModbusPacketTask+0x45a>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801c888:	4b0e      	ldr	r3, [pc, #56]	; (801c8c4 <ThreadModbusPacketTask+0x464>)
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	f04f 31ff 	mov.w	r1, #4294967295
 801c890:	4618      	mov	r0, r3
 801c892:	f7fa fa05 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 801c896:	2100      	movs	r1, #0
 801c898:	f242 003c 	movw	r0, #8252	; 0x203c
 801c89c:	f008 fdd2 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*CE_303_ERROR_REG+1, 0x01);
 801c8a0:	2101      	movs	r1, #1
 801c8a2:	f242 003d 	movw	r0, #8253	; 0x203d
 801c8a6:	f008 fdcd 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801c8aa:	4b06      	ldr	r3, [pc, #24]	; (801c8c4 <ThreadModbusPacketTask+0x464>)
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f7fa fa44 	bl	8016d3c <osMutexRelease>
					}

				}


			break;
 801c8b4:	e001      	b.n	801c8ba <ThreadModbusPacketTask+0x45a>
			break;
 801c8b6:	bf00      	nop
 801c8b8:	e000      	b.n	801c8bc <ThreadModbusPacketTask+0x45c>
			break;
 801c8ba:	bf00      	nop
		}


		osDelay(1);
 801c8bc:	2001      	movs	r0, #1
 801c8be:	f7fa f90e 	bl	8016ade <osDelay>
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 801c8c2:	e5d8      	b.n	801c476 <ThreadModbusPacketTask+0x16>
 801c8c4:	20009a6c 	.word	0x20009a6c
 801c8c8:	2000a0ac 	.word	0x2000a0ac
 801c8cc:	20007fef 	.word	0x20007fef
 801c8d0:	20008298 	.word	0x20008298
 801c8d4:	20009eac 	.word	0x20009eac
 801c8d8:	2000a0bc 	.word	0x2000a0bc
 801c8dc:	200096a0 	.word	0x200096a0
 801c8e0:	2000a1cc 	.word	0x2000a1cc

0801c8e4 <ThreadModbusTask>:
uint8_t modbus_packet_number = 0;
uint8_t modbus_packet_number1 = 0;


void ThreadModbusTask(void const * argument)
{
 801c8e4:	b590      	push	{r4, r7, lr}
 801c8e6:	b089      	sub	sp, #36	; 0x24
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6178      	str	r0, [r7, #20]
	uint16_t i=0;
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	83fb      	strh	r3, [r7, #30]
	uint16_t i_max;


	for(;;)
	{
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 801c8f0:	4ba1      	ldr	r3, [pc, #644]	; (801cb78 <ThreadModbusTask+0x294>)
 801c8f2:	6819      	ldr	r1, [r3, #0]
 801c8f4:	4ca1      	ldr	r4, [pc, #644]	; (801cb7c <ThreadModbusTask+0x298>)
 801c8f6:	463b      	mov	r3, r7
 801c8f8:	f04f 32ff 	mov.w	r2, #4294967295
 801c8fc:	4618      	mov	r0, r3
 801c8fe:	f7fa fb7f 	bl	8017000 <osMessageGet>
 801c902:	463b      	mov	r3, r7
 801c904:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c908:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(ModbusEvent.status == osEventMessage) // если сообщение пришло
 801c90c:	4b9b      	ldr	r3, [pc, #620]	; (801cb7c <ThreadModbusTask+0x298>)
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	2b10      	cmp	r3, #16
 801c912:	f040 8226 	bne.w	801cd62 <ThreadModbusTask+0x47e>
		{

			switch(ModbusEvent.value.v) // проверяем полученное значение из очереди
 801c916:	4b99      	ldr	r3, [pc, #612]	; (801cb7c <ThreadModbusTask+0x298>)
 801c918:	685b      	ldr	r3, [r3, #4]
 801c91a:	3b01      	subs	r3, #1
 801c91c:	2b0f      	cmp	r3, #15
 801c91e:	f200 817f 	bhi.w	801cc20 <ThreadModbusTask+0x33c>
 801c922:	a201      	add	r2, pc, #4	; (adr r2, 801c928 <ThreadModbusTask+0x44>)
 801c924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c928:	0801c969 	.word	0x0801c969
 801c92c:	0801cc21 	.word	0x0801cc21
 801c930:	0801ca11 	.word	0x0801ca11
 801c934:	0801cc21 	.word	0x0801cc21
 801c938:	0801cc21 	.word	0x0801cc21
 801c93c:	0801cabd 	.word	0x0801cabd
 801c940:	0801cc21 	.word	0x0801cc21
 801c944:	0801cc21 	.word	0x0801cc21
 801c948:	0801cc21 	.word	0x0801cc21
 801c94c:	0801cc21 	.word	0x0801cc21
 801c950:	0801cc21 	.word	0x0801cc21
 801c954:	0801cc21 	.word	0x0801cc21
 801c958:	0801cc21 	.word	0x0801cc21
 801c95c:	0801cc21 	.word	0x0801cc21
 801c960:	0801cc21 	.word	0x0801cc21
 801c964:	0801cb67 	.word	0x0801cb67
			{
				case(0x01):
					if(i==0)
 801c968:	8bfb      	ldrh	r3, [r7, #30]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d110      	bne.n	801c990 <ThreadModbusTask+0xac>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801c96e:	4b83      	ldr	r3, [pc, #524]	; (801cb7c <ThreadModbusTask+0x298>)
 801c970:	6859      	ldr	r1, [r3, #4]
 801c972:	4b83      	ldr	r3, [pc, #524]	; (801cb80 <ThreadModbusTask+0x29c>)
 801c974:	781b      	ldrb	r3, [r3, #0]
 801c976:	461a      	mov	r2, r3
 801c978:	8bfb      	ldrh	r3, [r7, #30]
 801c97a:	b2c8      	uxtb	r0, r1
 801c97c:	4981      	ldr	r1, [pc, #516]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801c97e:	0212      	lsls	r2, r2, #8
 801c980:	440a      	add	r2, r1
 801c982:	4413      	add	r3, r2
 801c984:	4602      	mov	r2, r0
 801c986:	701a      	strb	r2, [r3, #0]
						i++;
 801c988:	8bfb      	ldrh	r3, [r7, #30]
 801c98a:	3301      	adds	r3, #1
 801c98c:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 801c98e:	e18e      	b.n	801ccae <ThreadModbusTask+0x3ca>
					else if(i==1)
 801c990:	8bfb      	ldrh	r3, [r7, #30]
 801c992:	2b01      	cmp	r3, #1
 801c994:	d104      	bne.n	801c9a0 <ThreadModbusTask+0xbc>
						i = 0;
 801c996:	2300      	movs	r3, #0
 801c998:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 801c99a:	2300      	movs	r3, #0
 801c99c:	83bb      	strh	r3, [r7, #28]
				break;
 801c99e:	e186      	b.n	801ccae <ThreadModbusTask+0x3ca>
					else if(i>1)
 801c9a0:	8bfb      	ldrh	r3, [r7, #30]
 801c9a2:	2b01      	cmp	r3, #1
 801c9a4:	f240 8183 	bls.w	801ccae <ThreadModbusTask+0x3ca>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 801c9a8:	8bfb      	ldrh	r3, [r7, #30]
 801c9aa:	2b06      	cmp	r3, #6
 801c9ac:	d11f      	bne.n	801c9ee <ThreadModbusTask+0x10a>
 801c9ae:	4b74      	ldr	r3, [pc, #464]	; (801cb80 <ThreadModbusTask+0x29c>)
 801c9b0:	781b      	ldrb	r3, [r3, #0]
 801c9b2:	4a74      	ldr	r2, [pc, #464]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801c9b4:	021b      	lsls	r3, r3, #8
 801c9b6:	4413      	add	r3, r2
 801c9b8:	3301      	adds	r3, #1
 801c9ba:	781b      	ldrb	r3, [r3, #0]
 801c9bc:	2b10      	cmp	r3, #16
 801c9be:	d116      	bne.n	801c9ee <ThreadModbusTask+0x10a>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801c9c0:	4b6e      	ldr	r3, [pc, #440]	; (801cb7c <ThreadModbusTask+0x298>)
 801c9c2:	6859      	ldr	r1, [r3, #4]
 801c9c4:	4b6e      	ldr	r3, [pc, #440]	; (801cb80 <ThreadModbusTask+0x29c>)
 801c9c6:	781b      	ldrb	r3, [r3, #0]
 801c9c8:	461a      	mov	r2, r3
 801c9ca:	8bfb      	ldrh	r3, [r7, #30]
 801c9cc:	b2c8      	uxtb	r0, r1
 801c9ce:	496d      	ldr	r1, [pc, #436]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801c9d0:	0212      	lsls	r2, r2, #8
 801c9d2:	440a      	add	r2, r1
 801c9d4:	4413      	add	r3, r2
 801c9d6:	4602      	mov	r2, r0
 801c9d8:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 801c9da:	4b68      	ldr	r3, [pc, #416]	; (801cb7c <ThreadModbusTask+0x298>)
 801c9dc:	685b      	ldr	r3, [r3, #4]
 801c9de:	b2db      	uxtb	r3, r3
 801c9e0:	b29b      	uxth	r3, r3
 801c9e2:	3309      	adds	r3, #9
 801c9e4:	83bb      	strh	r3, [r7, #28]
							i++;
 801c9e6:	8bfb      	ldrh	r3, [r7, #30]
 801c9e8:	3301      	adds	r3, #1
 801c9ea:	83fb      	strh	r3, [r7, #30]
				break;
 801c9ec:	e15f      	b.n	801ccae <ThreadModbusTask+0x3ca>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801c9ee:	4b63      	ldr	r3, [pc, #396]	; (801cb7c <ThreadModbusTask+0x298>)
 801c9f0:	6859      	ldr	r1, [r3, #4]
 801c9f2:	4b63      	ldr	r3, [pc, #396]	; (801cb80 <ThreadModbusTask+0x29c>)
 801c9f4:	781b      	ldrb	r3, [r3, #0]
 801c9f6:	461a      	mov	r2, r3
 801c9f8:	8bfb      	ldrh	r3, [r7, #30]
 801c9fa:	b2c8      	uxtb	r0, r1
 801c9fc:	4961      	ldr	r1, [pc, #388]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801c9fe:	0212      	lsls	r2, r2, #8
 801ca00:	440a      	add	r2, r1
 801ca02:	4413      	add	r3, r2
 801ca04:	4602      	mov	r2, r0
 801ca06:	701a      	strb	r2, [r3, #0]
							i++;
 801ca08:	8bfb      	ldrh	r3, [r7, #30]
 801ca0a:	3301      	adds	r3, #1
 801ca0c:	83fb      	strh	r3, [r7, #30]
				break;
 801ca0e:	e14e      	b.n	801ccae <ThreadModbusTask+0x3ca>

				case(0x03):
					if(i==0)
 801ca10:	8bfb      	ldrh	r3, [r7, #30]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d104      	bne.n	801ca20 <ThreadModbusTask+0x13c>
					{
						i = 0;
 801ca16:	2300      	movs	r3, #0
 801ca18:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 801ca1e:	e148      	b.n	801ccb2 <ThreadModbusTask+0x3ce>
					else if(i==1)
 801ca20:	8bfb      	ldrh	r3, [r7, #30]
 801ca22:	2b01      	cmp	r3, #1
 801ca24:	d112      	bne.n	801ca4c <ThreadModbusTask+0x168>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801ca26:	4b55      	ldr	r3, [pc, #340]	; (801cb7c <ThreadModbusTask+0x298>)
 801ca28:	6859      	ldr	r1, [r3, #4]
 801ca2a:	4b55      	ldr	r3, [pc, #340]	; (801cb80 <ThreadModbusTask+0x29c>)
 801ca2c:	781b      	ldrb	r3, [r3, #0]
 801ca2e:	461a      	mov	r2, r3
 801ca30:	8bfb      	ldrh	r3, [r7, #30]
 801ca32:	b2c8      	uxtb	r0, r1
 801ca34:	4953      	ldr	r1, [pc, #332]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801ca36:	0212      	lsls	r2, r2, #8
 801ca38:	440a      	add	r2, r1
 801ca3a:	4413      	add	r3, r2
 801ca3c:	4602      	mov	r2, r0
 801ca3e:	701a      	strb	r2, [r3, #0]
						i++;
 801ca40:	8bfb      	ldrh	r3, [r7, #30]
 801ca42:	3301      	adds	r3, #1
 801ca44:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 801ca46:	2308      	movs	r3, #8
 801ca48:	83bb      	strh	r3, [r7, #28]
				break;
 801ca4a:	e132      	b.n	801ccb2 <ThreadModbusTask+0x3ce>
					else if(i>1)
 801ca4c:	8bfb      	ldrh	r3, [r7, #30]
 801ca4e:	2b01      	cmp	r3, #1
 801ca50:	f240 812f 	bls.w	801ccb2 <ThreadModbusTask+0x3ce>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 801ca54:	8bfb      	ldrh	r3, [r7, #30]
 801ca56:	2b06      	cmp	r3, #6
 801ca58:	d11f      	bne.n	801ca9a <ThreadModbusTask+0x1b6>
 801ca5a:	4b49      	ldr	r3, [pc, #292]	; (801cb80 <ThreadModbusTask+0x29c>)
 801ca5c:	781b      	ldrb	r3, [r3, #0]
 801ca5e:	4a49      	ldr	r2, [pc, #292]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801ca60:	021b      	lsls	r3, r3, #8
 801ca62:	4413      	add	r3, r2
 801ca64:	3301      	adds	r3, #1
 801ca66:	781b      	ldrb	r3, [r3, #0]
 801ca68:	2b10      	cmp	r3, #16
 801ca6a:	d116      	bne.n	801ca9a <ThreadModbusTask+0x1b6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801ca6c:	4b43      	ldr	r3, [pc, #268]	; (801cb7c <ThreadModbusTask+0x298>)
 801ca6e:	6859      	ldr	r1, [r3, #4]
 801ca70:	4b43      	ldr	r3, [pc, #268]	; (801cb80 <ThreadModbusTask+0x29c>)
 801ca72:	781b      	ldrb	r3, [r3, #0]
 801ca74:	461a      	mov	r2, r3
 801ca76:	8bfb      	ldrh	r3, [r7, #30]
 801ca78:	b2c8      	uxtb	r0, r1
 801ca7a:	4942      	ldr	r1, [pc, #264]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801ca7c:	0212      	lsls	r2, r2, #8
 801ca7e:	440a      	add	r2, r1
 801ca80:	4413      	add	r3, r2
 801ca82:	4602      	mov	r2, r0
 801ca84:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 801ca86:	4b3d      	ldr	r3, [pc, #244]	; (801cb7c <ThreadModbusTask+0x298>)
 801ca88:	685b      	ldr	r3, [r3, #4]
 801ca8a:	b2db      	uxtb	r3, r3
 801ca8c:	b29b      	uxth	r3, r3
 801ca8e:	3309      	adds	r3, #9
 801ca90:	83bb      	strh	r3, [r7, #28]
							i++;
 801ca92:	8bfb      	ldrh	r3, [r7, #30]
 801ca94:	3301      	adds	r3, #1
 801ca96:	83fb      	strh	r3, [r7, #30]
				break;
 801ca98:	e10b      	b.n	801ccb2 <ThreadModbusTask+0x3ce>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801ca9a:	4b38      	ldr	r3, [pc, #224]	; (801cb7c <ThreadModbusTask+0x298>)
 801ca9c:	6859      	ldr	r1, [r3, #4]
 801ca9e:	4b38      	ldr	r3, [pc, #224]	; (801cb80 <ThreadModbusTask+0x29c>)
 801caa0:	781b      	ldrb	r3, [r3, #0]
 801caa2:	461a      	mov	r2, r3
 801caa4:	8bfb      	ldrh	r3, [r7, #30]
 801caa6:	b2c8      	uxtb	r0, r1
 801caa8:	4936      	ldr	r1, [pc, #216]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801caaa:	0212      	lsls	r2, r2, #8
 801caac:	440a      	add	r2, r1
 801caae:	4413      	add	r3, r2
 801cab0:	4602      	mov	r2, r0
 801cab2:	701a      	strb	r2, [r3, #0]
							i++;
 801cab4:	8bfb      	ldrh	r3, [r7, #30]
 801cab6:	3301      	adds	r3, #1
 801cab8:	83fb      	strh	r3, [r7, #30]
				break;
 801caba:	e0fa      	b.n	801ccb2 <ThreadModbusTask+0x3ce>

				case(0x06):
					if(i==0)
 801cabc:	8bfb      	ldrh	r3, [r7, #30]
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d104      	bne.n	801cacc <ThreadModbusTask+0x1e8>
					{
						i = 0;
 801cac2:	2300      	movs	r3, #0
 801cac4:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 801cac6:	2300      	movs	r3, #0
 801cac8:	83bb      	strh	r3, [r7, #28]
 801caca:	e014      	b.n	801caf6 <ThreadModbusTask+0x212>
					}
					else if(i==1)
 801cacc:	8bfb      	ldrh	r3, [r7, #30]
 801cace:	2b01      	cmp	r3, #1
 801cad0:	d111      	bne.n	801caf6 <ThreadModbusTask+0x212>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801cad2:	4b2a      	ldr	r3, [pc, #168]	; (801cb7c <ThreadModbusTask+0x298>)
 801cad4:	6859      	ldr	r1, [r3, #4]
 801cad6:	4b2a      	ldr	r3, [pc, #168]	; (801cb80 <ThreadModbusTask+0x29c>)
 801cad8:	781b      	ldrb	r3, [r3, #0]
 801cada:	461a      	mov	r2, r3
 801cadc:	8bfb      	ldrh	r3, [r7, #30]
 801cade:	b2c8      	uxtb	r0, r1
 801cae0:	4928      	ldr	r1, [pc, #160]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801cae2:	0212      	lsls	r2, r2, #8
 801cae4:	440a      	add	r2, r1
 801cae6:	4413      	add	r3, r2
 801cae8:	4602      	mov	r2, r0
 801caea:	701a      	strb	r2, [r3, #0]
						i++;
 801caec:	8bfb      	ldrh	r3, [r7, #30]
 801caee:	3301      	adds	r3, #1
 801caf0:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 801caf2:	2308      	movs	r3, #8
 801caf4:	83bb      	strh	r3, [r7, #28]
					}
					if(i>1)
 801caf6:	8bfb      	ldrh	r3, [r7, #30]
 801caf8:	2b01      	cmp	r3, #1
 801cafa:	f240 80dc 	bls.w	801ccb6 <ThreadModbusTask+0x3d2>
					{
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 801cafe:	8bfb      	ldrh	r3, [r7, #30]
 801cb00:	2b06      	cmp	r3, #6
 801cb02:	d11f      	bne.n	801cb44 <ThreadModbusTask+0x260>
 801cb04:	4b1e      	ldr	r3, [pc, #120]	; (801cb80 <ThreadModbusTask+0x29c>)
 801cb06:	781b      	ldrb	r3, [r3, #0]
 801cb08:	4a1e      	ldr	r2, [pc, #120]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801cb0a:	021b      	lsls	r3, r3, #8
 801cb0c:	4413      	add	r3, r2
 801cb0e:	3301      	adds	r3, #1
 801cb10:	781b      	ldrb	r3, [r3, #0]
 801cb12:	2b10      	cmp	r3, #16
 801cb14:	d116      	bne.n	801cb44 <ThreadModbusTask+0x260>
						{
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801cb16:	4b19      	ldr	r3, [pc, #100]	; (801cb7c <ThreadModbusTask+0x298>)
 801cb18:	6859      	ldr	r1, [r3, #4]
 801cb1a:	4b19      	ldr	r3, [pc, #100]	; (801cb80 <ThreadModbusTask+0x29c>)
 801cb1c:	781b      	ldrb	r3, [r3, #0]
 801cb1e:	461a      	mov	r2, r3
 801cb20:	8bfb      	ldrh	r3, [r7, #30]
 801cb22:	b2c8      	uxtb	r0, r1
 801cb24:	4917      	ldr	r1, [pc, #92]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801cb26:	0212      	lsls	r2, r2, #8
 801cb28:	440a      	add	r2, r1
 801cb2a:	4413      	add	r3, r2
 801cb2c:	4602      	mov	r2, r0
 801cb2e:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 801cb30:	4b12      	ldr	r3, [pc, #72]	; (801cb7c <ThreadModbusTask+0x298>)
 801cb32:	685b      	ldr	r3, [r3, #4]
 801cb34:	b2db      	uxtb	r3, r3
 801cb36:	b29b      	uxth	r3, r3
 801cb38:	3309      	adds	r3, #9
 801cb3a:	83bb      	strh	r3, [r7, #28]
							i++;
 801cb3c:	8bfb      	ldrh	r3, [r7, #30]
 801cb3e:	3301      	adds	r3, #1
 801cb40:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 801cb42:	e0b8      	b.n	801ccb6 <ThreadModbusTask+0x3d2>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801cb44:	4b0d      	ldr	r3, [pc, #52]	; (801cb7c <ThreadModbusTask+0x298>)
 801cb46:	6859      	ldr	r1, [r3, #4]
 801cb48:	4b0d      	ldr	r3, [pc, #52]	; (801cb80 <ThreadModbusTask+0x29c>)
 801cb4a:	781b      	ldrb	r3, [r3, #0]
 801cb4c:	461a      	mov	r2, r3
 801cb4e:	8bfb      	ldrh	r3, [r7, #30]
 801cb50:	b2c8      	uxtb	r0, r1
 801cb52:	490c      	ldr	r1, [pc, #48]	; (801cb84 <ThreadModbusTask+0x2a0>)
 801cb54:	0212      	lsls	r2, r2, #8
 801cb56:	440a      	add	r2, r1
 801cb58:	4413      	add	r3, r2
 801cb5a:	4602      	mov	r2, r0
 801cb5c:	701a      	strb	r2, [r3, #0]
							i++;
 801cb5e:	8bfb      	ldrh	r3, [r7, #30]
 801cb60:	3301      	adds	r3, #1
 801cb62:	83fb      	strh	r3, [r7, #30]
				break;
 801cb64:	e0a7      	b.n	801ccb6 <ThreadModbusTask+0x3d2>

				case(0x10):
					if(i==0)
 801cb66:	8bfb      	ldrh	r3, [r7, #30]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d10d      	bne.n	801cb88 <ThreadModbusTask+0x2a4>
					{
						i = 0;
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 801cb70:	2300      	movs	r3, #0
 801cb72:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 801cb74:	e0a1      	b.n	801ccba <ThreadModbusTask+0x3d6>
 801cb76:	bf00      	nop
 801cb78:	20008294 	.word	0x20008294
 801cb7c:	2000a0b0 	.word	0x2000a0b0
 801cb80:	20007fee 	.word	0x20007fee
 801cb84:	20008298 	.word	0x20008298
					else if(i==1)
 801cb88:	8bfb      	ldrh	r3, [r7, #30]
 801cb8a:	2b01      	cmp	r3, #1
 801cb8c:	d110      	bne.n	801cbb0 <ThreadModbusTask+0x2cc>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801cb8e:	4b77      	ldr	r3, [pc, #476]	; (801cd6c <ThreadModbusTask+0x488>)
 801cb90:	6859      	ldr	r1, [r3, #4]
 801cb92:	4b77      	ldr	r3, [pc, #476]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cb94:	781b      	ldrb	r3, [r3, #0]
 801cb96:	461a      	mov	r2, r3
 801cb98:	8bfb      	ldrh	r3, [r7, #30]
 801cb9a:	b2c8      	uxtb	r0, r1
 801cb9c:	4975      	ldr	r1, [pc, #468]	; (801cd74 <ThreadModbusTask+0x490>)
 801cb9e:	0212      	lsls	r2, r2, #8
 801cba0:	440a      	add	r2, r1
 801cba2:	4413      	add	r3, r2
 801cba4:	4602      	mov	r2, r0
 801cba6:	701a      	strb	r2, [r3, #0]
						i++;
 801cba8:	8bfb      	ldrh	r3, [r7, #30]
 801cbaa:	3301      	adds	r3, #1
 801cbac:	83fb      	strh	r3, [r7, #30]
				break;
 801cbae:	e084      	b.n	801ccba <ThreadModbusTask+0x3d6>
					else if(i>1)
 801cbb0:	8bfb      	ldrh	r3, [r7, #30]
 801cbb2:	2b01      	cmp	r3, #1
 801cbb4:	f240 8081 	bls.w	801ccba <ThreadModbusTask+0x3d6>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 801cbb8:	8bfb      	ldrh	r3, [r7, #30]
 801cbba:	2b06      	cmp	r3, #6
 801cbbc:	d11f      	bne.n	801cbfe <ThreadModbusTask+0x31a>
 801cbbe:	4b6c      	ldr	r3, [pc, #432]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cbc0:	781b      	ldrb	r3, [r3, #0]
 801cbc2:	4a6c      	ldr	r2, [pc, #432]	; (801cd74 <ThreadModbusTask+0x490>)
 801cbc4:	021b      	lsls	r3, r3, #8
 801cbc6:	4413      	add	r3, r2
 801cbc8:	3301      	adds	r3, #1
 801cbca:	781b      	ldrb	r3, [r3, #0]
 801cbcc:	2b10      	cmp	r3, #16
 801cbce:	d116      	bne.n	801cbfe <ThreadModbusTask+0x31a>
								modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801cbd0:	4b66      	ldr	r3, [pc, #408]	; (801cd6c <ThreadModbusTask+0x488>)
 801cbd2:	6859      	ldr	r1, [r3, #4]
 801cbd4:	4b66      	ldr	r3, [pc, #408]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cbd6:	781b      	ldrb	r3, [r3, #0]
 801cbd8:	461a      	mov	r2, r3
 801cbda:	8bfb      	ldrh	r3, [r7, #30]
 801cbdc:	b2c8      	uxtb	r0, r1
 801cbde:	4965      	ldr	r1, [pc, #404]	; (801cd74 <ThreadModbusTask+0x490>)
 801cbe0:	0212      	lsls	r2, r2, #8
 801cbe2:	440a      	add	r2, r1
 801cbe4:	4413      	add	r3, r2
 801cbe6:	4602      	mov	r2, r0
 801cbe8:	701a      	strb	r2, [r3, #0]
								i_max = 9 + (uint8_t)ModbusEvent.value.v;
 801cbea:	4b60      	ldr	r3, [pc, #384]	; (801cd6c <ThreadModbusTask+0x488>)
 801cbec:	685b      	ldr	r3, [r3, #4]
 801cbee:	b2db      	uxtb	r3, r3
 801cbf0:	b29b      	uxth	r3, r3
 801cbf2:	3309      	adds	r3, #9
 801cbf4:	83bb      	strh	r3, [r7, #28]
								i++;
 801cbf6:	8bfb      	ldrh	r3, [r7, #30]
 801cbf8:	3301      	adds	r3, #1
 801cbfa:	83fb      	strh	r3, [r7, #30]
				break;
 801cbfc:	e05d      	b.n	801ccba <ThreadModbusTask+0x3d6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801cbfe:	4b5b      	ldr	r3, [pc, #364]	; (801cd6c <ThreadModbusTask+0x488>)
 801cc00:	6859      	ldr	r1, [r3, #4]
 801cc02:	4b5b      	ldr	r3, [pc, #364]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cc04:	781b      	ldrb	r3, [r3, #0]
 801cc06:	461a      	mov	r2, r3
 801cc08:	8bfb      	ldrh	r3, [r7, #30]
 801cc0a:	b2c8      	uxtb	r0, r1
 801cc0c:	4959      	ldr	r1, [pc, #356]	; (801cd74 <ThreadModbusTask+0x490>)
 801cc0e:	0212      	lsls	r2, r2, #8
 801cc10:	440a      	add	r2, r1
 801cc12:	4413      	add	r3, r2
 801cc14:	4602      	mov	r2, r0
 801cc16:	701a      	strb	r2, [r3, #0]
							i++;
 801cc18:	8bfb      	ldrh	r3, [r7, #30]
 801cc1a:	3301      	adds	r3, #1
 801cc1c:	83fb      	strh	r3, [r7, #30]
				break;
 801cc1e:	e04c      	b.n	801ccba <ThreadModbusTask+0x3d6>

				default:
					if(i==0)
 801cc20:	8bfb      	ldrh	r3, [r7, #30]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d104      	bne.n	801cc30 <ThreadModbusTask+0x34c>
					{
						i = 0;
 801cc26:	2300      	movs	r3, #0
 801cc28:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 801cc2a:	2300      	movs	r3, #0
 801cc2c:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 801cc2e:	e046      	b.n	801ccbe <ThreadModbusTask+0x3da>
					else if(i==1)
 801cc30:	8bfb      	ldrh	r3, [r7, #30]
 801cc32:	2b01      	cmp	r3, #1
 801cc34:	d104      	bne.n	801cc40 <ThreadModbusTask+0x35c>
						i = 0;
 801cc36:	2300      	movs	r3, #0
 801cc38:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 801cc3a:	2300      	movs	r3, #0
 801cc3c:	83bb      	strh	r3, [r7, #28]
				break;
 801cc3e:	e03e      	b.n	801ccbe <ThreadModbusTask+0x3da>
					else if(i>1)
 801cc40:	8bfb      	ldrh	r3, [r7, #30]
 801cc42:	2b01      	cmp	r3, #1
 801cc44:	d93b      	bls.n	801ccbe <ThreadModbusTask+0x3da>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 801cc46:	8bfb      	ldrh	r3, [r7, #30]
 801cc48:	2b06      	cmp	r3, #6
 801cc4a:	d11f      	bne.n	801cc8c <ThreadModbusTask+0x3a8>
 801cc4c:	4b48      	ldr	r3, [pc, #288]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cc4e:	781b      	ldrb	r3, [r3, #0]
 801cc50:	4a48      	ldr	r2, [pc, #288]	; (801cd74 <ThreadModbusTask+0x490>)
 801cc52:	021b      	lsls	r3, r3, #8
 801cc54:	4413      	add	r3, r2
 801cc56:	3301      	adds	r3, #1
 801cc58:	781b      	ldrb	r3, [r3, #0]
 801cc5a:	2b10      	cmp	r3, #16
 801cc5c:	d116      	bne.n	801cc8c <ThreadModbusTask+0x3a8>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801cc5e:	4b43      	ldr	r3, [pc, #268]	; (801cd6c <ThreadModbusTask+0x488>)
 801cc60:	6859      	ldr	r1, [r3, #4]
 801cc62:	4b43      	ldr	r3, [pc, #268]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cc64:	781b      	ldrb	r3, [r3, #0]
 801cc66:	461a      	mov	r2, r3
 801cc68:	8bfb      	ldrh	r3, [r7, #30]
 801cc6a:	b2c8      	uxtb	r0, r1
 801cc6c:	4941      	ldr	r1, [pc, #260]	; (801cd74 <ThreadModbusTask+0x490>)
 801cc6e:	0212      	lsls	r2, r2, #8
 801cc70:	440a      	add	r2, r1
 801cc72:	4413      	add	r3, r2
 801cc74:	4602      	mov	r2, r0
 801cc76:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 801cc78:	4b3c      	ldr	r3, [pc, #240]	; (801cd6c <ThreadModbusTask+0x488>)
 801cc7a:	685b      	ldr	r3, [r3, #4]
 801cc7c:	b2db      	uxtb	r3, r3
 801cc7e:	b29b      	uxth	r3, r3
 801cc80:	3309      	adds	r3, #9
 801cc82:	83bb      	strh	r3, [r7, #28]
							i++;
 801cc84:	8bfb      	ldrh	r3, [r7, #30]
 801cc86:	3301      	adds	r3, #1
 801cc88:	83fb      	strh	r3, [r7, #30]
				break;
 801cc8a:	e018      	b.n	801ccbe <ThreadModbusTask+0x3da>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801cc8c:	4b37      	ldr	r3, [pc, #220]	; (801cd6c <ThreadModbusTask+0x488>)
 801cc8e:	6859      	ldr	r1, [r3, #4]
 801cc90:	4b37      	ldr	r3, [pc, #220]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cc92:	781b      	ldrb	r3, [r3, #0]
 801cc94:	461a      	mov	r2, r3
 801cc96:	8bfb      	ldrh	r3, [r7, #30]
 801cc98:	b2c8      	uxtb	r0, r1
 801cc9a:	4936      	ldr	r1, [pc, #216]	; (801cd74 <ThreadModbusTask+0x490>)
 801cc9c:	0212      	lsls	r2, r2, #8
 801cc9e:	440a      	add	r2, r1
 801cca0:	4413      	add	r3, r2
 801cca2:	4602      	mov	r2, r0
 801cca4:	701a      	strb	r2, [r3, #0]
							i++;
 801cca6:	8bfb      	ldrh	r3, [r7, #30]
 801cca8:	3301      	adds	r3, #1
 801ccaa:	83fb      	strh	r3, [r7, #30]
				break;
 801ccac:	e007      	b.n	801ccbe <ThreadModbusTask+0x3da>
				break;
 801ccae:	bf00      	nop
 801ccb0:	e006      	b.n	801ccc0 <ThreadModbusTask+0x3dc>
				break;
 801ccb2:	bf00      	nop
 801ccb4:	e004      	b.n	801ccc0 <ThreadModbusTask+0x3dc>
				break;
 801ccb6:	bf00      	nop
 801ccb8:	e002      	b.n	801ccc0 <ThreadModbusTask+0x3dc>
				break;
 801ccba:	bf00      	nop
 801ccbc:	e000      	b.n	801ccc0 <ThreadModbusTask+0x3dc>
				break;
 801ccbe:	bf00      	nop
			}
			if( (i >= i_max) && (i != 0) && (i_max != 0) ) // если число принятых байт соответствует длине соответствующей команды
 801ccc0:	8bfa      	ldrh	r2, [r7, #30]
 801ccc2:	8bbb      	ldrh	r3, [r7, #28]
 801ccc4:	429a      	cmp	r2, r3
 801ccc6:	d34c      	bcc.n	801cd62 <ThreadModbusTask+0x47e>
 801ccc8:	8bfb      	ldrh	r3, [r7, #30]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d049      	beq.n	801cd62 <ThreadModbusTask+0x47e>
 801ccce:	8bbb      	ldrh	r3, [r7, #28]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d046      	beq.n	801cd62 <ThreadModbusTask+0x47e>
			{
				crc_temp = CRC16(&modbus_buffer[modbus_packet_number][0], i_max-2); // считаем контрольную сумму принятого пакета
 801ccd4:	4b26      	ldr	r3, [pc, #152]	; (801cd70 <ThreadModbusTask+0x48c>)
 801ccd6:	781b      	ldrb	r3, [r3, #0]
 801ccd8:	021b      	lsls	r3, r3, #8
 801ccda:	4a26      	ldr	r2, [pc, #152]	; (801cd74 <ThreadModbusTask+0x490>)
 801ccdc:	441a      	add	r2, r3
 801ccde:	8bbb      	ldrh	r3, [r7, #28]
 801cce0:	3b02      	subs	r3, #2
 801cce2:	4619      	mov	r1, r3
 801cce4:	4610      	mov	r0, r2
 801cce6:	f00c f95f 	bl	8028fa8 <CRC16>
 801ccea:	4603      	mov	r3, r0
 801ccec:	4a22      	ldr	r2, [pc, #136]	; (801cd78 <ThreadModbusTask+0x494>)
 801ccee:	6013      	str	r3, [r2, #0]
				if( ( ((crc_temp>>8)&0x00FF) == modbus_buffer[modbus_packet_number][i_max-1] ) && ( (crc_temp&0x00FF) == modbus_buffer[modbus_packet_number][i_max-2]) ) // проверяем контрольную сумму принятого пакета
 801ccf0:	4b21      	ldr	r3, [pc, #132]	; (801cd78 <ThreadModbusTask+0x494>)
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	0a1b      	lsrs	r3, r3, #8
 801ccf6:	b2db      	uxtb	r3, r3
 801ccf8:	4a1d      	ldr	r2, [pc, #116]	; (801cd70 <ThreadModbusTask+0x48c>)
 801ccfa:	7812      	ldrb	r2, [r2, #0]
 801ccfc:	4611      	mov	r1, r2
 801ccfe:	8bba      	ldrh	r2, [r7, #28]
 801cd00:	3a01      	subs	r2, #1
 801cd02:	481c      	ldr	r0, [pc, #112]	; (801cd74 <ThreadModbusTask+0x490>)
 801cd04:	0209      	lsls	r1, r1, #8
 801cd06:	4401      	add	r1, r0
 801cd08:	440a      	add	r2, r1
 801cd0a:	7812      	ldrb	r2, [r2, #0]
 801cd0c:	4293      	cmp	r3, r2
 801cd0e:	d124      	bne.n	801cd5a <ThreadModbusTask+0x476>
 801cd10:	4b19      	ldr	r3, [pc, #100]	; (801cd78 <ThreadModbusTask+0x494>)
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	b2db      	uxtb	r3, r3
 801cd16:	4a16      	ldr	r2, [pc, #88]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cd18:	7812      	ldrb	r2, [r2, #0]
 801cd1a:	4611      	mov	r1, r2
 801cd1c:	8bba      	ldrh	r2, [r7, #28]
 801cd1e:	3a02      	subs	r2, #2
 801cd20:	4814      	ldr	r0, [pc, #80]	; (801cd74 <ThreadModbusTask+0x490>)
 801cd22:	0209      	lsls	r1, r1, #8
 801cd24:	4401      	add	r1, r0
 801cd26:	440a      	add	r2, r1
 801cd28:	7812      	ldrb	r2, [r2, #0]
 801cd2a:	4293      	cmp	r3, r2
 801cd2c:	d115      	bne.n	801cd5a <ThreadModbusTask+0x476>
				{
					modbus_packet_number1 = modbus_packet_number;
 801cd2e:	4b10      	ldr	r3, [pc, #64]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cd30:	781a      	ldrb	r2, [r3, #0]
 801cd32:	4b12      	ldr	r3, [pc, #72]	; (801cd7c <ThreadModbusTask+0x498>)
 801cd34:	701a      	strb	r2, [r3, #0]
					modbus_packet_number++;
 801cd36:	4b0e      	ldr	r3, [pc, #56]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cd38:	781b      	ldrb	r3, [r3, #0]
 801cd3a:	3301      	adds	r3, #1
 801cd3c:	b2da      	uxtb	r2, r3
 801cd3e:	4b0c      	ldr	r3, [pc, #48]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cd40:	701a      	strb	r2, [r3, #0]
					if( modbus_packet_number >= 20)
 801cd42:	4b0b      	ldr	r3, [pc, #44]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cd44:	781b      	ldrb	r3, [r3, #0]
 801cd46:	2b13      	cmp	r3, #19
 801cd48:	d902      	bls.n	801cd50 <ThreadModbusTask+0x46c>
					{
						modbus_packet_number = 0;
 801cd4a:	4b09      	ldr	r3, [pc, #36]	; (801cd70 <ThreadModbusTask+0x48c>)
 801cd4c:	2200      	movs	r2, #0
 801cd4e:	701a      	strb	r2, [r3, #0]
					}

					osSemaphoreRelease(ModbusPacketReceiveHandle);
 801cd50:	4b0b      	ldr	r3, [pc, #44]	; (801cd80 <ThreadModbusTask+0x49c>)
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	4618      	mov	r0, r3
 801cd56:	f7fa f8b5 	bl	8016ec4 <osSemaphoreRelease>
				}

				i = 0;     // обнуляем значение текущего принятого байта
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	83fb      	strh	r3, [r7, #30]
				i_max = 0; // обнуляем максимальное значение принятого байта
 801cd5e:	2300      	movs	r3, #0
 801cd60:	83bb      	strh	r3, [r7, #28]
		}




		osDelay(1);
 801cd62:	2001      	movs	r0, #1
 801cd64:	f7f9 febb 	bl	8016ade <osDelay>
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 801cd68:	e5c2      	b.n	801c8f0 <ThreadModbusTask+0xc>
 801cd6a:	bf00      	nop
 801cd6c:	2000a0b0 	.word	0x2000a0b0
 801cd70:	20007fee 	.word	0x20007fee
 801cd74:	20008298 	.word	0x20008298
 801cd78:	2000a0bc 	.word	0x2000a0bc
 801cd7c:	20007fef 	.word	0x20007fef
 801cd80:	20009a28 	.word	0x20009a28

0801cd84 <ThreadReadRegistersTask>:
extern status_register_struct status_registers;
extern control_register_struct control_registers;


void ThreadReadRegistersTask(void const * argument)
{
 801cd84:	b580      	push	{r7, lr}
 801cd86:	b082      	sub	sp, #8
 801cd88:	af00      	add	r7, sp, #0
 801cd8a:	6078      	str	r0, [r7, #4]
	read_status_registers(); // вычитываем регистры
 801cd8c:	f00a f8e8 	bl	8026f60 <read_status_registers>
	read_control_registers();
 801cd90:	f00b f94e 	bl	8028030 <read_control_registers>
	read_bootloader_registers();
 801cd94:	f00b fdb4 	bl	8028900 <read_bootloader_registers>

	if(control_registers.arming_timeleft_reg < 100) // если время постановки на охрану больше 100 * 10мс
 801cd98:	4b1e      	ldr	r3, [pc, #120]	; (801ce14 <ThreadReadRegistersTask+0x90>)
 801cd9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cd9e:	2b63      	cmp	r3, #99	; 0x63
 801cda0:	d815      	bhi.n	801cdce <ThreadReadRegistersTask+0x4a>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cda2:	4b1d      	ldr	r3, [pc, #116]	; (801ce18 <ThreadReadRegistersTask+0x94>)
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	f04f 31ff 	mov.w	r1, #4294967295
 801cdaa:	4618      	mov	r0, r3
 801cdac:	f7f9 ff78 	bl	8016ca0 <osMutexWait>
		fm25v02_write(2*ARMING_TIMELEFT, 0x00);
 801cdb0:	2100      	movs	r1, #0
 801cdb2:	f242 1092 	movw	r0, #8594	; 0x2192
 801cdb6:	f008 fb45 	bl	8025444 <fm25v02_write>
		fm25v02_write(2*ARMING_TIMELEFT+1, 0x64); // выставляем значение времени постановки на охрану равное 100 * 10мс
 801cdba:	2164      	movs	r1, #100	; 0x64
 801cdbc:	f242 1093 	movw	r0, #8595	; 0x2193
 801cdc0:	f008 fb40 	bl	8025444 <fm25v02_write>
		osMutexRelease(Fm25v02MutexHandle);
 801cdc4:	4b14      	ldr	r3, [pc, #80]	; (801ce18 <ThreadReadRegistersTask+0x94>)
 801cdc6:	681b      	ldr	r3, [r3, #0]
 801cdc8:	4618      	mov	r0, r3
 801cdca:	f7f9 ffb7 	bl	8016d3c <osMutexRelease>
	}

	osDelay(2000); // ждем пока будет получен статус фаз А1,А2,В1,В2,С1,С2
 801cdce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801cdd2:	f7f9 fe84 	bl	8016ade <osDelay>
	osThreadResume(LedTaskHandle);  // запускаем процесс светодиодов
 801cdd6:	4b11      	ldr	r3, [pc, #68]	; (801ce1c <ThreadReadRegistersTask+0x98>)
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	4618      	mov	r0, r3
 801cddc:	f7fa f990 	bl	8017100 <osThreadResume>
	osThreadResume(MainTaskHandle); // запускаем основной процесс
 801cde0:	4b0f      	ldr	r3, [pc, #60]	; (801ce20 <ThreadReadRegistersTask+0x9c>)
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	4618      	mov	r0, r3
 801cde6:	f7fa f98b 	bl	8017100 <osThreadResume>
	osThreadResume(M95TaskHandle);  // запускаем процесс модема
 801cdea:	4b0e      	ldr	r3, [pc, #56]	; (801ce24 <ThreadReadRegistersTask+0xa0>)
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	4618      	mov	r0, r3
 801cdf0:	f7fa f986 	bl	8017100 <osThreadResume>
	osDelay(1000); //ждем 1 секунду
 801cdf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801cdf8:	f7f9 fe71 	bl	8016ade <osDelay>


	for(;;)
	{

		read_status_registers(); // вычитываем регистры
 801cdfc:	f00a f8b0 	bl	8026f60 <read_status_registers>
		read_control_registers();
 801ce00:	f00b f916 	bl	8028030 <read_control_registers>
		read_bootloader_registers();
 801ce04:	f00b fd7c 	bl	8028900 <read_bootloader_registers>

		osDelay(1000); // ждем 1 секунду
 801ce08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ce0c:	f7f9 fe67 	bl	8016ade <osDelay>
		read_status_registers(); // вычитываем регистры
 801ce10:	e7f4      	b.n	801cdfc <ThreadReadRegistersTask+0x78>
 801ce12:	bf00      	nop
 801ce14:	2000a1cc 	.word	0x2000a1cc
 801ce18:	20009a6c 	.word	0x20009a6c
 801ce1c:	200098d8 	.word	0x200098d8
 801ce20:	20009718 	.word	0x20009718
 801ce24:	200098e0 	.word	0x200098e0

0801ce28 <ThreadSecurityTask>:
uint8_t loop_state8_on=0;
uint8_t loop_state8_off=0;


void ThreadSecurityTask(void const * argument)
{
 801ce28:	b580      	push	{r7, lr}
 801ce2a:	b084      	sub	sp, #16
 801ce2c:	af00      	add	r7, sp, #0
 801ce2e:	6078      	str	r0, [r7, #4]
	uint8_t alarm_loop_reg_temp;
	uint8_t status_loop_reg_temp;


	osMutexWait(Fm25v02MutexHandle, osWaitForever); // обнуляем регистр статуса освещения и переменную регитра статуса освещения
 801ce30:	4bb0      	ldr	r3, [pc, #704]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	f04f 31ff 	mov.w	r1, #4294967295
 801ce38:	4618      	mov	r0, r3
 801ce3a:	f7f9 ff31 	bl	8016ca0 <osMutexWait>
	fm25v02_write(2*LIGHTING_STATUS_REG, 0x00);
 801ce3e:	2100      	movs	r1, #0
 801ce40:	f242 0062 	movw	r0, #8290	; 0x2062
 801ce44:	f008 fafe 	bl	8025444 <fm25v02_write>
	fm25v02_write(2*LIGHTING_STATUS_REG+1, 0x00);
 801ce48:	2100      	movs	r1, #0
 801ce4a:	f242 0063 	movw	r0, #8291	; 0x2063
 801ce4e:	f008 faf9 	bl	8025444 <fm25v02_write>
	status_registers.lighting_status_reg = 0x0000;
 801ce52:	4ba9      	ldr	r3, [pc, #676]	; (801d0f8 <ThreadSecurityTask+0x2d0>)
 801ce54:	2200      	movs	r2, #0
 801ce56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	osMutexRelease(Fm25v02MutexHandle);
 801ce5a:	4ba6      	ldr	r3, [pc, #664]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	4618      	mov	r0, r3
 801ce60:	f7f9 ff6c 	bl	8016d3c <osMutexRelease>

	osDelay(5000);
 801ce64:	f241 3088 	movw	r0, #5000	; 0x1388
 801ce68:	f7f9 fe39 	bl	8016ade <osDelay>

	for(;;)
	{

		//----Контроль статуса шлейфа №1--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_RESET)
 801ce6c:	2110      	movs	r1, #16
 801ce6e:	48a3      	ldr	r0, [pc, #652]	; (801d0fc <ThreadSecurityTask+0x2d4>)
 801ce70:	f7f6 f998 	bl	80131a4 <HAL_GPIO_ReadPin>
 801ce74:	4603      	mov	r3, r0
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d165      	bne.n	801cf46 <ThreadSecurityTask+0x11e>
		{
			loop_state1_off = 0;
 801ce7a:	4ba1      	ldr	r3, [pc, #644]	; (801d100 <ThreadSecurityTask+0x2d8>)
 801ce7c:	2200      	movs	r2, #0
 801ce7e:	701a      	strb	r2, [r3, #0]

			if(loop_state1_on<10)
 801ce80:	4ba0      	ldr	r3, [pc, #640]	; (801d104 <ThreadSecurityTask+0x2dc>)
 801ce82:	781b      	ldrb	r3, [r3, #0]
 801ce84:	2b09      	cmp	r3, #9
 801ce86:	f200 80c7 	bhi.w	801d018 <ThreadSecurityTask+0x1f0>
			{
				loop_state1_on++;
 801ce8a:	4b9e      	ldr	r3, [pc, #632]	; (801d104 <ThreadSecurityTask+0x2dc>)
 801ce8c:	781b      	ldrb	r3, [r3, #0]
 801ce8e:	3301      	adds	r3, #1
 801ce90:	b2da      	uxtb	r2, r3
 801ce92:	4b9c      	ldr	r3, [pc, #624]	; (801d104 <ThreadSecurityTask+0x2dc>)
 801ce94:	701a      	strb	r2, [r3, #0]
				if(loop_state1_on==10)
 801ce96:	4b9b      	ldr	r3, [pc, #620]	; (801d104 <ThreadSecurityTask+0x2dc>)
 801ce98:	781b      	ldrb	r3, [r3, #0]
 801ce9a:	2b0a      	cmp	r3, #10
 801ce9c:	f040 80bc 	bne.w	801d018 <ThreadSecurityTask+0x1f0>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cea0:	4b94      	ldr	r3, [pc, #592]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	f04f 31ff 	mov.w	r1, #4294967295
 801cea8:	4618      	mov	r0, r3
 801ceaa:	f7f9 fef9 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801ceae:	f107 030e 	add.w	r3, r7, #14
 801ceb2:	4619      	mov	r1, r3
 801ceb4:	f242 0005 	movw	r0, #8197	; 0x2005
 801ceb8:	f008 fa8a 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801cebc:	4b8d      	ldr	r3, [pc, #564]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	4618      	mov	r0, r3
 801cec2:	f7f9 ff3b 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x01) == 0x00 )
 801cec6:	7bbb      	ldrb	r3, [r7, #14]
 801cec8:	f003 0301 	and.w	r3, r3, #1
 801cecc:	2b00      	cmp	r3, #0
 801cece:	f040 80a3 	bne.w	801d018 <ThreadSecurityTask+0x1f0>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x01;
 801ced2:	7bbb      	ldrb	r3, [r7, #14]
 801ced4:	f043 0301 	orr.w	r3, r3, #1
 801ced8:	b2db      	uxtb	r3, r3
 801ceda:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cedc:	4b85      	ldr	r3, [pc, #532]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	f04f 31ff 	mov.w	r1, #4294967295
 801cee4:	4618      	mov	r0, r3
 801cee6:	f7f9 fedb 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801ceea:	2100      	movs	r1, #0
 801ceec:	f242 0004 	movw	r0, #8196	; 0x2004
 801cef0:	f008 faa8 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801cef4:	7bbb      	ldrb	r3, [r7, #14]
 801cef6:	4619      	mov	r1, r3
 801cef8:	f242 0005 	movw	r0, #8197	; 0x2005
 801cefc:	f008 faa2 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801cf00:	4b7c      	ldr	r3, [pc, #496]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	4618      	mov	r0, r3
 801cf06:	f7f9 ff19 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x01;
 801cf0a:	4b7b      	ldr	r3, [pc, #492]	; (801d0f8 <ThreadSecurityTask+0x2d0>)
 801cf0c:	889b      	ldrh	r3, [r3, #4]
 801cf0e:	f043 0301 	orr.w	r3, r3, #1
 801cf12:	b29a      	uxth	r2, r3
 801cf14:	4b78      	ldr	r3, [pc, #480]	; (801d0f8 <ThreadSecurityTask+0x2d0>)
 801cf16:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cf18:	4b76      	ldr	r3, [pc, #472]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	f04f 31ff 	mov.w	r1, #4294967295
 801cf20:	4618      	mov	r0, r3
 801cf22:	f7f9 febd 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801cf26:	2100      	movs	r1, #0
 801cf28:	f242 106e 	movw	r0, #8558	; 0x216e
 801cf2c:	f008 fa8a 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801cf30:	2101      	movs	r1, #1
 801cf32:	f242 106f 	movw	r0, #8559	; 0x216f
 801cf36:	f008 fa85 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801cf3a:	4b6e      	ldr	r3, [pc, #440]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f7f9 fefc 	bl	8016d3c <osMutexRelease>
 801cf44:	e068      	b.n	801d018 <ThreadSecurityTask+0x1f0>

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_SET)
 801cf46:	2110      	movs	r1, #16
 801cf48:	486c      	ldr	r0, [pc, #432]	; (801d0fc <ThreadSecurityTask+0x2d4>)
 801cf4a:	f7f6 f92b 	bl	80131a4 <HAL_GPIO_ReadPin>
 801cf4e:	4603      	mov	r3, r0
 801cf50:	2b01      	cmp	r3, #1
 801cf52:	d161      	bne.n	801d018 <ThreadSecurityTask+0x1f0>
		{
			loop_state1_on = 0;
 801cf54:	4b6b      	ldr	r3, [pc, #428]	; (801d104 <ThreadSecurityTask+0x2dc>)
 801cf56:	2200      	movs	r2, #0
 801cf58:	701a      	strb	r2, [r3, #0]

			if(loop_state1_off<10)
 801cf5a:	4b69      	ldr	r3, [pc, #420]	; (801d100 <ThreadSecurityTask+0x2d8>)
 801cf5c:	781b      	ldrb	r3, [r3, #0]
 801cf5e:	2b09      	cmp	r3, #9
 801cf60:	d85a      	bhi.n	801d018 <ThreadSecurityTask+0x1f0>
			{
				loop_state1_off++;
 801cf62:	4b67      	ldr	r3, [pc, #412]	; (801d100 <ThreadSecurityTask+0x2d8>)
 801cf64:	781b      	ldrb	r3, [r3, #0]
 801cf66:	3301      	adds	r3, #1
 801cf68:	b2da      	uxtb	r2, r3
 801cf6a:	4b65      	ldr	r3, [pc, #404]	; (801d100 <ThreadSecurityTask+0x2d8>)
 801cf6c:	701a      	strb	r2, [r3, #0]
				if(loop_state1_off==10)
 801cf6e:	4b64      	ldr	r3, [pc, #400]	; (801d100 <ThreadSecurityTask+0x2d8>)
 801cf70:	781b      	ldrb	r3, [r3, #0]
 801cf72:	2b0a      	cmp	r3, #10
 801cf74:	d150      	bne.n	801d018 <ThreadSecurityTask+0x1f0>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cf76:	4b5f      	ldr	r3, [pc, #380]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	f04f 31ff 	mov.w	r1, #4294967295
 801cf7e:	4618      	mov	r0, r3
 801cf80:	f7f9 fe8e 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801cf84:	f107 030e 	add.w	r3, r7, #14
 801cf88:	4619      	mov	r1, r3
 801cf8a:	f242 0005 	movw	r0, #8197	; 0x2005
 801cf8e:	f008 fa1f 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801cf92:	4b58      	ldr	r3, [pc, #352]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	4618      	mov	r0, r3
 801cf98:	f7f9 fed0 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x01) == 0x01 )
 801cf9c:	7bbb      	ldrb	r3, [r7, #14]
 801cf9e:	f003 0301 	and.w	r3, r3, #1
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d038      	beq.n	801d018 <ThreadSecurityTask+0x1f0>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xFE;
 801cfa6:	7bbb      	ldrb	r3, [r7, #14]
 801cfa8:	f023 0301 	bic.w	r3, r3, #1
 801cfac:	b2db      	uxtb	r3, r3
 801cfae:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cfb0:	4b50      	ldr	r3, [pc, #320]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	f04f 31ff 	mov.w	r1, #4294967295
 801cfb8:	4618      	mov	r0, r3
 801cfba:	f7f9 fe71 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801cfbe:	2100      	movs	r1, #0
 801cfc0:	f242 0004 	movw	r0, #8196	; 0x2004
 801cfc4:	f008 fa3e 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801cfc8:	7bbb      	ldrb	r3, [r7, #14]
 801cfca:	4619      	mov	r1, r3
 801cfcc:	f242 0005 	movw	r0, #8197	; 0x2005
 801cfd0:	f008 fa38 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801cfd4:	4b47      	ldr	r3, [pc, #284]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	4618      	mov	r0, r3
 801cfda:	f7f9 feaf 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xFE;
 801cfde:	4b46      	ldr	r3, [pc, #280]	; (801d0f8 <ThreadSecurityTask+0x2d0>)
 801cfe0:	889b      	ldrh	r3, [r3, #4]
 801cfe2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801cfe6:	b29a      	uxth	r2, r3
 801cfe8:	4b43      	ldr	r3, [pc, #268]	; (801d0f8 <ThreadSecurityTask+0x2d0>)
 801cfea:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cfec:	4b41      	ldr	r3, [pc, #260]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	f04f 31ff 	mov.w	r1, #4294967295
 801cff4:	4618      	mov	r0, r3
 801cff6:	f7f9 fe53 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801cffa:	2100      	movs	r1, #0
 801cffc:	f242 106e 	movw	r0, #8558	; 0x216e
 801d000:	f008 fa20 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d004:	2101      	movs	r1, #1
 801d006:	f242 106f 	movw	r0, #8559	; 0x216f
 801d00a:	f008 fa1b 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d00e:	4b39      	ldr	r3, [pc, #228]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	4618      	mov	r0, r3
 801d014:	f7f9 fe92 	bl	8016d3c <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №2--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_RESET)
 801d018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801d01c:	483a      	ldr	r0, [pc, #232]	; (801d108 <ThreadSecurityTask+0x2e0>)
 801d01e:	f7f6 f8c1 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d022:	4603      	mov	r3, r0
 801d024:	2b00      	cmp	r3, #0
 801d026:	d175      	bne.n	801d114 <ThreadSecurityTask+0x2ec>
		{
			loop_state2_off = 0;
 801d028:	4b38      	ldr	r3, [pc, #224]	; (801d10c <ThreadSecurityTask+0x2e4>)
 801d02a:	2200      	movs	r2, #0
 801d02c:	701a      	strb	r2, [r3, #0]

			if(loop_state2_on<10)
 801d02e:	4b38      	ldr	r3, [pc, #224]	; (801d110 <ThreadSecurityTask+0x2e8>)
 801d030:	781b      	ldrb	r3, [r3, #0]
 801d032:	2b09      	cmp	r3, #9
 801d034:	f200 80d8 	bhi.w	801d1e8 <ThreadSecurityTask+0x3c0>
			{
				loop_state2_on++;
 801d038:	4b35      	ldr	r3, [pc, #212]	; (801d110 <ThreadSecurityTask+0x2e8>)
 801d03a:	781b      	ldrb	r3, [r3, #0]
 801d03c:	3301      	adds	r3, #1
 801d03e:	b2da      	uxtb	r2, r3
 801d040:	4b33      	ldr	r3, [pc, #204]	; (801d110 <ThreadSecurityTask+0x2e8>)
 801d042:	701a      	strb	r2, [r3, #0]
				if(loop_state2_on==10)
 801d044:	4b32      	ldr	r3, [pc, #200]	; (801d110 <ThreadSecurityTask+0x2e8>)
 801d046:	781b      	ldrb	r3, [r3, #0]
 801d048:	2b0a      	cmp	r3, #10
 801d04a:	f040 80cd 	bne.w	801d1e8 <ThreadSecurityTask+0x3c0>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d04e:	4b29      	ldr	r3, [pc, #164]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	f04f 31ff 	mov.w	r1, #4294967295
 801d056:	4618      	mov	r0, r3
 801d058:	f7f9 fe22 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d05c:	f107 030e 	add.w	r3, r7, #14
 801d060:	4619      	mov	r1, r3
 801d062:	f242 0005 	movw	r0, #8197	; 0x2005
 801d066:	f008 f9b3 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d06a:	4b22      	ldr	r3, [pc, #136]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	4618      	mov	r0, r3
 801d070:	f7f9 fe64 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x02) == 0x00 )
 801d074:	7bbb      	ldrb	r3, [r7, #14]
 801d076:	f003 0302 	and.w	r3, r3, #2
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	f040 80b4 	bne.w	801d1e8 <ThreadSecurityTask+0x3c0>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x02;
 801d080:	7bbb      	ldrb	r3, [r7, #14]
 801d082:	f043 0302 	orr.w	r3, r3, #2
 801d086:	b2db      	uxtb	r3, r3
 801d088:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d08a:	4b1a      	ldr	r3, [pc, #104]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	f04f 31ff 	mov.w	r1, #4294967295
 801d092:	4618      	mov	r0, r3
 801d094:	f7f9 fe04 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d098:	2100      	movs	r1, #0
 801d09a:	f242 0004 	movw	r0, #8196	; 0x2004
 801d09e:	f008 f9d1 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d0a2:	7bbb      	ldrb	r3, [r7, #14]
 801d0a4:	4619      	mov	r1, r3
 801d0a6:	f242 0005 	movw	r0, #8197	; 0x2005
 801d0aa:	f008 f9cb 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d0ae:	4b11      	ldr	r3, [pc, #68]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f7f9 fe42 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x02;
 801d0b8:	4b0f      	ldr	r3, [pc, #60]	; (801d0f8 <ThreadSecurityTask+0x2d0>)
 801d0ba:	889b      	ldrh	r3, [r3, #4]
 801d0bc:	f043 0302 	orr.w	r3, r3, #2
 801d0c0:	b29a      	uxth	r2, r3
 801d0c2:	4b0d      	ldr	r3, [pc, #52]	; (801d0f8 <ThreadSecurityTask+0x2d0>)
 801d0c4:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d0c6:	4b0b      	ldr	r3, [pc, #44]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801d0c8:	681b      	ldr	r3, [r3, #0]
 801d0ca:	f04f 31ff 	mov.w	r1, #4294967295
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f7f9 fde6 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d0d4:	2100      	movs	r1, #0
 801d0d6:	f242 106e 	movw	r0, #8558	; 0x216e
 801d0da:	f008 f9b3 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d0de:	2101      	movs	r1, #1
 801d0e0:	f242 106f 	movw	r0, #8559	; 0x216f
 801d0e4:	f008 f9ae 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d0e8:	4b02      	ldr	r3, [pc, #8]	; (801d0f4 <ThreadSecurityTask+0x2cc>)
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	4618      	mov	r0, r3
 801d0ee:	f7f9 fe25 	bl	8016d3c <osMutexRelease>
 801d0f2:	e079      	b.n	801d1e8 <ThreadSecurityTask+0x3c0>
 801d0f4:	20009a6c 	.word	0x20009a6c
 801d0f8:	2000a10c 	.word	0x2000a10c
 801d0fc:	40021c00 	.word	0x40021c00
 801d100:	20007ff9 	.word	0x20007ff9
 801d104:	20007ff8 	.word	0x20007ff8
 801d108:	40021400 	.word	0x40021400
 801d10c:	20007ffb 	.word	0x20007ffb
 801d110:	20007ffa 	.word	0x20007ffa

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_SET)
 801d114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801d118:	486a      	ldr	r0, [pc, #424]	; (801d2c4 <ThreadSecurityTask+0x49c>)
 801d11a:	f7f6 f843 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d11e:	4603      	mov	r3, r0
 801d120:	2b01      	cmp	r3, #1
 801d122:	d161      	bne.n	801d1e8 <ThreadSecurityTask+0x3c0>
		{
			loop_state2_on = 0;
 801d124:	4b68      	ldr	r3, [pc, #416]	; (801d2c8 <ThreadSecurityTask+0x4a0>)
 801d126:	2200      	movs	r2, #0
 801d128:	701a      	strb	r2, [r3, #0]

			if(loop_state2_off<10)
 801d12a:	4b68      	ldr	r3, [pc, #416]	; (801d2cc <ThreadSecurityTask+0x4a4>)
 801d12c:	781b      	ldrb	r3, [r3, #0]
 801d12e:	2b09      	cmp	r3, #9
 801d130:	d85a      	bhi.n	801d1e8 <ThreadSecurityTask+0x3c0>
			{
				loop_state2_off++;
 801d132:	4b66      	ldr	r3, [pc, #408]	; (801d2cc <ThreadSecurityTask+0x4a4>)
 801d134:	781b      	ldrb	r3, [r3, #0]
 801d136:	3301      	adds	r3, #1
 801d138:	b2da      	uxtb	r2, r3
 801d13a:	4b64      	ldr	r3, [pc, #400]	; (801d2cc <ThreadSecurityTask+0x4a4>)
 801d13c:	701a      	strb	r2, [r3, #0]
				if(loop_state2_off==10)
 801d13e:	4b63      	ldr	r3, [pc, #396]	; (801d2cc <ThreadSecurityTask+0x4a4>)
 801d140:	781b      	ldrb	r3, [r3, #0]
 801d142:	2b0a      	cmp	r3, #10
 801d144:	d150      	bne.n	801d1e8 <ThreadSecurityTask+0x3c0>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d146:	4b62      	ldr	r3, [pc, #392]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	f04f 31ff 	mov.w	r1, #4294967295
 801d14e:	4618      	mov	r0, r3
 801d150:	f7f9 fda6 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d154:	f107 030e 	add.w	r3, r7, #14
 801d158:	4619      	mov	r1, r3
 801d15a:	f242 0005 	movw	r0, #8197	; 0x2005
 801d15e:	f008 f937 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d162:	4b5b      	ldr	r3, [pc, #364]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d164:	681b      	ldr	r3, [r3, #0]
 801d166:	4618      	mov	r0, r3
 801d168:	f7f9 fde8 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x02) == 0x02 )
 801d16c:	7bbb      	ldrb	r3, [r7, #14]
 801d16e:	f003 0302 	and.w	r3, r3, #2
 801d172:	2b00      	cmp	r3, #0
 801d174:	d038      	beq.n	801d1e8 <ThreadSecurityTask+0x3c0>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xFD;
 801d176:	7bbb      	ldrb	r3, [r7, #14]
 801d178:	f023 0302 	bic.w	r3, r3, #2
 801d17c:	b2db      	uxtb	r3, r3
 801d17e:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d180:	4b53      	ldr	r3, [pc, #332]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	f04f 31ff 	mov.w	r1, #4294967295
 801d188:	4618      	mov	r0, r3
 801d18a:	f7f9 fd89 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d18e:	2100      	movs	r1, #0
 801d190:	f242 0004 	movw	r0, #8196	; 0x2004
 801d194:	f008 f956 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d198:	7bbb      	ldrb	r3, [r7, #14]
 801d19a:	4619      	mov	r1, r3
 801d19c:	f242 0005 	movw	r0, #8197	; 0x2005
 801d1a0:	f008 f950 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d1a4:	4b4a      	ldr	r3, [pc, #296]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	f7f9 fdc7 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xFD;
 801d1ae:	4b49      	ldr	r3, [pc, #292]	; (801d2d4 <ThreadSecurityTask+0x4ac>)
 801d1b0:	889b      	ldrh	r3, [r3, #4]
 801d1b2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801d1b6:	b29a      	uxth	r2, r3
 801d1b8:	4b46      	ldr	r3, [pc, #280]	; (801d2d4 <ThreadSecurityTask+0x4ac>)
 801d1ba:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d1bc:	4b44      	ldr	r3, [pc, #272]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	f04f 31ff 	mov.w	r1, #4294967295
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	f7f9 fd6b 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d1ca:	2100      	movs	r1, #0
 801d1cc:	f242 106e 	movw	r0, #8558	; 0x216e
 801d1d0:	f008 f938 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d1d4:	2101      	movs	r1, #1
 801d1d6:	f242 106f 	movw	r0, #8559	; 0x216f
 801d1da:	f008 f933 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d1de:	4b3c      	ldr	r3, [pc, #240]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	f7f9 fdaa 	bl	8016d3c <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №3--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_RESET)
 801d1e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801d1ec:	4835      	ldr	r0, [pc, #212]	; (801d2c4 <ThreadSecurityTask+0x49c>)
 801d1ee:	f7f5 ffd9 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d1f2:	4603      	mov	r3, r0
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d173      	bne.n	801d2e0 <ThreadSecurityTask+0x4b8>
		{
			loop_state3_off = 0;
 801d1f8:	4b37      	ldr	r3, [pc, #220]	; (801d2d8 <ThreadSecurityTask+0x4b0>)
 801d1fa:	2200      	movs	r2, #0
 801d1fc:	701a      	strb	r2, [r3, #0]

			if(loop_state3_on<10)
 801d1fe:	4b37      	ldr	r3, [pc, #220]	; (801d2dc <ThreadSecurityTask+0x4b4>)
 801d200:	781b      	ldrb	r3, [r3, #0]
 801d202:	2b09      	cmp	r3, #9
 801d204:	f200 80d6 	bhi.w	801d3b4 <ThreadSecurityTask+0x58c>
			{
				loop_state3_on++;
 801d208:	4b34      	ldr	r3, [pc, #208]	; (801d2dc <ThreadSecurityTask+0x4b4>)
 801d20a:	781b      	ldrb	r3, [r3, #0]
 801d20c:	3301      	adds	r3, #1
 801d20e:	b2da      	uxtb	r2, r3
 801d210:	4b32      	ldr	r3, [pc, #200]	; (801d2dc <ThreadSecurityTask+0x4b4>)
 801d212:	701a      	strb	r2, [r3, #0]
				if(loop_state3_on==10)
 801d214:	4b31      	ldr	r3, [pc, #196]	; (801d2dc <ThreadSecurityTask+0x4b4>)
 801d216:	781b      	ldrb	r3, [r3, #0]
 801d218:	2b0a      	cmp	r3, #10
 801d21a:	f040 80cb 	bne.w	801d3b4 <ThreadSecurityTask+0x58c>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d21e:	4b2c      	ldr	r3, [pc, #176]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	f04f 31ff 	mov.w	r1, #4294967295
 801d226:	4618      	mov	r0, r3
 801d228:	f7f9 fd3a 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d22c:	f107 030e 	add.w	r3, r7, #14
 801d230:	4619      	mov	r1, r3
 801d232:	f242 0005 	movw	r0, #8197	; 0x2005
 801d236:	f008 f8cb 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d23a:	4b25      	ldr	r3, [pc, #148]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	4618      	mov	r0, r3
 801d240:	f7f9 fd7c 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x04) == 0x00 )
 801d244:	7bbb      	ldrb	r3, [r7, #14]
 801d246:	f003 0304 	and.w	r3, r3, #4
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	f040 80b2 	bne.w	801d3b4 <ThreadSecurityTask+0x58c>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x04;
 801d250:	7bbb      	ldrb	r3, [r7, #14]
 801d252:	f043 0304 	orr.w	r3, r3, #4
 801d256:	b2db      	uxtb	r3, r3
 801d258:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d25a:	4b1d      	ldr	r3, [pc, #116]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	f04f 31ff 	mov.w	r1, #4294967295
 801d262:	4618      	mov	r0, r3
 801d264:	f7f9 fd1c 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d268:	2100      	movs	r1, #0
 801d26a:	f242 0004 	movw	r0, #8196	; 0x2004
 801d26e:	f008 f8e9 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d272:	7bbb      	ldrb	r3, [r7, #14]
 801d274:	4619      	mov	r1, r3
 801d276:	f242 0005 	movw	r0, #8197	; 0x2005
 801d27a:	f008 f8e3 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d27e:	4b14      	ldr	r3, [pc, #80]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	4618      	mov	r0, r3
 801d284:	f7f9 fd5a 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x04;
 801d288:	4b12      	ldr	r3, [pc, #72]	; (801d2d4 <ThreadSecurityTask+0x4ac>)
 801d28a:	889b      	ldrh	r3, [r3, #4]
 801d28c:	f043 0304 	orr.w	r3, r3, #4
 801d290:	b29a      	uxth	r2, r3
 801d292:	4b10      	ldr	r3, [pc, #64]	; (801d2d4 <ThreadSecurityTask+0x4ac>)
 801d294:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d296:	4b0e      	ldr	r3, [pc, #56]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	f04f 31ff 	mov.w	r1, #4294967295
 801d29e:	4618      	mov	r0, r3
 801d2a0:	f7f9 fcfe 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d2a4:	2100      	movs	r1, #0
 801d2a6:	f242 106e 	movw	r0, #8558	; 0x216e
 801d2aa:	f008 f8cb 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d2ae:	2101      	movs	r1, #1
 801d2b0:	f242 106f 	movw	r0, #8559	; 0x216f
 801d2b4:	f008 f8c6 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d2b8:	4b05      	ldr	r3, [pc, #20]	; (801d2d0 <ThreadSecurityTask+0x4a8>)
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	4618      	mov	r0, r3
 801d2be:	f7f9 fd3d 	bl	8016d3c <osMutexRelease>
 801d2c2:	e077      	b.n	801d3b4 <ThreadSecurityTask+0x58c>
 801d2c4:	40021400 	.word	0x40021400
 801d2c8:	20007ffa 	.word	0x20007ffa
 801d2cc:	20007ffb 	.word	0x20007ffb
 801d2d0:	20009a6c 	.word	0x20009a6c
 801d2d4:	2000a10c 	.word	0x2000a10c
 801d2d8:	20007ffd 	.word	0x20007ffd
 801d2dc:	20007ffc 	.word	0x20007ffc

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_SET)
 801d2e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801d2e4:	486a      	ldr	r0, [pc, #424]	; (801d490 <ThreadSecurityTask+0x668>)
 801d2e6:	f7f5 ff5d 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d2ea:	4603      	mov	r3, r0
 801d2ec:	2b01      	cmp	r3, #1
 801d2ee:	d161      	bne.n	801d3b4 <ThreadSecurityTask+0x58c>
		{
			loop_state3_on = 0;
 801d2f0:	4b68      	ldr	r3, [pc, #416]	; (801d494 <ThreadSecurityTask+0x66c>)
 801d2f2:	2200      	movs	r2, #0
 801d2f4:	701a      	strb	r2, [r3, #0]

			if(loop_state3_off<10)
 801d2f6:	4b68      	ldr	r3, [pc, #416]	; (801d498 <ThreadSecurityTask+0x670>)
 801d2f8:	781b      	ldrb	r3, [r3, #0]
 801d2fa:	2b09      	cmp	r3, #9
 801d2fc:	d85a      	bhi.n	801d3b4 <ThreadSecurityTask+0x58c>
			{
				loop_state3_off++;
 801d2fe:	4b66      	ldr	r3, [pc, #408]	; (801d498 <ThreadSecurityTask+0x670>)
 801d300:	781b      	ldrb	r3, [r3, #0]
 801d302:	3301      	adds	r3, #1
 801d304:	b2da      	uxtb	r2, r3
 801d306:	4b64      	ldr	r3, [pc, #400]	; (801d498 <ThreadSecurityTask+0x670>)
 801d308:	701a      	strb	r2, [r3, #0]
				if(loop_state3_off==10)
 801d30a:	4b63      	ldr	r3, [pc, #396]	; (801d498 <ThreadSecurityTask+0x670>)
 801d30c:	781b      	ldrb	r3, [r3, #0]
 801d30e:	2b0a      	cmp	r3, #10
 801d310:	d150      	bne.n	801d3b4 <ThreadSecurityTask+0x58c>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d312:	4b62      	ldr	r3, [pc, #392]	; (801d49c <ThreadSecurityTask+0x674>)
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	f04f 31ff 	mov.w	r1, #4294967295
 801d31a:	4618      	mov	r0, r3
 801d31c:	f7f9 fcc0 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d320:	f107 030e 	add.w	r3, r7, #14
 801d324:	4619      	mov	r1, r3
 801d326:	f242 0005 	movw	r0, #8197	; 0x2005
 801d32a:	f008 f851 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d32e:	4b5b      	ldr	r3, [pc, #364]	; (801d49c <ThreadSecurityTask+0x674>)
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	4618      	mov	r0, r3
 801d334:	f7f9 fd02 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x04) == 0x04 )
 801d338:	7bbb      	ldrb	r3, [r7, #14]
 801d33a:	f003 0304 	and.w	r3, r3, #4
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d038      	beq.n	801d3b4 <ThreadSecurityTask+0x58c>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xFB;
 801d342:	7bbb      	ldrb	r3, [r7, #14]
 801d344:	f023 0304 	bic.w	r3, r3, #4
 801d348:	b2db      	uxtb	r3, r3
 801d34a:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d34c:	4b53      	ldr	r3, [pc, #332]	; (801d49c <ThreadSecurityTask+0x674>)
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	f04f 31ff 	mov.w	r1, #4294967295
 801d354:	4618      	mov	r0, r3
 801d356:	f7f9 fca3 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d35a:	2100      	movs	r1, #0
 801d35c:	f242 0004 	movw	r0, #8196	; 0x2004
 801d360:	f008 f870 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d364:	7bbb      	ldrb	r3, [r7, #14]
 801d366:	4619      	mov	r1, r3
 801d368:	f242 0005 	movw	r0, #8197	; 0x2005
 801d36c:	f008 f86a 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d370:	4b4a      	ldr	r3, [pc, #296]	; (801d49c <ThreadSecurityTask+0x674>)
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	4618      	mov	r0, r3
 801d376:	f7f9 fce1 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xFB;
 801d37a:	4b49      	ldr	r3, [pc, #292]	; (801d4a0 <ThreadSecurityTask+0x678>)
 801d37c:	889b      	ldrh	r3, [r3, #4]
 801d37e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 801d382:	b29a      	uxth	r2, r3
 801d384:	4b46      	ldr	r3, [pc, #280]	; (801d4a0 <ThreadSecurityTask+0x678>)
 801d386:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d388:	4b44      	ldr	r3, [pc, #272]	; (801d49c <ThreadSecurityTask+0x674>)
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	f04f 31ff 	mov.w	r1, #4294967295
 801d390:	4618      	mov	r0, r3
 801d392:	f7f9 fc85 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d396:	2100      	movs	r1, #0
 801d398:	f242 106e 	movw	r0, #8558	; 0x216e
 801d39c:	f008 f852 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d3a0:	2101      	movs	r1, #1
 801d3a2:	f242 106f 	movw	r0, #8559	; 0x216f
 801d3a6:	f008 f84d 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d3aa:	4b3c      	ldr	r3, [pc, #240]	; (801d49c <ThreadSecurityTask+0x674>)
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	f7f9 fcc4 	bl	8016d3c <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №4--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_RESET)
 801d3b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d3b8:	4835      	ldr	r0, [pc, #212]	; (801d490 <ThreadSecurityTask+0x668>)
 801d3ba:	f7f5 fef3 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d3be:	4603      	mov	r3, r0
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d173      	bne.n	801d4ac <ThreadSecurityTask+0x684>
		{
			loop_state4_off = 0;
 801d3c4:	4b37      	ldr	r3, [pc, #220]	; (801d4a4 <ThreadSecurityTask+0x67c>)
 801d3c6:	2200      	movs	r2, #0
 801d3c8:	701a      	strb	r2, [r3, #0]

			if(loop_state4_on<10)
 801d3ca:	4b37      	ldr	r3, [pc, #220]	; (801d4a8 <ThreadSecurityTask+0x680>)
 801d3cc:	781b      	ldrb	r3, [r3, #0]
 801d3ce:	2b09      	cmp	r3, #9
 801d3d0:	f200 80d6 	bhi.w	801d580 <ThreadSecurityTask+0x758>
			{
				loop_state4_on++;
 801d3d4:	4b34      	ldr	r3, [pc, #208]	; (801d4a8 <ThreadSecurityTask+0x680>)
 801d3d6:	781b      	ldrb	r3, [r3, #0]
 801d3d8:	3301      	adds	r3, #1
 801d3da:	b2da      	uxtb	r2, r3
 801d3dc:	4b32      	ldr	r3, [pc, #200]	; (801d4a8 <ThreadSecurityTask+0x680>)
 801d3de:	701a      	strb	r2, [r3, #0]
				if(loop_state4_on==10)
 801d3e0:	4b31      	ldr	r3, [pc, #196]	; (801d4a8 <ThreadSecurityTask+0x680>)
 801d3e2:	781b      	ldrb	r3, [r3, #0]
 801d3e4:	2b0a      	cmp	r3, #10
 801d3e6:	f040 80cb 	bne.w	801d580 <ThreadSecurityTask+0x758>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d3ea:	4b2c      	ldr	r3, [pc, #176]	; (801d49c <ThreadSecurityTask+0x674>)
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	f04f 31ff 	mov.w	r1, #4294967295
 801d3f2:	4618      	mov	r0, r3
 801d3f4:	f7f9 fc54 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d3f8:	f107 030e 	add.w	r3, r7, #14
 801d3fc:	4619      	mov	r1, r3
 801d3fe:	f242 0005 	movw	r0, #8197	; 0x2005
 801d402:	f007 ffe5 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d406:	4b25      	ldr	r3, [pc, #148]	; (801d49c <ThreadSecurityTask+0x674>)
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	4618      	mov	r0, r3
 801d40c:	f7f9 fc96 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x08) == 0x00 )
 801d410:	7bbb      	ldrb	r3, [r7, #14]
 801d412:	f003 0308 	and.w	r3, r3, #8
 801d416:	2b00      	cmp	r3, #0
 801d418:	f040 80b2 	bne.w	801d580 <ThreadSecurityTask+0x758>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x08;
 801d41c:	7bbb      	ldrb	r3, [r7, #14]
 801d41e:	f043 0308 	orr.w	r3, r3, #8
 801d422:	b2db      	uxtb	r3, r3
 801d424:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d426:	4b1d      	ldr	r3, [pc, #116]	; (801d49c <ThreadSecurityTask+0x674>)
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	f04f 31ff 	mov.w	r1, #4294967295
 801d42e:	4618      	mov	r0, r3
 801d430:	f7f9 fc36 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d434:	2100      	movs	r1, #0
 801d436:	f242 0004 	movw	r0, #8196	; 0x2004
 801d43a:	f008 f803 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d43e:	7bbb      	ldrb	r3, [r7, #14]
 801d440:	4619      	mov	r1, r3
 801d442:	f242 0005 	movw	r0, #8197	; 0x2005
 801d446:	f007 fffd 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d44a:	4b14      	ldr	r3, [pc, #80]	; (801d49c <ThreadSecurityTask+0x674>)
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	4618      	mov	r0, r3
 801d450:	f7f9 fc74 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x08;
 801d454:	4b12      	ldr	r3, [pc, #72]	; (801d4a0 <ThreadSecurityTask+0x678>)
 801d456:	889b      	ldrh	r3, [r3, #4]
 801d458:	f043 0308 	orr.w	r3, r3, #8
 801d45c:	b29a      	uxth	r2, r3
 801d45e:	4b10      	ldr	r3, [pc, #64]	; (801d4a0 <ThreadSecurityTask+0x678>)
 801d460:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d462:	4b0e      	ldr	r3, [pc, #56]	; (801d49c <ThreadSecurityTask+0x674>)
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	f04f 31ff 	mov.w	r1, #4294967295
 801d46a:	4618      	mov	r0, r3
 801d46c:	f7f9 fc18 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d470:	2100      	movs	r1, #0
 801d472:	f242 106e 	movw	r0, #8558	; 0x216e
 801d476:	f007 ffe5 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d47a:	2101      	movs	r1, #1
 801d47c:	f242 106f 	movw	r0, #8559	; 0x216f
 801d480:	f007 ffe0 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d484:	4b05      	ldr	r3, [pc, #20]	; (801d49c <ThreadSecurityTask+0x674>)
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	4618      	mov	r0, r3
 801d48a:	f7f9 fc57 	bl	8016d3c <osMutexRelease>
 801d48e:	e077      	b.n	801d580 <ThreadSecurityTask+0x758>
 801d490:	40021400 	.word	0x40021400
 801d494:	20007ffc 	.word	0x20007ffc
 801d498:	20007ffd 	.word	0x20007ffd
 801d49c:	20009a6c 	.word	0x20009a6c
 801d4a0:	2000a10c 	.word	0x2000a10c
 801d4a4:	20007fff 	.word	0x20007fff
 801d4a8:	20007ffe 	.word	0x20007ffe

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_SET)
 801d4ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d4b0:	486a      	ldr	r0, [pc, #424]	; (801d65c <ThreadSecurityTask+0x834>)
 801d4b2:	f7f5 fe77 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d4b6:	4603      	mov	r3, r0
 801d4b8:	2b01      	cmp	r3, #1
 801d4ba:	d161      	bne.n	801d580 <ThreadSecurityTask+0x758>
		{
			loop_state4_on = 0;
 801d4bc:	4b68      	ldr	r3, [pc, #416]	; (801d660 <ThreadSecurityTask+0x838>)
 801d4be:	2200      	movs	r2, #0
 801d4c0:	701a      	strb	r2, [r3, #0]

			if(loop_state4_off<10)
 801d4c2:	4b68      	ldr	r3, [pc, #416]	; (801d664 <ThreadSecurityTask+0x83c>)
 801d4c4:	781b      	ldrb	r3, [r3, #0]
 801d4c6:	2b09      	cmp	r3, #9
 801d4c8:	d85a      	bhi.n	801d580 <ThreadSecurityTask+0x758>
			{
				loop_state4_off++;
 801d4ca:	4b66      	ldr	r3, [pc, #408]	; (801d664 <ThreadSecurityTask+0x83c>)
 801d4cc:	781b      	ldrb	r3, [r3, #0]
 801d4ce:	3301      	adds	r3, #1
 801d4d0:	b2da      	uxtb	r2, r3
 801d4d2:	4b64      	ldr	r3, [pc, #400]	; (801d664 <ThreadSecurityTask+0x83c>)
 801d4d4:	701a      	strb	r2, [r3, #0]
				if(loop_state4_off==10)
 801d4d6:	4b63      	ldr	r3, [pc, #396]	; (801d664 <ThreadSecurityTask+0x83c>)
 801d4d8:	781b      	ldrb	r3, [r3, #0]
 801d4da:	2b0a      	cmp	r3, #10
 801d4dc:	d150      	bne.n	801d580 <ThreadSecurityTask+0x758>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d4de:	4b62      	ldr	r3, [pc, #392]	; (801d668 <ThreadSecurityTask+0x840>)
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	f04f 31ff 	mov.w	r1, #4294967295
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	f7f9 fbda 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d4ec:	f107 030e 	add.w	r3, r7, #14
 801d4f0:	4619      	mov	r1, r3
 801d4f2:	f242 0005 	movw	r0, #8197	; 0x2005
 801d4f6:	f007 ff6b 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d4fa:	4b5b      	ldr	r3, [pc, #364]	; (801d668 <ThreadSecurityTask+0x840>)
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	4618      	mov	r0, r3
 801d500:	f7f9 fc1c 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x08) == 0x08 )
 801d504:	7bbb      	ldrb	r3, [r7, #14]
 801d506:	f003 0308 	and.w	r3, r3, #8
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d038      	beq.n	801d580 <ThreadSecurityTask+0x758>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xF7;
 801d50e:	7bbb      	ldrb	r3, [r7, #14]
 801d510:	f023 0308 	bic.w	r3, r3, #8
 801d514:	b2db      	uxtb	r3, r3
 801d516:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d518:	4b53      	ldr	r3, [pc, #332]	; (801d668 <ThreadSecurityTask+0x840>)
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	f04f 31ff 	mov.w	r1, #4294967295
 801d520:	4618      	mov	r0, r3
 801d522:	f7f9 fbbd 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d526:	2100      	movs	r1, #0
 801d528:	f242 0004 	movw	r0, #8196	; 0x2004
 801d52c:	f007 ff8a 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d530:	7bbb      	ldrb	r3, [r7, #14]
 801d532:	4619      	mov	r1, r3
 801d534:	f242 0005 	movw	r0, #8197	; 0x2005
 801d538:	f007 ff84 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d53c:	4b4a      	ldr	r3, [pc, #296]	; (801d668 <ThreadSecurityTask+0x840>)
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	4618      	mov	r0, r3
 801d542:	f7f9 fbfb 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xF7;
 801d546:	4b49      	ldr	r3, [pc, #292]	; (801d66c <ThreadSecurityTask+0x844>)
 801d548:	889b      	ldrh	r3, [r3, #4]
 801d54a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 801d54e:	b29a      	uxth	r2, r3
 801d550:	4b46      	ldr	r3, [pc, #280]	; (801d66c <ThreadSecurityTask+0x844>)
 801d552:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d554:	4b44      	ldr	r3, [pc, #272]	; (801d668 <ThreadSecurityTask+0x840>)
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	f04f 31ff 	mov.w	r1, #4294967295
 801d55c:	4618      	mov	r0, r3
 801d55e:	f7f9 fb9f 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d562:	2100      	movs	r1, #0
 801d564:	f242 106e 	movw	r0, #8558	; 0x216e
 801d568:	f007 ff6c 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d56c:	2101      	movs	r1, #1
 801d56e:	f242 106f 	movw	r0, #8559	; 0x216f
 801d572:	f007 ff67 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d576:	4b3c      	ldr	r3, [pc, #240]	; (801d668 <ThreadSecurityTask+0x840>)
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	4618      	mov	r0, r3
 801d57c:	f7f9 fbde 	bl	8016d3c <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №5--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_RESET)
 801d580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801d584:	4835      	ldr	r0, [pc, #212]	; (801d65c <ThreadSecurityTask+0x834>)
 801d586:	f7f5 fe0d 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d58a:	4603      	mov	r3, r0
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d173      	bne.n	801d678 <ThreadSecurityTask+0x850>
		{
			loop_state5_off = 0;
 801d590:	4b37      	ldr	r3, [pc, #220]	; (801d670 <ThreadSecurityTask+0x848>)
 801d592:	2200      	movs	r2, #0
 801d594:	701a      	strb	r2, [r3, #0]

			if(loop_state5_on<10)
 801d596:	4b37      	ldr	r3, [pc, #220]	; (801d674 <ThreadSecurityTask+0x84c>)
 801d598:	781b      	ldrb	r3, [r3, #0]
 801d59a:	2b09      	cmp	r3, #9
 801d59c:	f200 80d6 	bhi.w	801d74c <ThreadSecurityTask+0x924>
			{
				loop_state5_on++;
 801d5a0:	4b34      	ldr	r3, [pc, #208]	; (801d674 <ThreadSecurityTask+0x84c>)
 801d5a2:	781b      	ldrb	r3, [r3, #0]
 801d5a4:	3301      	adds	r3, #1
 801d5a6:	b2da      	uxtb	r2, r3
 801d5a8:	4b32      	ldr	r3, [pc, #200]	; (801d674 <ThreadSecurityTask+0x84c>)
 801d5aa:	701a      	strb	r2, [r3, #0]
				if(loop_state5_on==10)
 801d5ac:	4b31      	ldr	r3, [pc, #196]	; (801d674 <ThreadSecurityTask+0x84c>)
 801d5ae:	781b      	ldrb	r3, [r3, #0]
 801d5b0:	2b0a      	cmp	r3, #10
 801d5b2:	f040 80cb 	bne.w	801d74c <ThreadSecurityTask+0x924>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d5b6:	4b2c      	ldr	r3, [pc, #176]	; (801d668 <ThreadSecurityTask+0x840>)
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	f04f 31ff 	mov.w	r1, #4294967295
 801d5be:	4618      	mov	r0, r3
 801d5c0:	f7f9 fb6e 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d5c4:	f107 030e 	add.w	r3, r7, #14
 801d5c8:	4619      	mov	r1, r3
 801d5ca:	f242 0005 	movw	r0, #8197	; 0x2005
 801d5ce:	f007 feff 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d5d2:	4b25      	ldr	r3, [pc, #148]	; (801d668 <ThreadSecurityTask+0x840>)
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	f7f9 fbb0 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x10) == 0x00 )
 801d5dc:	7bbb      	ldrb	r3, [r7, #14]
 801d5de:	f003 0310 	and.w	r3, r3, #16
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	f040 80b2 	bne.w	801d74c <ThreadSecurityTask+0x924>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x10;
 801d5e8:	7bbb      	ldrb	r3, [r7, #14]
 801d5ea:	f043 0310 	orr.w	r3, r3, #16
 801d5ee:	b2db      	uxtb	r3, r3
 801d5f0:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d5f2:	4b1d      	ldr	r3, [pc, #116]	; (801d668 <ThreadSecurityTask+0x840>)
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	f04f 31ff 	mov.w	r1, #4294967295
 801d5fa:	4618      	mov	r0, r3
 801d5fc:	f7f9 fb50 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d600:	2100      	movs	r1, #0
 801d602:	f242 0004 	movw	r0, #8196	; 0x2004
 801d606:	f007 ff1d 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d60a:	7bbb      	ldrb	r3, [r7, #14]
 801d60c:	4619      	mov	r1, r3
 801d60e:	f242 0005 	movw	r0, #8197	; 0x2005
 801d612:	f007 ff17 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d616:	4b14      	ldr	r3, [pc, #80]	; (801d668 <ThreadSecurityTask+0x840>)
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	4618      	mov	r0, r3
 801d61c:	f7f9 fb8e 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x10;
 801d620:	4b12      	ldr	r3, [pc, #72]	; (801d66c <ThreadSecurityTask+0x844>)
 801d622:	889b      	ldrh	r3, [r3, #4]
 801d624:	f043 0310 	orr.w	r3, r3, #16
 801d628:	b29a      	uxth	r2, r3
 801d62a:	4b10      	ldr	r3, [pc, #64]	; (801d66c <ThreadSecurityTask+0x844>)
 801d62c:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d62e:	4b0e      	ldr	r3, [pc, #56]	; (801d668 <ThreadSecurityTask+0x840>)
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	f04f 31ff 	mov.w	r1, #4294967295
 801d636:	4618      	mov	r0, r3
 801d638:	f7f9 fb32 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d63c:	2100      	movs	r1, #0
 801d63e:	f242 106e 	movw	r0, #8558	; 0x216e
 801d642:	f007 feff 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d646:	2101      	movs	r1, #1
 801d648:	f242 106f 	movw	r0, #8559	; 0x216f
 801d64c:	f007 fefa 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d650:	4b05      	ldr	r3, [pc, #20]	; (801d668 <ThreadSecurityTask+0x840>)
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	4618      	mov	r0, r3
 801d656:	f7f9 fb71 	bl	8016d3c <osMutexRelease>
 801d65a:	e077      	b.n	801d74c <ThreadSecurityTask+0x924>
 801d65c:	40021400 	.word	0x40021400
 801d660:	20007ffe 	.word	0x20007ffe
 801d664:	20007fff 	.word	0x20007fff
 801d668:	20009a6c 	.word	0x20009a6c
 801d66c:	2000a10c 	.word	0x2000a10c
 801d670:	20008001 	.word	0x20008001
 801d674:	20008000 	.word	0x20008000

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_SET)
 801d678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801d67c:	486a      	ldr	r0, [pc, #424]	; (801d828 <ThreadSecurityTask+0xa00>)
 801d67e:	f7f5 fd91 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d682:	4603      	mov	r3, r0
 801d684:	2b01      	cmp	r3, #1
 801d686:	d161      	bne.n	801d74c <ThreadSecurityTask+0x924>
		{
			loop_state5_on = 0;
 801d688:	4b68      	ldr	r3, [pc, #416]	; (801d82c <ThreadSecurityTask+0xa04>)
 801d68a:	2200      	movs	r2, #0
 801d68c:	701a      	strb	r2, [r3, #0]

			if(loop_state5_off<10)
 801d68e:	4b68      	ldr	r3, [pc, #416]	; (801d830 <ThreadSecurityTask+0xa08>)
 801d690:	781b      	ldrb	r3, [r3, #0]
 801d692:	2b09      	cmp	r3, #9
 801d694:	d85a      	bhi.n	801d74c <ThreadSecurityTask+0x924>
			{
				loop_state5_off++;
 801d696:	4b66      	ldr	r3, [pc, #408]	; (801d830 <ThreadSecurityTask+0xa08>)
 801d698:	781b      	ldrb	r3, [r3, #0]
 801d69a:	3301      	adds	r3, #1
 801d69c:	b2da      	uxtb	r2, r3
 801d69e:	4b64      	ldr	r3, [pc, #400]	; (801d830 <ThreadSecurityTask+0xa08>)
 801d6a0:	701a      	strb	r2, [r3, #0]
				if(loop_state5_off==10)
 801d6a2:	4b63      	ldr	r3, [pc, #396]	; (801d830 <ThreadSecurityTask+0xa08>)
 801d6a4:	781b      	ldrb	r3, [r3, #0]
 801d6a6:	2b0a      	cmp	r3, #10
 801d6a8:	d150      	bne.n	801d74c <ThreadSecurityTask+0x924>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d6aa:	4b62      	ldr	r3, [pc, #392]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	f04f 31ff 	mov.w	r1, #4294967295
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	f7f9 faf4 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d6b8:	f107 030e 	add.w	r3, r7, #14
 801d6bc:	4619      	mov	r1, r3
 801d6be:	f242 0005 	movw	r0, #8197	; 0x2005
 801d6c2:	f007 fe85 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d6c6:	4b5b      	ldr	r3, [pc, #364]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	4618      	mov	r0, r3
 801d6cc:	f7f9 fb36 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x10) == 0x10 )
 801d6d0:	7bbb      	ldrb	r3, [r7, #14]
 801d6d2:	f003 0310 	and.w	r3, r3, #16
 801d6d6:	2b00      	cmp	r3, #0
 801d6d8:	d038      	beq.n	801d74c <ThreadSecurityTask+0x924>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xEF;
 801d6da:	7bbb      	ldrb	r3, [r7, #14]
 801d6dc:	f023 0310 	bic.w	r3, r3, #16
 801d6e0:	b2db      	uxtb	r3, r3
 801d6e2:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d6e4:	4b53      	ldr	r3, [pc, #332]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	f04f 31ff 	mov.w	r1, #4294967295
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	f7f9 fad7 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d6f2:	2100      	movs	r1, #0
 801d6f4:	f242 0004 	movw	r0, #8196	; 0x2004
 801d6f8:	f007 fea4 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d6fc:	7bbb      	ldrb	r3, [r7, #14]
 801d6fe:	4619      	mov	r1, r3
 801d700:	f242 0005 	movw	r0, #8197	; 0x2005
 801d704:	f007 fe9e 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d708:	4b4a      	ldr	r3, [pc, #296]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	4618      	mov	r0, r3
 801d70e:	f7f9 fb15 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xEF;
 801d712:	4b49      	ldr	r3, [pc, #292]	; (801d838 <ThreadSecurityTask+0xa10>)
 801d714:	889b      	ldrh	r3, [r3, #4]
 801d716:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 801d71a:	b29a      	uxth	r2, r3
 801d71c:	4b46      	ldr	r3, [pc, #280]	; (801d838 <ThreadSecurityTask+0xa10>)
 801d71e:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d720:	4b44      	ldr	r3, [pc, #272]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	f04f 31ff 	mov.w	r1, #4294967295
 801d728:	4618      	mov	r0, r3
 801d72a:	f7f9 fab9 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d72e:	2100      	movs	r1, #0
 801d730:	f242 106e 	movw	r0, #8558	; 0x216e
 801d734:	f007 fe86 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d738:	2101      	movs	r1, #1
 801d73a:	f242 106f 	movw	r0, #8559	; 0x216f
 801d73e:	f007 fe81 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d742:	4b3c      	ldr	r3, [pc, #240]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	4618      	mov	r0, r3
 801d748:	f7f9 faf8 	bl	8016d3c <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №6--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_RESET)
 801d74c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801d750:	4835      	ldr	r0, [pc, #212]	; (801d828 <ThreadSecurityTask+0xa00>)
 801d752:	f7f5 fd27 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d756:	4603      	mov	r3, r0
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d173      	bne.n	801d844 <ThreadSecurityTask+0xa1c>
		{
			loop_state6_off = 0;
 801d75c:	4b37      	ldr	r3, [pc, #220]	; (801d83c <ThreadSecurityTask+0xa14>)
 801d75e:	2200      	movs	r2, #0
 801d760:	701a      	strb	r2, [r3, #0]

			if(loop_state6_on<10)
 801d762:	4b37      	ldr	r3, [pc, #220]	; (801d840 <ThreadSecurityTask+0xa18>)
 801d764:	781b      	ldrb	r3, [r3, #0]
 801d766:	2b09      	cmp	r3, #9
 801d768:	f200 80d6 	bhi.w	801d918 <ThreadSecurityTask+0xaf0>
			{
				loop_state6_on++;
 801d76c:	4b34      	ldr	r3, [pc, #208]	; (801d840 <ThreadSecurityTask+0xa18>)
 801d76e:	781b      	ldrb	r3, [r3, #0]
 801d770:	3301      	adds	r3, #1
 801d772:	b2da      	uxtb	r2, r3
 801d774:	4b32      	ldr	r3, [pc, #200]	; (801d840 <ThreadSecurityTask+0xa18>)
 801d776:	701a      	strb	r2, [r3, #0]
				if(loop_state6_on==10)
 801d778:	4b31      	ldr	r3, [pc, #196]	; (801d840 <ThreadSecurityTask+0xa18>)
 801d77a:	781b      	ldrb	r3, [r3, #0]
 801d77c:	2b0a      	cmp	r3, #10
 801d77e:	f040 80cb 	bne.w	801d918 <ThreadSecurityTask+0xaf0>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d782:	4b2c      	ldr	r3, [pc, #176]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	f04f 31ff 	mov.w	r1, #4294967295
 801d78a:	4618      	mov	r0, r3
 801d78c:	f7f9 fa88 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d790:	f107 030e 	add.w	r3, r7, #14
 801d794:	4619      	mov	r1, r3
 801d796:	f242 0005 	movw	r0, #8197	; 0x2005
 801d79a:	f007 fe19 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d79e:	4b25      	ldr	r3, [pc, #148]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d7a0:	681b      	ldr	r3, [r3, #0]
 801d7a2:	4618      	mov	r0, r3
 801d7a4:	f7f9 faca 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x20) == 0x00 )
 801d7a8:	7bbb      	ldrb	r3, [r7, #14]
 801d7aa:	f003 0320 	and.w	r3, r3, #32
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	f040 80b2 	bne.w	801d918 <ThreadSecurityTask+0xaf0>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x20;
 801d7b4:	7bbb      	ldrb	r3, [r7, #14]
 801d7b6:	f043 0320 	orr.w	r3, r3, #32
 801d7ba:	b2db      	uxtb	r3, r3
 801d7bc:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d7be:	4b1d      	ldr	r3, [pc, #116]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	f04f 31ff 	mov.w	r1, #4294967295
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f7f9 fa6a 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d7cc:	2100      	movs	r1, #0
 801d7ce:	f242 0004 	movw	r0, #8196	; 0x2004
 801d7d2:	f007 fe37 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d7d6:	7bbb      	ldrb	r3, [r7, #14]
 801d7d8:	4619      	mov	r1, r3
 801d7da:	f242 0005 	movw	r0, #8197	; 0x2005
 801d7de:	f007 fe31 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d7e2:	4b14      	ldr	r3, [pc, #80]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d7e4:	681b      	ldr	r3, [r3, #0]
 801d7e6:	4618      	mov	r0, r3
 801d7e8:	f7f9 faa8 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x20;
 801d7ec:	4b12      	ldr	r3, [pc, #72]	; (801d838 <ThreadSecurityTask+0xa10>)
 801d7ee:	889b      	ldrh	r3, [r3, #4]
 801d7f0:	f043 0320 	orr.w	r3, r3, #32
 801d7f4:	b29a      	uxth	r2, r3
 801d7f6:	4b10      	ldr	r3, [pc, #64]	; (801d838 <ThreadSecurityTask+0xa10>)
 801d7f8:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d7fa:	4b0e      	ldr	r3, [pc, #56]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	f04f 31ff 	mov.w	r1, #4294967295
 801d802:	4618      	mov	r0, r3
 801d804:	f7f9 fa4c 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d808:	2100      	movs	r1, #0
 801d80a:	f242 106e 	movw	r0, #8558	; 0x216e
 801d80e:	f007 fe19 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d812:	2101      	movs	r1, #1
 801d814:	f242 106f 	movw	r0, #8559	; 0x216f
 801d818:	f007 fe14 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d81c:	4b05      	ldr	r3, [pc, #20]	; (801d834 <ThreadSecurityTask+0xa0c>)
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	4618      	mov	r0, r3
 801d822:	f7f9 fa8b 	bl	8016d3c <osMutexRelease>
 801d826:	e077      	b.n	801d918 <ThreadSecurityTask+0xaf0>
 801d828:	40021400 	.word	0x40021400
 801d82c:	20008000 	.word	0x20008000
 801d830:	20008001 	.word	0x20008001
 801d834:	20009a6c 	.word	0x20009a6c
 801d838:	2000a10c 	.word	0x2000a10c
 801d83c:	20008003 	.word	0x20008003
 801d840:	20008002 	.word	0x20008002

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_SET)
 801d844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801d848:	486a      	ldr	r0, [pc, #424]	; (801d9f4 <ThreadSecurityTask+0xbcc>)
 801d84a:	f7f5 fcab 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d84e:	4603      	mov	r3, r0
 801d850:	2b01      	cmp	r3, #1
 801d852:	d161      	bne.n	801d918 <ThreadSecurityTask+0xaf0>
		{
			loop_state6_on = 0;
 801d854:	4b68      	ldr	r3, [pc, #416]	; (801d9f8 <ThreadSecurityTask+0xbd0>)
 801d856:	2200      	movs	r2, #0
 801d858:	701a      	strb	r2, [r3, #0]

			if(loop_state6_off<10)
 801d85a:	4b68      	ldr	r3, [pc, #416]	; (801d9fc <ThreadSecurityTask+0xbd4>)
 801d85c:	781b      	ldrb	r3, [r3, #0]
 801d85e:	2b09      	cmp	r3, #9
 801d860:	d85a      	bhi.n	801d918 <ThreadSecurityTask+0xaf0>
			{
				loop_state6_off++;
 801d862:	4b66      	ldr	r3, [pc, #408]	; (801d9fc <ThreadSecurityTask+0xbd4>)
 801d864:	781b      	ldrb	r3, [r3, #0]
 801d866:	3301      	adds	r3, #1
 801d868:	b2da      	uxtb	r2, r3
 801d86a:	4b64      	ldr	r3, [pc, #400]	; (801d9fc <ThreadSecurityTask+0xbd4>)
 801d86c:	701a      	strb	r2, [r3, #0]
				if(loop_state6_off==10)
 801d86e:	4b63      	ldr	r3, [pc, #396]	; (801d9fc <ThreadSecurityTask+0xbd4>)
 801d870:	781b      	ldrb	r3, [r3, #0]
 801d872:	2b0a      	cmp	r3, #10
 801d874:	d150      	bne.n	801d918 <ThreadSecurityTask+0xaf0>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d876:	4b62      	ldr	r3, [pc, #392]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	f04f 31ff 	mov.w	r1, #4294967295
 801d87e:	4618      	mov	r0, r3
 801d880:	f7f9 fa0e 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d884:	f107 030e 	add.w	r3, r7, #14
 801d888:	4619      	mov	r1, r3
 801d88a:	f242 0005 	movw	r0, #8197	; 0x2005
 801d88e:	f007 fd9f 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d892:	4b5b      	ldr	r3, [pc, #364]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	4618      	mov	r0, r3
 801d898:	f7f9 fa50 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x20) == 0x20 )
 801d89c:	7bbb      	ldrb	r3, [r7, #14]
 801d89e:	f003 0320 	and.w	r3, r3, #32
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d038      	beq.n	801d918 <ThreadSecurityTask+0xaf0>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xDF;
 801d8a6:	7bbb      	ldrb	r3, [r7, #14]
 801d8a8:	f023 0320 	bic.w	r3, r3, #32
 801d8ac:	b2db      	uxtb	r3, r3
 801d8ae:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d8b0:	4b53      	ldr	r3, [pc, #332]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	f04f 31ff 	mov.w	r1, #4294967295
 801d8b8:	4618      	mov	r0, r3
 801d8ba:	f7f9 f9f1 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d8be:	2100      	movs	r1, #0
 801d8c0:	f242 0004 	movw	r0, #8196	; 0x2004
 801d8c4:	f007 fdbe 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d8c8:	7bbb      	ldrb	r3, [r7, #14]
 801d8ca:	4619      	mov	r1, r3
 801d8cc:	f242 0005 	movw	r0, #8197	; 0x2005
 801d8d0:	f007 fdb8 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d8d4:	4b4a      	ldr	r3, [pc, #296]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	4618      	mov	r0, r3
 801d8da:	f7f9 fa2f 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xDF;
 801d8de:	4b49      	ldr	r3, [pc, #292]	; (801da04 <ThreadSecurityTask+0xbdc>)
 801d8e0:	889b      	ldrh	r3, [r3, #4]
 801d8e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d8e6:	b29a      	uxth	r2, r3
 801d8e8:	4b46      	ldr	r3, [pc, #280]	; (801da04 <ThreadSecurityTask+0xbdc>)
 801d8ea:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d8ec:	4b44      	ldr	r3, [pc, #272]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	f04f 31ff 	mov.w	r1, #4294967295
 801d8f4:	4618      	mov	r0, r3
 801d8f6:	f7f9 f9d3 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d8fa:	2100      	movs	r1, #0
 801d8fc:	f242 106e 	movw	r0, #8558	; 0x216e
 801d900:	f007 fda0 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d904:	2101      	movs	r1, #1
 801d906:	f242 106f 	movw	r0, #8559	; 0x216f
 801d90a:	f007 fd9b 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d90e:	4b3c      	ldr	r3, [pc, #240]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	4618      	mov	r0, r3
 801d914:	f7f9 fa12 	bl	8016d3c <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №7--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_RESET)
 801d918:	2101      	movs	r1, #1
 801d91a:	483b      	ldr	r0, [pc, #236]	; (801da08 <ThreadSecurityTask+0xbe0>)
 801d91c:	f7f5 fc42 	bl	80131a4 <HAL_GPIO_ReadPin>
 801d920:	4603      	mov	r3, r0
 801d922:	2b00      	cmp	r3, #0
 801d924:	d176      	bne.n	801da14 <ThreadSecurityTask+0xbec>
		{
			loop_state7_off = 0;
 801d926:	4b39      	ldr	r3, [pc, #228]	; (801da0c <ThreadSecurityTask+0xbe4>)
 801d928:	2200      	movs	r2, #0
 801d92a:	701a      	strb	r2, [r3, #0]

			if(loop_state7_on<10)
 801d92c:	4b38      	ldr	r3, [pc, #224]	; (801da10 <ThreadSecurityTask+0xbe8>)
 801d92e:	781b      	ldrb	r3, [r3, #0]
 801d930:	2b09      	cmp	r3, #9
 801d932:	f200 80d8 	bhi.w	801dae6 <ThreadSecurityTask+0xcbe>
			{
				loop_state7_on++;
 801d936:	4b36      	ldr	r3, [pc, #216]	; (801da10 <ThreadSecurityTask+0xbe8>)
 801d938:	781b      	ldrb	r3, [r3, #0]
 801d93a:	3301      	adds	r3, #1
 801d93c:	b2da      	uxtb	r2, r3
 801d93e:	4b34      	ldr	r3, [pc, #208]	; (801da10 <ThreadSecurityTask+0xbe8>)
 801d940:	701a      	strb	r2, [r3, #0]
				if(loop_state7_on==10)
 801d942:	4b33      	ldr	r3, [pc, #204]	; (801da10 <ThreadSecurityTask+0xbe8>)
 801d944:	781b      	ldrb	r3, [r3, #0]
 801d946:	2b0a      	cmp	r3, #10
 801d948:	f040 80cd 	bne.w	801dae6 <ThreadSecurityTask+0xcbe>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d94c:	4b2c      	ldr	r3, [pc, #176]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	f04f 31ff 	mov.w	r1, #4294967295
 801d954:	4618      	mov	r0, r3
 801d956:	f7f9 f9a3 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801d95a:	f107 030e 	add.w	r3, r7, #14
 801d95e:	4619      	mov	r1, r3
 801d960:	f242 0005 	movw	r0, #8197	; 0x2005
 801d964:	f007 fd34 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801d968:	4b25      	ldr	r3, [pc, #148]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	4618      	mov	r0, r3
 801d96e:	f7f9 f9e5 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x40) == 0x00 )
 801d972:	7bbb      	ldrb	r3, [r7, #14]
 801d974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d978:	2b00      	cmp	r3, #0
 801d97a:	f040 80b4 	bne.w	801dae6 <ThreadSecurityTask+0xcbe>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x40;
 801d97e:	7bbb      	ldrb	r3, [r7, #14]
 801d980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d984:	b2db      	uxtb	r3, r3
 801d986:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d988:	4b1d      	ldr	r3, [pc, #116]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	f04f 31ff 	mov.w	r1, #4294967295
 801d990:	4618      	mov	r0, r3
 801d992:	f7f9 f985 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801d996:	2100      	movs	r1, #0
 801d998:	f242 0004 	movw	r0, #8196	; 0x2004
 801d99c:	f007 fd52 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801d9a0:	7bbb      	ldrb	r3, [r7, #14]
 801d9a2:	4619      	mov	r1, r3
 801d9a4:	f242 0005 	movw	r0, #8197	; 0x2005
 801d9a8:	f007 fd4c 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d9ac:	4b14      	ldr	r3, [pc, #80]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	4618      	mov	r0, r3
 801d9b2:	f7f9 f9c3 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x40;
 801d9b6:	4b13      	ldr	r3, [pc, #76]	; (801da04 <ThreadSecurityTask+0xbdc>)
 801d9b8:	889b      	ldrh	r3, [r3, #4]
 801d9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d9be:	b29a      	uxth	r2, r3
 801d9c0:	4b10      	ldr	r3, [pc, #64]	; (801da04 <ThreadSecurityTask+0xbdc>)
 801d9c2:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d9c4:	4b0e      	ldr	r3, [pc, #56]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d9c6:	681b      	ldr	r3, [r3, #0]
 801d9c8:	f04f 31ff 	mov.w	r1, #4294967295
 801d9cc:	4618      	mov	r0, r3
 801d9ce:	f7f9 f967 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801d9d2:	2100      	movs	r1, #0
 801d9d4:	f242 106e 	movw	r0, #8558	; 0x216e
 801d9d8:	f007 fd34 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801d9dc:	2101      	movs	r1, #1
 801d9de:	f242 106f 	movw	r0, #8559	; 0x216f
 801d9e2:	f007 fd2f 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d9e6:	4b06      	ldr	r3, [pc, #24]	; (801da00 <ThreadSecurityTask+0xbd8>)
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	f7f9 f9a6 	bl	8016d3c <osMutexRelease>
 801d9f0:	e079      	b.n	801dae6 <ThreadSecurityTask+0xcbe>
 801d9f2:	bf00      	nop
 801d9f4:	40021400 	.word	0x40021400
 801d9f8:	20008002 	.word	0x20008002
 801d9fc:	20008003 	.word	0x20008003
 801da00:	20009a6c 	.word	0x20009a6c
 801da04:	2000a10c 	.word	0x2000a10c
 801da08:	40021800 	.word	0x40021800
 801da0c:	20008005 	.word	0x20008005
 801da10:	20008004 	.word	0x20008004

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_SET)
 801da14:	2101      	movs	r1, #1
 801da16:	486a      	ldr	r0, [pc, #424]	; (801dbc0 <ThreadSecurityTask+0xd98>)
 801da18:	f7f5 fbc4 	bl	80131a4 <HAL_GPIO_ReadPin>
 801da1c:	4603      	mov	r3, r0
 801da1e:	2b01      	cmp	r3, #1
 801da20:	d161      	bne.n	801dae6 <ThreadSecurityTask+0xcbe>
		{
			loop_state7_on = 0;
 801da22:	4b68      	ldr	r3, [pc, #416]	; (801dbc4 <ThreadSecurityTask+0xd9c>)
 801da24:	2200      	movs	r2, #0
 801da26:	701a      	strb	r2, [r3, #0]

			if(loop_state7_off<10)
 801da28:	4b67      	ldr	r3, [pc, #412]	; (801dbc8 <ThreadSecurityTask+0xda0>)
 801da2a:	781b      	ldrb	r3, [r3, #0]
 801da2c:	2b09      	cmp	r3, #9
 801da2e:	d85a      	bhi.n	801dae6 <ThreadSecurityTask+0xcbe>
			{
				loop_state7_off++;
 801da30:	4b65      	ldr	r3, [pc, #404]	; (801dbc8 <ThreadSecurityTask+0xda0>)
 801da32:	781b      	ldrb	r3, [r3, #0]
 801da34:	3301      	adds	r3, #1
 801da36:	b2da      	uxtb	r2, r3
 801da38:	4b63      	ldr	r3, [pc, #396]	; (801dbc8 <ThreadSecurityTask+0xda0>)
 801da3a:	701a      	strb	r2, [r3, #0]
				if(loop_state7_off==10)
 801da3c:	4b62      	ldr	r3, [pc, #392]	; (801dbc8 <ThreadSecurityTask+0xda0>)
 801da3e:	781b      	ldrb	r3, [r3, #0]
 801da40:	2b0a      	cmp	r3, #10
 801da42:	d150      	bne.n	801dae6 <ThreadSecurityTask+0xcbe>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801da44:	4b61      	ldr	r3, [pc, #388]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	f04f 31ff 	mov.w	r1, #4294967295
 801da4c:	4618      	mov	r0, r3
 801da4e:	f7f9 f927 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801da52:	f107 030e 	add.w	r3, r7, #14
 801da56:	4619      	mov	r1, r3
 801da58:	f242 0005 	movw	r0, #8197	; 0x2005
 801da5c:	f007 fcb8 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801da60:	4b5a      	ldr	r3, [pc, #360]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	4618      	mov	r0, r3
 801da66:	f7f9 f969 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x40) == 0x40 )
 801da6a:	7bbb      	ldrb	r3, [r7, #14]
 801da6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801da70:	2b00      	cmp	r3, #0
 801da72:	d038      	beq.n	801dae6 <ThreadSecurityTask+0xcbe>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xBF;
 801da74:	7bbb      	ldrb	r3, [r7, #14]
 801da76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801da7a:	b2db      	uxtb	r3, r3
 801da7c:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801da7e:	4b53      	ldr	r3, [pc, #332]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	f04f 31ff 	mov.w	r1, #4294967295
 801da86:	4618      	mov	r0, r3
 801da88:	f7f9 f90a 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801da8c:	2100      	movs	r1, #0
 801da8e:	f242 0004 	movw	r0, #8196	; 0x2004
 801da92:	f007 fcd7 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801da96:	7bbb      	ldrb	r3, [r7, #14]
 801da98:	4619      	mov	r1, r3
 801da9a:	f242 0005 	movw	r0, #8197	; 0x2005
 801da9e:	f007 fcd1 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801daa2:	4b4a      	ldr	r3, [pc, #296]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	4618      	mov	r0, r3
 801daa8:	f7f9 f948 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xBF;
 801daac:	4b48      	ldr	r3, [pc, #288]	; (801dbd0 <ThreadSecurityTask+0xda8>)
 801daae:	889b      	ldrh	r3, [r3, #4]
 801dab0:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 801dab4:	b29a      	uxth	r2, r3
 801dab6:	4b46      	ldr	r3, [pc, #280]	; (801dbd0 <ThreadSecurityTask+0xda8>)
 801dab8:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801daba:	4b44      	ldr	r3, [pc, #272]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	f04f 31ff 	mov.w	r1, #4294967295
 801dac2:	4618      	mov	r0, r3
 801dac4:	f7f9 f8ec 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801dac8:	2100      	movs	r1, #0
 801daca:	f242 106e 	movw	r0, #8558	; 0x216e
 801dace:	f007 fcb9 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801dad2:	2101      	movs	r1, #1
 801dad4:	f242 106f 	movw	r0, #8559	; 0x216f
 801dad8:	f007 fcb4 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801dadc:	4b3b      	ldr	r3, [pc, #236]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	4618      	mov	r0, r3
 801dae2:	f7f9 f92b 	bl	8016d3c <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №8--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_RESET)
 801dae6:	2102      	movs	r1, #2
 801dae8:	4835      	ldr	r0, [pc, #212]	; (801dbc0 <ThreadSecurityTask+0xd98>)
 801daea:	f7f5 fb5b 	bl	80131a4 <HAL_GPIO_ReadPin>
 801daee:	4603      	mov	r3, r0
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	d173      	bne.n	801dbdc <ThreadSecurityTask+0xdb4>
		{
			loop_state8_off = 0;
 801daf4:	4b37      	ldr	r3, [pc, #220]	; (801dbd4 <ThreadSecurityTask+0xdac>)
 801daf6:	2200      	movs	r2, #0
 801daf8:	701a      	strb	r2, [r3, #0]

			if(loop_state8_on<10)
 801dafa:	4b37      	ldr	r3, [pc, #220]	; (801dbd8 <ThreadSecurityTask+0xdb0>)
 801dafc:	781b      	ldrb	r3, [r3, #0]
 801dafe:	2b09      	cmp	r3, #9
 801db00:	f200 80d4 	bhi.w	801dcac <ThreadSecurityTask+0xe84>
			{
				loop_state8_on++;
 801db04:	4b34      	ldr	r3, [pc, #208]	; (801dbd8 <ThreadSecurityTask+0xdb0>)
 801db06:	781b      	ldrb	r3, [r3, #0]
 801db08:	3301      	adds	r3, #1
 801db0a:	b2da      	uxtb	r2, r3
 801db0c:	4b32      	ldr	r3, [pc, #200]	; (801dbd8 <ThreadSecurityTask+0xdb0>)
 801db0e:	701a      	strb	r2, [r3, #0]
				if(loop_state8_on==10)
 801db10:	4b31      	ldr	r3, [pc, #196]	; (801dbd8 <ThreadSecurityTask+0xdb0>)
 801db12:	781b      	ldrb	r3, [r3, #0]
 801db14:	2b0a      	cmp	r3, #10
 801db16:	f040 80c9 	bne.w	801dcac <ThreadSecurityTask+0xe84>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801db1a:	4b2c      	ldr	r3, [pc, #176]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	f04f 31ff 	mov.w	r1, #4294967295
 801db22:	4618      	mov	r0, r3
 801db24:	f7f9 f8bc 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801db28:	f107 030e 	add.w	r3, r7, #14
 801db2c:	4619      	mov	r1, r3
 801db2e:	f242 0005 	movw	r0, #8197	; 0x2005
 801db32:	f007 fc4d 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801db36:	4b25      	ldr	r3, [pc, #148]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801db38:	681b      	ldr	r3, [r3, #0]
 801db3a:	4618      	mov	r0, r3
 801db3c:	f7f9 f8fe 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x80) == 0x00 )
 801db40:	7bbb      	ldrb	r3, [r7, #14]
 801db42:	b25b      	sxtb	r3, r3
 801db44:	2b00      	cmp	r3, #0
 801db46:	f2c0 80b1 	blt.w	801dcac <ThreadSecurityTask+0xe84>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x80;
 801db4a:	7bbb      	ldrb	r3, [r7, #14]
 801db4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801db50:	b2db      	uxtb	r3, r3
 801db52:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801db54:	4b1d      	ldr	r3, [pc, #116]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	f04f 31ff 	mov.w	r1, #4294967295
 801db5c:	4618      	mov	r0, r3
 801db5e:	f7f9 f89f 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801db62:	2100      	movs	r1, #0
 801db64:	f242 0004 	movw	r0, #8196	; 0x2004
 801db68:	f007 fc6c 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801db6c:	7bbb      	ldrb	r3, [r7, #14]
 801db6e:	4619      	mov	r1, r3
 801db70:	f242 0005 	movw	r0, #8197	; 0x2005
 801db74:	f007 fc66 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801db78:	4b14      	ldr	r3, [pc, #80]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	4618      	mov	r0, r3
 801db7e:	f7f9 f8dd 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x80;
 801db82:	4b13      	ldr	r3, [pc, #76]	; (801dbd0 <ThreadSecurityTask+0xda8>)
 801db84:	889b      	ldrh	r3, [r3, #4]
 801db86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db8a:	b29a      	uxth	r2, r3
 801db8c:	4b10      	ldr	r3, [pc, #64]	; (801dbd0 <ThreadSecurityTask+0xda8>)
 801db8e:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801db90:	4b0e      	ldr	r3, [pc, #56]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	f04f 31ff 	mov.w	r1, #4294967295
 801db98:	4618      	mov	r0, r3
 801db9a:	f7f9 f881 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801db9e:	2100      	movs	r1, #0
 801dba0:	f242 106e 	movw	r0, #8558	; 0x216e
 801dba4:	f007 fc4e 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801dba8:	2101      	movs	r1, #1
 801dbaa:	f242 106f 	movw	r0, #8559	; 0x216f
 801dbae:	f007 fc49 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801dbb2:	4b06      	ldr	r3, [pc, #24]	; (801dbcc <ThreadSecurityTask+0xda4>)
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f7f9 f8c0 	bl	8016d3c <osMutexRelease>
 801dbbc:	e076      	b.n	801dcac <ThreadSecurityTask+0xe84>
 801dbbe:	bf00      	nop
 801dbc0:	40021800 	.word	0x40021800
 801dbc4:	20008004 	.word	0x20008004
 801dbc8:	20008005 	.word	0x20008005
 801dbcc:	20009a6c 	.word	0x20009a6c
 801dbd0:	2000a10c 	.word	0x2000a10c
 801dbd4:	20008007 	.word	0x20008007
 801dbd8:	20008006 	.word	0x20008006

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_SET)
 801dbdc:	2102      	movs	r1, #2
 801dbde:	4895      	ldr	r0, [pc, #596]	; (801de34 <ThreadSecurityTask+0x100c>)
 801dbe0:	f7f5 fae0 	bl	80131a4 <HAL_GPIO_ReadPin>
 801dbe4:	4603      	mov	r3, r0
 801dbe6:	2b01      	cmp	r3, #1
 801dbe8:	d160      	bne.n	801dcac <ThreadSecurityTask+0xe84>
		{
			loop_state8_on = 0;
 801dbea:	4b93      	ldr	r3, [pc, #588]	; (801de38 <ThreadSecurityTask+0x1010>)
 801dbec:	2200      	movs	r2, #0
 801dbee:	701a      	strb	r2, [r3, #0]

			if(loop_state8_off<10)
 801dbf0:	4b92      	ldr	r3, [pc, #584]	; (801de3c <ThreadSecurityTask+0x1014>)
 801dbf2:	781b      	ldrb	r3, [r3, #0]
 801dbf4:	2b09      	cmp	r3, #9
 801dbf6:	d859      	bhi.n	801dcac <ThreadSecurityTask+0xe84>
			{
				loop_state8_off++;
 801dbf8:	4b90      	ldr	r3, [pc, #576]	; (801de3c <ThreadSecurityTask+0x1014>)
 801dbfa:	781b      	ldrb	r3, [r3, #0]
 801dbfc:	3301      	adds	r3, #1
 801dbfe:	b2da      	uxtb	r2, r3
 801dc00:	4b8e      	ldr	r3, [pc, #568]	; (801de3c <ThreadSecurityTask+0x1014>)
 801dc02:	701a      	strb	r2, [r3, #0]
				if(loop_state8_off==10)
 801dc04:	4b8d      	ldr	r3, [pc, #564]	; (801de3c <ThreadSecurityTask+0x1014>)
 801dc06:	781b      	ldrb	r3, [r3, #0]
 801dc08:	2b0a      	cmp	r3, #10
 801dc0a:	d14f      	bne.n	801dcac <ThreadSecurityTask+0xe84>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dc0c:	4b8c      	ldr	r3, [pc, #560]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dc0e:	681b      	ldr	r3, [r3, #0]
 801dc10:	f04f 31ff 	mov.w	r1, #4294967295
 801dc14:	4618      	mov	r0, r3
 801dc16:	f7f9 f843 	bl	8016ca0 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 801dc1a:	f107 030e 	add.w	r3, r7, #14
 801dc1e:	4619      	mov	r1, r3
 801dc20:	f242 0005 	movw	r0, #8197	; 0x2005
 801dc24:	f007 fbd4 	bl	80253d0 <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 801dc28:	4b85      	ldr	r3, [pc, #532]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	4618      	mov	r0, r3
 801dc2e:	f7f9 f885 	bl	8016d3c <osMutexRelease>

					if( (status_loop_reg_temp&0x80) == 0x80 )
 801dc32:	7bbb      	ldrb	r3, [r7, #14]
 801dc34:	b25b      	sxtb	r3, r3
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	da38      	bge.n	801dcac <ThreadSecurityTask+0xe84>
					{

						status_loop_reg_temp = status_loop_reg_temp&0x7F;
 801dc3a:	7bbb      	ldrb	r3, [r7, #14]
 801dc3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dc40:	b2db      	uxtb	r3, r3
 801dc42:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dc44:	4b7e      	ldr	r3, [pc, #504]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	f04f 31ff 	mov.w	r1, #4294967295
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	f7f9 f827 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 801dc52:	2100      	movs	r1, #0
 801dc54:	f242 0004 	movw	r0, #8196	; 0x2004
 801dc58:	f007 fbf4 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 801dc5c:	7bbb      	ldrb	r3, [r7, #14]
 801dc5e:	4619      	mov	r1, r3
 801dc60:	f242 0005 	movw	r0, #8197	; 0x2005
 801dc64:	f007 fbee 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801dc68:	4b75      	ldr	r3, [pc, #468]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	4618      	mov	r0, r3
 801dc6e:	f7f9 f865 	bl	8016d3c <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0x7F;
 801dc72:	4b74      	ldr	r3, [pc, #464]	; (801de44 <ThreadSecurityTask+0x101c>)
 801dc74:	889b      	ldrh	r3, [r3, #4]
 801dc76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dc7a:	b29a      	uxth	r2, r3
 801dc7c:	4b71      	ldr	r3, [pc, #452]	; (801de44 <ThreadSecurityTask+0x101c>)
 801dc7e:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dc80:	4b6f      	ldr	r3, [pc, #444]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	f04f 31ff 	mov.w	r1, #4294967295
 801dc88:	4618      	mov	r0, r3
 801dc8a:	f7f9 f809 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801dc8e:	2100      	movs	r1, #0
 801dc90:	f242 106e 	movw	r0, #8558	; 0x216e
 801dc94:	f007 fbd6 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801dc98:	2101      	movs	r1, #1
 801dc9a:	f242 106f 	movw	r0, #8559	; 0x216f
 801dc9e:	f007 fbd1 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801dca2:	4b67      	ldr	r3, [pc, #412]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	4618      	mov	r0, r3
 801dca8:	f7f9 f848 	bl	8016d3c <osMutexRelease>
		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------



		if( (status_registers.security_status_reg == ENABLED_BY_IBUTTON) || (status_registers.security_status_reg == ENABLED_BY_SERVER) && (status_registers.power_on_reg == 1) ) // если основное питание есть и режим охраны включен таблеткой или из центра
 801dcac:	4b65      	ldr	r3, [pc, #404]	; (801de44 <ThreadSecurityTask+0x101c>)
 801dcae:	885b      	ldrh	r3, [r3, #2]
 801dcb0:	2b03      	cmp	r3, #3
 801dcb2:	d009      	beq.n	801dcc8 <ThreadSecurityTask+0xea0>
 801dcb4:	4b63      	ldr	r3, [pc, #396]	; (801de44 <ThreadSecurityTask+0x101c>)
 801dcb6:	885b      	ldrh	r3, [r3, #2]
 801dcb8:	2b01      	cmp	r3, #1
 801dcba:	f040 85fa 	bne.w	801e8b2 <ThreadSecurityTask+0x1a8a>
 801dcbe:	4b61      	ldr	r3, [pc, #388]	; (801de44 <ThreadSecurityTask+0x101c>)
 801dcc0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801dcc2:	2b01      	cmp	r3, #1
 801dcc4:	f040 85f5 	bne.w	801e8b2 <ThreadSecurityTask+0x1a8a>
		{

			//----Контроль шлейфа №1--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x01) != 0x00 ) )
 801dcc8:	2110      	movs	r1, #16
 801dcca:	485f      	ldr	r0, [pc, #380]	; (801de48 <ThreadSecurityTask+0x1020>)
 801dccc:	f7f5 fa6a 	bl	80131a4 <HAL_GPIO_ReadPin>
 801dcd0:	4603      	mov	r3, r0
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	f040 8098 	bne.w	801de08 <ThreadSecurityTask+0xfe0>
 801dcd8:	4b5c      	ldr	r3, [pc, #368]	; (801de4c <ThreadSecurityTask+0x1024>)
 801dcda:	885b      	ldrh	r3, [r3, #2]
 801dcdc:	f003 0301 	and.w	r3, r3, #1
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	f000 8091 	beq.w	801de08 <ThreadSecurityTask+0xfe0>
			{
				if(button_state1<10)
 801dce6:	4b5a      	ldr	r3, [pc, #360]	; (801de50 <ThreadSecurityTask+0x1028>)
 801dce8:	781b      	ldrb	r3, [r3, #0]
 801dcea:	2b09      	cmp	r3, #9
 801dcec:	f200 80b4 	bhi.w	801de58 <ThreadSecurityTask+0x1030>
				{
					button_state1++;
 801dcf0:	4b57      	ldr	r3, [pc, #348]	; (801de50 <ThreadSecurityTask+0x1028>)
 801dcf2:	781b      	ldrb	r3, [r3, #0]
 801dcf4:	3301      	adds	r3, #1
 801dcf6:	b2da      	uxtb	r2, r3
 801dcf8:	4b55      	ldr	r3, [pc, #340]	; (801de50 <ThreadSecurityTask+0x1028>)
 801dcfa:	701a      	strb	r2, [r3, #0]
					if(button_state1==10)
 801dcfc:	4b54      	ldr	r3, [pc, #336]	; (801de50 <ThreadSecurityTask+0x1028>)
 801dcfe:	781b      	ldrb	r3, [r3, #0]
 801dd00:	2b0a      	cmp	r3, #10
 801dd02:	f040 80a9 	bne.w	801de58 <ThreadSecurityTask+0x1030>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 801dd06:	4b51      	ldr	r3, [pc, #324]	; (801de4c <ThreadSecurityTask+0x1024>)
 801dd08:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d101      	bne.n	801dd14 <ThreadSecurityTask+0xeec>
						{
							BUZ_ON();
 801dd10:	f007 fc46 	bl	80255a0 <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dd14:	4b4a      	ldr	r3, [pc, #296]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dd16:	681b      	ldr	r3, [r3, #0]
 801dd18:	f04f 31ff 	mov.w	r1, #4294967295
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	f7f8 ffbf 	bl	8016ca0 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 801dd22:	f107 030f 	add.w	r3, r7, #15
 801dd26:	4619      	mov	r1, r3
 801dd28:	f242 0009 	movw	r0, #8201	; 0x2009
 801dd2c:	f007 fb50 	bl	80253d0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 801dd30:	4b43      	ldr	r3, [pc, #268]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	4618      	mov	r0, r3
 801dd36:	f7f9 f801 	bl	8016d3c <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x01;
 801dd3a:	7bfb      	ldrb	r3, [r7, #15]
 801dd3c:	f043 0301 	orr.w	r3, r3, #1
 801dd40:	b2db      	uxtb	r3, r3
 801dd42:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dd44:	4b3e      	ldr	r3, [pc, #248]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dd46:	681b      	ldr	r3, [r3, #0]
 801dd48:	f04f 31ff 	mov.w	r1, #4294967295
 801dd4c:	4618      	mov	r0, r3
 801dd4e:	f7f8 ffa7 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 801dd52:	2100      	movs	r1, #0
 801dd54:	f242 0008 	movw	r0, #8200	; 0x2008
 801dd58:	f007 fb74 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 801dd5c:	7bfb      	ldrb	r3, [r7, #15]
 801dd5e:	4619      	mov	r1, r3
 801dd60:	f242 0009 	movw	r0, #8201	; 0x2009
 801dd64:	f007 fb6e 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801dd68:	4b35      	ldr	r3, [pc, #212]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	4618      	mov	r0, r3
 801dd6e:	f7f8 ffe5 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dd72:	4b33      	ldr	r3, [pc, #204]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	f04f 31ff 	mov.w	r1, #4294967295
 801dd7a:	4618      	mov	r0, r3
 801dd7c:	f7f8 ff90 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801dd80:	2100      	movs	r1, #0
 801dd82:	f242 0002 	movw	r0, #8194	; 0x2002
 801dd86:	f007 fb5d 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 801dd8a:	2105      	movs	r1, #5
 801dd8c:	f242 0003 	movw	r0, #8195	; 0x2003
 801dd90:	f007 fb58 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801dd94:	4b2a      	ldr	r3, [pc, #168]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	4618      	mov	r0, r3
 801dd9a:	f7f8 ffcf 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dd9e:	4b28      	ldr	r3, [pc, #160]	; (801de40 <ThreadSecurityTask+0x1018>)
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	f04f 31ff 	mov.w	r1, #4294967295
 801dda6:	4618      	mov	r0, r3
 801dda8:	f7f8 ff7a 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801ddac:	2100      	movs	r1, #0
 801ddae:	f242 0020 	movw	r0, #8224	; 0x2020
 801ddb2:	f007 fb47 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 801ddb6:	210a      	movs	r1, #10
 801ddb8:	f242 0021 	movw	r0, #8225	; 0x2021
 801ddbc:	f007 fb42 	bl	8025444 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 801ddc0:	4b20      	ldr	r3, [pc, #128]	; (801de44 <ThreadSecurityTask+0x101c>)
 801ddc2:	220a      	movs	r2, #10
 801ddc4:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 801ddc6:	4b1e      	ldr	r3, [pc, #120]	; (801de40 <ThreadSecurityTask+0x1018>)
 801ddc8:	681b      	ldr	r3, [r3, #0]
 801ddca:	4618      	mov	r0, r3
 801ddcc:	f7f8 ffb6 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ddd0:	4b1b      	ldr	r3, [pc, #108]	; (801de40 <ThreadSecurityTask+0x1018>)
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	f04f 31ff 	mov.w	r1, #4294967295
 801ddd8:	4618      	mov	r0, r3
 801ddda:	f7f8 ff61 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801ddde:	2100      	movs	r1, #0
 801dde0:	f242 106e 	movw	r0, #8558	; 0x216e
 801dde4:	f007 fb2e 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801dde8:	2101      	movs	r1, #1
 801ddea:	f242 106f 	movw	r0, #8559	; 0x216f
 801ddee:	f007 fb29 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801ddf2:	4b13      	ldr	r3, [pc, #76]	; (801de40 <ThreadSecurityTask+0x1018>)
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	f7f8 ffa0 	bl	8016d3c <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 801ddfc:	4b15      	ldr	r3, [pc, #84]	; (801de54 <ThreadSecurityTask+0x102c>)
 801ddfe:	681b      	ldr	r3, [r3, #0]
 801de00:	4618      	mov	r0, r3
 801de02:	f7f9 f97d 	bl	8017100 <osThreadResume>
				if(button_state1<10)
 801de06:	e027      	b.n	801de58 <ThreadSecurityTask+0x1030>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x01) != 0x00 ) )
 801de08:	2110      	movs	r1, #16
 801de0a:	480f      	ldr	r0, [pc, #60]	; (801de48 <ThreadSecurityTask+0x1020>)
 801de0c:	f7f5 f9ca 	bl	80131a4 <HAL_GPIO_ReadPin>
 801de10:	4603      	mov	r3, r0
 801de12:	2b01      	cmp	r3, #1
 801de14:	d121      	bne.n	801de5a <ThreadSecurityTask+0x1032>
 801de16:	4b0d      	ldr	r3, [pc, #52]	; (801de4c <ThreadSecurityTask+0x1024>)
 801de18:	885b      	ldrh	r3, [r3, #2]
 801de1a:	f003 0301 	and.w	r3, r3, #1
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d01b      	beq.n	801de5a <ThreadSecurityTask+0x1032>
			{
				if(button_state1>0)
 801de22:	4b0b      	ldr	r3, [pc, #44]	; (801de50 <ThreadSecurityTask+0x1028>)
 801de24:	781b      	ldrb	r3, [r3, #0]
 801de26:	2b00      	cmp	r3, #0
 801de28:	d017      	beq.n	801de5a <ThreadSecurityTask+0x1032>
				{
					button_state1 = 0;
 801de2a:	4b09      	ldr	r3, [pc, #36]	; (801de50 <ThreadSecurityTask+0x1028>)
 801de2c:	2200      	movs	r2, #0
 801de2e:	701a      	strb	r2, [r3, #0]
 801de30:	e013      	b.n	801de5a <ThreadSecurityTask+0x1032>
 801de32:	bf00      	nop
 801de34:	40021800 	.word	0x40021800
 801de38:	20008006 	.word	0x20008006
 801de3c:	20008007 	.word	0x20008007
 801de40:	20009a6c 	.word	0x20009a6c
 801de44:	2000a10c 	.word	0x2000a10c
 801de48:	40021c00 	.word	0x40021c00
 801de4c:	2000a1cc 	.word	0x2000a1cc
 801de50:	20007ff0 	.word	0x20007ff0
 801de54:	2000969c 	.word	0x2000969c
				if(button_state1<10)
 801de58:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №2--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x02) != 0x00 ) )
 801de5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801de5e:	48b6      	ldr	r0, [pc, #728]	; (801e138 <ThreadSecurityTask+0x1310>)
 801de60:	f7f5 f9a0 	bl	80131a4 <HAL_GPIO_ReadPin>
 801de64:	4603      	mov	r3, r0
 801de66:	2b00      	cmp	r3, #0
 801de68:	f040 8098 	bne.w	801df9c <ThreadSecurityTask+0x1174>
 801de6c:	4bb3      	ldr	r3, [pc, #716]	; (801e13c <ThreadSecurityTask+0x1314>)
 801de6e:	885b      	ldrh	r3, [r3, #2]
 801de70:	f003 0302 	and.w	r3, r3, #2
 801de74:	2b00      	cmp	r3, #0
 801de76:	f000 8091 	beq.w	801df9c <ThreadSecurityTask+0x1174>
			{
				if(button_state2<10)
 801de7a:	4bb1      	ldr	r3, [pc, #708]	; (801e140 <ThreadSecurityTask+0x1318>)
 801de7c:	781b      	ldrb	r3, [r3, #0]
 801de7e:	2b09      	cmp	r3, #9
 801de80:	f200 80a2 	bhi.w	801dfc8 <ThreadSecurityTask+0x11a0>
				{
					button_state2++;
 801de84:	4bae      	ldr	r3, [pc, #696]	; (801e140 <ThreadSecurityTask+0x1318>)
 801de86:	781b      	ldrb	r3, [r3, #0]
 801de88:	3301      	adds	r3, #1
 801de8a:	b2da      	uxtb	r2, r3
 801de8c:	4bac      	ldr	r3, [pc, #688]	; (801e140 <ThreadSecurityTask+0x1318>)
 801de8e:	701a      	strb	r2, [r3, #0]
					if(button_state2==10)
 801de90:	4bab      	ldr	r3, [pc, #684]	; (801e140 <ThreadSecurityTask+0x1318>)
 801de92:	781b      	ldrb	r3, [r3, #0]
 801de94:	2b0a      	cmp	r3, #10
 801de96:	f040 8097 	bne.w	801dfc8 <ThreadSecurityTask+0x11a0>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 801de9a:	4ba8      	ldr	r3, [pc, #672]	; (801e13c <ThreadSecurityTask+0x1314>)
 801de9c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d101      	bne.n	801dea8 <ThreadSecurityTask+0x1080>
						{
							BUZ_ON();
 801dea4:	f007 fb7c 	bl	80255a0 <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dea8:	4ba6      	ldr	r3, [pc, #664]	; (801e144 <ThreadSecurityTask+0x131c>)
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	f04f 31ff 	mov.w	r1, #4294967295
 801deb0:	4618      	mov	r0, r3
 801deb2:	f7f8 fef5 	bl	8016ca0 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 801deb6:	f107 030f 	add.w	r3, r7, #15
 801deba:	4619      	mov	r1, r3
 801debc:	f242 0009 	movw	r0, #8201	; 0x2009
 801dec0:	f007 fa86 	bl	80253d0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 801dec4:	4b9f      	ldr	r3, [pc, #636]	; (801e144 <ThreadSecurityTask+0x131c>)
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	4618      	mov	r0, r3
 801deca:	f7f8 ff37 	bl	8016d3c <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x02;
 801dece:	7bfb      	ldrb	r3, [r7, #15]
 801ded0:	f043 0302 	orr.w	r3, r3, #2
 801ded4:	b2db      	uxtb	r3, r3
 801ded6:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ded8:	4b9a      	ldr	r3, [pc, #616]	; (801e144 <ThreadSecurityTask+0x131c>)
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	f04f 31ff 	mov.w	r1, #4294967295
 801dee0:	4618      	mov	r0, r3
 801dee2:	f7f8 fedd 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 801dee6:	2100      	movs	r1, #0
 801dee8:	f242 0008 	movw	r0, #8200	; 0x2008
 801deec:	f007 faaa 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 801def0:	7bfb      	ldrb	r3, [r7, #15]
 801def2:	4619      	mov	r1, r3
 801def4:	f242 0009 	movw	r0, #8201	; 0x2009
 801def8:	f007 faa4 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801defc:	4b91      	ldr	r3, [pc, #580]	; (801e144 <ThreadSecurityTask+0x131c>)
 801defe:	681b      	ldr	r3, [r3, #0]
 801df00:	4618      	mov	r0, r3
 801df02:	f7f8 ff1b 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801df06:	4b8f      	ldr	r3, [pc, #572]	; (801e144 <ThreadSecurityTask+0x131c>)
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	f04f 31ff 	mov.w	r1, #4294967295
 801df0e:	4618      	mov	r0, r3
 801df10:	f7f8 fec6 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801df14:	2100      	movs	r1, #0
 801df16:	f242 0002 	movw	r0, #8194	; 0x2002
 801df1a:	f007 fa93 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 801df1e:	2105      	movs	r1, #5
 801df20:	f242 0003 	movw	r0, #8195	; 0x2003
 801df24:	f007 fa8e 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801df28:	4b86      	ldr	r3, [pc, #536]	; (801e144 <ThreadSecurityTask+0x131c>)
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	4618      	mov	r0, r3
 801df2e:	f7f8 ff05 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801df32:	4b84      	ldr	r3, [pc, #528]	; (801e144 <ThreadSecurityTask+0x131c>)
 801df34:	681b      	ldr	r3, [r3, #0]
 801df36:	f04f 31ff 	mov.w	r1, #4294967295
 801df3a:	4618      	mov	r0, r3
 801df3c:	f7f8 feb0 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801df40:	2100      	movs	r1, #0
 801df42:	f242 0020 	movw	r0, #8224	; 0x2020
 801df46:	f007 fa7d 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 801df4a:	210a      	movs	r1, #10
 801df4c:	f242 0021 	movw	r0, #8225	; 0x2021
 801df50:	f007 fa78 	bl	8025444 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 801df54:	4b7c      	ldr	r3, [pc, #496]	; (801e148 <ThreadSecurityTask+0x1320>)
 801df56:	220a      	movs	r2, #10
 801df58:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 801df5a:	4b7a      	ldr	r3, [pc, #488]	; (801e144 <ThreadSecurityTask+0x131c>)
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	4618      	mov	r0, r3
 801df60:	f7f8 feec 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801df64:	4b77      	ldr	r3, [pc, #476]	; (801e144 <ThreadSecurityTask+0x131c>)
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	f04f 31ff 	mov.w	r1, #4294967295
 801df6c:	4618      	mov	r0, r3
 801df6e:	f7f8 fe97 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801df72:	2100      	movs	r1, #0
 801df74:	f242 106e 	movw	r0, #8558	; 0x216e
 801df78:	f007 fa64 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801df7c:	2101      	movs	r1, #1
 801df7e:	f242 106f 	movw	r0, #8559	; 0x216f
 801df82:	f007 fa5f 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801df86:	4b6f      	ldr	r3, [pc, #444]	; (801e144 <ThreadSecurityTask+0x131c>)
 801df88:	681b      	ldr	r3, [r3, #0]
 801df8a:	4618      	mov	r0, r3
 801df8c:	f7f8 fed6 	bl	8016d3c <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 801df90:	4b6e      	ldr	r3, [pc, #440]	; (801e14c <ThreadSecurityTask+0x1324>)
 801df92:	681b      	ldr	r3, [r3, #0]
 801df94:	4618      	mov	r0, r3
 801df96:	f7f9 f8b3 	bl	8017100 <osThreadResume>
				if(button_state2<10)
 801df9a:	e015      	b.n	801dfc8 <ThreadSecurityTask+0x11a0>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x02) != 0x00 ) )
 801df9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801dfa0:	4865      	ldr	r0, [pc, #404]	; (801e138 <ThreadSecurityTask+0x1310>)
 801dfa2:	f7f5 f8ff 	bl	80131a4 <HAL_GPIO_ReadPin>
 801dfa6:	4603      	mov	r3, r0
 801dfa8:	2b01      	cmp	r3, #1
 801dfaa:	d10e      	bne.n	801dfca <ThreadSecurityTask+0x11a2>
 801dfac:	4b63      	ldr	r3, [pc, #396]	; (801e13c <ThreadSecurityTask+0x1314>)
 801dfae:	885b      	ldrh	r3, [r3, #2]
 801dfb0:	f003 0302 	and.w	r3, r3, #2
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	d008      	beq.n	801dfca <ThreadSecurityTask+0x11a2>
			{
				if(button_state2>0)
 801dfb8:	4b61      	ldr	r3, [pc, #388]	; (801e140 <ThreadSecurityTask+0x1318>)
 801dfba:	781b      	ldrb	r3, [r3, #0]
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	d004      	beq.n	801dfca <ThreadSecurityTask+0x11a2>
				{
					button_state2 = 0;
 801dfc0:	4b5f      	ldr	r3, [pc, #380]	; (801e140 <ThreadSecurityTask+0x1318>)
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	701a      	strb	r2, [r3, #0]
 801dfc6:	e000      	b.n	801dfca <ThreadSecurityTask+0x11a2>
				if(button_state2<10)
 801dfc8:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №3--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x04) != 0x00 ) )
 801dfca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801dfce:	485a      	ldr	r0, [pc, #360]	; (801e138 <ThreadSecurityTask+0x1310>)
 801dfd0:	f7f5 f8e8 	bl	80131a4 <HAL_GPIO_ReadPin>
 801dfd4:	4603      	mov	r3, r0
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	f040 8098 	bne.w	801e10c <ThreadSecurityTask+0x12e4>
 801dfdc:	4b57      	ldr	r3, [pc, #348]	; (801e13c <ThreadSecurityTask+0x1314>)
 801dfde:	885b      	ldrh	r3, [r3, #2]
 801dfe0:	f003 0304 	and.w	r3, r3, #4
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	f000 8091 	beq.w	801e10c <ThreadSecurityTask+0x12e4>
			{
				if(button_state3<10)
 801dfea:	4b59      	ldr	r3, [pc, #356]	; (801e150 <ThreadSecurityTask+0x1328>)
 801dfec:	781b      	ldrb	r3, [r3, #0]
 801dfee:	2b09      	cmp	r3, #9
 801dff0:	f200 80b0 	bhi.w	801e154 <ThreadSecurityTask+0x132c>
				{
					button_state3++;
 801dff4:	4b56      	ldr	r3, [pc, #344]	; (801e150 <ThreadSecurityTask+0x1328>)
 801dff6:	781b      	ldrb	r3, [r3, #0]
 801dff8:	3301      	adds	r3, #1
 801dffa:	b2da      	uxtb	r2, r3
 801dffc:	4b54      	ldr	r3, [pc, #336]	; (801e150 <ThreadSecurityTask+0x1328>)
 801dffe:	701a      	strb	r2, [r3, #0]
					if(button_state3==10)
 801e000:	4b53      	ldr	r3, [pc, #332]	; (801e150 <ThreadSecurityTask+0x1328>)
 801e002:	781b      	ldrb	r3, [r3, #0]
 801e004:	2b0a      	cmp	r3, #10
 801e006:	f040 80a5 	bne.w	801e154 <ThreadSecurityTask+0x132c>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 801e00a:	4b4c      	ldr	r3, [pc, #304]	; (801e13c <ThreadSecurityTask+0x1314>)
 801e00c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801e010:	2b00      	cmp	r3, #0
 801e012:	d101      	bne.n	801e018 <ThreadSecurityTask+0x11f0>
						{
							BUZ_ON();
 801e014:	f007 fac4 	bl	80255a0 <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e018:	4b4a      	ldr	r3, [pc, #296]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e01a:	681b      	ldr	r3, [r3, #0]
 801e01c:	f04f 31ff 	mov.w	r1, #4294967295
 801e020:	4618      	mov	r0, r3
 801e022:	f7f8 fe3d 	bl	8016ca0 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 801e026:	f107 030f 	add.w	r3, r7, #15
 801e02a:	4619      	mov	r1, r3
 801e02c:	f242 0009 	movw	r0, #8201	; 0x2009
 801e030:	f007 f9ce 	bl	80253d0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 801e034:	4b43      	ldr	r3, [pc, #268]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e036:	681b      	ldr	r3, [r3, #0]
 801e038:	4618      	mov	r0, r3
 801e03a:	f7f8 fe7f 	bl	8016d3c <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x04;
 801e03e:	7bfb      	ldrb	r3, [r7, #15]
 801e040:	f043 0304 	orr.w	r3, r3, #4
 801e044:	b2db      	uxtb	r3, r3
 801e046:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e048:	4b3e      	ldr	r3, [pc, #248]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	f04f 31ff 	mov.w	r1, #4294967295
 801e050:	4618      	mov	r0, r3
 801e052:	f7f8 fe25 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 801e056:	2100      	movs	r1, #0
 801e058:	f242 0008 	movw	r0, #8200	; 0x2008
 801e05c:	f007 f9f2 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 801e060:	7bfb      	ldrb	r3, [r7, #15]
 801e062:	4619      	mov	r1, r3
 801e064:	f242 0009 	movw	r0, #8201	; 0x2009
 801e068:	f007 f9ec 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e06c:	4b35      	ldr	r3, [pc, #212]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	4618      	mov	r0, r3
 801e072:	f7f8 fe63 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e076:	4b33      	ldr	r3, [pc, #204]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	f04f 31ff 	mov.w	r1, #4294967295
 801e07e:	4618      	mov	r0, r3
 801e080:	f7f8 fe0e 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801e084:	2100      	movs	r1, #0
 801e086:	f242 0002 	movw	r0, #8194	; 0x2002
 801e08a:	f007 f9db 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 801e08e:	2105      	movs	r1, #5
 801e090:	f242 0003 	movw	r0, #8195	; 0x2003
 801e094:	f007 f9d6 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e098:	4b2a      	ldr	r3, [pc, #168]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	4618      	mov	r0, r3
 801e09e:	f7f8 fe4d 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e0a2:	4b28      	ldr	r3, [pc, #160]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	f04f 31ff 	mov.w	r1, #4294967295
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	f7f8 fdf8 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801e0b0:	2100      	movs	r1, #0
 801e0b2:	f242 0020 	movw	r0, #8224	; 0x2020
 801e0b6:	f007 f9c5 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 801e0ba:	210a      	movs	r1, #10
 801e0bc:	f242 0021 	movw	r0, #8225	; 0x2021
 801e0c0:	f007 f9c0 	bl	8025444 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 801e0c4:	4b20      	ldr	r3, [pc, #128]	; (801e148 <ThreadSecurityTask+0x1320>)
 801e0c6:	220a      	movs	r2, #10
 801e0c8:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 801e0ca:	4b1e      	ldr	r3, [pc, #120]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	4618      	mov	r0, r3
 801e0d0:	f7f8 fe34 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e0d4:	4b1b      	ldr	r3, [pc, #108]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	f04f 31ff 	mov.w	r1, #4294967295
 801e0dc:	4618      	mov	r0, r3
 801e0de:	f7f8 fddf 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801e0e2:	2100      	movs	r1, #0
 801e0e4:	f242 106e 	movw	r0, #8558	; 0x216e
 801e0e8:	f007 f9ac 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801e0ec:	2101      	movs	r1, #1
 801e0ee:	f242 106f 	movw	r0, #8559	; 0x216f
 801e0f2:	f007 f9a7 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e0f6:	4b13      	ldr	r3, [pc, #76]	; (801e144 <ThreadSecurityTask+0x131c>)
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	4618      	mov	r0, r3
 801e0fc:	f7f8 fe1e 	bl	8016d3c <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 801e100:	4b12      	ldr	r3, [pc, #72]	; (801e14c <ThreadSecurityTask+0x1324>)
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	4618      	mov	r0, r3
 801e106:	f7f8 fffb 	bl	8017100 <osThreadResume>
				if(button_state3<10)
 801e10a:	e023      	b.n	801e154 <ThreadSecurityTask+0x132c>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x04) != 0x00 ) )
 801e10c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801e110:	4809      	ldr	r0, [pc, #36]	; (801e138 <ThreadSecurityTask+0x1310>)
 801e112:	f7f5 f847 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e116:	4603      	mov	r3, r0
 801e118:	2b01      	cmp	r3, #1
 801e11a:	d11c      	bne.n	801e156 <ThreadSecurityTask+0x132e>
 801e11c:	4b07      	ldr	r3, [pc, #28]	; (801e13c <ThreadSecurityTask+0x1314>)
 801e11e:	885b      	ldrh	r3, [r3, #2]
 801e120:	f003 0304 	and.w	r3, r3, #4
 801e124:	2b00      	cmp	r3, #0
 801e126:	d016      	beq.n	801e156 <ThreadSecurityTask+0x132e>
			{
				if(button_state3>0)
 801e128:	4b09      	ldr	r3, [pc, #36]	; (801e150 <ThreadSecurityTask+0x1328>)
 801e12a:	781b      	ldrb	r3, [r3, #0]
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	d012      	beq.n	801e156 <ThreadSecurityTask+0x132e>
				{
					button_state3 = 0;
 801e130:	4b07      	ldr	r3, [pc, #28]	; (801e150 <ThreadSecurityTask+0x1328>)
 801e132:	2200      	movs	r2, #0
 801e134:	701a      	strb	r2, [r3, #0]
 801e136:	e00e      	b.n	801e156 <ThreadSecurityTask+0x132e>
 801e138:	40021400 	.word	0x40021400
 801e13c:	2000a1cc 	.word	0x2000a1cc
 801e140:	20007ff1 	.word	0x20007ff1
 801e144:	20009a6c 	.word	0x20009a6c
 801e148:	2000a10c 	.word	0x2000a10c
 801e14c:	2000969c 	.word	0x2000969c
 801e150:	20007ff2 	.word	0x20007ff2
				if(button_state3<10)
 801e154:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №4--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x08) != 0x00 ) )
 801e156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e15a:	48b6      	ldr	r0, [pc, #728]	; (801e434 <ThreadSecurityTask+0x160c>)
 801e15c:	f7f5 f822 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e160:	4603      	mov	r3, r0
 801e162:	2b00      	cmp	r3, #0
 801e164:	f040 8098 	bne.w	801e298 <ThreadSecurityTask+0x1470>
 801e168:	4bb3      	ldr	r3, [pc, #716]	; (801e438 <ThreadSecurityTask+0x1610>)
 801e16a:	885b      	ldrh	r3, [r3, #2]
 801e16c:	f003 0308 	and.w	r3, r3, #8
 801e170:	2b00      	cmp	r3, #0
 801e172:	f000 8091 	beq.w	801e298 <ThreadSecurityTask+0x1470>
			{
				if(button_state4<10)
 801e176:	4bb1      	ldr	r3, [pc, #708]	; (801e43c <ThreadSecurityTask+0x1614>)
 801e178:	781b      	ldrb	r3, [r3, #0]
 801e17a:	2b09      	cmp	r3, #9
 801e17c:	f200 80a2 	bhi.w	801e2c4 <ThreadSecurityTask+0x149c>
				{
					button_state4++;
 801e180:	4bae      	ldr	r3, [pc, #696]	; (801e43c <ThreadSecurityTask+0x1614>)
 801e182:	781b      	ldrb	r3, [r3, #0]
 801e184:	3301      	adds	r3, #1
 801e186:	b2da      	uxtb	r2, r3
 801e188:	4bac      	ldr	r3, [pc, #688]	; (801e43c <ThreadSecurityTask+0x1614>)
 801e18a:	701a      	strb	r2, [r3, #0]
					if(button_state4==10)
 801e18c:	4bab      	ldr	r3, [pc, #684]	; (801e43c <ThreadSecurityTask+0x1614>)
 801e18e:	781b      	ldrb	r3, [r3, #0]
 801e190:	2b0a      	cmp	r3, #10
 801e192:	f040 8097 	bne.w	801e2c4 <ThreadSecurityTask+0x149c>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 801e196:	4ba8      	ldr	r3, [pc, #672]	; (801e438 <ThreadSecurityTask+0x1610>)
 801e198:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d101      	bne.n	801e1a4 <ThreadSecurityTask+0x137c>
						{
							BUZ_ON();
 801e1a0:	f007 f9fe 	bl	80255a0 <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e1a4:	4ba6      	ldr	r3, [pc, #664]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	f04f 31ff 	mov.w	r1, #4294967295
 801e1ac:	4618      	mov	r0, r3
 801e1ae:	f7f8 fd77 	bl	8016ca0 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 801e1b2:	f107 030f 	add.w	r3, r7, #15
 801e1b6:	4619      	mov	r1, r3
 801e1b8:	f242 0009 	movw	r0, #8201	; 0x2009
 801e1bc:	f007 f908 	bl	80253d0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 801e1c0:	4b9f      	ldr	r3, [pc, #636]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	4618      	mov	r0, r3
 801e1c6:	f7f8 fdb9 	bl	8016d3c <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x08;
 801e1ca:	7bfb      	ldrb	r3, [r7, #15]
 801e1cc:	f043 0308 	orr.w	r3, r3, #8
 801e1d0:	b2db      	uxtb	r3, r3
 801e1d2:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e1d4:	4b9a      	ldr	r3, [pc, #616]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e1d6:	681b      	ldr	r3, [r3, #0]
 801e1d8:	f04f 31ff 	mov.w	r1, #4294967295
 801e1dc:	4618      	mov	r0, r3
 801e1de:	f7f8 fd5f 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 801e1e2:	2100      	movs	r1, #0
 801e1e4:	f242 0008 	movw	r0, #8200	; 0x2008
 801e1e8:	f007 f92c 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 801e1ec:	7bfb      	ldrb	r3, [r7, #15]
 801e1ee:	4619      	mov	r1, r3
 801e1f0:	f242 0009 	movw	r0, #8201	; 0x2009
 801e1f4:	f007 f926 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e1f8:	4b91      	ldr	r3, [pc, #580]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	4618      	mov	r0, r3
 801e1fe:	f7f8 fd9d 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e202:	4b8f      	ldr	r3, [pc, #572]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	f04f 31ff 	mov.w	r1, #4294967295
 801e20a:	4618      	mov	r0, r3
 801e20c:	f7f8 fd48 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801e210:	2100      	movs	r1, #0
 801e212:	f242 0002 	movw	r0, #8194	; 0x2002
 801e216:	f007 f915 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 801e21a:	2105      	movs	r1, #5
 801e21c:	f242 0003 	movw	r0, #8195	; 0x2003
 801e220:	f007 f910 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e224:	4b86      	ldr	r3, [pc, #536]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e226:	681b      	ldr	r3, [r3, #0]
 801e228:	4618      	mov	r0, r3
 801e22a:	f7f8 fd87 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e22e:	4b84      	ldr	r3, [pc, #528]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	f04f 31ff 	mov.w	r1, #4294967295
 801e236:	4618      	mov	r0, r3
 801e238:	f7f8 fd32 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801e23c:	2100      	movs	r1, #0
 801e23e:	f242 0020 	movw	r0, #8224	; 0x2020
 801e242:	f007 f8ff 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 801e246:	210a      	movs	r1, #10
 801e248:	f242 0021 	movw	r0, #8225	; 0x2021
 801e24c:	f007 f8fa 	bl	8025444 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 801e250:	4b7c      	ldr	r3, [pc, #496]	; (801e444 <ThreadSecurityTask+0x161c>)
 801e252:	220a      	movs	r2, #10
 801e254:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 801e256:	4b7a      	ldr	r3, [pc, #488]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	4618      	mov	r0, r3
 801e25c:	f7f8 fd6e 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e260:	4b77      	ldr	r3, [pc, #476]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	f04f 31ff 	mov.w	r1, #4294967295
 801e268:	4618      	mov	r0, r3
 801e26a:	f7f8 fd19 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801e26e:	2100      	movs	r1, #0
 801e270:	f242 106e 	movw	r0, #8558	; 0x216e
 801e274:	f007 f8e6 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801e278:	2101      	movs	r1, #1
 801e27a:	f242 106f 	movw	r0, #8559	; 0x216f
 801e27e:	f007 f8e1 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e282:	4b6f      	ldr	r3, [pc, #444]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	4618      	mov	r0, r3
 801e288:	f7f8 fd58 	bl	8016d3c <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 801e28c:	4b6e      	ldr	r3, [pc, #440]	; (801e448 <ThreadSecurityTask+0x1620>)
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	4618      	mov	r0, r3
 801e292:	f7f8 ff35 	bl	8017100 <osThreadResume>
				if(button_state4<10)
 801e296:	e015      	b.n	801e2c4 <ThreadSecurityTask+0x149c>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x08) != 0x00 ) )
 801e298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e29c:	4865      	ldr	r0, [pc, #404]	; (801e434 <ThreadSecurityTask+0x160c>)
 801e29e:	f7f4 ff81 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e2a2:	4603      	mov	r3, r0
 801e2a4:	2b01      	cmp	r3, #1
 801e2a6:	d10e      	bne.n	801e2c6 <ThreadSecurityTask+0x149e>
 801e2a8:	4b63      	ldr	r3, [pc, #396]	; (801e438 <ThreadSecurityTask+0x1610>)
 801e2aa:	885b      	ldrh	r3, [r3, #2]
 801e2ac:	f003 0308 	and.w	r3, r3, #8
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d008      	beq.n	801e2c6 <ThreadSecurityTask+0x149e>
			{
				if(button_state4>0)
 801e2b4:	4b61      	ldr	r3, [pc, #388]	; (801e43c <ThreadSecurityTask+0x1614>)
 801e2b6:	781b      	ldrb	r3, [r3, #0]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d004      	beq.n	801e2c6 <ThreadSecurityTask+0x149e>
				{
					button_state4 = 0;
 801e2bc:	4b5f      	ldr	r3, [pc, #380]	; (801e43c <ThreadSecurityTask+0x1614>)
 801e2be:	2200      	movs	r2, #0
 801e2c0:	701a      	strb	r2, [r3, #0]
 801e2c2:	e000      	b.n	801e2c6 <ThreadSecurityTask+0x149e>
				if(button_state4<10)
 801e2c4:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №5--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x10) != 0x00 ) )
 801e2c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801e2ca:	485a      	ldr	r0, [pc, #360]	; (801e434 <ThreadSecurityTask+0x160c>)
 801e2cc:	f7f4 ff6a 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e2d0:	4603      	mov	r3, r0
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	f040 8098 	bne.w	801e408 <ThreadSecurityTask+0x15e0>
 801e2d8:	4b57      	ldr	r3, [pc, #348]	; (801e438 <ThreadSecurityTask+0x1610>)
 801e2da:	885b      	ldrh	r3, [r3, #2]
 801e2dc:	f003 0310 	and.w	r3, r3, #16
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	f000 8091 	beq.w	801e408 <ThreadSecurityTask+0x15e0>
			{
				if(button_state5<10)
 801e2e6:	4b59      	ldr	r3, [pc, #356]	; (801e44c <ThreadSecurityTask+0x1624>)
 801e2e8:	781b      	ldrb	r3, [r3, #0]
 801e2ea:	2b09      	cmp	r3, #9
 801e2ec:	f200 80b0 	bhi.w	801e450 <ThreadSecurityTask+0x1628>
				{
					button_state5++;
 801e2f0:	4b56      	ldr	r3, [pc, #344]	; (801e44c <ThreadSecurityTask+0x1624>)
 801e2f2:	781b      	ldrb	r3, [r3, #0]
 801e2f4:	3301      	adds	r3, #1
 801e2f6:	b2da      	uxtb	r2, r3
 801e2f8:	4b54      	ldr	r3, [pc, #336]	; (801e44c <ThreadSecurityTask+0x1624>)
 801e2fa:	701a      	strb	r2, [r3, #0]
					if(button_state5==10)
 801e2fc:	4b53      	ldr	r3, [pc, #332]	; (801e44c <ThreadSecurityTask+0x1624>)
 801e2fe:	781b      	ldrb	r3, [r3, #0]
 801e300:	2b0a      	cmp	r3, #10
 801e302:	f040 80a5 	bne.w	801e450 <ThreadSecurityTask+0x1628>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 801e306:	4b4c      	ldr	r3, [pc, #304]	; (801e438 <ThreadSecurityTask+0x1610>)
 801e308:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	d101      	bne.n	801e314 <ThreadSecurityTask+0x14ec>
						{
							BUZ_ON();
 801e310:	f007 f946 	bl	80255a0 <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e314:	4b4a      	ldr	r3, [pc, #296]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	f04f 31ff 	mov.w	r1, #4294967295
 801e31c:	4618      	mov	r0, r3
 801e31e:	f7f8 fcbf 	bl	8016ca0 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 801e322:	f107 030f 	add.w	r3, r7, #15
 801e326:	4619      	mov	r1, r3
 801e328:	f242 0009 	movw	r0, #8201	; 0x2009
 801e32c:	f007 f850 	bl	80253d0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 801e330:	4b43      	ldr	r3, [pc, #268]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	4618      	mov	r0, r3
 801e336:	f7f8 fd01 	bl	8016d3c <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x10;
 801e33a:	7bfb      	ldrb	r3, [r7, #15]
 801e33c:	f043 0310 	orr.w	r3, r3, #16
 801e340:	b2db      	uxtb	r3, r3
 801e342:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e344:	4b3e      	ldr	r3, [pc, #248]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	f04f 31ff 	mov.w	r1, #4294967295
 801e34c:	4618      	mov	r0, r3
 801e34e:	f7f8 fca7 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 801e352:	2100      	movs	r1, #0
 801e354:	f242 0008 	movw	r0, #8200	; 0x2008
 801e358:	f007 f874 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 801e35c:	7bfb      	ldrb	r3, [r7, #15]
 801e35e:	4619      	mov	r1, r3
 801e360:	f242 0009 	movw	r0, #8201	; 0x2009
 801e364:	f007 f86e 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e368:	4b35      	ldr	r3, [pc, #212]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	4618      	mov	r0, r3
 801e36e:	f7f8 fce5 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e372:	4b33      	ldr	r3, [pc, #204]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	f04f 31ff 	mov.w	r1, #4294967295
 801e37a:	4618      	mov	r0, r3
 801e37c:	f7f8 fc90 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801e380:	2100      	movs	r1, #0
 801e382:	f242 0002 	movw	r0, #8194	; 0x2002
 801e386:	f007 f85d 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 801e38a:	2105      	movs	r1, #5
 801e38c:	f242 0003 	movw	r0, #8195	; 0x2003
 801e390:	f007 f858 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e394:	4b2a      	ldr	r3, [pc, #168]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e396:	681b      	ldr	r3, [r3, #0]
 801e398:	4618      	mov	r0, r3
 801e39a:	f7f8 fccf 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e39e:	4b28      	ldr	r3, [pc, #160]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	f04f 31ff 	mov.w	r1, #4294967295
 801e3a6:	4618      	mov	r0, r3
 801e3a8:	f7f8 fc7a 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801e3ac:	2100      	movs	r1, #0
 801e3ae:	f242 0020 	movw	r0, #8224	; 0x2020
 801e3b2:	f007 f847 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 801e3b6:	210a      	movs	r1, #10
 801e3b8:	f242 0021 	movw	r0, #8225	; 0x2021
 801e3bc:	f007 f842 	bl	8025444 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 801e3c0:	4b20      	ldr	r3, [pc, #128]	; (801e444 <ThreadSecurityTask+0x161c>)
 801e3c2:	220a      	movs	r2, #10
 801e3c4:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 801e3c6:	4b1e      	ldr	r3, [pc, #120]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	4618      	mov	r0, r3
 801e3cc:	f7f8 fcb6 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e3d0:	4b1b      	ldr	r3, [pc, #108]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e3d2:	681b      	ldr	r3, [r3, #0]
 801e3d4:	f04f 31ff 	mov.w	r1, #4294967295
 801e3d8:	4618      	mov	r0, r3
 801e3da:	f7f8 fc61 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801e3de:	2100      	movs	r1, #0
 801e3e0:	f242 106e 	movw	r0, #8558	; 0x216e
 801e3e4:	f007 f82e 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801e3e8:	2101      	movs	r1, #1
 801e3ea:	f242 106f 	movw	r0, #8559	; 0x216f
 801e3ee:	f007 f829 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e3f2:	4b13      	ldr	r3, [pc, #76]	; (801e440 <ThreadSecurityTask+0x1618>)
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	4618      	mov	r0, r3
 801e3f8:	f7f8 fca0 	bl	8016d3c <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 801e3fc:	4b12      	ldr	r3, [pc, #72]	; (801e448 <ThreadSecurityTask+0x1620>)
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	4618      	mov	r0, r3
 801e402:	f7f8 fe7d 	bl	8017100 <osThreadResume>
				if(button_state5<10)
 801e406:	e023      	b.n	801e450 <ThreadSecurityTask+0x1628>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x10) != 0x00 ) )
 801e408:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801e40c:	4809      	ldr	r0, [pc, #36]	; (801e434 <ThreadSecurityTask+0x160c>)
 801e40e:	f7f4 fec9 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e412:	4603      	mov	r3, r0
 801e414:	2b01      	cmp	r3, #1
 801e416:	d11c      	bne.n	801e452 <ThreadSecurityTask+0x162a>
 801e418:	4b07      	ldr	r3, [pc, #28]	; (801e438 <ThreadSecurityTask+0x1610>)
 801e41a:	885b      	ldrh	r3, [r3, #2]
 801e41c:	f003 0310 	and.w	r3, r3, #16
 801e420:	2b00      	cmp	r3, #0
 801e422:	d016      	beq.n	801e452 <ThreadSecurityTask+0x162a>
			{
				if(button_state5>0)
 801e424:	4b09      	ldr	r3, [pc, #36]	; (801e44c <ThreadSecurityTask+0x1624>)
 801e426:	781b      	ldrb	r3, [r3, #0]
 801e428:	2b00      	cmp	r3, #0
 801e42a:	d012      	beq.n	801e452 <ThreadSecurityTask+0x162a>
				{
					button_state5 = 0;
 801e42c:	4b07      	ldr	r3, [pc, #28]	; (801e44c <ThreadSecurityTask+0x1624>)
 801e42e:	2200      	movs	r2, #0
 801e430:	701a      	strb	r2, [r3, #0]
 801e432:	e00e      	b.n	801e452 <ThreadSecurityTask+0x162a>
 801e434:	40021400 	.word	0x40021400
 801e438:	2000a1cc 	.word	0x2000a1cc
 801e43c:	20007ff3 	.word	0x20007ff3
 801e440:	20009a6c 	.word	0x20009a6c
 801e444:	2000a10c 	.word	0x2000a10c
 801e448:	2000969c 	.word	0x2000969c
 801e44c:	20007ff4 	.word	0x20007ff4
				if(button_state5<10)
 801e450:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №6--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x20) != 0x00 ) )
 801e452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801e456:	48b3      	ldr	r0, [pc, #716]	; (801e724 <ThreadSecurityTask+0x18fc>)
 801e458:	f7f4 fea4 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e45c:	4603      	mov	r3, r0
 801e45e:	2b00      	cmp	r3, #0
 801e460:	f040 8098 	bne.w	801e594 <ThreadSecurityTask+0x176c>
 801e464:	4bb0      	ldr	r3, [pc, #704]	; (801e728 <ThreadSecurityTask+0x1900>)
 801e466:	885b      	ldrh	r3, [r3, #2]
 801e468:	f003 0320 	and.w	r3, r3, #32
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	f000 8091 	beq.w	801e594 <ThreadSecurityTask+0x176c>
			{
				if(button_state6<10)
 801e472:	4bae      	ldr	r3, [pc, #696]	; (801e72c <ThreadSecurityTask+0x1904>)
 801e474:	781b      	ldrb	r3, [r3, #0]
 801e476:	2b09      	cmp	r3, #9
 801e478:	f200 809e 	bhi.w	801e5b8 <ThreadSecurityTask+0x1790>
				{
					button_state6++;
 801e47c:	4bab      	ldr	r3, [pc, #684]	; (801e72c <ThreadSecurityTask+0x1904>)
 801e47e:	781b      	ldrb	r3, [r3, #0]
 801e480:	3301      	adds	r3, #1
 801e482:	b2da      	uxtb	r2, r3
 801e484:	4ba9      	ldr	r3, [pc, #676]	; (801e72c <ThreadSecurityTask+0x1904>)
 801e486:	701a      	strb	r2, [r3, #0]
					if(button_state6==10)
 801e488:	4ba8      	ldr	r3, [pc, #672]	; (801e72c <ThreadSecurityTask+0x1904>)
 801e48a:	781b      	ldrb	r3, [r3, #0]
 801e48c:	2b0a      	cmp	r3, #10
 801e48e:	f040 8093 	bne.w	801e5b8 <ThreadSecurityTask+0x1790>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 801e492:	4ba5      	ldr	r3, [pc, #660]	; (801e728 <ThreadSecurityTask+0x1900>)
 801e494:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801e498:	2b00      	cmp	r3, #0
 801e49a:	d101      	bne.n	801e4a0 <ThreadSecurityTask+0x1678>
						{
							BUZ_ON();
 801e49c:	f007 f880 	bl	80255a0 <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e4a0:	4ba3      	ldr	r3, [pc, #652]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	f04f 31ff 	mov.w	r1, #4294967295
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	f7f8 fbf9 	bl	8016ca0 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 801e4ae:	f107 030f 	add.w	r3, r7, #15
 801e4b2:	4619      	mov	r1, r3
 801e4b4:	f242 0009 	movw	r0, #8201	; 0x2009
 801e4b8:	f006 ff8a 	bl	80253d0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 801e4bc:	4b9c      	ldr	r3, [pc, #624]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	4618      	mov	r0, r3
 801e4c2:	f7f8 fc3b 	bl	8016d3c <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x20;
 801e4c6:	7bfb      	ldrb	r3, [r7, #15]
 801e4c8:	f043 0320 	orr.w	r3, r3, #32
 801e4cc:	b2db      	uxtb	r3, r3
 801e4ce:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e4d0:	4b97      	ldr	r3, [pc, #604]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	f04f 31ff 	mov.w	r1, #4294967295
 801e4d8:	4618      	mov	r0, r3
 801e4da:	f7f8 fbe1 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 801e4de:	2100      	movs	r1, #0
 801e4e0:	f242 0008 	movw	r0, #8200	; 0x2008
 801e4e4:	f006 ffae 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 801e4e8:	7bfb      	ldrb	r3, [r7, #15]
 801e4ea:	4619      	mov	r1, r3
 801e4ec:	f242 0009 	movw	r0, #8201	; 0x2009
 801e4f0:	f006 ffa8 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e4f4:	4b8e      	ldr	r3, [pc, #568]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	4618      	mov	r0, r3
 801e4fa:	f7f8 fc1f 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e4fe:	4b8c      	ldr	r3, [pc, #560]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	f04f 31ff 	mov.w	r1, #4294967295
 801e506:	4618      	mov	r0, r3
 801e508:	f7f8 fbca 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801e50c:	2100      	movs	r1, #0
 801e50e:	f242 0002 	movw	r0, #8194	; 0x2002
 801e512:	f006 ff97 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 801e516:	2105      	movs	r1, #5
 801e518:	f242 0003 	movw	r0, #8195	; 0x2003
 801e51c:	f006 ff92 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e520:	4b83      	ldr	r3, [pc, #524]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e522:	681b      	ldr	r3, [r3, #0]
 801e524:	4618      	mov	r0, r3
 801e526:	f7f8 fc09 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e52a:	4b81      	ldr	r3, [pc, #516]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	f04f 31ff 	mov.w	r1, #4294967295
 801e532:	4618      	mov	r0, r3
 801e534:	f7f8 fbb4 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801e538:	2100      	movs	r1, #0
 801e53a:	f242 0020 	movw	r0, #8224	; 0x2020
 801e53e:	f006 ff81 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 801e542:	210a      	movs	r1, #10
 801e544:	f242 0021 	movw	r0, #8225	; 0x2021
 801e548:	f006 ff7c 	bl	8025444 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 801e54c:	4b79      	ldr	r3, [pc, #484]	; (801e734 <ThreadSecurityTask+0x190c>)
 801e54e:	220a      	movs	r2, #10
 801e550:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 801e552:	4b77      	ldr	r3, [pc, #476]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e554:	681b      	ldr	r3, [r3, #0]
 801e556:	4618      	mov	r0, r3
 801e558:	f7f8 fbf0 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e55c:	4b74      	ldr	r3, [pc, #464]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	f04f 31ff 	mov.w	r1, #4294967295
 801e564:	4618      	mov	r0, r3
 801e566:	f7f8 fb9b 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801e56a:	2100      	movs	r1, #0
 801e56c:	f242 106e 	movw	r0, #8558	; 0x216e
 801e570:	f006 ff68 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801e574:	2101      	movs	r1, #1
 801e576:	f242 106f 	movw	r0, #8559	; 0x216f
 801e57a:	f006 ff63 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e57e:	4b6c      	ldr	r3, [pc, #432]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	4618      	mov	r0, r3
 801e584:	f7f8 fbda 	bl	8016d3c <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 801e588:	4b6b      	ldr	r3, [pc, #428]	; (801e738 <ThreadSecurityTask+0x1910>)
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	4618      	mov	r0, r3
 801e58e:	f7f8 fdb7 	bl	8017100 <osThreadResume>
				if(button_state6<10)
 801e592:	e011      	b.n	801e5b8 <ThreadSecurityTask+0x1790>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x20) != 0x00 ) )
 801e594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801e598:	4862      	ldr	r0, [pc, #392]	; (801e724 <ThreadSecurityTask+0x18fc>)
 801e59a:	f7f4 fe03 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e59e:	4603      	mov	r3, r0
 801e5a0:	2b01      	cmp	r3, #1
 801e5a2:	d10a      	bne.n	801e5ba <ThreadSecurityTask+0x1792>
 801e5a4:	4b60      	ldr	r3, [pc, #384]	; (801e728 <ThreadSecurityTask+0x1900>)
 801e5a6:	885b      	ldrh	r3, [r3, #2]
 801e5a8:	f003 0320 	and.w	r3, r3, #32
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d004      	beq.n	801e5ba <ThreadSecurityTask+0x1792>
			{
				if(button_state6>0)
 801e5b0:	4b5e      	ldr	r3, [pc, #376]	; (801e72c <ThreadSecurityTask+0x1904>)
 801e5b2:	781b      	ldrb	r3, [r3, #0]
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	e000      	b.n	801e5ba <ThreadSecurityTask+0x1792>
				if(button_state6<10)
 801e5b8:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №7--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x40) != 0x00 ) )
 801e5ba:	2101      	movs	r1, #1
 801e5bc:	485f      	ldr	r0, [pc, #380]	; (801e73c <ThreadSecurityTask+0x1914>)
 801e5be:	f7f4 fdf1 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e5c2:	4603      	mov	r3, r0
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	f040 8098 	bne.w	801e6fa <ThreadSecurityTask+0x18d2>
 801e5ca:	4b57      	ldr	r3, [pc, #348]	; (801e728 <ThreadSecurityTask+0x1900>)
 801e5cc:	885b      	ldrh	r3, [r3, #2]
 801e5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	f000 8091 	beq.w	801e6fa <ThreadSecurityTask+0x18d2>
			{
				if(button_state7<10)
 801e5d8:	4b59      	ldr	r3, [pc, #356]	; (801e740 <ThreadSecurityTask+0x1918>)
 801e5da:	781b      	ldrb	r3, [r3, #0]
 801e5dc:	2b09      	cmp	r3, #9
 801e5de:	f200 80b1 	bhi.w	801e744 <ThreadSecurityTask+0x191c>
				{
					button_state7++;
 801e5e2:	4b57      	ldr	r3, [pc, #348]	; (801e740 <ThreadSecurityTask+0x1918>)
 801e5e4:	781b      	ldrb	r3, [r3, #0]
 801e5e6:	3301      	adds	r3, #1
 801e5e8:	b2da      	uxtb	r2, r3
 801e5ea:	4b55      	ldr	r3, [pc, #340]	; (801e740 <ThreadSecurityTask+0x1918>)
 801e5ec:	701a      	strb	r2, [r3, #0]
					if(button_state7==10)
 801e5ee:	4b54      	ldr	r3, [pc, #336]	; (801e740 <ThreadSecurityTask+0x1918>)
 801e5f0:	781b      	ldrb	r3, [r3, #0]
 801e5f2:	2b0a      	cmp	r3, #10
 801e5f4:	f040 80a6 	bne.w	801e744 <ThreadSecurityTask+0x191c>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 801e5f8:	4b4b      	ldr	r3, [pc, #300]	; (801e728 <ThreadSecurityTask+0x1900>)
 801e5fa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d101      	bne.n	801e606 <ThreadSecurityTask+0x17de>
						{
							BUZ_ON();
 801e602:	f006 ffcd 	bl	80255a0 <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e606:	4b4a      	ldr	r3, [pc, #296]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e608:	681b      	ldr	r3, [r3, #0]
 801e60a:	f04f 31ff 	mov.w	r1, #4294967295
 801e60e:	4618      	mov	r0, r3
 801e610:	f7f8 fb46 	bl	8016ca0 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 801e614:	f107 030f 	add.w	r3, r7, #15
 801e618:	4619      	mov	r1, r3
 801e61a:	f242 0009 	movw	r0, #8201	; 0x2009
 801e61e:	f006 fed7 	bl	80253d0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 801e622:	4b43      	ldr	r3, [pc, #268]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e624:	681b      	ldr	r3, [r3, #0]
 801e626:	4618      	mov	r0, r3
 801e628:	f7f8 fb88 	bl	8016d3c <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x40;
 801e62c:	7bfb      	ldrb	r3, [r7, #15]
 801e62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e632:	b2db      	uxtb	r3, r3
 801e634:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e636:	4b3e      	ldr	r3, [pc, #248]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	f04f 31ff 	mov.w	r1, #4294967295
 801e63e:	4618      	mov	r0, r3
 801e640:	f7f8 fb2e 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 801e644:	2100      	movs	r1, #0
 801e646:	f242 0008 	movw	r0, #8200	; 0x2008
 801e64a:	f006 fefb 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 801e64e:	7bfb      	ldrb	r3, [r7, #15]
 801e650:	4619      	mov	r1, r3
 801e652:	f242 0009 	movw	r0, #8201	; 0x2009
 801e656:	f006 fef5 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e65a:	4b35      	ldr	r3, [pc, #212]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e65c:	681b      	ldr	r3, [r3, #0]
 801e65e:	4618      	mov	r0, r3
 801e660:	f7f8 fb6c 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e664:	4b32      	ldr	r3, [pc, #200]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	f04f 31ff 	mov.w	r1, #4294967295
 801e66c:	4618      	mov	r0, r3
 801e66e:	f7f8 fb17 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801e672:	2100      	movs	r1, #0
 801e674:	f242 0002 	movw	r0, #8194	; 0x2002
 801e678:	f006 fee4 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 801e67c:	2105      	movs	r1, #5
 801e67e:	f242 0003 	movw	r0, #8195	; 0x2003
 801e682:	f006 fedf 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e686:	4b2a      	ldr	r3, [pc, #168]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	4618      	mov	r0, r3
 801e68c:	f7f8 fb56 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e690:	4b27      	ldr	r3, [pc, #156]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	f04f 31ff 	mov.w	r1, #4294967295
 801e698:	4618      	mov	r0, r3
 801e69a:	f7f8 fb01 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801e69e:	2100      	movs	r1, #0
 801e6a0:	f242 0020 	movw	r0, #8224	; 0x2020
 801e6a4:	f006 fece 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 801e6a8:	210a      	movs	r1, #10
 801e6aa:	f242 0021 	movw	r0, #8225	; 0x2021
 801e6ae:	f006 fec9 	bl	8025444 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 801e6b2:	4b20      	ldr	r3, [pc, #128]	; (801e734 <ThreadSecurityTask+0x190c>)
 801e6b4:	220a      	movs	r2, #10
 801e6b6:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 801e6b8:	4b1d      	ldr	r3, [pc, #116]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	4618      	mov	r0, r3
 801e6be:	f7f8 fb3d 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e6c2:	4b1b      	ldr	r3, [pc, #108]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	f04f 31ff 	mov.w	r1, #4294967295
 801e6ca:	4618      	mov	r0, r3
 801e6cc:	f7f8 fae8 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801e6d0:	2100      	movs	r1, #0
 801e6d2:	f242 106e 	movw	r0, #8558	; 0x216e
 801e6d6:	f006 feb5 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801e6da:	2101      	movs	r1, #1
 801e6dc:	f242 106f 	movw	r0, #8559	; 0x216f
 801e6e0:	f006 feb0 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e6e4:	4b12      	ldr	r3, [pc, #72]	; (801e730 <ThreadSecurityTask+0x1908>)
 801e6e6:	681b      	ldr	r3, [r3, #0]
 801e6e8:	4618      	mov	r0, r3
 801e6ea:	f7f8 fb27 	bl	8016d3c <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 801e6ee:	4b12      	ldr	r3, [pc, #72]	; (801e738 <ThreadSecurityTask+0x1910>)
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	4618      	mov	r0, r3
 801e6f4:	f7f8 fd04 	bl	8017100 <osThreadResume>
				if(button_state7<10)
 801e6f8:	e024      	b.n	801e744 <ThreadSecurityTask+0x191c>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x40) != 0x00 ) )
 801e6fa:	2101      	movs	r1, #1
 801e6fc:	480f      	ldr	r0, [pc, #60]	; (801e73c <ThreadSecurityTask+0x1914>)
 801e6fe:	f7f4 fd51 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e702:	4603      	mov	r3, r0
 801e704:	2b01      	cmp	r3, #1
 801e706:	d11e      	bne.n	801e746 <ThreadSecurityTask+0x191e>
 801e708:	4b07      	ldr	r3, [pc, #28]	; (801e728 <ThreadSecurityTask+0x1900>)
 801e70a:	885b      	ldrh	r3, [r3, #2]
 801e70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e710:	2b00      	cmp	r3, #0
 801e712:	d018      	beq.n	801e746 <ThreadSecurityTask+0x191e>
			{
				if(button_state7>0)
 801e714:	4b0a      	ldr	r3, [pc, #40]	; (801e740 <ThreadSecurityTask+0x1918>)
 801e716:	781b      	ldrb	r3, [r3, #0]
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d014      	beq.n	801e746 <ThreadSecurityTask+0x191e>
				{
					button_state7 = 0;
 801e71c:	4b08      	ldr	r3, [pc, #32]	; (801e740 <ThreadSecurityTask+0x1918>)
 801e71e:	2200      	movs	r2, #0
 801e720:	701a      	strb	r2, [r3, #0]
 801e722:	e010      	b.n	801e746 <ThreadSecurityTask+0x191e>
 801e724:	40021400 	.word	0x40021400
 801e728:	2000a1cc 	.word	0x2000a1cc
 801e72c:	20007ff5 	.word	0x20007ff5
 801e730:	20009a6c 	.word	0x20009a6c
 801e734:	2000a10c 	.word	0x2000a10c
 801e738:	2000969c 	.word	0x2000969c
 801e73c:	40021800 	.word	0x40021800
 801e740:	20007ff6 	.word	0x20007ff6
				if(button_state7<10)
 801e744:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №8--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x80) != 0x00 ) )
 801e746:	2102      	movs	r1, #2
 801e748:	485c      	ldr	r0, [pc, #368]	; (801e8bc <ThreadSecurityTask+0x1a94>)
 801e74a:	f7f4 fd2b 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e74e:	4603      	mov	r3, r0
 801e750:	2b00      	cmp	r3, #0
 801e752:	f040 8098 	bne.w	801e886 <ThreadSecurityTask+0x1a5e>
 801e756:	4b5a      	ldr	r3, [pc, #360]	; (801e8c0 <ThreadSecurityTask+0x1a98>)
 801e758:	885b      	ldrh	r3, [r3, #2]
 801e75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e75e:	2b00      	cmp	r3, #0
 801e760:	f000 8091 	beq.w	801e886 <ThreadSecurityTask+0x1a5e>
			{
				if(button_state8<10)
 801e764:	4b57      	ldr	r3, [pc, #348]	; (801e8c4 <ThreadSecurityTask+0x1a9c>)
 801e766:	781b      	ldrb	r3, [r3, #0]
 801e768:	2b09      	cmp	r3, #9
 801e76a:	f200 80a1 	bhi.w	801e8b0 <ThreadSecurityTask+0x1a88>
				{
					button_state8++;
 801e76e:	4b55      	ldr	r3, [pc, #340]	; (801e8c4 <ThreadSecurityTask+0x1a9c>)
 801e770:	781b      	ldrb	r3, [r3, #0]
 801e772:	3301      	adds	r3, #1
 801e774:	b2da      	uxtb	r2, r3
 801e776:	4b53      	ldr	r3, [pc, #332]	; (801e8c4 <ThreadSecurityTask+0x1a9c>)
 801e778:	701a      	strb	r2, [r3, #0]
					if(button_state8==10)
 801e77a:	4b52      	ldr	r3, [pc, #328]	; (801e8c4 <ThreadSecurityTask+0x1a9c>)
 801e77c:	781b      	ldrb	r3, [r3, #0]
 801e77e:	2b0a      	cmp	r3, #10
 801e780:	f040 8096 	bne.w	801e8b0 <ThreadSecurityTask+0x1a88>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 801e784:	4b4e      	ldr	r3, [pc, #312]	; (801e8c0 <ThreadSecurityTask+0x1a98>)
 801e786:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801e78a:	2b00      	cmp	r3, #0
 801e78c:	d101      	bne.n	801e792 <ThreadSecurityTask+0x196a>
						{
							BUZ_ON();
 801e78e:	f006 ff07 	bl	80255a0 <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e792:	4b4d      	ldr	r3, [pc, #308]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e794:	681b      	ldr	r3, [r3, #0]
 801e796:	f04f 31ff 	mov.w	r1, #4294967295
 801e79a:	4618      	mov	r0, r3
 801e79c:	f7f8 fa80 	bl	8016ca0 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 801e7a0:	f107 030f 	add.w	r3, r7, #15
 801e7a4:	4619      	mov	r1, r3
 801e7a6:	f242 0009 	movw	r0, #8201	; 0x2009
 801e7aa:	f006 fe11 	bl	80253d0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 801e7ae:	4b46      	ldr	r3, [pc, #280]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e7b0:	681b      	ldr	r3, [r3, #0]
 801e7b2:	4618      	mov	r0, r3
 801e7b4:	f7f8 fac2 	bl	8016d3c <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x80;
 801e7b8:	7bfb      	ldrb	r3, [r7, #15]
 801e7ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801e7be:	b2db      	uxtb	r3, r3
 801e7c0:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e7c2:	4b41      	ldr	r3, [pc, #260]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	f04f 31ff 	mov.w	r1, #4294967295
 801e7ca:	4618      	mov	r0, r3
 801e7cc:	f7f8 fa68 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 801e7d0:	2100      	movs	r1, #0
 801e7d2:	f242 0008 	movw	r0, #8200	; 0x2008
 801e7d6:	f006 fe35 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 801e7da:	7bfb      	ldrb	r3, [r7, #15]
 801e7dc:	4619      	mov	r1, r3
 801e7de:	f242 0009 	movw	r0, #8201	; 0x2009
 801e7e2:	f006 fe2f 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e7e6:	4b38      	ldr	r3, [pc, #224]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e7e8:	681b      	ldr	r3, [r3, #0]
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	f7f8 faa6 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e7f0:	4b35      	ldr	r3, [pc, #212]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	f04f 31ff 	mov.w	r1, #4294967295
 801e7f8:	4618      	mov	r0, r3
 801e7fa:	f7f8 fa51 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 801e7fe:	2100      	movs	r1, #0
 801e800:	f242 0002 	movw	r0, #8194	; 0x2002
 801e804:	f006 fe1e 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 801e808:	2105      	movs	r1, #5
 801e80a:	f242 0003 	movw	r0, #8195	; 0x2003
 801e80e:	f006 fe19 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e812:	4b2d      	ldr	r3, [pc, #180]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	4618      	mov	r0, r3
 801e818:	f7f8 fa90 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e81c:	4b2a      	ldr	r3, [pc, #168]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	f04f 31ff 	mov.w	r1, #4294967295
 801e824:	4618      	mov	r0, r3
 801e826:	f7f8 fa3b 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 801e82a:	2100      	movs	r1, #0
 801e82c:	f242 0020 	movw	r0, #8224	; 0x2020
 801e830:	f006 fe08 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 801e834:	210a      	movs	r1, #10
 801e836:	f242 0021 	movw	r0, #8225	; 0x2021
 801e83a:	f006 fe03 	bl	8025444 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 801e83e:	4b23      	ldr	r3, [pc, #140]	; (801e8cc <ThreadSecurityTask+0x1aa4>)
 801e840:	220a      	movs	r2, #10
 801e842:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 801e844:	4b20      	ldr	r3, [pc, #128]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e846:	681b      	ldr	r3, [r3, #0]
 801e848:	4618      	mov	r0, r3
 801e84a:	f7f8 fa77 	bl	8016d3c <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e84e:	4b1e      	ldr	r3, [pc, #120]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	f04f 31ff 	mov.w	r1, #4294967295
 801e856:	4618      	mov	r0, r3
 801e858:	f7f8 fa22 	bl	8016ca0 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801e85c:	2100      	movs	r1, #0
 801e85e:	f242 106e 	movw	r0, #8558	; 0x216e
 801e862:	f006 fdef 	bl	8025444 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801e866:	2101      	movs	r1, #1
 801e868:	f242 106f 	movw	r0, #8559	; 0x216f
 801e86c:	f006 fdea 	bl	8025444 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e870:	4b15      	ldr	r3, [pc, #84]	; (801e8c8 <ThreadSecurityTask+0x1aa0>)
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	4618      	mov	r0, r3
 801e876:	f7f8 fa61 	bl	8016d3c <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 801e87a:	4b15      	ldr	r3, [pc, #84]	; (801e8d0 <ThreadSecurityTask+0x1aa8>)
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	4618      	mov	r0, r3
 801e880:	f7f8 fc3e 	bl	8017100 <osThreadResume>
				if(button_state8<10)
 801e884:	e014      	b.n	801e8b0 <ThreadSecurityTask+0x1a88>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x80) != 0x00 ) )
 801e886:	2102      	movs	r1, #2
 801e888:	480c      	ldr	r0, [pc, #48]	; (801e8bc <ThreadSecurityTask+0x1a94>)
 801e88a:	f7f4 fc8b 	bl	80131a4 <HAL_GPIO_ReadPin>
 801e88e:	4603      	mov	r3, r0
 801e890:	2b01      	cmp	r3, #1
 801e892:	d10e      	bne.n	801e8b2 <ThreadSecurityTask+0x1a8a>
 801e894:	4b0a      	ldr	r3, [pc, #40]	; (801e8c0 <ThreadSecurityTask+0x1a98>)
 801e896:	885b      	ldrh	r3, [r3, #2]
 801e898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	d008      	beq.n	801e8b2 <ThreadSecurityTask+0x1a8a>
			{
				if(button_state8>0)
 801e8a0:	4b08      	ldr	r3, [pc, #32]	; (801e8c4 <ThreadSecurityTask+0x1a9c>)
 801e8a2:	781b      	ldrb	r3, [r3, #0]
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d004      	beq.n	801e8b2 <ThreadSecurityTask+0x1a8a>
				{
					button_state8 = 0;
 801e8a8:	4b06      	ldr	r3, [pc, #24]	; (801e8c4 <ThreadSecurityTask+0x1a9c>)
 801e8aa:	2200      	movs	r2, #0
 801e8ac:	701a      	strb	r2, [r3, #0]
 801e8ae:	e000      	b.n	801e8b2 <ThreadSecurityTask+0x1a8a>
				if(button_state8<10)
 801e8b0:	bf00      	nop



		}

		osDelay(10);
 801e8b2:	200a      	movs	r0, #10
 801e8b4:	f7f8 f913 	bl	8016ade <osDelay>
		if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_RESET)
 801e8b8:	f7fe bad8 	b.w	801ce6c <ThreadSecurityTask+0x44>
 801e8bc:	40021800 	.word	0x40021800
 801e8c0:	2000a1cc 	.word	0x2000a1cc
 801e8c4:	20007ff7 	.word	0x20007ff7
 801e8c8:	20009a6c 	.word	0x20009a6c
 801e8cc:	2000a10c 	.word	0x2000a10c
 801e8d0:	2000969c 	.word	0x2000969c

0801e8d4 <meter_rx_buffer_clear>:
uint8_t current_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x43, 0x55, 0x52, 0x52, 0x45, 0x28, 0x29, 0x03, 0x5A};
uint8_t power_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x50, 0x4F, 0x57, 0x50, 0x50, 0x28, 0x29, 0x03, 0x6F};
uint8_t tarif_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x45, 0x54, 0x30, 0x50, 0x45, 0x28, 0x29, 0x03, 0x37};

void meter_rx_buffer_clear (void)
{
 801e8d4:	b480      	push	{r7}
 801e8d6:	b083      	sub	sp, #12
 801e8d8:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 801e8da:	2300      	movs	r3, #0
 801e8dc:	80fb      	strh	r3, [r7, #6]
 801e8de:	e006      	b.n	801e8ee <meter_rx_buffer_clear+0x1a>
	{
		meter_rx_buffer[i] = 0;
 801e8e0:	88fb      	ldrh	r3, [r7, #6]
 801e8e2:	4a08      	ldr	r2, [pc, #32]	; (801e904 <meter_rx_buffer_clear+0x30>)
 801e8e4:	2100      	movs	r1, #0
 801e8e6:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 801e8e8:	88fb      	ldrh	r3, [r7, #6]
 801e8ea:	3301      	adds	r3, #1
 801e8ec:	80fb      	strh	r3, [r7, #6]
 801e8ee:	88fb      	ldrh	r3, [r7, #6]
 801e8f0:	2bff      	cmp	r3, #255	; 0xff
 801e8f2:	d9f5      	bls.n	801e8e0 <meter_rx_buffer_clear+0xc>
	}
}
 801e8f4:	bf00      	nop
 801e8f6:	bf00      	nop
 801e8f8:	370c      	adds	r7, #12
 801e8fa:	46bd      	mov	sp, r7
 801e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e900:	4770      	bx	lr
 801e902:	bf00      	nop
 801e904:	200098e4 	.word	0x200098e4

0801e908 <ce303_voltage>:

void ce303_voltage (uint8_t meter_id) // функция чтения напряения из счетчика СЕ303
{
 801e908:	b580      	push	{r7, lr}
 801e90a:	b086      	sub	sp, #24
 801e90c:	af00      	add	r7, sp, #0
 801e90e:	4603      	mov	r3, r0
 801e910:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t voltage_a_state; // переменные состояния прочтения значений напряжения ( если переменная равна 0, то значение напряжения не прочитано, если 1 - значение прочитанно )
	uint8_t voltage_b_state;
	uint8_t voltage_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 801e912:	79fb      	ldrb	r3, [r7, #7]
 801e914:	2b63      	cmp	r3, #99	; 0x63
 801e916:	d962      	bls.n	801e9de <ce303_voltage+0xd6>
	{
		start_buf[0] = 0x2F;
 801e918:	4b9d      	ldr	r3, [pc, #628]	; (801eb90 <ce303_voltage+0x288>)
 801e91a:	222f      	movs	r2, #47	; 0x2f
 801e91c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801e91e:	4b9c      	ldr	r3, [pc, #624]	; (801eb90 <ce303_voltage+0x288>)
 801e920:	223f      	movs	r2, #63	; 0x3f
 801e922:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 801e924:	79fb      	ldrb	r3, [r7, #7]
 801e926:	4a9b      	ldr	r2, [pc, #620]	; (801eb94 <ce303_voltage+0x28c>)
 801e928:	fba2 2303 	umull	r2, r3, r2, r3
 801e92c:	095b      	lsrs	r3, r3, #5
 801e92e:	b2db      	uxtb	r3, r3
 801e930:	3330      	adds	r3, #48	; 0x30
 801e932:	b2da      	uxtb	r2, r3
 801e934:	4b96      	ldr	r3, [pc, #600]	; (801eb90 <ce303_voltage+0x288>)
 801e936:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 801e938:	79fa      	ldrb	r2, [r7, #7]
 801e93a:	79fb      	ldrb	r3, [r7, #7]
 801e93c:	4995      	ldr	r1, [pc, #596]	; (801eb94 <ce303_voltage+0x28c>)
 801e93e:	fba1 1303 	umull	r1, r3, r1, r3
 801e942:	095b      	lsrs	r3, r3, #5
 801e944:	b2db      	uxtb	r3, r3
 801e946:	4619      	mov	r1, r3
 801e948:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801e94c:	fb03 f301 	mul.w	r3, r3, r1
 801e950:	4413      	add	r3, r2
 801e952:	4a91      	ldr	r2, [pc, #580]	; (801eb98 <ce303_voltage+0x290>)
 801e954:	fb82 1203 	smull	r1, r2, r2, r3
 801e958:	1092      	asrs	r2, r2, #2
 801e95a:	17db      	asrs	r3, r3, #31
 801e95c:	1ad3      	subs	r3, r2, r3
 801e95e:	b2db      	uxtb	r3, r3
 801e960:	3330      	adds	r3, #48	; 0x30
 801e962:	b2da      	uxtb	r2, r3
 801e964:	4b8a      	ldr	r3, [pc, #552]	; (801eb90 <ce303_voltage+0x288>)
 801e966:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801e968:	79fa      	ldrb	r2, [r7, #7]
 801e96a:	79fb      	ldrb	r3, [r7, #7]
 801e96c:	4989      	ldr	r1, [pc, #548]	; (801eb94 <ce303_voltage+0x28c>)
 801e96e:	fba1 1303 	umull	r1, r3, r1, r3
 801e972:	095b      	lsrs	r3, r3, #5
 801e974:	b2db      	uxtb	r3, r3
 801e976:	4619      	mov	r1, r3
 801e978:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801e97c:	fb03 f301 	mul.w	r3, r3, r1
 801e980:	441a      	add	r2, r3
 801e982:	4b85      	ldr	r3, [pc, #532]	; (801eb98 <ce303_voltage+0x290>)
 801e984:	fb83 1302 	smull	r1, r3, r3, r2
 801e988:	1099      	asrs	r1, r3, #2
 801e98a:	17d3      	asrs	r3, r2, #31
 801e98c:	1ac9      	subs	r1, r1, r3
 801e98e:	460b      	mov	r3, r1
 801e990:	009b      	lsls	r3, r3, #2
 801e992:	440b      	add	r3, r1
 801e994:	005b      	lsls	r3, r3, #1
 801e996:	1ad1      	subs	r1, r2, r3
 801e998:	b2cb      	uxtb	r3, r1
 801e99a:	3330      	adds	r3, #48	; 0x30
 801e99c:	b2da      	uxtb	r2, r3
 801e99e:	4b7c      	ldr	r3, [pc, #496]	; (801eb90 <ce303_voltage+0x288>)
 801e9a0:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 801e9a2:	4b7b      	ldr	r3, [pc, #492]	; (801eb90 <ce303_voltage+0x288>)
 801e9a4:	2221      	movs	r2, #33	; 0x21
 801e9a6:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 801e9a8:	4b79      	ldr	r3, [pc, #484]	; (801eb90 <ce303_voltage+0x288>)
 801e9aa:	220d      	movs	r2, #13
 801e9ac:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 801e9ae:	4b78      	ldr	r3, [pc, #480]	; (801eb90 <ce303_voltage+0x288>)
 801e9b0:	220a      	movs	r2, #10
 801e9b2:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 801e9b4:	4b79      	ldr	r3, [pc, #484]	; (801eb9c <ce303_voltage+0x294>)
 801e9b6:	2200      	movs	r2, #0
 801e9b8:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801e9ba:	f7ff ff8b 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801e9be:	2201      	movs	r2, #1
 801e9c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e9c4:	4876      	ldr	r0, [pc, #472]	; (801eba0 <ce303_voltage+0x298>)
 801e9c6:	f7f4 fc05 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 801e9ca:	2208      	movs	r2, #8
 801e9cc:	4970      	ldr	r1, [pc, #448]	; (801eb90 <ce303_voltage+0x288>)
 801e9ce:	4875      	ldr	r0, [pc, #468]	; (801eba4 <ce303_voltage+0x29c>)
 801e9d0:	f7f6 feb8 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801e9d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e9d8:	f7f3 f948 	bl	8011c6c <HAL_Delay>
 801e9dc:	e072      	b.n	801eac4 <ce303_voltage+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 801e9de:	79fb      	ldrb	r3, [r7, #7]
 801e9e0:	2b09      	cmp	r3, #9
 801e9e2:	d944      	bls.n	801ea6e <ce303_voltage+0x166>
 801e9e4:	79fb      	ldrb	r3, [r7, #7]
 801e9e6:	2b63      	cmp	r3, #99	; 0x63
 801e9e8:	d841      	bhi.n	801ea6e <ce303_voltage+0x166>
	{
		start_buf[0] = 0x2F;
 801e9ea:	4b69      	ldr	r3, [pc, #420]	; (801eb90 <ce303_voltage+0x288>)
 801e9ec:	222f      	movs	r2, #47	; 0x2f
 801e9ee:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801e9f0:	4b67      	ldr	r3, [pc, #412]	; (801eb90 <ce303_voltage+0x288>)
 801e9f2:	223f      	movs	r2, #63	; 0x3f
 801e9f4:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 801e9f6:	79fb      	ldrb	r3, [r7, #7]
 801e9f8:	4a6b      	ldr	r2, [pc, #428]	; (801eba8 <ce303_voltage+0x2a0>)
 801e9fa:	fba2 2303 	umull	r2, r3, r2, r3
 801e9fe:	08db      	lsrs	r3, r3, #3
 801ea00:	b2db      	uxtb	r3, r3
 801ea02:	3330      	adds	r3, #48	; 0x30
 801ea04:	b2da      	uxtb	r2, r3
 801ea06:	4b62      	ldr	r3, [pc, #392]	; (801eb90 <ce303_voltage+0x288>)
 801ea08:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 801ea0a:	79fb      	ldrb	r3, [r7, #7]
 801ea0c:	4a66      	ldr	r2, [pc, #408]	; (801eba8 <ce303_voltage+0x2a0>)
 801ea0e:	fba2 2303 	umull	r2, r3, r2, r3
 801ea12:	08db      	lsrs	r3, r3, #3
 801ea14:	b2db      	uxtb	r3, r3
 801ea16:	461a      	mov	r2, r3
 801ea18:	0152      	lsls	r2, r2, #5
 801ea1a:	1ad2      	subs	r2, r2, r3
 801ea1c:	0092      	lsls	r2, r2, #2
 801ea1e:	1ad3      	subs	r3, r2, r3
 801ea20:	005b      	lsls	r3, r3, #1
 801ea22:	b2da      	uxtb	r2, r3
 801ea24:	79fb      	ldrb	r3, [r7, #7]
 801ea26:	4413      	add	r3, r2
 801ea28:	b2db      	uxtb	r3, r3
 801ea2a:	3330      	adds	r3, #48	; 0x30
 801ea2c:	b2da      	uxtb	r2, r3
 801ea2e:	4b58      	ldr	r3, [pc, #352]	; (801eb90 <ce303_voltage+0x288>)
 801ea30:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 801ea32:	4b57      	ldr	r3, [pc, #348]	; (801eb90 <ce303_voltage+0x288>)
 801ea34:	2221      	movs	r2, #33	; 0x21
 801ea36:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 801ea38:	4b55      	ldr	r3, [pc, #340]	; (801eb90 <ce303_voltage+0x288>)
 801ea3a:	220d      	movs	r2, #13
 801ea3c:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 801ea3e:	4b54      	ldr	r3, [pc, #336]	; (801eb90 <ce303_voltage+0x288>)
 801ea40:	220a      	movs	r2, #10
 801ea42:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 801ea44:	4b55      	ldr	r3, [pc, #340]	; (801eb9c <ce303_voltage+0x294>)
 801ea46:	2200      	movs	r2, #0
 801ea48:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801ea4a:	f7ff ff43 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801ea4e:	2201      	movs	r2, #1
 801ea50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ea54:	4852      	ldr	r0, [pc, #328]	; (801eba0 <ce303_voltage+0x298>)
 801ea56:	f7f4 fbbd 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 801ea5a:	2207      	movs	r2, #7
 801ea5c:	494c      	ldr	r1, [pc, #304]	; (801eb90 <ce303_voltage+0x288>)
 801ea5e:	4851      	ldr	r0, [pc, #324]	; (801eba4 <ce303_voltage+0x29c>)
 801ea60:	f7f6 fe70 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801ea64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ea68:	f7f3 f900 	bl	8011c6c <HAL_Delay>
 801ea6c:	e02a      	b.n	801eac4 <ce303_voltage+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 801ea6e:	79fb      	ldrb	r3, [r7, #7]
 801ea70:	2b09      	cmp	r3, #9
 801ea72:	d827      	bhi.n	801eac4 <ce303_voltage+0x1bc>
	{
		start_buf[0] = 0x2F;
 801ea74:	4b46      	ldr	r3, [pc, #280]	; (801eb90 <ce303_voltage+0x288>)
 801ea76:	222f      	movs	r2, #47	; 0x2f
 801ea78:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801ea7a:	4b45      	ldr	r3, [pc, #276]	; (801eb90 <ce303_voltage+0x288>)
 801ea7c:	223f      	movs	r2, #63	; 0x3f
 801ea7e:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 801ea80:	79fb      	ldrb	r3, [r7, #7]
 801ea82:	3330      	adds	r3, #48	; 0x30
 801ea84:	b2da      	uxtb	r2, r3
 801ea86:	4b42      	ldr	r3, [pc, #264]	; (801eb90 <ce303_voltage+0x288>)
 801ea88:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 801ea8a:	4b41      	ldr	r3, [pc, #260]	; (801eb90 <ce303_voltage+0x288>)
 801ea8c:	2221      	movs	r2, #33	; 0x21
 801ea8e:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 801ea90:	4b3f      	ldr	r3, [pc, #252]	; (801eb90 <ce303_voltage+0x288>)
 801ea92:	220d      	movs	r2, #13
 801ea94:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 801ea96:	4b3e      	ldr	r3, [pc, #248]	; (801eb90 <ce303_voltage+0x288>)
 801ea98:	220a      	movs	r2, #10
 801ea9a:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 801ea9c:	4b3f      	ldr	r3, [pc, #252]	; (801eb9c <ce303_voltage+0x294>)
 801ea9e:	2200      	movs	r2, #0
 801eaa0:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801eaa2:	f7ff ff17 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801eaa6:	2201      	movs	r2, #1
 801eaa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801eaac:	483c      	ldr	r0, [pc, #240]	; (801eba0 <ce303_voltage+0x298>)
 801eaae:	f7f4 fb91 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 801eab2:	2206      	movs	r2, #6
 801eab4:	4936      	ldr	r1, [pc, #216]	; (801eb90 <ce303_voltage+0x288>)
 801eab6:	483b      	ldr	r0, [pc, #236]	; (801eba4 <ce303_voltage+0x29c>)
 801eab8:	f7f6 fe44 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801eabc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801eac0:	f7f3 f8d4 	bl	8011c6c <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 801eac4:	79fb      	ldrb	r3, [r7, #7]
 801eac6:	2b63      	cmp	r3, #99	; 0x63
 801eac8:	d970      	bls.n	801ebac <ce303_voltage+0x2a4>
	{
		start_buf[0] = 0x2F;
 801eaca:	4b31      	ldr	r3, [pc, #196]	; (801eb90 <ce303_voltage+0x288>)
 801eacc:	222f      	movs	r2, #47	; 0x2f
 801eace:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801ead0:	4b2f      	ldr	r3, [pc, #188]	; (801eb90 <ce303_voltage+0x288>)
 801ead2:	223f      	movs	r2, #63	; 0x3f
 801ead4:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 801ead6:	79fb      	ldrb	r3, [r7, #7]
 801ead8:	4a2e      	ldr	r2, [pc, #184]	; (801eb94 <ce303_voltage+0x28c>)
 801eada:	fba2 2303 	umull	r2, r3, r2, r3
 801eade:	095b      	lsrs	r3, r3, #5
 801eae0:	b2db      	uxtb	r3, r3
 801eae2:	3330      	adds	r3, #48	; 0x30
 801eae4:	b2da      	uxtb	r2, r3
 801eae6:	4b2a      	ldr	r3, [pc, #168]	; (801eb90 <ce303_voltage+0x288>)
 801eae8:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 801eaea:	79fa      	ldrb	r2, [r7, #7]
 801eaec:	79fb      	ldrb	r3, [r7, #7]
 801eaee:	4929      	ldr	r1, [pc, #164]	; (801eb94 <ce303_voltage+0x28c>)
 801eaf0:	fba1 1303 	umull	r1, r3, r1, r3
 801eaf4:	095b      	lsrs	r3, r3, #5
 801eaf6:	b2db      	uxtb	r3, r3
 801eaf8:	4619      	mov	r1, r3
 801eafa:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801eafe:	fb03 f301 	mul.w	r3, r3, r1
 801eb02:	4413      	add	r3, r2
 801eb04:	4a24      	ldr	r2, [pc, #144]	; (801eb98 <ce303_voltage+0x290>)
 801eb06:	fb82 1203 	smull	r1, r2, r2, r3
 801eb0a:	1092      	asrs	r2, r2, #2
 801eb0c:	17db      	asrs	r3, r3, #31
 801eb0e:	1ad3      	subs	r3, r2, r3
 801eb10:	b2db      	uxtb	r3, r3
 801eb12:	3330      	adds	r3, #48	; 0x30
 801eb14:	b2da      	uxtb	r2, r3
 801eb16:	4b1e      	ldr	r3, [pc, #120]	; (801eb90 <ce303_voltage+0x288>)
 801eb18:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801eb1a:	79fa      	ldrb	r2, [r7, #7]
 801eb1c:	79fb      	ldrb	r3, [r7, #7]
 801eb1e:	491d      	ldr	r1, [pc, #116]	; (801eb94 <ce303_voltage+0x28c>)
 801eb20:	fba1 1303 	umull	r1, r3, r1, r3
 801eb24:	095b      	lsrs	r3, r3, #5
 801eb26:	b2db      	uxtb	r3, r3
 801eb28:	4619      	mov	r1, r3
 801eb2a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801eb2e:	fb03 f301 	mul.w	r3, r3, r1
 801eb32:	441a      	add	r2, r3
 801eb34:	4b18      	ldr	r3, [pc, #96]	; (801eb98 <ce303_voltage+0x290>)
 801eb36:	fb83 1302 	smull	r1, r3, r3, r2
 801eb3a:	1099      	asrs	r1, r3, #2
 801eb3c:	17d3      	asrs	r3, r2, #31
 801eb3e:	1ac9      	subs	r1, r1, r3
 801eb40:	460b      	mov	r3, r1
 801eb42:	009b      	lsls	r3, r3, #2
 801eb44:	440b      	add	r3, r1
 801eb46:	005b      	lsls	r3, r3, #1
 801eb48:	1ad1      	subs	r1, r2, r3
 801eb4a:	b2cb      	uxtb	r3, r1
 801eb4c:	3330      	adds	r3, #48	; 0x30
 801eb4e:	b2da      	uxtb	r2, r3
 801eb50:	4b0f      	ldr	r3, [pc, #60]	; (801eb90 <ce303_voltage+0x288>)
 801eb52:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 801eb54:	4b0e      	ldr	r3, [pc, #56]	; (801eb90 <ce303_voltage+0x288>)
 801eb56:	2221      	movs	r2, #33	; 0x21
 801eb58:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 801eb5a:	4b0d      	ldr	r3, [pc, #52]	; (801eb90 <ce303_voltage+0x288>)
 801eb5c:	220d      	movs	r2, #13
 801eb5e:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 801eb60:	4b0b      	ldr	r3, [pc, #44]	; (801eb90 <ce303_voltage+0x288>)
 801eb62:	220a      	movs	r2, #10
 801eb64:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 801eb66:	4b0d      	ldr	r3, [pc, #52]	; (801eb9c <ce303_voltage+0x294>)
 801eb68:	2200      	movs	r2, #0
 801eb6a:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801eb6c:	f7ff feb2 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801eb70:	2201      	movs	r2, #1
 801eb72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801eb76:	480a      	ldr	r0, [pc, #40]	; (801eba0 <ce303_voltage+0x298>)
 801eb78:	f7f4 fb2c 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 801eb7c:	2208      	movs	r2, #8
 801eb7e:	4904      	ldr	r1, [pc, #16]	; (801eb90 <ce303_voltage+0x288>)
 801eb80:	4808      	ldr	r0, [pc, #32]	; (801eba4 <ce303_voltage+0x29c>)
 801eb82:	f7f6 fddf 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801eb86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801eb8a:	f7f3 f86f 	bl	8011c6c <HAL_Delay>
 801eb8e:	e080      	b.n	801ec92 <ce303_voltage+0x38a>
 801eb90:	20000010 	.word	0x20000010
 801eb94:	51eb851f 	.word	0x51eb851f
 801eb98:	66666667 	.word	0x66666667
 801eb9c:	2000085d 	.word	0x2000085d
 801eba0:	40021800 	.word	0x40021800
 801eba4:	20009c70 	.word	0x20009c70
 801eba8:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 801ebac:	79fb      	ldrb	r3, [r7, #7]
 801ebae:	2b09      	cmp	r3, #9
 801ebb0:	d944      	bls.n	801ec3c <ce303_voltage+0x334>
 801ebb2:	79fb      	ldrb	r3, [r7, #7]
 801ebb4:	2b63      	cmp	r3, #99	; 0x63
 801ebb6:	d841      	bhi.n	801ec3c <ce303_voltage+0x334>
	{
		start_buf[0] = 0x2F;
 801ebb8:	4b90      	ldr	r3, [pc, #576]	; (801edfc <ce303_voltage+0x4f4>)
 801ebba:	222f      	movs	r2, #47	; 0x2f
 801ebbc:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801ebbe:	4b8f      	ldr	r3, [pc, #572]	; (801edfc <ce303_voltage+0x4f4>)
 801ebc0:	223f      	movs	r2, #63	; 0x3f
 801ebc2:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 801ebc4:	79fb      	ldrb	r3, [r7, #7]
 801ebc6:	4a8e      	ldr	r2, [pc, #568]	; (801ee00 <ce303_voltage+0x4f8>)
 801ebc8:	fba2 2303 	umull	r2, r3, r2, r3
 801ebcc:	08db      	lsrs	r3, r3, #3
 801ebce:	b2db      	uxtb	r3, r3
 801ebd0:	3330      	adds	r3, #48	; 0x30
 801ebd2:	b2da      	uxtb	r2, r3
 801ebd4:	4b89      	ldr	r3, [pc, #548]	; (801edfc <ce303_voltage+0x4f4>)
 801ebd6:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 801ebd8:	79fb      	ldrb	r3, [r7, #7]
 801ebda:	4a89      	ldr	r2, [pc, #548]	; (801ee00 <ce303_voltage+0x4f8>)
 801ebdc:	fba2 2303 	umull	r2, r3, r2, r3
 801ebe0:	08db      	lsrs	r3, r3, #3
 801ebe2:	b2db      	uxtb	r3, r3
 801ebe4:	461a      	mov	r2, r3
 801ebe6:	0152      	lsls	r2, r2, #5
 801ebe8:	1ad2      	subs	r2, r2, r3
 801ebea:	0092      	lsls	r2, r2, #2
 801ebec:	1ad3      	subs	r3, r2, r3
 801ebee:	005b      	lsls	r3, r3, #1
 801ebf0:	b2da      	uxtb	r2, r3
 801ebf2:	79fb      	ldrb	r3, [r7, #7]
 801ebf4:	4413      	add	r3, r2
 801ebf6:	b2db      	uxtb	r3, r3
 801ebf8:	3330      	adds	r3, #48	; 0x30
 801ebfa:	b2da      	uxtb	r2, r3
 801ebfc:	4b7f      	ldr	r3, [pc, #508]	; (801edfc <ce303_voltage+0x4f4>)
 801ebfe:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 801ec00:	4b7e      	ldr	r3, [pc, #504]	; (801edfc <ce303_voltage+0x4f4>)
 801ec02:	2221      	movs	r2, #33	; 0x21
 801ec04:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 801ec06:	4b7d      	ldr	r3, [pc, #500]	; (801edfc <ce303_voltage+0x4f4>)
 801ec08:	220d      	movs	r2, #13
 801ec0a:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 801ec0c:	4b7b      	ldr	r3, [pc, #492]	; (801edfc <ce303_voltage+0x4f4>)
 801ec0e:	220a      	movs	r2, #10
 801ec10:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 801ec12:	4b7c      	ldr	r3, [pc, #496]	; (801ee04 <ce303_voltage+0x4fc>)
 801ec14:	2200      	movs	r2, #0
 801ec16:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801ec18:	f7ff fe5c 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801ec1c:	2201      	movs	r2, #1
 801ec1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ec22:	4879      	ldr	r0, [pc, #484]	; (801ee08 <ce303_voltage+0x500>)
 801ec24:	f7f4 fad6 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 801ec28:	2207      	movs	r2, #7
 801ec2a:	4974      	ldr	r1, [pc, #464]	; (801edfc <ce303_voltage+0x4f4>)
 801ec2c:	4877      	ldr	r0, [pc, #476]	; (801ee0c <ce303_voltage+0x504>)
 801ec2e:	f7f6 fd89 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801ec32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ec36:	f7f3 f819 	bl	8011c6c <HAL_Delay>
 801ec3a:	e02a      	b.n	801ec92 <ce303_voltage+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 801ec3c:	79fb      	ldrb	r3, [r7, #7]
 801ec3e:	2b09      	cmp	r3, #9
 801ec40:	d827      	bhi.n	801ec92 <ce303_voltage+0x38a>
	{
		start_buf[0] = 0x2F;
 801ec42:	4b6e      	ldr	r3, [pc, #440]	; (801edfc <ce303_voltage+0x4f4>)
 801ec44:	222f      	movs	r2, #47	; 0x2f
 801ec46:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801ec48:	4b6c      	ldr	r3, [pc, #432]	; (801edfc <ce303_voltage+0x4f4>)
 801ec4a:	223f      	movs	r2, #63	; 0x3f
 801ec4c:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 801ec4e:	79fb      	ldrb	r3, [r7, #7]
 801ec50:	3330      	adds	r3, #48	; 0x30
 801ec52:	b2da      	uxtb	r2, r3
 801ec54:	4b69      	ldr	r3, [pc, #420]	; (801edfc <ce303_voltage+0x4f4>)
 801ec56:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 801ec58:	4b68      	ldr	r3, [pc, #416]	; (801edfc <ce303_voltage+0x4f4>)
 801ec5a:	2221      	movs	r2, #33	; 0x21
 801ec5c:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 801ec5e:	4b67      	ldr	r3, [pc, #412]	; (801edfc <ce303_voltage+0x4f4>)
 801ec60:	220d      	movs	r2, #13
 801ec62:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 801ec64:	4b65      	ldr	r3, [pc, #404]	; (801edfc <ce303_voltage+0x4f4>)
 801ec66:	220a      	movs	r2, #10
 801ec68:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 801ec6a:	4b66      	ldr	r3, [pc, #408]	; (801ee04 <ce303_voltage+0x4fc>)
 801ec6c:	2200      	movs	r2, #0
 801ec6e:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801ec70:	f7ff fe30 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801ec74:	2201      	movs	r2, #1
 801ec76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ec7a:	4863      	ldr	r0, [pc, #396]	; (801ee08 <ce303_voltage+0x500>)
 801ec7c:	f7f4 faaa 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 801ec80:	2206      	movs	r2, #6
 801ec82:	495e      	ldr	r1, [pc, #376]	; (801edfc <ce303_voltage+0x4f4>)
 801ec84:	4861      	ldr	r0, [pc, #388]	; (801ee0c <ce303_voltage+0x504>)
 801ec86:	f7f6 fd5d 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801ec8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ec8e:	f7f2 ffed 	bl	8011c6c <HAL_Delay>
	}



	meter_rx_number = 0;
 801ec92:	4b5c      	ldr	r3, [pc, #368]	; (801ee04 <ce303_voltage+0x4fc>)
 801ec94:	2200      	movs	r2, #0
 801ec96:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801ec98:	f7ff fe1c 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801ec9c:	2201      	movs	r2, #1
 801ec9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801eca2:	4859      	ldr	r0, [pc, #356]	; (801ee08 <ce303_voltage+0x500>)
 801eca4:	f7f4 fa96 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 801eca8:	2206      	movs	r2, #6
 801ecaa:	4959      	ldr	r1, [pc, #356]	; (801ee10 <ce303_voltage+0x508>)
 801ecac:	4857      	ldr	r0, [pc, #348]	; (801ee0c <ce303_voltage+0x504>)
 801ecae:	f7f6 fd49 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 801ecb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ecb6:	f7f2 ffd9 	bl	8011c6c <HAL_Delay>

	meter_rx_number = 0;
 801ecba:	4b52      	ldr	r3, [pc, #328]	; (801ee04 <ce303_voltage+0x4fc>)
 801ecbc:	2200      	movs	r2, #0
 801ecbe:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801ecc0:	f7ff fe08 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801ecc4:	2201      	movs	r2, #1
 801ecc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ecca:	484f      	ldr	r0, [pc, #316]	; (801ee08 <ce303_voltage+0x500>)
 801eccc:	f7f4 fa82 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &voltage_buf[0], 13); // передаем команду
 801ecd0:	220d      	movs	r2, #13
 801ecd2:	4950      	ldr	r1, [pc, #320]	; (801ee14 <ce303_voltage+0x50c>)
 801ecd4:	484d      	ldr	r0, [pc, #308]	; (801ee0c <ce303_voltage+0x504>)
 801ecd6:	f7f6 fd35 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 801ecda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ecde:	f7f2 ffc5 	bl	8011c6c <HAL_Delay>

	voltage_a_state = 0; // обнуляем переменные состояния прочтения напряжения перед их прочтением
 801ece2:	2300      	movs	r3, #0
 801ece4:	757b      	strb	r3, [r7, #21]
	voltage_b_state = 0;
 801ece6:	2300      	movs	r3, #0
 801ece8:	753b      	strb	r3, [r7, #20]
	voltage_c_state = 0;
 801ecea:	2300      	movs	r3, #0
 801ecec:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 801ecee:	2300      	movs	r3, #0
 801ecf0:	823b      	strh	r3, [r7, #16]
 801ecf2:	f001 b82b 	b.w	801fd4c <ce303_voltage+0x1444>
	{

		if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==0) && (voltage_b_state==0) && (voltage_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 801ecf6:	8a3b      	ldrh	r3, [r7, #16]
 801ecf8:	4a47      	ldr	r2, [pc, #284]	; (801ee18 <ce303_voltage+0x510>)
 801ecfa:	5cd3      	ldrb	r3, [r2, r3]
 801ecfc:	2b28      	cmp	r3, #40	; 0x28
 801ecfe:	f040 82ba 	bne.w	801f276 <ce303_voltage+0x96e>
 801ed02:	7d7b      	ldrb	r3, [r7, #21]
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	f040 82b6 	bne.w	801f276 <ce303_voltage+0x96e>
 801ed0a:	7d3b      	ldrb	r3, [r7, #20]
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	f040 82b2 	bne.w	801f276 <ce303_voltage+0x96e>
 801ed12:	7cfb      	ldrb	r3, [r7, #19]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	f040 82ae 	bne.w	801f276 <ce303_voltage+0x96e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801ed1a:	8a3b      	ldrh	r3, [r7, #16]
 801ed1c:	3302      	adds	r3, #2
 801ed1e:	4a3e      	ldr	r2, [pc, #248]	; (801ee18 <ce303_voltage+0x510>)
 801ed20:	5cd3      	ldrb	r3, [r2, r3]
 801ed22:	2b2e      	cmp	r3, #46	; 0x2e
 801ed24:	f040 80d8 	bne.w	801eed8 <ce303_voltage+0x5d0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 801ed28:	8a3b      	ldrh	r3, [r7, #16]
 801ed2a:	3301      	adds	r3, #1
 801ed2c:	4a3a      	ldr	r2, [pc, #232]	; (801ee18 <ce303_voltage+0x510>)
 801ed2e:	5cd3      	ldrb	r3, [r2, r3]
 801ed30:	b29b      	uxth	r3, r3
 801ed32:	3b30      	subs	r3, #48	; 0x30
 801ed34:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 801ed36:	8a3b      	ldrh	r3, [r7, #16]
 801ed38:	3304      	adds	r3, #4
 801ed3a:	4a37      	ldr	r2, [pc, #220]	; (801ee18 <ce303_voltage+0x510>)
 801ed3c:	5cd3      	ldrb	r3, [r2, r3]
 801ed3e:	2b29      	cmp	r3, #41	; 0x29
 801ed40:	d110      	bne.n	801ed64 <ce303_voltage+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 801ed42:	8a3b      	ldrh	r3, [r7, #16]
 801ed44:	3303      	adds	r3, #3
 801ed46:	4a34      	ldr	r2, [pc, #208]	; (801ee18 <ce303_voltage+0x510>)
 801ed48:	5cd3      	ldrb	r3, [r2, r3]
 801ed4a:	3b30      	subs	r3, #48	; 0x30
 801ed4c:	b29b      	uxth	r3, r3
 801ed4e:	461a      	mov	r2, r3
 801ed50:	0092      	lsls	r2, r2, #2
 801ed52:	4413      	add	r3, r2
 801ed54:	461a      	mov	r2, r3
 801ed56:	0091      	lsls	r1, r2, #2
 801ed58:	461a      	mov	r2, r3
 801ed5a:	460b      	mov	r3, r1
 801ed5c:	4413      	add	r3, r2
 801ed5e:	009b      	lsls	r3, r3, #2
 801ed60:	82fb      	strh	r3, [r7, #22]
 801ed62:	e081      	b.n	801ee68 <ce303_voltage+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801ed64:	8a3b      	ldrh	r3, [r7, #16]
 801ed66:	3305      	adds	r3, #5
 801ed68:	4a2b      	ldr	r2, [pc, #172]	; (801ee18 <ce303_voltage+0x510>)
 801ed6a:	5cd3      	ldrb	r3, [r2, r3]
 801ed6c:	2b29      	cmp	r3, #41	; 0x29
 801ed6e:	d117      	bne.n	801eda0 <ce303_voltage+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801ed70:	8a3b      	ldrh	r3, [r7, #16]
 801ed72:	3303      	adds	r3, #3
 801ed74:	4a28      	ldr	r2, [pc, #160]	; (801ee18 <ce303_voltage+0x510>)
 801ed76:	5cd3      	ldrb	r3, [r2, r3]
 801ed78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801ed7c:	4613      	mov	r3, r2
 801ed7e:	009b      	lsls	r3, r3, #2
 801ed80:	4413      	add	r3, r2
 801ed82:	005b      	lsls	r3, r3, #1
 801ed84:	4619      	mov	r1, r3
 801ed86:	8a3b      	ldrh	r3, [r7, #16]
 801ed88:	3304      	adds	r3, #4
 801ed8a:	4a23      	ldr	r2, [pc, #140]	; (801ee18 <ce303_voltage+0x510>)
 801ed8c:	5cd3      	ldrb	r3, [r2, r3]
 801ed8e:	3b30      	subs	r3, #48	; 0x30
 801ed90:	440b      	add	r3, r1
 801ed92:	b29b      	uxth	r3, r3
 801ed94:	461a      	mov	r2, r3
 801ed96:	0092      	lsls	r2, r2, #2
 801ed98:	4413      	add	r3, r2
 801ed9a:	005b      	lsls	r3, r3, #1
 801ed9c:	82fb      	strh	r3, [r7, #22]
 801ed9e:	e063      	b.n	801ee68 <ce303_voltage+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 801eda0:	8a3b      	ldrh	r3, [r7, #16]
 801eda2:	3306      	adds	r3, #6
 801eda4:	4a1c      	ldr	r2, [pc, #112]	; (801ee18 <ce303_voltage+0x510>)
 801eda6:	5cd3      	ldrb	r3, [r2, r3]
 801eda8:	2b29      	cmp	r3, #41	; 0x29
 801edaa:	d137      	bne.n	801ee1c <ce303_voltage+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801edac:	8a3b      	ldrh	r3, [r7, #16]
 801edae:	3303      	adds	r3, #3
 801edb0:	4a19      	ldr	r2, [pc, #100]	; (801ee18 <ce303_voltage+0x510>)
 801edb2:	5cd3      	ldrb	r3, [r2, r3]
 801edb4:	3b30      	subs	r3, #48	; 0x30
 801edb6:	b29b      	uxth	r3, r3
 801edb8:	461a      	mov	r2, r3
 801edba:	0092      	lsls	r2, r2, #2
 801edbc:	4413      	add	r3, r2
 801edbe:	461a      	mov	r2, r3
 801edc0:	0091      	lsls	r1, r2, #2
 801edc2:	461a      	mov	r2, r3
 801edc4:	460b      	mov	r3, r1
 801edc6:	4413      	add	r3, r2
 801edc8:	009b      	lsls	r3, r3, #2
 801edca:	b29a      	uxth	r2, r3
 801edcc:	8a3b      	ldrh	r3, [r7, #16]
 801edce:	3304      	adds	r3, #4
 801edd0:	4911      	ldr	r1, [pc, #68]	; (801ee18 <ce303_voltage+0x510>)
 801edd2:	5ccb      	ldrb	r3, [r1, r3]
 801edd4:	3b30      	subs	r3, #48	; 0x30
 801edd6:	b29b      	uxth	r3, r3
 801edd8:	4619      	mov	r1, r3
 801edda:	0089      	lsls	r1, r1, #2
 801eddc:	440b      	add	r3, r1
 801edde:	005b      	lsls	r3, r3, #1
 801ede0:	b29b      	uxth	r3, r3
 801ede2:	4413      	add	r3, r2
 801ede4:	b29a      	uxth	r2, r3
 801ede6:	8a3b      	ldrh	r3, [r7, #16]
 801ede8:	3305      	adds	r3, #5
 801edea:	490b      	ldr	r1, [pc, #44]	; (801ee18 <ce303_voltage+0x510>)
 801edec:	5ccb      	ldrb	r3, [r1, r3]
 801edee:	b29b      	uxth	r3, r3
 801edf0:	4413      	add	r3, r2
 801edf2:	b29b      	uxth	r3, r3
 801edf4:	3b30      	subs	r3, #48	; 0x30
 801edf6:	82fb      	strh	r3, [r7, #22]
 801edf8:	e036      	b.n	801ee68 <ce303_voltage+0x560>
 801edfa:	bf00      	nop
 801edfc:	20000010 	.word	0x20000010
 801ee00:	cccccccd 	.word	0xcccccccd
 801ee04:	2000085d 	.word	0x2000085d
 801ee08:	40021800 	.word	0x40021800
 801ee0c:	20009c70 	.word	0x20009c70
 801ee10:	20000018 	.word	0x20000018
 801ee14:	20000020 	.word	0x20000020
 801ee18:	200098e4 	.word	0x200098e4
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801ee1c:	8a3b      	ldrh	r3, [r7, #16]
 801ee1e:	3303      	adds	r3, #3
 801ee20:	4a9b      	ldr	r2, [pc, #620]	; (801f090 <ce303_voltage+0x788>)
 801ee22:	5cd3      	ldrb	r3, [r2, r3]
 801ee24:	3b30      	subs	r3, #48	; 0x30
 801ee26:	b29b      	uxth	r3, r3
 801ee28:	461a      	mov	r2, r3
 801ee2a:	0092      	lsls	r2, r2, #2
 801ee2c:	4413      	add	r3, r2
 801ee2e:	461a      	mov	r2, r3
 801ee30:	0091      	lsls	r1, r2, #2
 801ee32:	461a      	mov	r2, r3
 801ee34:	460b      	mov	r3, r1
 801ee36:	4413      	add	r3, r2
 801ee38:	009b      	lsls	r3, r3, #2
 801ee3a:	b29a      	uxth	r2, r3
 801ee3c:	8a3b      	ldrh	r3, [r7, #16]
 801ee3e:	3304      	adds	r3, #4
 801ee40:	4993      	ldr	r1, [pc, #588]	; (801f090 <ce303_voltage+0x788>)
 801ee42:	5ccb      	ldrb	r3, [r1, r3]
 801ee44:	3b30      	subs	r3, #48	; 0x30
 801ee46:	b29b      	uxth	r3, r3
 801ee48:	4619      	mov	r1, r3
 801ee4a:	0089      	lsls	r1, r1, #2
 801ee4c:	440b      	add	r3, r1
 801ee4e:	005b      	lsls	r3, r3, #1
 801ee50:	b29b      	uxth	r3, r3
 801ee52:	4413      	add	r3, r2
 801ee54:	b29a      	uxth	r2, r3
 801ee56:	8a3b      	ldrh	r3, [r7, #16]
 801ee58:	3305      	adds	r3, #5
 801ee5a:	498d      	ldr	r1, [pc, #564]	; (801f090 <ce303_voltage+0x788>)
 801ee5c:	5ccb      	ldrb	r3, [r1, r3]
 801ee5e:	b29b      	uxth	r3, r3
 801ee60:	4413      	add	r3, r2
 801ee62:	b29b      	uxth	r3, r3
 801ee64:	3b30      	subs	r3, #48	; 0x30
 801ee66:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ee68:	4b8a      	ldr	r3, [pc, #552]	; (801f094 <ce303_voltage+0x78c>)
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	f04f 31ff 	mov.w	r1, #4294967295
 801ee70:	4618      	mov	r0, r3
 801ee72:	f7f7 ff15 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 801ee76:	89fb      	ldrh	r3, [r7, #14]
 801ee78:	0a1b      	lsrs	r3, r3, #8
 801ee7a:	b29b      	uxth	r3, r3
 801ee7c:	b2db      	uxtb	r3, r3
 801ee7e:	4619      	mov	r1, r3
 801ee80:	f242 004a 	movw	r0, #8266	; 0x204a
 801ee84:	f006 fade 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 801ee88:	89fb      	ldrh	r3, [r7, #14]
 801ee8a:	b2db      	uxtb	r3, r3
 801ee8c:	4619      	mov	r1, r3
 801ee8e:	f242 004b 	movw	r0, #8267	; 0x204b
 801ee92:	f006 fad7 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 801ee96:	8afb      	ldrh	r3, [r7, #22]
 801ee98:	0a1b      	lsrs	r3, r3, #8
 801ee9a:	b29b      	uxth	r3, r3
 801ee9c:	b2db      	uxtb	r3, r3
 801ee9e:	4619      	mov	r1, r3
 801eea0:	f242 0050 	movw	r0, #8272	; 0x2050
 801eea4:	f006 face 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801eea8:	8afb      	ldrh	r3, [r7, #22]
 801eeaa:	b2db      	uxtb	r3, r3
 801eeac:	4619      	mov	r1, r3
 801eeae:	f242 0051 	movw	r0, #8273	; 0x2051
 801eeb2:	f006 fac7 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801eeb6:	4b77      	ldr	r3, [pc, #476]	; (801f094 <ce303_voltage+0x78c>)
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	4618      	mov	r0, r3
 801eebc:	f7f7 ff3e 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 801eec0:	4a75      	ldr	r2, [pc, #468]	; (801f098 <ce303_voltage+0x790>)
 801eec2:	89fb      	ldrh	r3, [r7, #14]
 801eec4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg =  temp_mil;
 801eec8:	4a73      	ldr	r2, [pc, #460]	; (801f098 <ce303_voltage+0x790>)
 801eeca:	8afb      	ldrh	r3, [r7, #22]
 801eecc:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 801eed0:	2301      	movs	r3, #1
 801eed2:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801eed4:	f000 bf34 	b.w	801fd40 <ce303_voltage+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 801eed8:	8a3b      	ldrh	r3, [r7, #16]
 801eeda:	3303      	adds	r3, #3
 801eedc:	4a6c      	ldr	r2, [pc, #432]	; (801f090 <ce303_voltage+0x788>)
 801eede:	5cd3      	ldrb	r3, [r2, r3]
 801eee0:	2b2e      	cmp	r3, #46	; 0x2e
 801eee2:	f040 80db 	bne.w	801f09c <ce303_voltage+0x794>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 801eee6:	8a3b      	ldrh	r3, [r7, #16]
 801eee8:	3301      	adds	r3, #1
 801eeea:	4a69      	ldr	r2, [pc, #420]	; (801f090 <ce303_voltage+0x788>)
 801eeec:	5cd3      	ldrb	r3, [r2, r3]
 801eeee:	3b30      	subs	r3, #48	; 0x30
 801eef0:	b29b      	uxth	r3, r3
 801eef2:	461a      	mov	r2, r3
 801eef4:	0092      	lsls	r2, r2, #2
 801eef6:	4413      	add	r3, r2
 801eef8:	005b      	lsls	r3, r3, #1
 801eefa:	b29a      	uxth	r2, r3
 801eefc:	8a3b      	ldrh	r3, [r7, #16]
 801eefe:	3302      	adds	r3, #2
 801ef00:	4963      	ldr	r1, [pc, #396]	; (801f090 <ce303_voltage+0x788>)
 801ef02:	5ccb      	ldrb	r3, [r1, r3]
 801ef04:	b29b      	uxth	r3, r3
 801ef06:	4413      	add	r3, r2
 801ef08:	b29b      	uxth	r3, r3
 801ef0a:	3b30      	subs	r3, #48	; 0x30
 801ef0c:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 801ef0e:	8a3b      	ldrh	r3, [r7, #16]
 801ef10:	3305      	adds	r3, #5
 801ef12:	4a5f      	ldr	r2, [pc, #380]	; (801f090 <ce303_voltage+0x788>)
 801ef14:	5cd3      	ldrb	r3, [r2, r3]
 801ef16:	2b29      	cmp	r3, #41	; 0x29
 801ef18:	d110      	bne.n	801ef3c <ce303_voltage+0x634>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 801ef1a:	8a3b      	ldrh	r3, [r7, #16]
 801ef1c:	3304      	adds	r3, #4
 801ef1e:	4a5c      	ldr	r2, [pc, #368]	; (801f090 <ce303_voltage+0x788>)
 801ef20:	5cd3      	ldrb	r3, [r2, r3]
 801ef22:	3b30      	subs	r3, #48	; 0x30
 801ef24:	b29b      	uxth	r3, r3
 801ef26:	461a      	mov	r2, r3
 801ef28:	0092      	lsls	r2, r2, #2
 801ef2a:	4413      	add	r3, r2
 801ef2c:	461a      	mov	r2, r3
 801ef2e:	0091      	lsls	r1, r2, #2
 801ef30:	461a      	mov	r2, r3
 801ef32:	460b      	mov	r3, r1
 801ef34:	4413      	add	r3, r2
 801ef36:	009b      	lsls	r3, r3, #2
 801ef38:	82fb      	strh	r3, [r7, #22]
 801ef3a:	e070      	b.n	801f01e <ce303_voltage+0x716>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 801ef3c:	8a3b      	ldrh	r3, [r7, #16]
 801ef3e:	3306      	adds	r3, #6
 801ef40:	4a53      	ldr	r2, [pc, #332]	; (801f090 <ce303_voltage+0x788>)
 801ef42:	5cd3      	ldrb	r3, [r2, r3]
 801ef44:	2b29      	cmp	r3, #41	; 0x29
 801ef46:	d117      	bne.n	801ef78 <ce303_voltage+0x670>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 801ef48:	8a3b      	ldrh	r3, [r7, #16]
 801ef4a:	3304      	adds	r3, #4
 801ef4c:	4a50      	ldr	r2, [pc, #320]	; (801f090 <ce303_voltage+0x788>)
 801ef4e:	5cd3      	ldrb	r3, [r2, r3]
 801ef50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801ef54:	4613      	mov	r3, r2
 801ef56:	009b      	lsls	r3, r3, #2
 801ef58:	4413      	add	r3, r2
 801ef5a:	005b      	lsls	r3, r3, #1
 801ef5c:	4619      	mov	r1, r3
 801ef5e:	8a3b      	ldrh	r3, [r7, #16]
 801ef60:	3305      	adds	r3, #5
 801ef62:	4a4b      	ldr	r2, [pc, #300]	; (801f090 <ce303_voltage+0x788>)
 801ef64:	5cd3      	ldrb	r3, [r2, r3]
 801ef66:	3b30      	subs	r3, #48	; 0x30
 801ef68:	440b      	add	r3, r1
 801ef6a:	b29b      	uxth	r3, r3
 801ef6c:	461a      	mov	r2, r3
 801ef6e:	0092      	lsls	r2, r2, #2
 801ef70:	4413      	add	r3, r2
 801ef72:	005b      	lsls	r3, r3, #1
 801ef74:	82fb      	strh	r3, [r7, #22]
 801ef76:	e052      	b.n	801f01e <ce303_voltage+0x716>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 801ef78:	8a3b      	ldrh	r3, [r7, #16]
 801ef7a:	3307      	adds	r3, #7
 801ef7c:	4a44      	ldr	r2, [pc, #272]	; (801f090 <ce303_voltage+0x788>)
 801ef7e:	5cd3      	ldrb	r3, [r2, r3]
 801ef80:	2b29      	cmp	r3, #41	; 0x29
 801ef82:	d126      	bne.n	801efd2 <ce303_voltage+0x6ca>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801ef84:	8a3b      	ldrh	r3, [r7, #16]
 801ef86:	3304      	adds	r3, #4
 801ef88:	4a41      	ldr	r2, [pc, #260]	; (801f090 <ce303_voltage+0x788>)
 801ef8a:	5cd3      	ldrb	r3, [r2, r3]
 801ef8c:	3b30      	subs	r3, #48	; 0x30
 801ef8e:	b29b      	uxth	r3, r3
 801ef90:	461a      	mov	r2, r3
 801ef92:	0092      	lsls	r2, r2, #2
 801ef94:	4413      	add	r3, r2
 801ef96:	461a      	mov	r2, r3
 801ef98:	0091      	lsls	r1, r2, #2
 801ef9a:	461a      	mov	r2, r3
 801ef9c:	460b      	mov	r3, r1
 801ef9e:	4413      	add	r3, r2
 801efa0:	009b      	lsls	r3, r3, #2
 801efa2:	b29a      	uxth	r2, r3
 801efa4:	8a3b      	ldrh	r3, [r7, #16]
 801efa6:	3305      	adds	r3, #5
 801efa8:	4939      	ldr	r1, [pc, #228]	; (801f090 <ce303_voltage+0x788>)
 801efaa:	5ccb      	ldrb	r3, [r1, r3]
 801efac:	3b30      	subs	r3, #48	; 0x30
 801efae:	b29b      	uxth	r3, r3
 801efb0:	4619      	mov	r1, r3
 801efb2:	0089      	lsls	r1, r1, #2
 801efb4:	440b      	add	r3, r1
 801efb6:	005b      	lsls	r3, r3, #1
 801efb8:	b29b      	uxth	r3, r3
 801efba:	4413      	add	r3, r2
 801efbc:	b29a      	uxth	r2, r3
 801efbe:	8a3b      	ldrh	r3, [r7, #16]
 801efc0:	3306      	adds	r3, #6
 801efc2:	4933      	ldr	r1, [pc, #204]	; (801f090 <ce303_voltage+0x788>)
 801efc4:	5ccb      	ldrb	r3, [r1, r3]
 801efc6:	b29b      	uxth	r3, r3
 801efc8:	4413      	add	r3, r2
 801efca:	b29b      	uxth	r3, r3
 801efcc:	3b30      	subs	r3, #48	; 0x30
 801efce:	82fb      	strh	r3, [r7, #22]
 801efd0:	e025      	b.n	801f01e <ce303_voltage+0x716>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801efd2:	8a3b      	ldrh	r3, [r7, #16]
 801efd4:	3304      	adds	r3, #4
 801efd6:	4a2e      	ldr	r2, [pc, #184]	; (801f090 <ce303_voltage+0x788>)
 801efd8:	5cd3      	ldrb	r3, [r2, r3]
 801efda:	3b30      	subs	r3, #48	; 0x30
 801efdc:	b29b      	uxth	r3, r3
 801efde:	461a      	mov	r2, r3
 801efe0:	0092      	lsls	r2, r2, #2
 801efe2:	4413      	add	r3, r2
 801efe4:	461a      	mov	r2, r3
 801efe6:	0091      	lsls	r1, r2, #2
 801efe8:	461a      	mov	r2, r3
 801efea:	460b      	mov	r3, r1
 801efec:	4413      	add	r3, r2
 801efee:	009b      	lsls	r3, r3, #2
 801eff0:	b29a      	uxth	r2, r3
 801eff2:	8a3b      	ldrh	r3, [r7, #16]
 801eff4:	3305      	adds	r3, #5
 801eff6:	4926      	ldr	r1, [pc, #152]	; (801f090 <ce303_voltage+0x788>)
 801eff8:	5ccb      	ldrb	r3, [r1, r3]
 801effa:	3b30      	subs	r3, #48	; 0x30
 801effc:	b29b      	uxth	r3, r3
 801effe:	4619      	mov	r1, r3
 801f000:	0089      	lsls	r1, r1, #2
 801f002:	440b      	add	r3, r1
 801f004:	005b      	lsls	r3, r3, #1
 801f006:	b29b      	uxth	r3, r3
 801f008:	4413      	add	r3, r2
 801f00a:	b29a      	uxth	r2, r3
 801f00c:	8a3b      	ldrh	r3, [r7, #16]
 801f00e:	3306      	adds	r3, #6
 801f010:	491f      	ldr	r1, [pc, #124]	; (801f090 <ce303_voltage+0x788>)
 801f012:	5ccb      	ldrb	r3, [r1, r3]
 801f014:	b29b      	uxth	r3, r3
 801f016:	4413      	add	r3, r2
 801f018:	b29b      	uxth	r3, r3
 801f01a:	3b30      	subs	r3, #48	; 0x30
 801f01c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f01e:	4b1d      	ldr	r3, [pc, #116]	; (801f094 <ce303_voltage+0x78c>)
 801f020:	681b      	ldr	r3, [r3, #0]
 801f022:	f04f 31ff 	mov.w	r1, #4294967295
 801f026:	4618      	mov	r0, r3
 801f028:	f7f7 fe3a 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 801f02c:	89fb      	ldrh	r3, [r7, #14]
 801f02e:	0a1b      	lsrs	r3, r3, #8
 801f030:	b29b      	uxth	r3, r3
 801f032:	b2db      	uxtb	r3, r3
 801f034:	4619      	mov	r1, r3
 801f036:	f242 004a 	movw	r0, #8266	; 0x204a
 801f03a:	f006 fa03 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 801f03e:	89fb      	ldrh	r3, [r7, #14]
 801f040:	b2db      	uxtb	r3, r3
 801f042:	4619      	mov	r1, r3
 801f044:	f242 004b 	movw	r0, #8267	; 0x204b
 801f048:	f006 f9fc 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 801f04c:	8afb      	ldrh	r3, [r7, #22]
 801f04e:	0a1b      	lsrs	r3, r3, #8
 801f050:	b29b      	uxth	r3, r3
 801f052:	b2db      	uxtb	r3, r3
 801f054:	4619      	mov	r1, r3
 801f056:	f242 0050 	movw	r0, #8272	; 0x2050
 801f05a:	f006 f9f3 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801f05e:	8afb      	ldrh	r3, [r7, #22]
 801f060:	b2db      	uxtb	r3, r3
 801f062:	4619      	mov	r1, r3
 801f064:	f242 0051 	movw	r0, #8273	; 0x2051
 801f068:	f006 f9ec 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801f06c:	4b09      	ldr	r3, [pc, #36]	; (801f094 <ce303_voltage+0x78c>)
 801f06e:	681b      	ldr	r3, [r3, #0]
 801f070:	4618      	mov	r0, r3
 801f072:	f7f7 fe63 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 801f076:	4a08      	ldr	r2, [pc, #32]	; (801f098 <ce303_voltage+0x790>)
 801f078:	89fb      	ldrh	r3, [r7, #14]
 801f07a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg = temp_mil;
 801f07e:	4a06      	ldr	r2, [pc, #24]	; (801f098 <ce303_voltage+0x790>)
 801f080:	8afb      	ldrh	r3, [r7, #22]
 801f082:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 801f086:	2301      	movs	r3, #1
 801f088:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801f08a:	f000 be59 	b.w	801fd40 <ce303_voltage+0x1438>
 801f08e:	bf00      	nop
 801f090:	200098e4 	.word	0x200098e4
 801f094:	20009a6c 	.word	0x20009a6c
 801f098:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 801f09c:	8a3b      	ldrh	r3, [r7, #16]
 801f09e:	3304      	adds	r3, #4
 801f0a0:	4a9f      	ldr	r2, [pc, #636]	; (801f320 <ce303_voltage+0xa18>)
 801f0a2:	5cd3      	ldrb	r3, [r2, r3]
 801f0a4:	2b2e      	cmp	r3, #46	; 0x2e
 801f0a6:	f040 864b 	bne.w	801fd40 <ce303_voltage+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 801f0aa:	8a3b      	ldrh	r3, [r7, #16]
 801f0ac:	3301      	adds	r3, #1
 801f0ae:	4a9c      	ldr	r2, [pc, #624]	; (801f320 <ce303_voltage+0xa18>)
 801f0b0:	5cd3      	ldrb	r3, [r2, r3]
 801f0b2:	3b30      	subs	r3, #48	; 0x30
 801f0b4:	b29b      	uxth	r3, r3
 801f0b6:	461a      	mov	r2, r3
 801f0b8:	0092      	lsls	r2, r2, #2
 801f0ba:	4413      	add	r3, r2
 801f0bc:	461a      	mov	r2, r3
 801f0be:	0091      	lsls	r1, r2, #2
 801f0c0:	461a      	mov	r2, r3
 801f0c2:	460b      	mov	r3, r1
 801f0c4:	4413      	add	r3, r2
 801f0c6:	009b      	lsls	r3, r3, #2
 801f0c8:	b29a      	uxth	r2, r3
 801f0ca:	8a3b      	ldrh	r3, [r7, #16]
 801f0cc:	3302      	adds	r3, #2
 801f0ce:	4994      	ldr	r1, [pc, #592]	; (801f320 <ce303_voltage+0xa18>)
 801f0d0:	5ccb      	ldrb	r3, [r1, r3]
 801f0d2:	3b30      	subs	r3, #48	; 0x30
 801f0d4:	b29b      	uxth	r3, r3
 801f0d6:	4619      	mov	r1, r3
 801f0d8:	0089      	lsls	r1, r1, #2
 801f0da:	440b      	add	r3, r1
 801f0dc:	005b      	lsls	r3, r3, #1
 801f0de:	b29b      	uxth	r3, r3
 801f0e0:	4413      	add	r3, r2
 801f0e2:	b29a      	uxth	r2, r3
 801f0e4:	8a3b      	ldrh	r3, [r7, #16]
 801f0e6:	3303      	adds	r3, #3
 801f0e8:	498d      	ldr	r1, [pc, #564]	; (801f320 <ce303_voltage+0xa18>)
 801f0ea:	5ccb      	ldrb	r3, [r1, r3]
 801f0ec:	b29b      	uxth	r3, r3
 801f0ee:	4413      	add	r3, r2
 801f0f0:	b29b      	uxth	r3, r3
 801f0f2:	3b30      	subs	r3, #48	; 0x30
 801f0f4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 801f0f6:	8a3b      	ldrh	r3, [r7, #16]
 801f0f8:	3306      	adds	r3, #6
 801f0fa:	4a89      	ldr	r2, [pc, #548]	; (801f320 <ce303_voltage+0xa18>)
 801f0fc:	5cd3      	ldrb	r3, [r2, r3]
 801f0fe:	2b29      	cmp	r3, #41	; 0x29
 801f100:	d110      	bne.n	801f124 <ce303_voltage+0x81c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801f102:	8a3b      	ldrh	r3, [r7, #16]
 801f104:	3305      	adds	r3, #5
 801f106:	4a86      	ldr	r2, [pc, #536]	; (801f320 <ce303_voltage+0xa18>)
 801f108:	5cd3      	ldrb	r3, [r2, r3]
 801f10a:	3b30      	subs	r3, #48	; 0x30
 801f10c:	b29b      	uxth	r3, r3
 801f10e:	461a      	mov	r2, r3
 801f110:	0092      	lsls	r2, r2, #2
 801f112:	4413      	add	r3, r2
 801f114:	461a      	mov	r2, r3
 801f116:	0091      	lsls	r1, r2, #2
 801f118:	461a      	mov	r2, r3
 801f11a:	460b      	mov	r3, r1
 801f11c:	4413      	add	r3, r2
 801f11e:	009b      	lsls	r3, r3, #2
 801f120:	82fb      	strh	r3, [r7, #22]
 801f122:	e070      	b.n	801f206 <ce303_voltage+0x8fe>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 801f124:	8a3b      	ldrh	r3, [r7, #16]
 801f126:	3307      	adds	r3, #7
 801f128:	4a7d      	ldr	r2, [pc, #500]	; (801f320 <ce303_voltage+0xa18>)
 801f12a:	5cd3      	ldrb	r3, [r2, r3]
 801f12c:	2b29      	cmp	r3, #41	; 0x29
 801f12e:	d117      	bne.n	801f160 <ce303_voltage+0x858>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 801f130:	8a3b      	ldrh	r3, [r7, #16]
 801f132:	3305      	adds	r3, #5
 801f134:	4a7a      	ldr	r2, [pc, #488]	; (801f320 <ce303_voltage+0xa18>)
 801f136:	5cd3      	ldrb	r3, [r2, r3]
 801f138:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801f13c:	4613      	mov	r3, r2
 801f13e:	009b      	lsls	r3, r3, #2
 801f140:	4413      	add	r3, r2
 801f142:	005b      	lsls	r3, r3, #1
 801f144:	4619      	mov	r1, r3
 801f146:	8a3b      	ldrh	r3, [r7, #16]
 801f148:	3306      	adds	r3, #6
 801f14a:	4a75      	ldr	r2, [pc, #468]	; (801f320 <ce303_voltage+0xa18>)
 801f14c:	5cd3      	ldrb	r3, [r2, r3]
 801f14e:	3b30      	subs	r3, #48	; 0x30
 801f150:	440b      	add	r3, r1
 801f152:	b29b      	uxth	r3, r3
 801f154:	461a      	mov	r2, r3
 801f156:	0092      	lsls	r2, r2, #2
 801f158:	4413      	add	r3, r2
 801f15a:	005b      	lsls	r3, r3, #1
 801f15c:	82fb      	strh	r3, [r7, #22]
 801f15e:	e052      	b.n	801f206 <ce303_voltage+0x8fe>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 801f160:	8a3b      	ldrh	r3, [r7, #16]
 801f162:	3308      	adds	r3, #8
 801f164:	4a6e      	ldr	r2, [pc, #440]	; (801f320 <ce303_voltage+0xa18>)
 801f166:	5cd3      	ldrb	r3, [r2, r3]
 801f168:	2b29      	cmp	r3, #41	; 0x29
 801f16a:	d126      	bne.n	801f1ba <ce303_voltage+0x8b2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801f16c:	8a3b      	ldrh	r3, [r7, #16]
 801f16e:	3305      	adds	r3, #5
 801f170:	4a6b      	ldr	r2, [pc, #428]	; (801f320 <ce303_voltage+0xa18>)
 801f172:	5cd3      	ldrb	r3, [r2, r3]
 801f174:	3b30      	subs	r3, #48	; 0x30
 801f176:	b29b      	uxth	r3, r3
 801f178:	461a      	mov	r2, r3
 801f17a:	0092      	lsls	r2, r2, #2
 801f17c:	4413      	add	r3, r2
 801f17e:	461a      	mov	r2, r3
 801f180:	0091      	lsls	r1, r2, #2
 801f182:	461a      	mov	r2, r3
 801f184:	460b      	mov	r3, r1
 801f186:	4413      	add	r3, r2
 801f188:	009b      	lsls	r3, r3, #2
 801f18a:	b29a      	uxth	r2, r3
 801f18c:	8a3b      	ldrh	r3, [r7, #16]
 801f18e:	3306      	adds	r3, #6
 801f190:	4963      	ldr	r1, [pc, #396]	; (801f320 <ce303_voltage+0xa18>)
 801f192:	5ccb      	ldrb	r3, [r1, r3]
 801f194:	3b30      	subs	r3, #48	; 0x30
 801f196:	b29b      	uxth	r3, r3
 801f198:	4619      	mov	r1, r3
 801f19a:	0089      	lsls	r1, r1, #2
 801f19c:	440b      	add	r3, r1
 801f19e:	005b      	lsls	r3, r3, #1
 801f1a0:	b29b      	uxth	r3, r3
 801f1a2:	4413      	add	r3, r2
 801f1a4:	b29a      	uxth	r2, r3
 801f1a6:	8a3b      	ldrh	r3, [r7, #16]
 801f1a8:	3307      	adds	r3, #7
 801f1aa:	495d      	ldr	r1, [pc, #372]	; (801f320 <ce303_voltage+0xa18>)
 801f1ac:	5ccb      	ldrb	r3, [r1, r3]
 801f1ae:	b29b      	uxth	r3, r3
 801f1b0:	4413      	add	r3, r2
 801f1b2:	b29b      	uxth	r3, r3
 801f1b4:	3b30      	subs	r3, #48	; 0x30
 801f1b6:	82fb      	strh	r3, [r7, #22]
 801f1b8:	e025      	b.n	801f206 <ce303_voltage+0x8fe>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801f1ba:	8a3b      	ldrh	r3, [r7, #16]
 801f1bc:	3305      	adds	r3, #5
 801f1be:	4a58      	ldr	r2, [pc, #352]	; (801f320 <ce303_voltage+0xa18>)
 801f1c0:	5cd3      	ldrb	r3, [r2, r3]
 801f1c2:	3b30      	subs	r3, #48	; 0x30
 801f1c4:	b29b      	uxth	r3, r3
 801f1c6:	461a      	mov	r2, r3
 801f1c8:	0092      	lsls	r2, r2, #2
 801f1ca:	4413      	add	r3, r2
 801f1cc:	461a      	mov	r2, r3
 801f1ce:	0091      	lsls	r1, r2, #2
 801f1d0:	461a      	mov	r2, r3
 801f1d2:	460b      	mov	r3, r1
 801f1d4:	4413      	add	r3, r2
 801f1d6:	009b      	lsls	r3, r3, #2
 801f1d8:	b29a      	uxth	r2, r3
 801f1da:	8a3b      	ldrh	r3, [r7, #16]
 801f1dc:	3306      	adds	r3, #6
 801f1de:	4950      	ldr	r1, [pc, #320]	; (801f320 <ce303_voltage+0xa18>)
 801f1e0:	5ccb      	ldrb	r3, [r1, r3]
 801f1e2:	3b30      	subs	r3, #48	; 0x30
 801f1e4:	b29b      	uxth	r3, r3
 801f1e6:	4619      	mov	r1, r3
 801f1e8:	0089      	lsls	r1, r1, #2
 801f1ea:	440b      	add	r3, r1
 801f1ec:	005b      	lsls	r3, r3, #1
 801f1ee:	b29b      	uxth	r3, r3
 801f1f0:	4413      	add	r3, r2
 801f1f2:	b29a      	uxth	r2, r3
 801f1f4:	8a3b      	ldrh	r3, [r7, #16]
 801f1f6:	3307      	adds	r3, #7
 801f1f8:	4949      	ldr	r1, [pc, #292]	; (801f320 <ce303_voltage+0xa18>)
 801f1fa:	5ccb      	ldrb	r3, [r1, r3]
 801f1fc:	b29b      	uxth	r3, r3
 801f1fe:	4413      	add	r3, r2
 801f200:	b29b      	uxth	r3, r3
 801f202:	3b30      	subs	r3, #48	; 0x30
 801f204:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f206:	4b47      	ldr	r3, [pc, #284]	; (801f324 <ce303_voltage+0xa1c>)
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	f04f 31ff 	mov.w	r1, #4294967295
 801f20e:	4618      	mov	r0, r3
 801f210:	f7f7 fd46 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 801f214:	89fb      	ldrh	r3, [r7, #14]
 801f216:	0a1b      	lsrs	r3, r3, #8
 801f218:	b29b      	uxth	r3, r3
 801f21a:	b2db      	uxtb	r3, r3
 801f21c:	4619      	mov	r1, r3
 801f21e:	f242 004a 	movw	r0, #8266	; 0x204a
 801f222:	f006 f90f 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 801f226:	89fb      	ldrh	r3, [r7, #14]
 801f228:	b2db      	uxtb	r3, r3
 801f22a:	4619      	mov	r1, r3
 801f22c:	f242 004b 	movw	r0, #8267	; 0x204b
 801f230:	f006 f908 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 801f234:	8afb      	ldrh	r3, [r7, #22]
 801f236:	0a1b      	lsrs	r3, r3, #8
 801f238:	b29b      	uxth	r3, r3
 801f23a:	b2db      	uxtb	r3, r3
 801f23c:	4619      	mov	r1, r3
 801f23e:	f242 0050 	movw	r0, #8272	; 0x2050
 801f242:	f006 f8ff 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801f246:	8afb      	ldrh	r3, [r7, #22]
 801f248:	b2db      	uxtb	r3, r3
 801f24a:	4619      	mov	r1, r3
 801f24c:	f242 0051 	movw	r0, #8273	; 0x2051
 801f250:	f006 f8f8 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801f254:	4b33      	ldr	r3, [pc, #204]	; (801f324 <ce303_voltage+0xa1c>)
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	4618      	mov	r0, r3
 801f25a:	f7f7 fd6f 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 801f25e:	4a32      	ldr	r2, [pc, #200]	; (801f328 <ce303_voltage+0xa20>)
 801f260:	89fb      	ldrh	r3, [r7, #14]
 801f262:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg = temp_mil;
 801f266:	4a30      	ldr	r2, [pc, #192]	; (801f328 <ce303_voltage+0xa20>)
 801f268:	8afb      	ldrh	r3, [r7, #22]
 801f26a:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 801f26e:	2301      	movs	r3, #1
 801f270:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801f272:	f000 bd65 	b.w	801fd40 <ce303_voltage+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==1) && (voltage_b_state==0) && (voltage_c_state==0) )
 801f276:	8a3b      	ldrh	r3, [r7, #16]
 801f278:	4a29      	ldr	r2, [pc, #164]	; (801f320 <ce303_voltage+0xa18>)
 801f27a:	5cd3      	ldrb	r3, [r2, r3]
 801f27c:	2b28      	cmp	r3, #40	; 0x28
 801f27e:	f040 82ad 	bne.w	801f7dc <ce303_voltage+0xed4>
 801f282:	7d7b      	ldrb	r3, [r7, #21]
 801f284:	2b01      	cmp	r3, #1
 801f286:	f040 82a9 	bne.w	801f7dc <ce303_voltage+0xed4>
 801f28a:	7d3b      	ldrb	r3, [r7, #20]
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	f040 82a5 	bne.w	801f7dc <ce303_voltage+0xed4>
 801f292:	7cfb      	ldrb	r3, [r7, #19]
 801f294:	2b00      	cmp	r3, #0
 801f296:	f040 82a1 	bne.w	801f7dc <ce303_voltage+0xed4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801f29a:	8a3b      	ldrh	r3, [r7, #16]
 801f29c:	3302      	adds	r3, #2
 801f29e:	4a20      	ldr	r2, [pc, #128]	; (801f320 <ce303_voltage+0xa18>)
 801f2a0:	5cd3      	ldrb	r3, [r2, r3]
 801f2a2:	2b2e      	cmp	r3, #46	; 0x2e
 801f2a4:	f040 80cd 	bne.w	801f442 <ce303_voltage+0xb3a>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 801f2a8:	8a3b      	ldrh	r3, [r7, #16]
 801f2aa:	3301      	adds	r3, #1
 801f2ac:	4a1c      	ldr	r2, [pc, #112]	; (801f320 <ce303_voltage+0xa18>)
 801f2ae:	5cd3      	ldrb	r3, [r2, r3]
 801f2b0:	b29b      	uxth	r3, r3
 801f2b2:	3b30      	subs	r3, #48	; 0x30
 801f2b4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 801f2b6:	8a3b      	ldrh	r3, [r7, #16]
 801f2b8:	3304      	adds	r3, #4
 801f2ba:	4a19      	ldr	r2, [pc, #100]	; (801f320 <ce303_voltage+0xa18>)
 801f2bc:	5cd3      	ldrb	r3, [r2, r3]
 801f2be:	2b29      	cmp	r3, #41	; 0x29
 801f2c0:	d110      	bne.n	801f2e4 <ce303_voltage+0x9dc>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 801f2c2:	8a3b      	ldrh	r3, [r7, #16]
 801f2c4:	3303      	adds	r3, #3
 801f2c6:	4a16      	ldr	r2, [pc, #88]	; (801f320 <ce303_voltage+0xa18>)
 801f2c8:	5cd3      	ldrb	r3, [r2, r3]
 801f2ca:	3b30      	subs	r3, #48	; 0x30
 801f2cc:	b29b      	uxth	r3, r3
 801f2ce:	461a      	mov	r2, r3
 801f2d0:	0092      	lsls	r2, r2, #2
 801f2d2:	4413      	add	r3, r2
 801f2d4:	461a      	mov	r2, r3
 801f2d6:	0091      	lsls	r1, r2, #2
 801f2d8:	461a      	mov	r2, r3
 801f2da:	460b      	mov	r3, r1
 801f2dc:	4413      	add	r3, r2
 801f2de:	009b      	lsls	r3, r3, #2
 801f2e0:	82fb      	strh	r3, [r7, #22]
 801f2e2:	e076      	b.n	801f3d2 <ce303_voltage+0xaca>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801f2e4:	8a3b      	ldrh	r3, [r7, #16]
 801f2e6:	3305      	adds	r3, #5
 801f2e8:	4a0d      	ldr	r2, [pc, #52]	; (801f320 <ce303_voltage+0xa18>)
 801f2ea:	5cd3      	ldrb	r3, [r2, r3]
 801f2ec:	2b29      	cmp	r3, #41	; 0x29
 801f2ee:	d11d      	bne.n	801f32c <ce303_voltage+0xa24>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801f2f0:	8a3b      	ldrh	r3, [r7, #16]
 801f2f2:	3303      	adds	r3, #3
 801f2f4:	4a0a      	ldr	r2, [pc, #40]	; (801f320 <ce303_voltage+0xa18>)
 801f2f6:	5cd3      	ldrb	r3, [r2, r3]
 801f2f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801f2fc:	4613      	mov	r3, r2
 801f2fe:	009b      	lsls	r3, r3, #2
 801f300:	4413      	add	r3, r2
 801f302:	005b      	lsls	r3, r3, #1
 801f304:	4619      	mov	r1, r3
 801f306:	8a3b      	ldrh	r3, [r7, #16]
 801f308:	3304      	adds	r3, #4
 801f30a:	4a05      	ldr	r2, [pc, #20]	; (801f320 <ce303_voltage+0xa18>)
 801f30c:	5cd3      	ldrb	r3, [r2, r3]
 801f30e:	3b30      	subs	r3, #48	; 0x30
 801f310:	440b      	add	r3, r1
 801f312:	b29b      	uxth	r3, r3
 801f314:	461a      	mov	r2, r3
 801f316:	0092      	lsls	r2, r2, #2
 801f318:	4413      	add	r3, r2
 801f31a:	005b      	lsls	r3, r3, #1
 801f31c:	82fb      	strh	r3, [r7, #22]
 801f31e:	e058      	b.n	801f3d2 <ce303_voltage+0xaca>
 801f320:	200098e4 	.word	0x200098e4
 801f324:	20009a6c 	.word	0x20009a6c
 801f328:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 801f32c:	8a3b      	ldrh	r3, [r7, #16]
 801f32e:	3306      	adds	r3, #6
 801f330:	4ab1      	ldr	r2, [pc, #708]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f332:	5cd3      	ldrb	r3, [r2, r3]
 801f334:	2b29      	cmp	r3, #41	; 0x29
 801f336:	d126      	bne.n	801f386 <ce303_voltage+0xa7e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801f338:	8a3b      	ldrh	r3, [r7, #16]
 801f33a:	3303      	adds	r3, #3
 801f33c:	4aae      	ldr	r2, [pc, #696]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f33e:	5cd3      	ldrb	r3, [r2, r3]
 801f340:	3b30      	subs	r3, #48	; 0x30
 801f342:	b29b      	uxth	r3, r3
 801f344:	461a      	mov	r2, r3
 801f346:	0092      	lsls	r2, r2, #2
 801f348:	4413      	add	r3, r2
 801f34a:	461a      	mov	r2, r3
 801f34c:	0091      	lsls	r1, r2, #2
 801f34e:	461a      	mov	r2, r3
 801f350:	460b      	mov	r3, r1
 801f352:	4413      	add	r3, r2
 801f354:	009b      	lsls	r3, r3, #2
 801f356:	b29a      	uxth	r2, r3
 801f358:	8a3b      	ldrh	r3, [r7, #16]
 801f35a:	3304      	adds	r3, #4
 801f35c:	49a6      	ldr	r1, [pc, #664]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f35e:	5ccb      	ldrb	r3, [r1, r3]
 801f360:	3b30      	subs	r3, #48	; 0x30
 801f362:	b29b      	uxth	r3, r3
 801f364:	4619      	mov	r1, r3
 801f366:	0089      	lsls	r1, r1, #2
 801f368:	440b      	add	r3, r1
 801f36a:	005b      	lsls	r3, r3, #1
 801f36c:	b29b      	uxth	r3, r3
 801f36e:	4413      	add	r3, r2
 801f370:	b29a      	uxth	r2, r3
 801f372:	8a3b      	ldrh	r3, [r7, #16]
 801f374:	3305      	adds	r3, #5
 801f376:	49a0      	ldr	r1, [pc, #640]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f378:	5ccb      	ldrb	r3, [r1, r3]
 801f37a:	b29b      	uxth	r3, r3
 801f37c:	4413      	add	r3, r2
 801f37e:	b29b      	uxth	r3, r3
 801f380:	3b30      	subs	r3, #48	; 0x30
 801f382:	82fb      	strh	r3, [r7, #22]
 801f384:	e025      	b.n	801f3d2 <ce303_voltage+0xaca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801f386:	8a3b      	ldrh	r3, [r7, #16]
 801f388:	3303      	adds	r3, #3
 801f38a:	4a9b      	ldr	r2, [pc, #620]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f38c:	5cd3      	ldrb	r3, [r2, r3]
 801f38e:	3b30      	subs	r3, #48	; 0x30
 801f390:	b29b      	uxth	r3, r3
 801f392:	461a      	mov	r2, r3
 801f394:	0092      	lsls	r2, r2, #2
 801f396:	4413      	add	r3, r2
 801f398:	461a      	mov	r2, r3
 801f39a:	0091      	lsls	r1, r2, #2
 801f39c:	461a      	mov	r2, r3
 801f39e:	460b      	mov	r3, r1
 801f3a0:	4413      	add	r3, r2
 801f3a2:	009b      	lsls	r3, r3, #2
 801f3a4:	b29a      	uxth	r2, r3
 801f3a6:	8a3b      	ldrh	r3, [r7, #16]
 801f3a8:	3304      	adds	r3, #4
 801f3aa:	4993      	ldr	r1, [pc, #588]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f3ac:	5ccb      	ldrb	r3, [r1, r3]
 801f3ae:	3b30      	subs	r3, #48	; 0x30
 801f3b0:	b29b      	uxth	r3, r3
 801f3b2:	4619      	mov	r1, r3
 801f3b4:	0089      	lsls	r1, r1, #2
 801f3b6:	440b      	add	r3, r1
 801f3b8:	005b      	lsls	r3, r3, #1
 801f3ba:	b29b      	uxth	r3, r3
 801f3bc:	4413      	add	r3, r2
 801f3be:	b29a      	uxth	r2, r3
 801f3c0:	8a3b      	ldrh	r3, [r7, #16]
 801f3c2:	3305      	adds	r3, #5
 801f3c4:	498c      	ldr	r1, [pc, #560]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f3c6:	5ccb      	ldrb	r3, [r1, r3]
 801f3c8:	b29b      	uxth	r3, r3
 801f3ca:	4413      	add	r3, r2
 801f3cc:	b29b      	uxth	r3, r3
 801f3ce:	3b30      	subs	r3, #48	; 0x30
 801f3d0:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f3d2:	4b8a      	ldr	r3, [pc, #552]	; (801f5fc <ce303_voltage+0xcf4>)
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	f04f 31ff 	mov.w	r1, #4294967295
 801f3da:	4618      	mov	r0, r3
 801f3dc:	f7f7 fc60 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 801f3e0:	89fb      	ldrh	r3, [r7, #14]
 801f3e2:	0a1b      	lsrs	r3, r3, #8
 801f3e4:	b29b      	uxth	r3, r3
 801f3e6:	b2db      	uxtb	r3, r3
 801f3e8:	4619      	mov	r1, r3
 801f3ea:	f242 004c 	movw	r0, #8268	; 0x204c
 801f3ee:	f006 f829 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 801f3f2:	89fb      	ldrh	r3, [r7, #14]
 801f3f4:	b2db      	uxtb	r3, r3
 801f3f6:	4619      	mov	r1, r3
 801f3f8:	f242 004d 	movw	r0, #8269	; 0x204d
 801f3fc:	f006 f822 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 801f400:	8afb      	ldrh	r3, [r7, #22]
 801f402:	0a1b      	lsrs	r3, r3, #8
 801f404:	b29b      	uxth	r3, r3
 801f406:	b2db      	uxtb	r3, r3
 801f408:	4619      	mov	r1, r3
 801f40a:	f242 0052 	movw	r0, #8274	; 0x2052
 801f40e:	f006 f819 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801f412:	8afb      	ldrh	r3, [r7, #22]
 801f414:	b2db      	uxtb	r3, r3
 801f416:	4619      	mov	r1, r3
 801f418:	f242 0053 	movw	r0, #8275	; 0x2053
 801f41c:	f006 f812 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801f420:	4b76      	ldr	r3, [pc, #472]	; (801f5fc <ce303_voltage+0xcf4>)
 801f422:	681b      	ldr	r3, [r3, #0]
 801f424:	4618      	mov	r0, r3
 801f426:	f7f7 fc89 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 801f42a:	4a75      	ldr	r2, [pc, #468]	; (801f600 <ce303_voltage+0xcf8>)
 801f42c:	89fb      	ldrh	r3, [r7, #14]
 801f42e:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg =  temp_mil;
 801f432:	4a73      	ldr	r2, [pc, #460]	; (801f600 <ce303_voltage+0xcf8>)
 801f434:	8afb      	ldrh	r3, [r7, #22]
 801f436:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 801f43a:	2301      	movs	r3, #1
 801f43c:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801f43e:	f000 bc81 	b.w	801fd44 <ce303_voltage+0x143c>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 801f442:	8a3b      	ldrh	r3, [r7, #16]
 801f444:	3303      	adds	r3, #3
 801f446:	4a6c      	ldr	r2, [pc, #432]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f448:	5cd3      	ldrb	r3, [r2, r3]
 801f44a:	2b2e      	cmp	r3, #46	; 0x2e
 801f44c:	f040 80da 	bne.w	801f604 <ce303_voltage+0xcfc>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 801f450:	8a3b      	ldrh	r3, [r7, #16]
 801f452:	3301      	adds	r3, #1
 801f454:	4a68      	ldr	r2, [pc, #416]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f456:	5cd3      	ldrb	r3, [r2, r3]
 801f458:	3b30      	subs	r3, #48	; 0x30
 801f45a:	b29b      	uxth	r3, r3
 801f45c:	461a      	mov	r2, r3
 801f45e:	0092      	lsls	r2, r2, #2
 801f460:	4413      	add	r3, r2
 801f462:	005b      	lsls	r3, r3, #1
 801f464:	b29a      	uxth	r2, r3
 801f466:	8a3b      	ldrh	r3, [r7, #16]
 801f468:	3302      	adds	r3, #2
 801f46a:	4963      	ldr	r1, [pc, #396]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f46c:	5ccb      	ldrb	r3, [r1, r3]
 801f46e:	b29b      	uxth	r3, r3
 801f470:	4413      	add	r3, r2
 801f472:	b29b      	uxth	r3, r3
 801f474:	3b30      	subs	r3, #48	; 0x30
 801f476:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 801f478:	8a3b      	ldrh	r3, [r7, #16]
 801f47a:	3305      	adds	r3, #5
 801f47c:	4a5e      	ldr	r2, [pc, #376]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f47e:	5cd3      	ldrb	r3, [r2, r3]
 801f480:	2b29      	cmp	r3, #41	; 0x29
 801f482:	d110      	bne.n	801f4a6 <ce303_voltage+0xb9e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 801f484:	8a3b      	ldrh	r3, [r7, #16]
 801f486:	3304      	adds	r3, #4
 801f488:	4a5b      	ldr	r2, [pc, #364]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f48a:	5cd3      	ldrb	r3, [r2, r3]
 801f48c:	3b30      	subs	r3, #48	; 0x30
 801f48e:	b29b      	uxth	r3, r3
 801f490:	461a      	mov	r2, r3
 801f492:	0092      	lsls	r2, r2, #2
 801f494:	4413      	add	r3, r2
 801f496:	461a      	mov	r2, r3
 801f498:	0091      	lsls	r1, r2, #2
 801f49a:	461a      	mov	r2, r3
 801f49c:	460b      	mov	r3, r1
 801f49e:	4413      	add	r3, r2
 801f4a0:	009b      	lsls	r3, r3, #2
 801f4a2:	82fb      	strh	r3, [r7, #22]
 801f4a4:	e070      	b.n	801f588 <ce303_voltage+0xc80>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 801f4a6:	8a3b      	ldrh	r3, [r7, #16]
 801f4a8:	3306      	adds	r3, #6
 801f4aa:	4a53      	ldr	r2, [pc, #332]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f4ac:	5cd3      	ldrb	r3, [r2, r3]
 801f4ae:	2b29      	cmp	r3, #41	; 0x29
 801f4b0:	d117      	bne.n	801f4e2 <ce303_voltage+0xbda>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 801f4b2:	8a3b      	ldrh	r3, [r7, #16]
 801f4b4:	3304      	adds	r3, #4
 801f4b6:	4a50      	ldr	r2, [pc, #320]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f4b8:	5cd3      	ldrb	r3, [r2, r3]
 801f4ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801f4be:	4613      	mov	r3, r2
 801f4c0:	009b      	lsls	r3, r3, #2
 801f4c2:	4413      	add	r3, r2
 801f4c4:	005b      	lsls	r3, r3, #1
 801f4c6:	4619      	mov	r1, r3
 801f4c8:	8a3b      	ldrh	r3, [r7, #16]
 801f4ca:	3305      	adds	r3, #5
 801f4cc:	4a4a      	ldr	r2, [pc, #296]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f4ce:	5cd3      	ldrb	r3, [r2, r3]
 801f4d0:	3b30      	subs	r3, #48	; 0x30
 801f4d2:	440b      	add	r3, r1
 801f4d4:	b29b      	uxth	r3, r3
 801f4d6:	461a      	mov	r2, r3
 801f4d8:	0092      	lsls	r2, r2, #2
 801f4da:	4413      	add	r3, r2
 801f4dc:	005b      	lsls	r3, r3, #1
 801f4de:	82fb      	strh	r3, [r7, #22]
 801f4e0:	e052      	b.n	801f588 <ce303_voltage+0xc80>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 801f4e2:	8a3b      	ldrh	r3, [r7, #16]
 801f4e4:	3307      	adds	r3, #7
 801f4e6:	4a44      	ldr	r2, [pc, #272]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f4e8:	5cd3      	ldrb	r3, [r2, r3]
 801f4ea:	2b29      	cmp	r3, #41	; 0x29
 801f4ec:	d126      	bne.n	801f53c <ce303_voltage+0xc34>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801f4ee:	8a3b      	ldrh	r3, [r7, #16]
 801f4f0:	3304      	adds	r3, #4
 801f4f2:	4a41      	ldr	r2, [pc, #260]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f4f4:	5cd3      	ldrb	r3, [r2, r3]
 801f4f6:	3b30      	subs	r3, #48	; 0x30
 801f4f8:	b29b      	uxth	r3, r3
 801f4fa:	461a      	mov	r2, r3
 801f4fc:	0092      	lsls	r2, r2, #2
 801f4fe:	4413      	add	r3, r2
 801f500:	461a      	mov	r2, r3
 801f502:	0091      	lsls	r1, r2, #2
 801f504:	461a      	mov	r2, r3
 801f506:	460b      	mov	r3, r1
 801f508:	4413      	add	r3, r2
 801f50a:	009b      	lsls	r3, r3, #2
 801f50c:	b29a      	uxth	r2, r3
 801f50e:	8a3b      	ldrh	r3, [r7, #16]
 801f510:	3305      	adds	r3, #5
 801f512:	4939      	ldr	r1, [pc, #228]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f514:	5ccb      	ldrb	r3, [r1, r3]
 801f516:	3b30      	subs	r3, #48	; 0x30
 801f518:	b29b      	uxth	r3, r3
 801f51a:	4619      	mov	r1, r3
 801f51c:	0089      	lsls	r1, r1, #2
 801f51e:	440b      	add	r3, r1
 801f520:	005b      	lsls	r3, r3, #1
 801f522:	b29b      	uxth	r3, r3
 801f524:	4413      	add	r3, r2
 801f526:	b29a      	uxth	r2, r3
 801f528:	8a3b      	ldrh	r3, [r7, #16]
 801f52a:	3306      	adds	r3, #6
 801f52c:	4932      	ldr	r1, [pc, #200]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f52e:	5ccb      	ldrb	r3, [r1, r3]
 801f530:	b29b      	uxth	r3, r3
 801f532:	4413      	add	r3, r2
 801f534:	b29b      	uxth	r3, r3
 801f536:	3b30      	subs	r3, #48	; 0x30
 801f538:	82fb      	strh	r3, [r7, #22]
 801f53a:	e025      	b.n	801f588 <ce303_voltage+0xc80>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801f53c:	8a3b      	ldrh	r3, [r7, #16]
 801f53e:	3304      	adds	r3, #4
 801f540:	4a2d      	ldr	r2, [pc, #180]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f542:	5cd3      	ldrb	r3, [r2, r3]
 801f544:	3b30      	subs	r3, #48	; 0x30
 801f546:	b29b      	uxth	r3, r3
 801f548:	461a      	mov	r2, r3
 801f54a:	0092      	lsls	r2, r2, #2
 801f54c:	4413      	add	r3, r2
 801f54e:	461a      	mov	r2, r3
 801f550:	0091      	lsls	r1, r2, #2
 801f552:	461a      	mov	r2, r3
 801f554:	460b      	mov	r3, r1
 801f556:	4413      	add	r3, r2
 801f558:	009b      	lsls	r3, r3, #2
 801f55a:	b29a      	uxth	r2, r3
 801f55c:	8a3b      	ldrh	r3, [r7, #16]
 801f55e:	3305      	adds	r3, #5
 801f560:	4925      	ldr	r1, [pc, #148]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f562:	5ccb      	ldrb	r3, [r1, r3]
 801f564:	3b30      	subs	r3, #48	; 0x30
 801f566:	b29b      	uxth	r3, r3
 801f568:	4619      	mov	r1, r3
 801f56a:	0089      	lsls	r1, r1, #2
 801f56c:	440b      	add	r3, r1
 801f56e:	005b      	lsls	r3, r3, #1
 801f570:	b29b      	uxth	r3, r3
 801f572:	4413      	add	r3, r2
 801f574:	b29a      	uxth	r2, r3
 801f576:	8a3b      	ldrh	r3, [r7, #16]
 801f578:	3306      	adds	r3, #6
 801f57a:	491f      	ldr	r1, [pc, #124]	; (801f5f8 <ce303_voltage+0xcf0>)
 801f57c:	5ccb      	ldrb	r3, [r1, r3]
 801f57e:	b29b      	uxth	r3, r3
 801f580:	4413      	add	r3, r2
 801f582:	b29b      	uxth	r3, r3
 801f584:	3b30      	subs	r3, #48	; 0x30
 801f586:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f588:	4b1c      	ldr	r3, [pc, #112]	; (801f5fc <ce303_voltage+0xcf4>)
 801f58a:	681b      	ldr	r3, [r3, #0]
 801f58c:	f04f 31ff 	mov.w	r1, #4294967295
 801f590:	4618      	mov	r0, r3
 801f592:	f7f7 fb85 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 801f596:	89fb      	ldrh	r3, [r7, #14]
 801f598:	0a1b      	lsrs	r3, r3, #8
 801f59a:	b29b      	uxth	r3, r3
 801f59c:	b2db      	uxtb	r3, r3
 801f59e:	4619      	mov	r1, r3
 801f5a0:	f242 004c 	movw	r0, #8268	; 0x204c
 801f5a4:	f005 ff4e 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 801f5a8:	89fb      	ldrh	r3, [r7, #14]
 801f5aa:	b2db      	uxtb	r3, r3
 801f5ac:	4619      	mov	r1, r3
 801f5ae:	f242 004d 	movw	r0, #8269	; 0x204d
 801f5b2:	f005 ff47 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 801f5b6:	8afb      	ldrh	r3, [r7, #22]
 801f5b8:	0a1b      	lsrs	r3, r3, #8
 801f5ba:	b29b      	uxth	r3, r3
 801f5bc:	b2db      	uxtb	r3, r3
 801f5be:	4619      	mov	r1, r3
 801f5c0:	f242 0052 	movw	r0, #8274	; 0x2052
 801f5c4:	f005 ff3e 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801f5c8:	8afb      	ldrh	r3, [r7, #22]
 801f5ca:	b2db      	uxtb	r3, r3
 801f5cc:	4619      	mov	r1, r3
 801f5ce:	f242 0053 	movw	r0, #8275	; 0x2053
 801f5d2:	f005 ff37 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801f5d6:	4b09      	ldr	r3, [pc, #36]	; (801f5fc <ce303_voltage+0xcf4>)
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	4618      	mov	r0, r3
 801f5dc:	f7f7 fbae 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 801f5e0:	4a07      	ldr	r2, [pc, #28]	; (801f600 <ce303_voltage+0xcf8>)
 801f5e2:	89fb      	ldrh	r3, [r7, #14]
 801f5e4:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg = temp_mil;
 801f5e8:	4a05      	ldr	r2, [pc, #20]	; (801f600 <ce303_voltage+0xcf8>)
 801f5ea:	8afb      	ldrh	r3, [r7, #22]
 801f5ec:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 801f5f0:	2301      	movs	r3, #1
 801f5f2:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801f5f4:	e3a6      	b.n	801fd44 <ce303_voltage+0x143c>
 801f5f6:	bf00      	nop
 801f5f8:	200098e4 	.word	0x200098e4
 801f5fc:	20009a6c 	.word	0x20009a6c
 801f600:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 801f604:	8a3b      	ldrh	r3, [r7, #16]
 801f606:	3304      	adds	r3, #4
 801f608:	4a9f      	ldr	r2, [pc, #636]	; (801f888 <ce303_voltage+0xf80>)
 801f60a:	5cd3      	ldrb	r3, [r2, r3]
 801f60c:	2b2e      	cmp	r3, #46	; 0x2e
 801f60e:	f040 8399 	bne.w	801fd44 <ce303_voltage+0x143c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 801f612:	8a3b      	ldrh	r3, [r7, #16]
 801f614:	3301      	adds	r3, #1
 801f616:	4a9c      	ldr	r2, [pc, #624]	; (801f888 <ce303_voltage+0xf80>)
 801f618:	5cd3      	ldrb	r3, [r2, r3]
 801f61a:	3b30      	subs	r3, #48	; 0x30
 801f61c:	b29b      	uxth	r3, r3
 801f61e:	461a      	mov	r2, r3
 801f620:	0092      	lsls	r2, r2, #2
 801f622:	4413      	add	r3, r2
 801f624:	461a      	mov	r2, r3
 801f626:	0091      	lsls	r1, r2, #2
 801f628:	461a      	mov	r2, r3
 801f62a:	460b      	mov	r3, r1
 801f62c:	4413      	add	r3, r2
 801f62e:	009b      	lsls	r3, r3, #2
 801f630:	b29a      	uxth	r2, r3
 801f632:	8a3b      	ldrh	r3, [r7, #16]
 801f634:	3302      	adds	r3, #2
 801f636:	4994      	ldr	r1, [pc, #592]	; (801f888 <ce303_voltage+0xf80>)
 801f638:	5ccb      	ldrb	r3, [r1, r3]
 801f63a:	3b30      	subs	r3, #48	; 0x30
 801f63c:	b29b      	uxth	r3, r3
 801f63e:	4619      	mov	r1, r3
 801f640:	0089      	lsls	r1, r1, #2
 801f642:	440b      	add	r3, r1
 801f644:	005b      	lsls	r3, r3, #1
 801f646:	b29b      	uxth	r3, r3
 801f648:	4413      	add	r3, r2
 801f64a:	b29a      	uxth	r2, r3
 801f64c:	8a3b      	ldrh	r3, [r7, #16]
 801f64e:	3303      	adds	r3, #3
 801f650:	498d      	ldr	r1, [pc, #564]	; (801f888 <ce303_voltage+0xf80>)
 801f652:	5ccb      	ldrb	r3, [r1, r3]
 801f654:	b29b      	uxth	r3, r3
 801f656:	4413      	add	r3, r2
 801f658:	b29b      	uxth	r3, r3
 801f65a:	3b30      	subs	r3, #48	; 0x30
 801f65c:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 801f65e:	8a3b      	ldrh	r3, [r7, #16]
 801f660:	3306      	adds	r3, #6
 801f662:	4a89      	ldr	r2, [pc, #548]	; (801f888 <ce303_voltage+0xf80>)
 801f664:	5cd3      	ldrb	r3, [r2, r3]
 801f666:	2b29      	cmp	r3, #41	; 0x29
 801f668:	d110      	bne.n	801f68c <ce303_voltage+0xd84>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801f66a:	8a3b      	ldrh	r3, [r7, #16]
 801f66c:	3305      	adds	r3, #5
 801f66e:	4a86      	ldr	r2, [pc, #536]	; (801f888 <ce303_voltage+0xf80>)
 801f670:	5cd3      	ldrb	r3, [r2, r3]
 801f672:	3b30      	subs	r3, #48	; 0x30
 801f674:	b29b      	uxth	r3, r3
 801f676:	461a      	mov	r2, r3
 801f678:	0092      	lsls	r2, r2, #2
 801f67a:	4413      	add	r3, r2
 801f67c:	461a      	mov	r2, r3
 801f67e:	0091      	lsls	r1, r2, #2
 801f680:	461a      	mov	r2, r3
 801f682:	460b      	mov	r3, r1
 801f684:	4413      	add	r3, r2
 801f686:	009b      	lsls	r3, r3, #2
 801f688:	82fb      	strh	r3, [r7, #22]
 801f68a:	e070      	b.n	801f76e <ce303_voltage+0xe66>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 801f68c:	8a3b      	ldrh	r3, [r7, #16]
 801f68e:	3307      	adds	r3, #7
 801f690:	4a7d      	ldr	r2, [pc, #500]	; (801f888 <ce303_voltage+0xf80>)
 801f692:	5cd3      	ldrb	r3, [r2, r3]
 801f694:	2b29      	cmp	r3, #41	; 0x29
 801f696:	d117      	bne.n	801f6c8 <ce303_voltage+0xdc0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 801f698:	8a3b      	ldrh	r3, [r7, #16]
 801f69a:	3305      	adds	r3, #5
 801f69c:	4a7a      	ldr	r2, [pc, #488]	; (801f888 <ce303_voltage+0xf80>)
 801f69e:	5cd3      	ldrb	r3, [r2, r3]
 801f6a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801f6a4:	4613      	mov	r3, r2
 801f6a6:	009b      	lsls	r3, r3, #2
 801f6a8:	4413      	add	r3, r2
 801f6aa:	005b      	lsls	r3, r3, #1
 801f6ac:	4619      	mov	r1, r3
 801f6ae:	8a3b      	ldrh	r3, [r7, #16]
 801f6b0:	3306      	adds	r3, #6
 801f6b2:	4a75      	ldr	r2, [pc, #468]	; (801f888 <ce303_voltage+0xf80>)
 801f6b4:	5cd3      	ldrb	r3, [r2, r3]
 801f6b6:	3b30      	subs	r3, #48	; 0x30
 801f6b8:	440b      	add	r3, r1
 801f6ba:	b29b      	uxth	r3, r3
 801f6bc:	461a      	mov	r2, r3
 801f6be:	0092      	lsls	r2, r2, #2
 801f6c0:	4413      	add	r3, r2
 801f6c2:	005b      	lsls	r3, r3, #1
 801f6c4:	82fb      	strh	r3, [r7, #22]
 801f6c6:	e052      	b.n	801f76e <ce303_voltage+0xe66>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 801f6c8:	8a3b      	ldrh	r3, [r7, #16]
 801f6ca:	3308      	adds	r3, #8
 801f6cc:	4a6e      	ldr	r2, [pc, #440]	; (801f888 <ce303_voltage+0xf80>)
 801f6ce:	5cd3      	ldrb	r3, [r2, r3]
 801f6d0:	2b29      	cmp	r3, #41	; 0x29
 801f6d2:	d126      	bne.n	801f722 <ce303_voltage+0xe1a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801f6d4:	8a3b      	ldrh	r3, [r7, #16]
 801f6d6:	3305      	adds	r3, #5
 801f6d8:	4a6b      	ldr	r2, [pc, #428]	; (801f888 <ce303_voltage+0xf80>)
 801f6da:	5cd3      	ldrb	r3, [r2, r3]
 801f6dc:	3b30      	subs	r3, #48	; 0x30
 801f6de:	b29b      	uxth	r3, r3
 801f6e0:	461a      	mov	r2, r3
 801f6e2:	0092      	lsls	r2, r2, #2
 801f6e4:	4413      	add	r3, r2
 801f6e6:	461a      	mov	r2, r3
 801f6e8:	0091      	lsls	r1, r2, #2
 801f6ea:	461a      	mov	r2, r3
 801f6ec:	460b      	mov	r3, r1
 801f6ee:	4413      	add	r3, r2
 801f6f0:	009b      	lsls	r3, r3, #2
 801f6f2:	b29a      	uxth	r2, r3
 801f6f4:	8a3b      	ldrh	r3, [r7, #16]
 801f6f6:	3306      	adds	r3, #6
 801f6f8:	4963      	ldr	r1, [pc, #396]	; (801f888 <ce303_voltage+0xf80>)
 801f6fa:	5ccb      	ldrb	r3, [r1, r3]
 801f6fc:	3b30      	subs	r3, #48	; 0x30
 801f6fe:	b29b      	uxth	r3, r3
 801f700:	4619      	mov	r1, r3
 801f702:	0089      	lsls	r1, r1, #2
 801f704:	440b      	add	r3, r1
 801f706:	005b      	lsls	r3, r3, #1
 801f708:	b29b      	uxth	r3, r3
 801f70a:	4413      	add	r3, r2
 801f70c:	b29a      	uxth	r2, r3
 801f70e:	8a3b      	ldrh	r3, [r7, #16]
 801f710:	3307      	adds	r3, #7
 801f712:	495d      	ldr	r1, [pc, #372]	; (801f888 <ce303_voltage+0xf80>)
 801f714:	5ccb      	ldrb	r3, [r1, r3]
 801f716:	b29b      	uxth	r3, r3
 801f718:	4413      	add	r3, r2
 801f71a:	b29b      	uxth	r3, r3
 801f71c:	3b30      	subs	r3, #48	; 0x30
 801f71e:	82fb      	strh	r3, [r7, #22]
 801f720:	e025      	b.n	801f76e <ce303_voltage+0xe66>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801f722:	8a3b      	ldrh	r3, [r7, #16]
 801f724:	3305      	adds	r3, #5
 801f726:	4a58      	ldr	r2, [pc, #352]	; (801f888 <ce303_voltage+0xf80>)
 801f728:	5cd3      	ldrb	r3, [r2, r3]
 801f72a:	3b30      	subs	r3, #48	; 0x30
 801f72c:	b29b      	uxth	r3, r3
 801f72e:	461a      	mov	r2, r3
 801f730:	0092      	lsls	r2, r2, #2
 801f732:	4413      	add	r3, r2
 801f734:	461a      	mov	r2, r3
 801f736:	0091      	lsls	r1, r2, #2
 801f738:	461a      	mov	r2, r3
 801f73a:	460b      	mov	r3, r1
 801f73c:	4413      	add	r3, r2
 801f73e:	009b      	lsls	r3, r3, #2
 801f740:	b29a      	uxth	r2, r3
 801f742:	8a3b      	ldrh	r3, [r7, #16]
 801f744:	3306      	adds	r3, #6
 801f746:	4950      	ldr	r1, [pc, #320]	; (801f888 <ce303_voltage+0xf80>)
 801f748:	5ccb      	ldrb	r3, [r1, r3]
 801f74a:	3b30      	subs	r3, #48	; 0x30
 801f74c:	b29b      	uxth	r3, r3
 801f74e:	4619      	mov	r1, r3
 801f750:	0089      	lsls	r1, r1, #2
 801f752:	440b      	add	r3, r1
 801f754:	005b      	lsls	r3, r3, #1
 801f756:	b29b      	uxth	r3, r3
 801f758:	4413      	add	r3, r2
 801f75a:	b29a      	uxth	r2, r3
 801f75c:	8a3b      	ldrh	r3, [r7, #16]
 801f75e:	3307      	adds	r3, #7
 801f760:	4949      	ldr	r1, [pc, #292]	; (801f888 <ce303_voltage+0xf80>)
 801f762:	5ccb      	ldrb	r3, [r1, r3]
 801f764:	b29b      	uxth	r3, r3
 801f766:	4413      	add	r3, r2
 801f768:	b29b      	uxth	r3, r3
 801f76a:	3b30      	subs	r3, #48	; 0x30
 801f76c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f76e:	4b47      	ldr	r3, [pc, #284]	; (801f88c <ce303_voltage+0xf84>)
 801f770:	681b      	ldr	r3, [r3, #0]
 801f772:	f04f 31ff 	mov.w	r1, #4294967295
 801f776:	4618      	mov	r0, r3
 801f778:	f7f7 fa92 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 801f77c:	89fb      	ldrh	r3, [r7, #14]
 801f77e:	0a1b      	lsrs	r3, r3, #8
 801f780:	b29b      	uxth	r3, r3
 801f782:	b2db      	uxtb	r3, r3
 801f784:	4619      	mov	r1, r3
 801f786:	f242 004c 	movw	r0, #8268	; 0x204c
 801f78a:	f005 fe5b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 801f78e:	89fb      	ldrh	r3, [r7, #14]
 801f790:	b2db      	uxtb	r3, r3
 801f792:	4619      	mov	r1, r3
 801f794:	f242 004d 	movw	r0, #8269	; 0x204d
 801f798:	f005 fe54 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 801f79c:	8afb      	ldrh	r3, [r7, #22]
 801f79e:	0a1b      	lsrs	r3, r3, #8
 801f7a0:	b29b      	uxth	r3, r3
 801f7a2:	b2db      	uxtb	r3, r3
 801f7a4:	4619      	mov	r1, r3
 801f7a6:	f242 0052 	movw	r0, #8274	; 0x2052
 801f7aa:	f005 fe4b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801f7ae:	8afb      	ldrh	r3, [r7, #22]
 801f7b0:	b2db      	uxtb	r3, r3
 801f7b2:	4619      	mov	r1, r3
 801f7b4:	f242 0053 	movw	r0, #8275	; 0x2053
 801f7b8:	f005 fe44 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801f7bc:	4b33      	ldr	r3, [pc, #204]	; (801f88c <ce303_voltage+0xf84>)
 801f7be:	681b      	ldr	r3, [r3, #0]
 801f7c0:	4618      	mov	r0, r3
 801f7c2:	f7f7 fabb 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 801f7c6:	4a32      	ldr	r2, [pc, #200]	; (801f890 <ce303_voltage+0xf88>)
 801f7c8:	89fb      	ldrh	r3, [r7, #14]
 801f7ca:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg = temp_mil;
 801f7ce:	4a30      	ldr	r2, [pc, #192]	; (801f890 <ce303_voltage+0xf88>)
 801f7d0:	8afb      	ldrh	r3, [r7, #22]
 801f7d2:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 801f7d6:	2301      	movs	r3, #1
 801f7d8:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801f7da:	e2b3      	b.n	801fd44 <ce303_voltage+0x143c>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==1) && (voltage_b_state==1) && (voltage_c_state==0) )
 801f7dc:	8a3b      	ldrh	r3, [r7, #16]
 801f7de:	4a2a      	ldr	r2, [pc, #168]	; (801f888 <ce303_voltage+0xf80>)
 801f7e0:	5cd3      	ldrb	r3, [r2, r3]
 801f7e2:	2b28      	cmp	r3, #40	; 0x28
 801f7e4:	f040 82af 	bne.w	801fd46 <ce303_voltage+0x143e>
 801f7e8:	7d7b      	ldrb	r3, [r7, #21]
 801f7ea:	2b01      	cmp	r3, #1
 801f7ec:	f040 82ab 	bne.w	801fd46 <ce303_voltage+0x143e>
 801f7f0:	7d3b      	ldrb	r3, [r7, #20]
 801f7f2:	2b01      	cmp	r3, #1
 801f7f4:	f040 82a7 	bne.w	801fd46 <ce303_voltage+0x143e>
 801f7f8:	7cfb      	ldrb	r3, [r7, #19]
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	f040 82a3 	bne.w	801fd46 <ce303_voltage+0x143e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801f800:	8a3b      	ldrh	r3, [r7, #16]
 801f802:	3302      	adds	r3, #2
 801f804:	4a20      	ldr	r2, [pc, #128]	; (801f888 <ce303_voltage+0xf80>)
 801f806:	5cd3      	ldrb	r3, [r2, r3]
 801f808:	2b2e      	cmp	r3, #46	; 0x2e
 801f80a:	f040 80cd 	bne.w	801f9a8 <ce303_voltage+0x10a0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 801f80e:	8a3b      	ldrh	r3, [r7, #16]
 801f810:	3301      	adds	r3, #1
 801f812:	4a1d      	ldr	r2, [pc, #116]	; (801f888 <ce303_voltage+0xf80>)
 801f814:	5cd3      	ldrb	r3, [r2, r3]
 801f816:	b29b      	uxth	r3, r3
 801f818:	3b30      	subs	r3, #48	; 0x30
 801f81a:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 801f81c:	8a3b      	ldrh	r3, [r7, #16]
 801f81e:	3304      	adds	r3, #4
 801f820:	4a19      	ldr	r2, [pc, #100]	; (801f888 <ce303_voltage+0xf80>)
 801f822:	5cd3      	ldrb	r3, [r2, r3]
 801f824:	2b29      	cmp	r3, #41	; 0x29
 801f826:	d110      	bne.n	801f84a <ce303_voltage+0xf42>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 801f828:	8a3b      	ldrh	r3, [r7, #16]
 801f82a:	3303      	adds	r3, #3
 801f82c:	4a16      	ldr	r2, [pc, #88]	; (801f888 <ce303_voltage+0xf80>)
 801f82e:	5cd3      	ldrb	r3, [r2, r3]
 801f830:	3b30      	subs	r3, #48	; 0x30
 801f832:	b29b      	uxth	r3, r3
 801f834:	461a      	mov	r2, r3
 801f836:	0092      	lsls	r2, r2, #2
 801f838:	4413      	add	r3, r2
 801f83a:	461a      	mov	r2, r3
 801f83c:	0091      	lsls	r1, r2, #2
 801f83e:	461a      	mov	r2, r3
 801f840:	460b      	mov	r3, r1
 801f842:	4413      	add	r3, r2
 801f844:	009b      	lsls	r3, r3, #2
 801f846:	82fb      	strh	r3, [r7, #22]
 801f848:	e077      	b.n	801f93a <ce303_voltage+0x1032>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801f84a:	8a3b      	ldrh	r3, [r7, #16]
 801f84c:	3305      	adds	r3, #5
 801f84e:	4a0e      	ldr	r2, [pc, #56]	; (801f888 <ce303_voltage+0xf80>)
 801f850:	5cd3      	ldrb	r3, [r2, r3]
 801f852:	2b29      	cmp	r3, #41	; 0x29
 801f854:	d11e      	bne.n	801f894 <ce303_voltage+0xf8c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801f856:	8a3b      	ldrh	r3, [r7, #16]
 801f858:	3303      	adds	r3, #3
 801f85a:	4a0b      	ldr	r2, [pc, #44]	; (801f888 <ce303_voltage+0xf80>)
 801f85c:	5cd3      	ldrb	r3, [r2, r3]
 801f85e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801f862:	4613      	mov	r3, r2
 801f864:	009b      	lsls	r3, r3, #2
 801f866:	4413      	add	r3, r2
 801f868:	005b      	lsls	r3, r3, #1
 801f86a:	4619      	mov	r1, r3
 801f86c:	8a3b      	ldrh	r3, [r7, #16]
 801f86e:	3304      	adds	r3, #4
 801f870:	4a05      	ldr	r2, [pc, #20]	; (801f888 <ce303_voltage+0xf80>)
 801f872:	5cd3      	ldrb	r3, [r2, r3]
 801f874:	3b30      	subs	r3, #48	; 0x30
 801f876:	440b      	add	r3, r1
 801f878:	b29b      	uxth	r3, r3
 801f87a:	461a      	mov	r2, r3
 801f87c:	0092      	lsls	r2, r2, #2
 801f87e:	4413      	add	r3, r2
 801f880:	005b      	lsls	r3, r3, #1
 801f882:	82fb      	strh	r3, [r7, #22]
 801f884:	e059      	b.n	801f93a <ce303_voltage+0x1032>
 801f886:	bf00      	nop
 801f888:	200098e4 	.word	0x200098e4
 801f88c:	20009a6c 	.word	0x20009a6c
 801f890:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 801f894:	8a3b      	ldrh	r3, [r7, #16]
 801f896:	3306      	adds	r3, #6
 801f898:	4ab0      	ldr	r2, [pc, #704]	; (801fb5c <ce303_voltage+0x1254>)
 801f89a:	5cd3      	ldrb	r3, [r2, r3]
 801f89c:	2b29      	cmp	r3, #41	; 0x29
 801f89e:	d126      	bne.n	801f8ee <ce303_voltage+0xfe6>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801f8a0:	8a3b      	ldrh	r3, [r7, #16]
 801f8a2:	3303      	adds	r3, #3
 801f8a4:	4aad      	ldr	r2, [pc, #692]	; (801fb5c <ce303_voltage+0x1254>)
 801f8a6:	5cd3      	ldrb	r3, [r2, r3]
 801f8a8:	3b30      	subs	r3, #48	; 0x30
 801f8aa:	b29b      	uxth	r3, r3
 801f8ac:	461a      	mov	r2, r3
 801f8ae:	0092      	lsls	r2, r2, #2
 801f8b0:	4413      	add	r3, r2
 801f8b2:	461a      	mov	r2, r3
 801f8b4:	0091      	lsls	r1, r2, #2
 801f8b6:	461a      	mov	r2, r3
 801f8b8:	460b      	mov	r3, r1
 801f8ba:	4413      	add	r3, r2
 801f8bc:	009b      	lsls	r3, r3, #2
 801f8be:	b29a      	uxth	r2, r3
 801f8c0:	8a3b      	ldrh	r3, [r7, #16]
 801f8c2:	3304      	adds	r3, #4
 801f8c4:	49a5      	ldr	r1, [pc, #660]	; (801fb5c <ce303_voltage+0x1254>)
 801f8c6:	5ccb      	ldrb	r3, [r1, r3]
 801f8c8:	3b30      	subs	r3, #48	; 0x30
 801f8ca:	b29b      	uxth	r3, r3
 801f8cc:	4619      	mov	r1, r3
 801f8ce:	0089      	lsls	r1, r1, #2
 801f8d0:	440b      	add	r3, r1
 801f8d2:	005b      	lsls	r3, r3, #1
 801f8d4:	b29b      	uxth	r3, r3
 801f8d6:	4413      	add	r3, r2
 801f8d8:	b29a      	uxth	r2, r3
 801f8da:	8a3b      	ldrh	r3, [r7, #16]
 801f8dc:	3305      	adds	r3, #5
 801f8de:	499f      	ldr	r1, [pc, #636]	; (801fb5c <ce303_voltage+0x1254>)
 801f8e0:	5ccb      	ldrb	r3, [r1, r3]
 801f8e2:	b29b      	uxth	r3, r3
 801f8e4:	4413      	add	r3, r2
 801f8e6:	b29b      	uxth	r3, r3
 801f8e8:	3b30      	subs	r3, #48	; 0x30
 801f8ea:	82fb      	strh	r3, [r7, #22]
 801f8ec:	e025      	b.n	801f93a <ce303_voltage+0x1032>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801f8ee:	8a3b      	ldrh	r3, [r7, #16]
 801f8f0:	3303      	adds	r3, #3
 801f8f2:	4a9a      	ldr	r2, [pc, #616]	; (801fb5c <ce303_voltage+0x1254>)
 801f8f4:	5cd3      	ldrb	r3, [r2, r3]
 801f8f6:	3b30      	subs	r3, #48	; 0x30
 801f8f8:	b29b      	uxth	r3, r3
 801f8fa:	461a      	mov	r2, r3
 801f8fc:	0092      	lsls	r2, r2, #2
 801f8fe:	4413      	add	r3, r2
 801f900:	461a      	mov	r2, r3
 801f902:	0091      	lsls	r1, r2, #2
 801f904:	461a      	mov	r2, r3
 801f906:	460b      	mov	r3, r1
 801f908:	4413      	add	r3, r2
 801f90a:	009b      	lsls	r3, r3, #2
 801f90c:	b29a      	uxth	r2, r3
 801f90e:	8a3b      	ldrh	r3, [r7, #16]
 801f910:	3304      	adds	r3, #4
 801f912:	4992      	ldr	r1, [pc, #584]	; (801fb5c <ce303_voltage+0x1254>)
 801f914:	5ccb      	ldrb	r3, [r1, r3]
 801f916:	3b30      	subs	r3, #48	; 0x30
 801f918:	b29b      	uxth	r3, r3
 801f91a:	4619      	mov	r1, r3
 801f91c:	0089      	lsls	r1, r1, #2
 801f91e:	440b      	add	r3, r1
 801f920:	005b      	lsls	r3, r3, #1
 801f922:	b29b      	uxth	r3, r3
 801f924:	4413      	add	r3, r2
 801f926:	b29a      	uxth	r2, r3
 801f928:	8a3b      	ldrh	r3, [r7, #16]
 801f92a:	3305      	adds	r3, #5
 801f92c:	498b      	ldr	r1, [pc, #556]	; (801fb5c <ce303_voltage+0x1254>)
 801f92e:	5ccb      	ldrb	r3, [r1, r3]
 801f930:	b29b      	uxth	r3, r3
 801f932:	4413      	add	r3, r2
 801f934:	b29b      	uxth	r3, r3
 801f936:	3b30      	subs	r3, #48	; 0x30
 801f938:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f93a:	4b89      	ldr	r3, [pc, #548]	; (801fb60 <ce303_voltage+0x1258>)
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	f04f 31ff 	mov.w	r1, #4294967295
 801f942:	4618      	mov	r0, r3
 801f944:	f7f7 f9ac 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 801f948:	89fb      	ldrh	r3, [r7, #14]
 801f94a:	0a1b      	lsrs	r3, r3, #8
 801f94c:	b29b      	uxth	r3, r3
 801f94e:	b2db      	uxtb	r3, r3
 801f950:	4619      	mov	r1, r3
 801f952:	f242 004e 	movw	r0, #8270	; 0x204e
 801f956:	f005 fd75 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 801f95a:	89fb      	ldrh	r3, [r7, #14]
 801f95c:	b2db      	uxtb	r3, r3
 801f95e:	4619      	mov	r1, r3
 801f960:	f242 004f 	movw	r0, #8271	; 0x204f
 801f964:	f005 fd6e 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 801f968:	8afb      	ldrh	r3, [r7, #22]
 801f96a:	0a1b      	lsrs	r3, r3, #8
 801f96c:	b29b      	uxth	r3, r3
 801f96e:	b2db      	uxtb	r3, r3
 801f970:	4619      	mov	r1, r3
 801f972:	f242 0054 	movw	r0, #8276	; 0x2054
 801f976:	f005 fd65 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801f97a:	8afb      	ldrh	r3, [r7, #22]
 801f97c:	b2db      	uxtb	r3, r3
 801f97e:	4619      	mov	r1, r3
 801f980:	f242 0055 	movw	r0, #8277	; 0x2055
 801f984:	f005 fd5e 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801f988:	4b75      	ldr	r3, [pc, #468]	; (801fb60 <ce303_voltage+0x1258>)
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	4618      	mov	r0, r3
 801f98e:	f7f7 f9d5 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 801f992:	4a74      	ldr	r2, [pc, #464]	; (801fb64 <ce303_voltage+0x125c>)
 801f994:	89fb      	ldrh	r3, [r7, #14]
 801f996:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 801f99a:	4a72      	ldr	r2, [pc, #456]	; (801fb64 <ce303_voltage+0x125c>)
 801f99c:	8afb      	ldrh	r3, [r7, #22]
 801f99e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 801f9a2:	2301      	movs	r3, #1
 801f9a4:	74fb      	strb	r3, [r7, #19]
 801f9a6:	e1ce      	b.n	801fd46 <ce303_voltage+0x143e>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 801f9a8:	8a3b      	ldrh	r3, [r7, #16]
 801f9aa:	3303      	adds	r3, #3
 801f9ac:	4a6b      	ldr	r2, [pc, #428]	; (801fb5c <ce303_voltage+0x1254>)
 801f9ae:	5cd3      	ldrb	r3, [r2, r3]
 801f9b0:	2b2e      	cmp	r3, #46	; 0x2e
 801f9b2:	f040 80d9 	bne.w	801fb68 <ce303_voltage+0x1260>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 801f9b6:	8a3b      	ldrh	r3, [r7, #16]
 801f9b8:	3301      	adds	r3, #1
 801f9ba:	4a68      	ldr	r2, [pc, #416]	; (801fb5c <ce303_voltage+0x1254>)
 801f9bc:	5cd3      	ldrb	r3, [r2, r3]
 801f9be:	3b30      	subs	r3, #48	; 0x30
 801f9c0:	b29b      	uxth	r3, r3
 801f9c2:	461a      	mov	r2, r3
 801f9c4:	0092      	lsls	r2, r2, #2
 801f9c6:	4413      	add	r3, r2
 801f9c8:	005b      	lsls	r3, r3, #1
 801f9ca:	b29a      	uxth	r2, r3
 801f9cc:	8a3b      	ldrh	r3, [r7, #16]
 801f9ce:	3302      	adds	r3, #2
 801f9d0:	4962      	ldr	r1, [pc, #392]	; (801fb5c <ce303_voltage+0x1254>)
 801f9d2:	5ccb      	ldrb	r3, [r1, r3]
 801f9d4:	b29b      	uxth	r3, r3
 801f9d6:	4413      	add	r3, r2
 801f9d8:	b29b      	uxth	r3, r3
 801f9da:	3b30      	subs	r3, #48	; 0x30
 801f9dc:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 801f9de:	8a3b      	ldrh	r3, [r7, #16]
 801f9e0:	3305      	adds	r3, #5
 801f9e2:	4a5e      	ldr	r2, [pc, #376]	; (801fb5c <ce303_voltage+0x1254>)
 801f9e4:	5cd3      	ldrb	r3, [r2, r3]
 801f9e6:	2b29      	cmp	r3, #41	; 0x29
 801f9e8:	d110      	bne.n	801fa0c <ce303_voltage+0x1104>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 801f9ea:	8a3b      	ldrh	r3, [r7, #16]
 801f9ec:	3304      	adds	r3, #4
 801f9ee:	4a5b      	ldr	r2, [pc, #364]	; (801fb5c <ce303_voltage+0x1254>)
 801f9f0:	5cd3      	ldrb	r3, [r2, r3]
 801f9f2:	3b30      	subs	r3, #48	; 0x30
 801f9f4:	b29b      	uxth	r3, r3
 801f9f6:	461a      	mov	r2, r3
 801f9f8:	0092      	lsls	r2, r2, #2
 801f9fa:	4413      	add	r3, r2
 801f9fc:	461a      	mov	r2, r3
 801f9fe:	0091      	lsls	r1, r2, #2
 801fa00:	461a      	mov	r2, r3
 801fa02:	460b      	mov	r3, r1
 801fa04:	4413      	add	r3, r2
 801fa06:	009b      	lsls	r3, r3, #2
 801fa08:	82fb      	strh	r3, [r7, #22]
 801fa0a:	e070      	b.n	801faee <ce303_voltage+0x11e6>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 801fa0c:	8a3b      	ldrh	r3, [r7, #16]
 801fa0e:	3306      	adds	r3, #6
 801fa10:	4a52      	ldr	r2, [pc, #328]	; (801fb5c <ce303_voltage+0x1254>)
 801fa12:	5cd3      	ldrb	r3, [r2, r3]
 801fa14:	2b29      	cmp	r3, #41	; 0x29
 801fa16:	d117      	bne.n	801fa48 <ce303_voltage+0x1140>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 801fa18:	8a3b      	ldrh	r3, [r7, #16]
 801fa1a:	3304      	adds	r3, #4
 801fa1c:	4a4f      	ldr	r2, [pc, #316]	; (801fb5c <ce303_voltage+0x1254>)
 801fa1e:	5cd3      	ldrb	r3, [r2, r3]
 801fa20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801fa24:	4613      	mov	r3, r2
 801fa26:	009b      	lsls	r3, r3, #2
 801fa28:	4413      	add	r3, r2
 801fa2a:	005b      	lsls	r3, r3, #1
 801fa2c:	4619      	mov	r1, r3
 801fa2e:	8a3b      	ldrh	r3, [r7, #16]
 801fa30:	3305      	adds	r3, #5
 801fa32:	4a4a      	ldr	r2, [pc, #296]	; (801fb5c <ce303_voltage+0x1254>)
 801fa34:	5cd3      	ldrb	r3, [r2, r3]
 801fa36:	3b30      	subs	r3, #48	; 0x30
 801fa38:	440b      	add	r3, r1
 801fa3a:	b29b      	uxth	r3, r3
 801fa3c:	461a      	mov	r2, r3
 801fa3e:	0092      	lsls	r2, r2, #2
 801fa40:	4413      	add	r3, r2
 801fa42:	005b      	lsls	r3, r3, #1
 801fa44:	82fb      	strh	r3, [r7, #22]
 801fa46:	e052      	b.n	801faee <ce303_voltage+0x11e6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 801fa48:	8a3b      	ldrh	r3, [r7, #16]
 801fa4a:	3307      	adds	r3, #7
 801fa4c:	4a43      	ldr	r2, [pc, #268]	; (801fb5c <ce303_voltage+0x1254>)
 801fa4e:	5cd3      	ldrb	r3, [r2, r3]
 801fa50:	2b29      	cmp	r3, #41	; 0x29
 801fa52:	d126      	bne.n	801faa2 <ce303_voltage+0x119a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801fa54:	8a3b      	ldrh	r3, [r7, #16]
 801fa56:	3304      	adds	r3, #4
 801fa58:	4a40      	ldr	r2, [pc, #256]	; (801fb5c <ce303_voltage+0x1254>)
 801fa5a:	5cd3      	ldrb	r3, [r2, r3]
 801fa5c:	3b30      	subs	r3, #48	; 0x30
 801fa5e:	b29b      	uxth	r3, r3
 801fa60:	461a      	mov	r2, r3
 801fa62:	0092      	lsls	r2, r2, #2
 801fa64:	4413      	add	r3, r2
 801fa66:	461a      	mov	r2, r3
 801fa68:	0091      	lsls	r1, r2, #2
 801fa6a:	461a      	mov	r2, r3
 801fa6c:	460b      	mov	r3, r1
 801fa6e:	4413      	add	r3, r2
 801fa70:	009b      	lsls	r3, r3, #2
 801fa72:	b29a      	uxth	r2, r3
 801fa74:	8a3b      	ldrh	r3, [r7, #16]
 801fa76:	3305      	adds	r3, #5
 801fa78:	4938      	ldr	r1, [pc, #224]	; (801fb5c <ce303_voltage+0x1254>)
 801fa7a:	5ccb      	ldrb	r3, [r1, r3]
 801fa7c:	3b30      	subs	r3, #48	; 0x30
 801fa7e:	b29b      	uxth	r3, r3
 801fa80:	4619      	mov	r1, r3
 801fa82:	0089      	lsls	r1, r1, #2
 801fa84:	440b      	add	r3, r1
 801fa86:	005b      	lsls	r3, r3, #1
 801fa88:	b29b      	uxth	r3, r3
 801fa8a:	4413      	add	r3, r2
 801fa8c:	b29a      	uxth	r2, r3
 801fa8e:	8a3b      	ldrh	r3, [r7, #16]
 801fa90:	3306      	adds	r3, #6
 801fa92:	4932      	ldr	r1, [pc, #200]	; (801fb5c <ce303_voltage+0x1254>)
 801fa94:	5ccb      	ldrb	r3, [r1, r3]
 801fa96:	b29b      	uxth	r3, r3
 801fa98:	4413      	add	r3, r2
 801fa9a:	b29b      	uxth	r3, r3
 801fa9c:	3b30      	subs	r3, #48	; 0x30
 801fa9e:	82fb      	strh	r3, [r7, #22]
 801faa0:	e025      	b.n	801faee <ce303_voltage+0x11e6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801faa2:	8a3b      	ldrh	r3, [r7, #16]
 801faa4:	3304      	adds	r3, #4
 801faa6:	4a2d      	ldr	r2, [pc, #180]	; (801fb5c <ce303_voltage+0x1254>)
 801faa8:	5cd3      	ldrb	r3, [r2, r3]
 801faaa:	3b30      	subs	r3, #48	; 0x30
 801faac:	b29b      	uxth	r3, r3
 801faae:	461a      	mov	r2, r3
 801fab0:	0092      	lsls	r2, r2, #2
 801fab2:	4413      	add	r3, r2
 801fab4:	461a      	mov	r2, r3
 801fab6:	0091      	lsls	r1, r2, #2
 801fab8:	461a      	mov	r2, r3
 801faba:	460b      	mov	r3, r1
 801fabc:	4413      	add	r3, r2
 801fabe:	009b      	lsls	r3, r3, #2
 801fac0:	b29a      	uxth	r2, r3
 801fac2:	8a3b      	ldrh	r3, [r7, #16]
 801fac4:	3305      	adds	r3, #5
 801fac6:	4925      	ldr	r1, [pc, #148]	; (801fb5c <ce303_voltage+0x1254>)
 801fac8:	5ccb      	ldrb	r3, [r1, r3]
 801faca:	3b30      	subs	r3, #48	; 0x30
 801facc:	b29b      	uxth	r3, r3
 801face:	4619      	mov	r1, r3
 801fad0:	0089      	lsls	r1, r1, #2
 801fad2:	440b      	add	r3, r1
 801fad4:	005b      	lsls	r3, r3, #1
 801fad6:	b29b      	uxth	r3, r3
 801fad8:	4413      	add	r3, r2
 801fada:	b29a      	uxth	r2, r3
 801fadc:	8a3b      	ldrh	r3, [r7, #16]
 801fade:	3306      	adds	r3, #6
 801fae0:	491e      	ldr	r1, [pc, #120]	; (801fb5c <ce303_voltage+0x1254>)
 801fae2:	5ccb      	ldrb	r3, [r1, r3]
 801fae4:	b29b      	uxth	r3, r3
 801fae6:	4413      	add	r3, r2
 801fae8:	b29b      	uxth	r3, r3
 801faea:	3b30      	subs	r3, #48	; 0x30
 801faec:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801faee:	4b1c      	ldr	r3, [pc, #112]	; (801fb60 <ce303_voltage+0x1258>)
 801faf0:	681b      	ldr	r3, [r3, #0]
 801faf2:	f04f 31ff 	mov.w	r1, #4294967295
 801faf6:	4618      	mov	r0, r3
 801faf8:	f7f7 f8d2 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 801fafc:	89fb      	ldrh	r3, [r7, #14]
 801fafe:	0a1b      	lsrs	r3, r3, #8
 801fb00:	b29b      	uxth	r3, r3
 801fb02:	b2db      	uxtb	r3, r3
 801fb04:	4619      	mov	r1, r3
 801fb06:	f242 004e 	movw	r0, #8270	; 0x204e
 801fb0a:	f005 fc9b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 801fb0e:	89fb      	ldrh	r3, [r7, #14]
 801fb10:	b2db      	uxtb	r3, r3
 801fb12:	4619      	mov	r1, r3
 801fb14:	f242 004f 	movw	r0, #8271	; 0x204f
 801fb18:	f005 fc94 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 801fb1c:	8afb      	ldrh	r3, [r7, #22]
 801fb1e:	0a1b      	lsrs	r3, r3, #8
 801fb20:	b29b      	uxth	r3, r3
 801fb22:	b2db      	uxtb	r3, r3
 801fb24:	4619      	mov	r1, r3
 801fb26:	f242 0054 	movw	r0, #8276	; 0x2054
 801fb2a:	f005 fc8b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801fb2e:	8afb      	ldrh	r3, [r7, #22]
 801fb30:	b2db      	uxtb	r3, r3
 801fb32:	4619      	mov	r1, r3
 801fb34:	f242 0055 	movw	r0, #8277	; 0x2055
 801fb38:	f005 fc84 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801fb3c:	4b08      	ldr	r3, [pc, #32]	; (801fb60 <ce303_voltage+0x1258>)
 801fb3e:	681b      	ldr	r3, [r3, #0]
 801fb40:	4618      	mov	r0, r3
 801fb42:	f7f7 f8fb 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 801fb46:	4a07      	ldr	r2, [pc, #28]	; (801fb64 <ce303_voltage+0x125c>)
 801fb48:	89fb      	ldrh	r3, [r7, #14]
 801fb4a:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 801fb4e:	4a05      	ldr	r2, [pc, #20]	; (801fb64 <ce303_voltage+0x125c>)
 801fb50:	8afb      	ldrh	r3, [r7, #22]
 801fb52:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 801fb56:	2301      	movs	r3, #1
 801fb58:	74fb      	strb	r3, [r7, #19]
 801fb5a:	e0f4      	b.n	801fd46 <ce303_voltage+0x143e>
 801fb5c:	200098e4 	.word	0x200098e4
 801fb60:	20009a6c 	.word	0x20009a6c
 801fb64:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 801fb68:	8a3b      	ldrh	r3, [r7, #16]
 801fb6a:	3304      	adds	r3, #4
 801fb6c:	4a85      	ldr	r2, [pc, #532]	; (801fd84 <ce303_voltage+0x147c>)
 801fb6e:	5cd3      	ldrb	r3, [r2, r3]
 801fb70:	2b2e      	cmp	r3, #46	; 0x2e
 801fb72:	f040 80e8 	bne.w	801fd46 <ce303_voltage+0x143e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 801fb76:	8a3b      	ldrh	r3, [r7, #16]
 801fb78:	3301      	adds	r3, #1
 801fb7a:	4a82      	ldr	r2, [pc, #520]	; (801fd84 <ce303_voltage+0x147c>)
 801fb7c:	5cd3      	ldrb	r3, [r2, r3]
 801fb7e:	3b30      	subs	r3, #48	; 0x30
 801fb80:	b29b      	uxth	r3, r3
 801fb82:	461a      	mov	r2, r3
 801fb84:	0092      	lsls	r2, r2, #2
 801fb86:	4413      	add	r3, r2
 801fb88:	461a      	mov	r2, r3
 801fb8a:	0091      	lsls	r1, r2, #2
 801fb8c:	461a      	mov	r2, r3
 801fb8e:	460b      	mov	r3, r1
 801fb90:	4413      	add	r3, r2
 801fb92:	009b      	lsls	r3, r3, #2
 801fb94:	b29a      	uxth	r2, r3
 801fb96:	8a3b      	ldrh	r3, [r7, #16]
 801fb98:	3302      	adds	r3, #2
 801fb9a:	497a      	ldr	r1, [pc, #488]	; (801fd84 <ce303_voltage+0x147c>)
 801fb9c:	5ccb      	ldrb	r3, [r1, r3]
 801fb9e:	3b30      	subs	r3, #48	; 0x30
 801fba0:	b29b      	uxth	r3, r3
 801fba2:	4619      	mov	r1, r3
 801fba4:	0089      	lsls	r1, r1, #2
 801fba6:	440b      	add	r3, r1
 801fba8:	005b      	lsls	r3, r3, #1
 801fbaa:	b29b      	uxth	r3, r3
 801fbac:	4413      	add	r3, r2
 801fbae:	b29a      	uxth	r2, r3
 801fbb0:	8a3b      	ldrh	r3, [r7, #16]
 801fbb2:	3303      	adds	r3, #3
 801fbb4:	4973      	ldr	r1, [pc, #460]	; (801fd84 <ce303_voltage+0x147c>)
 801fbb6:	5ccb      	ldrb	r3, [r1, r3]
 801fbb8:	b29b      	uxth	r3, r3
 801fbba:	4413      	add	r3, r2
 801fbbc:	b29b      	uxth	r3, r3
 801fbbe:	3b30      	subs	r3, #48	; 0x30
 801fbc0:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 801fbc2:	8a3b      	ldrh	r3, [r7, #16]
 801fbc4:	3306      	adds	r3, #6
 801fbc6:	4a6f      	ldr	r2, [pc, #444]	; (801fd84 <ce303_voltage+0x147c>)
 801fbc8:	5cd3      	ldrb	r3, [r2, r3]
 801fbca:	2b29      	cmp	r3, #41	; 0x29
 801fbcc:	d110      	bne.n	801fbf0 <ce303_voltage+0x12e8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801fbce:	8a3b      	ldrh	r3, [r7, #16]
 801fbd0:	3305      	adds	r3, #5
 801fbd2:	4a6c      	ldr	r2, [pc, #432]	; (801fd84 <ce303_voltage+0x147c>)
 801fbd4:	5cd3      	ldrb	r3, [r2, r3]
 801fbd6:	3b30      	subs	r3, #48	; 0x30
 801fbd8:	b29b      	uxth	r3, r3
 801fbda:	461a      	mov	r2, r3
 801fbdc:	0092      	lsls	r2, r2, #2
 801fbde:	4413      	add	r3, r2
 801fbe0:	461a      	mov	r2, r3
 801fbe2:	0091      	lsls	r1, r2, #2
 801fbe4:	461a      	mov	r2, r3
 801fbe6:	460b      	mov	r3, r1
 801fbe8:	4413      	add	r3, r2
 801fbea:	009b      	lsls	r3, r3, #2
 801fbec:	82fb      	strh	r3, [r7, #22]
 801fbee:	e070      	b.n	801fcd2 <ce303_voltage+0x13ca>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 801fbf0:	8a3b      	ldrh	r3, [r7, #16]
 801fbf2:	3307      	adds	r3, #7
 801fbf4:	4a63      	ldr	r2, [pc, #396]	; (801fd84 <ce303_voltage+0x147c>)
 801fbf6:	5cd3      	ldrb	r3, [r2, r3]
 801fbf8:	2b29      	cmp	r3, #41	; 0x29
 801fbfa:	d117      	bne.n	801fc2c <ce303_voltage+0x1324>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 801fbfc:	8a3b      	ldrh	r3, [r7, #16]
 801fbfe:	3305      	adds	r3, #5
 801fc00:	4a60      	ldr	r2, [pc, #384]	; (801fd84 <ce303_voltage+0x147c>)
 801fc02:	5cd3      	ldrb	r3, [r2, r3]
 801fc04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801fc08:	4613      	mov	r3, r2
 801fc0a:	009b      	lsls	r3, r3, #2
 801fc0c:	4413      	add	r3, r2
 801fc0e:	005b      	lsls	r3, r3, #1
 801fc10:	4619      	mov	r1, r3
 801fc12:	8a3b      	ldrh	r3, [r7, #16]
 801fc14:	3306      	adds	r3, #6
 801fc16:	4a5b      	ldr	r2, [pc, #364]	; (801fd84 <ce303_voltage+0x147c>)
 801fc18:	5cd3      	ldrb	r3, [r2, r3]
 801fc1a:	3b30      	subs	r3, #48	; 0x30
 801fc1c:	440b      	add	r3, r1
 801fc1e:	b29b      	uxth	r3, r3
 801fc20:	461a      	mov	r2, r3
 801fc22:	0092      	lsls	r2, r2, #2
 801fc24:	4413      	add	r3, r2
 801fc26:	005b      	lsls	r3, r3, #1
 801fc28:	82fb      	strh	r3, [r7, #22]
 801fc2a:	e052      	b.n	801fcd2 <ce303_voltage+0x13ca>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 801fc2c:	8a3b      	ldrh	r3, [r7, #16]
 801fc2e:	3308      	adds	r3, #8
 801fc30:	4a54      	ldr	r2, [pc, #336]	; (801fd84 <ce303_voltage+0x147c>)
 801fc32:	5cd3      	ldrb	r3, [r2, r3]
 801fc34:	2b29      	cmp	r3, #41	; 0x29
 801fc36:	d126      	bne.n	801fc86 <ce303_voltage+0x137e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801fc38:	8a3b      	ldrh	r3, [r7, #16]
 801fc3a:	3305      	adds	r3, #5
 801fc3c:	4a51      	ldr	r2, [pc, #324]	; (801fd84 <ce303_voltage+0x147c>)
 801fc3e:	5cd3      	ldrb	r3, [r2, r3]
 801fc40:	3b30      	subs	r3, #48	; 0x30
 801fc42:	b29b      	uxth	r3, r3
 801fc44:	461a      	mov	r2, r3
 801fc46:	0092      	lsls	r2, r2, #2
 801fc48:	4413      	add	r3, r2
 801fc4a:	461a      	mov	r2, r3
 801fc4c:	0091      	lsls	r1, r2, #2
 801fc4e:	461a      	mov	r2, r3
 801fc50:	460b      	mov	r3, r1
 801fc52:	4413      	add	r3, r2
 801fc54:	009b      	lsls	r3, r3, #2
 801fc56:	b29a      	uxth	r2, r3
 801fc58:	8a3b      	ldrh	r3, [r7, #16]
 801fc5a:	3306      	adds	r3, #6
 801fc5c:	4949      	ldr	r1, [pc, #292]	; (801fd84 <ce303_voltage+0x147c>)
 801fc5e:	5ccb      	ldrb	r3, [r1, r3]
 801fc60:	3b30      	subs	r3, #48	; 0x30
 801fc62:	b29b      	uxth	r3, r3
 801fc64:	4619      	mov	r1, r3
 801fc66:	0089      	lsls	r1, r1, #2
 801fc68:	440b      	add	r3, r1
 801fc6a:	005b      	lsls	r3, r3, #1
 801fc6c:	b29b      	uxth	r3, r3
 801fc6e:	4413      	add	r3, r2
 801fc70:	b29a      	uxth	r2, r3
 801fc72:	8a3b      	ldrh	r3, [r7, #16]
 801fc74:	3307      	adds	r3, #7
 801fc76:	4943      	ldr	r1, [pc, #268]	; (801fd84 <ce303_voltage+0x147c>)
 801fc78:	5ccb      	ldrb	r3, [r1, r3]
 801fc7a:	b29b      	uxth	r3, r3
 801fc7c:	4413      	add	r3, r2
 801fc7e:	b29b      	uxth	r3, r3
 801fc80:	3b30      	subs	r3, #48	; 0x30
 801fc82:	82fb      	strh	r3, [r7, #22]
 801fc84:	e025      	b.n	801fcd2 <ce303_voltage+0x13ca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801fc86:	8a3b      	ldrh	r3, [r7, #16]
 801fc88:	3305      	adds	r3, #5
 801fc8a:	4a3e      	ldr	r2, [pc, #248]	; (801fd84 <ce303_voltage+0x147c>)
 801fc8c:	5cd3      	ldrb	r3, [r2, r3]
 801fc8e:	3b30      	subs	r3, #48	; 0x30
 801fc90:	b29b      	uxth	r3, r3
 801fc92:	461a      	mov	r2, r3
 801fc94:	0092      	lsls	r2, r2, #2
 801fc96:	4413      	add	r3, r2
 801fc98:	461a      	mov	r2, r3
 801fc9a:	0091      	lsls	r1, r2, #2
 801fc9c:	461a      	mov	r2, r3
 801fc9e:	460b      	mov	r3, r1
 801fca0:	4413      	add	r3, r2
 801fca2:	009b      	lsls	r3, r3, #2
 801fca4:	b29a      	uxth	r2, r3
 801fca6:	8a3b      	ldrh	r3, [r7, #16]
 801fca8:	3306      	adds	r3, #6
 801fcaa:	4936      	ldr	r1, [pc, #216]	; (801fd84 <ce303_voltage+0x147c>)
 801fcac:	5ccb      	ldrb	r3, [r1, r3]
 801fcae:	3b30      	subs	r3, #48	; 0x30
 801fcb0:	b29b      	uxth	r3, r3
 801fcb2:	4619      	mov	r1, r3
 801fcb4:	0089      	lsls	r1, r1, #2
 801fcb6:	440b      	add	r3, r1
 801fcb8:	005b      	lsls	r3, r3, #1
 801fcba:	b29b      	uxth	r3, r3
 801fcbc:	4413      	add	r3, r2
 801fcbe:	b29a      	uxth	r2, r3
 801fcc0:	8a3b      	ldrh	r3, [r7, #16]
 801fcc2:	3307      	adds	r3, #7
 801fcc4:	492f      	ldr	r1, [pc, #188]	; (801fd84 <ce303_voltage+0x147c>)
 801fcc6:	5ccb      	ldrb	r3, [r1, r3]
 801fcc8:	b29b      	uxth	r3, r3
 801fcca:	4413      	add	r3, r2
 801fccc:	b29b      	uxth	r3, r3
 801fcce:	3b30      	subs	r3, #48	; 0x30
 801fcd0:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fcd2:	4b2d      	ldr	r3, [pc, #180]	; (801fd88 <ce303_voltage+0x1480>)
 801fcd4:	681b      	ldr	r3, [r3, #0]
 801fcd6:	f04f 31ff 	mov.w	r1, #4294967295
 801fcda:	4618      	mov	r0, r3
 801fcdc:	f7f6 ffe0 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 801fce0:	89fb      	ldrh	r3, [r7, #14]
 801fce2:	0a1b      	lsrs	r3, r3, #8
 801fce4:	b29b      	uxth	r3, r3
 801fce6:	b2db      	uxtb	r3, r3
 801fce8:	4619      	mov	r1, r3
 801fcea:	f242 004e 	movw	r0, #8270	; 0x204e
 801fcee:	f005 fba9 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 801fcf2:	89fb      	ldrh	r3, [r7, #14]
 801fcf4:	b2db      	uxtb	r3, r3
 801fcf6:	4619      	mov	r1, r3
 801fcf8:	f242 004f 	movw	r0, #8271	; 0x204f
 801fcfc:	f005 fba2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 801fd00:	8afb      	ldrh	r3, [r7, #22]
 801fd02:	0a1b      	lsrs	r3, r3, #8
 801fd04:	b29b      	uxth	r3, r3
 801fd06:	b2db      	uxtb	r3, r3
 801fd08:	4619      	mov	r1, r3
 801fd0a:	f242 0054 	movw	r0, #8276	; 0x2054
 801fd0e:	f005 fb99 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801fd12:	8afb      	ldrh	r3, [r7, #22]
 801fd14:	b2db      	uxtb	r3, r3
 801fd16:	4619      	mov	r1, r3
 801fd18:	f242 0055 	movw	r0, #8277	; 0x2055
 801fd1c:	f005 fb92 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801fd20:	4b19      	ldr	r3, [pc, #100]	; (801fd88 <ce303_voltage+0x1480>)
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	4618      	mov	r0, r3
 801fd26:	f7f7 f809 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 801fd2a:	4a18      	ldr	r2, [pc, #96]	; (801fd8c <ce303_voltage+0x1484>)
 801fd2c:	89fb      	ldrh	r3, [r7, #14]
 801fd2e:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 801fd32:	4a16      	ldr	r2, [pc, #88]	; (801fd8c <ce303_voltage+0x1484>)
 801fd34:	8afb      	ldrh	r3, [r7, #22]
 801fd36:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 801fd3a:	2301      	movs	r3, #1
 801fd3c:	74fb      	strb	r3, [r7, #19]
 801fd3e:	e002      	b.n	801fd46 <ce303_voltage+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801fd40:	bf00      	nop
 801fd42:	e000      	b.n	801fd46 <ce303_voltage+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801fd44:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 801fd46:	8a3b      	ldrh	r3, [r7, #16]
 801fd48:	3301      	adds	r3, #1
 801fd4a:	823b      	strh	r3, [r7, #16]
 801fd4c:	8a3b      	ldrh	r3, [r7, #16]
 801fd4e:	2bff      	cmp	r3, #255	; 0xff
 801fd50:	f67e afd1 	bls.w	801ecf6 <ce303_voltage+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 801fd54:	4b0e      	ldr	r3, [pc, #56]	; (801fd90 <ce303_voltage+0x1488>)
 801fd56:	2200      	movs	r2, #0
 801fd58:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801fd5a:	f7fe fdbb 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801fd5e:	2201      	movs	r2, #1
 801fd60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801fd64:	480b      	ldr	r0, [pc, #44]	; (801fd94 <ce303_voltage+0x148c>)
 801fd66:	f7f3 fa35 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 801fd6a:	2205      	movs	r2, #5
 801fd6c:	490a      	ldr	r1, [pc, #40]	; (801fd98 <ce303_voltage+0x1490>)
 801fd6e:	480b      	ldr	r0, [pc, #44]	; (801fd9c <ce303_voltage+0x1494>)
 801fd70:	f7f5 fce8 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 801fd74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fd78:	f7f1 ff78 	bl	8011c6c <HAL_Delay>

}
 801fd7c:	bf00      	nop
 801fd7e:	3718      	adds	r7, #24
 801fd80:	46bd      	mov	sp, r7
 801fd82:	bd80      	pop	{r7, pc}
 801fd84:	200098e4 	.word	0x200098e4
 801fd88:	20009a6c 	.word	0x20009a6c
 801fd8c:	2000a10c 	.word	0x2000a10c
 801fd90:	2000085d 	.word	0x2000085d
 801fd94:	40021800 	.word	0x40021800
 801fd98:	20000030 	.word	0x20000030
 801fd9c:	20009c70 	.word	0x20009c70

0801fda0 <ce303_current>:

void ce303_current (uint8_t meter_id) // функция чтения тока из счетчика СЕ303
{
 801fda0:	b580      	push	{r7, lr}
 801fda2:	b086      	sub	sp, #24
 801fda4:	af00      	add	r7, sp, #0
 801fda6:	4603      	mov	r3, r0
 801fda8:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t current_a_state; // переменные состояния прочтения значений тока ( если переменная равна 0, то значение тока не прочитано, если 1 - значение прочитанно )
	uint8_t current_b_state;
	uint8_t current_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 801fdaa:	79fb      	ldrb	r3, [r7, #7]
 801fdac:	2b63      	cmp	r3, #99	; 0x63
 801fdae:	d962      	bls.n	801fe76 <ce303_current+0xd6>
	{
		start_buf[0] = 0x2F;
 801fdb0:	4b9d      	ldr	r3, [pc, #628]	; (8020028 <ce303_current+0x288>)
 801fdb2:	222f      	movs	r2, #47	; 0x2f
 801fdb4:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801fdb6:	4b9c      	ldr	r3, [pc, #624]	; (8020028 <ce303_current+0x288>)
 801fdb8:	223f      	movs	r2, #63	; 0x3f
 801fdba:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 801fdbc:	79fb      	ldrb	r3, [r7, #7]
 801fdbe:	4a9b      	ldr	r2, [pc, #620]	; (802002c <ce303_current+0x28c>)
 801fdc0:	fba2 2303 	umull	r2, r3, r2, r3
 801fdc4:	095b      	lsrs	r3, r3, #5
 801fdc6:	b2db      	uxtb	r3, r3
 801fdc8:	3330      	adds	r3, #48	; 0x30
 801fdca:	b2da      	uxtb	r2, r3
 801fdcc:	4b96      	ldr	r3, [pc, #600]	; (8020028 <ce303_current+0x288>)
 801fdce:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 801fdd0:	79fa      	ldrb	r2, [r7, #7]
 801fdd2:	79fb      	ldrb	r3, [r7, #7]
 801fdd4:	4995      	ldr	r1, [pc, #596]	; (802002c <ce303_current+0x28c>)
 801fdd6:	fba1 1303 	umull	r1, r3, r1, r3
 801fdda:	095b      	lsrs	r3, r3, #5
 801fddc:	b2db      	uxtb	r3, r3
 801fdde:	4619      	mov	r1, r3
 801fde0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801fde4:	fb03 f301 	mul.w	r3, r3, r1
 801fde8:	4413      	add	r3, r2
 801fdea:	4a91      	ldr	r2, [pc, #580]	; (8020030 <ce303_current+0x290>)
 801fdec:	fb82 1203 	smull	r1, r2, r2, r3
 801fdf0:	1092      	asrs	r2, r2, #2
 801fdf2:	17db      	asrs	r3, r3, #31
 801fdf4:	1ad3      	subs	r3, r2, r3
 801fdf6:	b2db      	uxtb	r3, r3
 801fdf8:	3330      	adds	r3, #48	; 0x30
 801fdfa:	b2da      	uxtb	r2, r3
 801fdfc:	4b8a      	ldr	r3, [pc, #552]	; (8020028 <ce303_current+0x288>)
 801fdfe:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801fe00:	79fa      	ldrb	r2, [r7, #7]
 801fe02:	79fb      	ldrb	r3, [r7, #7]
 801fe04:	4989      	ldr	r1, [pc, #548]	; (802002c <ce303_current+0x28c>)
 801fe06:	fba1 1303 	umull	r1, r3, r1, r3
 801fe0a:	095b      	lsrs	r3, r3, #5
 801fe0c:	b2db      	uxtb	r3, r3
 801fe0e:	4619      	mov	r1, r3
 801fe10:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801fe14:	fb03 f301 	mul.w	r3, r3, r1
 801fe18:	441a      	add	r2, r3
 801fe1a:	4b85      	ldr	r3, [pc, #532]	; (8020030 <ce303_current+0x290>)
 801fe1c:	fb83 1302 	smull	r1, r3, r3, r2
 801fe20:	1099      	asrs	r1, r3, #2
 801fe22:	17d3      	asrs	r3, r2, #31
 801fe24:	1ac9      	subs	r1, r1, r3
 801fe26:	460b      	mov	r3, r1
 801fe28:	009b      	lsls	r3, r3, #2
 801fe2a:	440b      	add	r3, r1
 801fe2c:	005b      	lsls	r3, r3, #1
 801fe2e:	1ad1      	subs	r1, r2, r3
 801fe30:	b2cb      	uxtb	r3, r1
 801fe32:	3330      	adds	r3, #48	; 0x30
 801fe34:	b2da      	uxtb	r2, r3
 801fe36:	4b7c      	ldr	r3, [pc, #496]	; (8020028 <ce303_current+0x288>)
 801fe38:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 801fe3a:	4b7b      	ldr	r3, [pc, #492]	; (8020028 <ce303_current+0x288>)
 801fe3c:	2221      	movs	r2, #33	; 0x21
 801fe3e:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 801fe40:	4b79      	ldr	r3, [pc, #484]	; (8020028 <ce303_current+0x288>)
 801fe42:	220d      	movs	r2, #13
 801fe44:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 801fe46:	4b78      	ldr	r3, [pc, #480]	; (8020028 <ce303_current+0x288>)
 801fe48:	220a      	movs	r2, #10
 801fe4a:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 801fe4c:	4b79      	ldr	r3, [pc, #484]	; (8020034 <ce303_current+0x294>)
 801fe4e:	2200      	movs	r2, #0
 801fe50:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801fe52:	f7fe fd3f 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801fe56:	2201      	movs	r2, #1
 801fe58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801fe5c:	4876      	ldr	r0, [pc, #472]	; (8020038 <ce303_current+0x298>)
 801fe5e:	f7f3 f9b9 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 801fe62:	2208      	movs	r2, #8
 801fe64:	4970      	ldr	r1, [pc, #448]	; (8020028 <ce303_current+0x288>)
 801fe66:	4875      	ldr	r0, [pc, #468]	; (802003c <ce303_current+0x29c>)
 801fe68:	f7f5 fc6c 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801fe6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fe70:	f7f1 fefc 	bl	8011c6c <HAL_Delay>
 801fe74:	e072      	b.n	801ff5c <ce303_current+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 801fe76:	79fb      	ldrb	r3, [r7, #7]
 801fe78:	2b09      	cmp	r3, #9
 801fe7a:	d944      	bls.n	801ff06 <ce303_current+0x166>
 801fe7c:	79fb      	ldrb	r3, [r7, #7]
 801fe7e:	2b63      	cmp	r3, #99	; 0x63
 801fe80:	d841      	bhi.n	801ff06 <ce303_current+0x166>
	{
		start_buf[0] = 0x2F;
 801fe82:	4b69      	ldr	r3, [pc, #420]	; (8020028 <ce303_current+0x288>)
 801fe84:	222f      	movs	r2, #47	; 0x2f
 801fe86:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801fe88:	4b67      	ldr	r3, [pc, #412]	; (8020028 <ce303_current+0x288>)
 801fe8a:	223f      	movs	r2, #63	; 0x3f
 801fe8c:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 801fe8e:	79fb      	ldrb	r3, [r7, #7]
 801fe90:	4a6b      	ldr	r2, [pc, #428]	; (8020040 <ce303_current+0x2a0>)
 801fe92:	fba2 2303 	umull	r2, r3, r2, r3
 801fe96:	08db      	lsrs	r3, r3, #3
 801fe98:	b2db      	uxtb	r3, r3
 801fe9a:	3330      	adds	r3, #48	; 0x30
 801fe9c:	b2da      	uxtb	r2, r3
 801fe9e:	4b62      	ldr	r3, [pc, #392]	; (8020028 <ce303_current+0x288>)
 801fea0:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 801fea2:	79fb      	ldrb	r3, [r7, #7]
 801fea4:	4a66      	ldr	r2, [pc, #408]	; (8020040 <ce303_current+0x2a0>)
 801fea6:	fba2 2303 	umull	r2, r3, r2, r3
 801feaa:	08db      	lsrs	r3, r3, #3
 801feac:	b2db      	uxtb	r3, r3
 801feae:	461a      	mov	r2, r3
 801feb0:	0152      	lsls	r2, r2, #5
 801feb2:	1ad2      	subs	r2, r2, r3
 801feb4:	0092      	lsls	r2, r2, #2
 801feb6:	1ad3      	subs	r3, r2, r3
 801feb8:	005b      	lsls	r3, r3, #1
 801feba:	b2da      	uxtb	r2, r3
 801febc:	79fb      	ldrb	r3, [r7, #7]
 801febe:	4413      	add	r3, r2
 801fec0:	b2db      	uxtb	r3, r3
 801fec2:	3330      	adds	r3, #48	; 0x30
 801fec4:	b2da      	uxtb	r2, r3
 801fec6:	4b58      	ldr	r3, [pc, #352]	; (8020028 <ce303_current+0x288>)
 801fec8:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 801feca:	4b57      	ldr	r3, [pc, #348]	; (8020028 <ce303_current+0x288>)
 801fecc:	2221      	movs	r2, #33	; 0x21
 801fece:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 801fed0:	4b55      	ldr	r3, [pc, #340]	; (8020028 <ce303_current+0x288>)
 801fed2:	220d      	movs	r2, #13
 801fed4:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 801fed6:	4b54      	ldr	r3, [pc, #336]	; (8020028 <ce303_current+0x288>)
 801fed8:	220a      	movs	r2, #10
 801feda:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 801fedc:	4b55      	ldr	r3, [pc, #340]	; (8020034 <ce303_current+0x294>)
 801fede:	2200      	movs	r2, #0
 801fee0:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801fee2:	f7fe fcf7 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801fee6:	2201      	movs	r2, #1
 801fee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801feec:	4852      	ldr	r0, [pc, #328]	; (8020038 <ce303_current+0x298>)
 801feee:	f7f3 f971 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 801fef2:	2207      	movs	r2, #7
 801fef4:	494c      	ldr	r1, [pc, #304]	; (8020028 <ce303_current+0x288>)
 801fef6:	4851      	ldr	r0, [pc, #324]	; (802003c <ce303_current+0x29c>)
 801fef8:	f7f5 fc24 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801fefc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ff00:	f7f1 feb4 	bl	8011c6c <HAL_Delay>
 801ff04:	e02a      	b.n	801ff5c <ce303_current+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 801ff06:	79fb      	ldrb	r3, [r7, #7]
 801ff08:	2b09      	cmp	r3, #9
 801ff0a:	d827      	bhi.n	801ff5c <ce303_current+0x1bc>
	{
		start_buf[0] = 0x2F;
 801ff0c:	4b46      	ldr	r3, [pc, #280]	; (8020028 <ce303_current+0x288>)
 801ff0e:	222f      	movs	r2, #47	; 0x2f
 801ff10:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801ff12:	4b45      	ldr	r3, [pc, #276]	; (8020028 <ce303_current+0x288>)
 801ff14:	223f      	movs	r2, #63	; 0x3f
 801ff16:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 801ff18:	79fb      	ldrb	r3, [r7, #7]
 801ff1a:	3330      	adds	r3, #48	; 0x30
 801ff1c:	b2da      	uxtb	r2, r3
 801ff1e:	4b42      	ldr	r3, [pc, #264]	; (8020028 <ce303_current+0x288>)
 801ff20:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 801ff22:	4b41      	ldr	r3, [pc, #260]	; (8020028 <ce303_current+0x288>)
 801ff24:	2221      	movs	r2, #33	; 0x21
 801ff26:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 801ff28:	4b3f      	ldr	r3, [pc, #252]	; (8020028 <ce303_current+0x288>)
 801ff2a:	220d      	movs	r2, #13
 801ff2c:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 801ff2e:	4b3e      	ldr	r3, [pc, #248]	; (8020028 <ce303_current+0x288>)
 801ff30:	220a      	movs	r2, #10
 801ff32:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 801ff34:	4b3f      	ldr	r3, [pc, #252]	; (8020034 <ce303_current+0x294>)
 801ff36:	2200      	movs	r2, #0
 801ff38:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801ff3a:	f7fe fccb 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801ff3e:	2201      	movs	r2, #1
 801ff40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ff44:	483c      	ldr	r0, [pc, #240]	; (8020038 <ce303_current+0x298>)
 801ff46:	f7f3 f945 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 801ff4a:	2206      	movs	r2, #6
 801ff4c:	4936      	ldr	r1, [pc, #216]	; (8020028 <ce303_current+0x288>)
 801ff4e:	483b      	ldr	r0, [pc, #236]	; (802003c <ce303_current+0x29c>)
 801ff50:	f7f5 fbf8 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801ff54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ff58:	f7f1 fe88 	bl	8011c6c <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 801ff5c:	79fb      	ldrb	r3, [r7, #7]
 801ff5e:	2b63      	cmp	r3, #99	; 0x63
 801ff60:	d970      	bls.n	8020044 <ce303_current+0x2a4>
	{
		start_buf[0] = 0x2F;
 801ff62:	4b31      	ldr	r3, [pc, #196]	; (8020028 <ce303_current+0x288>)
 801ff64:	222f      	movs	r2, #47	; 0x2f
 801ff66:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801ff68:	4b2f      	ldr	r3, [pc, #188]	; (8020028 <ce303_current+0x288>)
 801ff6a:	223f      	movs	r2, #63	; 0x3f
 801ff6c:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 801ff6e:	79fb      	ldrb	r3, [r7, #7]
 801ff70:	4a2e      	ldr	r2, [pc, #184]	; (802002c <ce303_current+0x28c>)
 801ff72:	fba2 2303 	umull	r2, r3, r2, r3
 801ff76:	095b      	lsrs	r3, r3, #5
 801ff78:	b2db      	uxtb	r3, r3
 801ff7a:	3330      	adds	r3, #48	; 0x30
 801ff7c:	b2da      	uxtb	r2, r3
 801ff7e:	4b2a      	ldr	r3, [pc, #168]	; (8020028 <ce303_current+0x288>)
 801ff80:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 801ff82:	79fa      	ldrb	r2, [r7, #7]
 801ff84:	79fb      	ldrb	r3, [r7, #7]
 801ff86:	4929      	ldr	r1, [pc, #164]	; (802002c <ce303_current+0x28c>)
 801ff88:	fba1 1303 	umull	r1, r3, r1, r3
 801ff8c:	095b      	lsrs	r3, r3, #5
 801ff8e:	b2db      	uxtb	r3, r3
 801ff90:	4619      	mov	r1, r3
 801ff92:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801ff96:	fb03 f301 	mul.w	r3, r3, r1
 801ff9a:	4413      	add	r3, r2
 801ff9c:	4a24      	ldr	r2, [pc, #144]	; (8020030 <ce303_current+0x290>)
 801ff9e:	fb82 1203 	smull	r1, r2, r2, r3
 801ffa2:	1092      	asrs	r2, r2, #2
 801ffa4:	17db      	asrs	r3, r3, #31
 801ffa6:	1ad3      	subs	r3, r2, r3
 801ffa8:	b2db      	uxtb	r3, r3
 801ffaa:	3330      	adds	r3, #48	; 0x30
 801ffac:	b2da      	uxtb	r2, r3
 801ffae:	4b1e      	ldr	r3, [pc, #120]	; (8020028 <ce303_current+0x288>)
 801ffb0:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801ffb2:	79fa      	ldrb	r2, [r7, #7]
 801ffb4:	79fb      	ldrb	r3, [r7, #7]
 801ffb6:	491d      	ldr	r1, [pc, #116]	; (802002c <ce303_current+0x28c>)
 801ffb8:	fba1 1303 	umull	r1, r3, r1, r3
 801ffbc:	095b      	lsrs	r3, r3, #5
 801ffbe:	b2db      	uxtb	r3, r3
 801ffc0:	4619      	mov	r1, r3
 801ffc2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801ffc6:	fb03 f301 	mul.w	r3, r3, r1
 801ffca:	441a      	add	r2, r3
 801ffcc:	4b18      	ldr	r3, [pc, #96]	; (8020030 <ce303_current+0x290>)
 801ffce:	fb83 1302 	smull	r1, r3, r3, r2
 801ffd2:	1099      	asrs	r1, r3, #2
 801ffd4:	17d3      	asrs	r3, r2, #31
 801ffd6:	1ac9      	subs	r1, r1, r3
 801ffd8:	460b      	mov	r3, r1
 801ffda:	009b      	lsls	r3, r3, #2
 801ffdc:	440b      	add	r3, r1
 801ffde:	005b      	lsls	r3, r3, #1
 801ffe0:	1ad1      	subs	r1, r2, r3
 801ffe2:	b2cb      	uxtb	r3, r1
 801ffe4:	3330      	adds	r3, #48	; 0x30
 801ffe6:	b2da      	uxtb	r2, r3
 801ffe8:	4b0f      	ldr	r3, [pc, #60]	; (8020028 <ce303_current+0x288>)
 801ffea:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 801ffec:	4b0e      	ldr	r3, [pc, #56]	; (8020028 <ce303_current+0x288>)
 801ffee:	2221      	movs	r2, #33	; 0x21
 801fff0:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 801fff2:	4b0d      	ldr	r3, [pc, #52]	; (8020028 <ce303_current+0x288>)
 801fff4:	220d      	movs	r2, #13
 801fff6:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 801fff8:	4b0b      	ldr	r3, [pc, #44]	; (8020028 <ce303_current+0x288>)
 801fffa:	220a      	movs	r2, #10
 801fffc:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 801fffe:	4b0d      	ldr	r3, [pc, #52]	; (8020034 <ce303_current+0x294>)
 8020000:	2200      	movs	r2, #0
 8020002:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8020004:	f7fe fc66 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8020008:	2201      	movs	r2, #1
 802000a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802000e:	480a      	ldr	r0, [pc, #40]	; (8020038 <ce303_current+0x298>)
 8020010:	f7f3 f8e0 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8020014:	2208      	movs	r2, #8
 8020016:	4904      	ldr	r1, [pc, #16]	; (8020028 <ce303_current+0x288>)
 8020018:	4808      	ldr	r0, [pc, #32]	; (802003c <ce303_current+0x29c>)
 802001a:	f7f5 fb93 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 802001e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8020022:	f7f1 fe23 	bl	8011c6c <HAL_Delay>
 8020026:	e080      	b.n	802012a <ce303_current+0x38a>
 8020028:	20000010 	.word	0x20000010
 802002c:	51eb851f 	.word	0x51eb851f
 8020030:	66666667 	.word	0x66666667
 8020034:	2000085d 	.word	0x2000085d
 8020038:	40021800 	.word	0x40021800
 802003c:	20009c70 	.word	0x20009c70
 8020040:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8020044:	79fb      	ldrb	r3, [r7, #7]
 8020046:	2b09      	cmp	r3, #9
 8020048:	d944      	bls.n	80200d4 <ce303_current+0x334>
 802004a:	79fb      	ldrb	r3, [r7, #7]
 802004c:	2b63      	cmp	r3, #99	; 0x63
 802004e:	d841      	bhi.n	80200d4 <ce303_current+0x334>
	{
		start_buf[0] = 0x2F;
 8020050:	4b90      	ldr	r3, [pc, #576]	; (8020294 <ce303_current+0x4f4>)
 8020052:	222f      	movs	r2, #47	; 0x2f
 8020054:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8020056:	4b8f      	ldr	r3, [pc, #572]	; (8020294 <ce303_current+0x4f4>)
 8020058:	223f      	movs	r2, #63	; 0x3f
 802005a:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 802005c:	79fb      	ldrb	r3, [r7, #7]
 802005e:	4a8e      	ldr	r2, [pc, #568]	; (8020298 <ce303_current+0x4f8>)
 8020060:	fba2 2303 	umull	r2, r3, r2, r3
 8020064:	08db      	lsrs	r3, r3, #3
 8020066:	b2db      	uxtb	r3, r3
 8020068:	3330      	adds	r3, #48	; 0x30
 802006a:	b2da      	uxtb	r2, r3
 802006c:	4b89      	ldr	r3, [pc, #548]	; (8020294 <ce303_current+0x4f4>)
 802006e:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8020070:	79fb      	ldrb	r3, [r7, #7]
 8020072:	4a89      	ldr	r2, [pc, #548]	; (8020298 <ce303_current+0x4f8>)
 8020074:	fba2 2303 	umull	r2, r3, r2, r3
 8020078:	08db      	lsrs	r3, r3, #3
 802007a:	b2db      	uxtb	r3, r3
 802007c:	461a      	mov	r2, r3
 802007e:	0152      	lsls	r2, r2, #5
 8020080:	1ad2      	subs	r2, r2, r3
 8020082:	0092      	lsls	r2, r2, #2
 8020084:	1ad3      	subs	r3, r2, r3
 8020086:	005b      	lsls	r3, r3, #1
 8020088:	b2da      	uxtb	r2, r3
 802008a:	79fb      	ldrb	r3, [r7, #7]
 802008c:	4413      	add	r3, r2
 802008e:	b2db      	uxtb	r3, r3
 8020090:	3330      	adds	r3, #48	; 0x30
 8020092:	b2da      	uxtb	r2, r3
 8020094:	4b7f      	ldr	r3, [pc, #508]	; (8020294 <ce303_current+0x4f4>)
 8020096:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8020098:	4b7e      	ldr	r3, [pc, #504]	; (8020294 <ce303_current+0x4f4>)
 802009a:	2221      	movs	r2, #33	; 0x21
 802009c:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 802009e:	4b7d      	ldr	r3, [pc, #500]	; (8020294 <ce303_current+0x4f4>)
 80200a0:	220d      	movs	r2, #13
 80200a2:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 80200a4:	4b7b      	ldr	r3, [pc, #492]	; (8020294 <ce303_current+0x4f4>)
 80200a6:	220a      	movs	r2, #10
 80200a8:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 80200aa:	4b7c      	ldr	r3, [pc, #496]	; (802029c <ce303_current+0x4fc>)
 80200ac:	2200      	movs	r2, #0
 80200ae:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80200b0:	f7fe fc10 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80200b4:	2201      	movs	r2, #1
 80200b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80200ba:	4879      	ldr	r0, [pc, #484]	; (80202a0 <ce303_current+0x500>)
 80200bc:	f7f3 f88a 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 80200c0:	2207      	movs	r2, #7
 80200c2:	4974      	ldr	r1, [pc, #464]	; (8020294 <ce303_current+0x4f4>)
 80200c4:	4877      	ldr	r0, [pc, #476]	; (80202a4 <ce303_current+0x504>)
 80200c6:	f7f5 fb3d 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80200ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80200ce:	f7f1 fdcd 	bl	8011c6c <HAL_Delay>
 80200d2:	e02a      	b.n	802012a <ce303_current+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 80200d4:	79fb      	ldrb	r3, [r7, #7]
 80200d6:	2b09      	cmp	r3, #9
 80200d8:	d827      	bhi.n	802012a <ce303_current+0x38a>
	{
		start_buf[0] = 0x2F;
 80200da:	4b6e      	ldr	r3, [pc, #440]	; (8020294 <ce303_current+0x4f4>)
 80200dc:	222f      	movs	r2, #47	; 0x2f
 80200de:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80200e0:	4b6c      	ldr	r3, [pc, #432]	; (8020294 <ce303_current+0x4f4>)
 80200e2:	223f      	movs	r2, #63	; 0x3f
 80200e4:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 80200e6:	79fb      	ldrb	r3, [r7, #7]
 80200e8:	3330      	adds	r3, #48	; 0x30
 80200ea:	b2da      	uxtb	r2, r3
 80200ec:	4b69      	ldr	r3, [pc, #420]	; (8020294 <ce303_current+0x4f4>)
 80200ee:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 80200f0:	4b68      	ldr	r3, [pc, #416]	; (8020294 <ce303_current+0x4f4>)
 80200f2:	2221      	movs	r2, #33	; 0x21
 80200f4:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 80200f6:	4b67      	ldr	r3, [pc, #412]	; (8020294 <ce303_current+0x4f4>)
 80200f8:	220d      	movs	r2, #13
 80200fa:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 80200fc:	4b65      	ldr	r3, [pc, #404]	; (8020294 <ce303_current+0x4f4>)
 80200fe:	220a      	movs	r2, #10
 8020100:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8020102:	4b66      	ldr	r3, [pc, #408]	; (802029c <ce303_current+0x4fc>)
 8020104:	2200      	movs	r2, #0
 8020106:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8020108:	f7fe fbe4 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802010c:	2201      	movs	r2, #1
 802010e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020112:	4863      	ldr	r0, [pc, #396]	; (80202a0 <ce303_current+0x500>)
 8020114:	f7f3 f85e 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8020118:	2206      	movs	r2, #6
 802011a:	495e      	ldr	r1, [pc, #376]	; (8020294 <ce303_current+0x4f4>)
 802011c:	4861      	ldr	r0, [pc, #388]	; (80202a4 <ce303_current+0x504>)
 802011e:	f7f5 fb11 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8020122:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8020126:	f7f1 fda1 	bl	8011c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 802012a:	4b5c      	ldr	r3, [pc, #368]	; (802029c <ce303_current+0x4fc>)
 802012c:	2200      	movs	r2, #0
 802012e:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8020130:	f7fe fbd0 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8020134:	2201      	movs	r2, #1
 8020136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802013a:	4859      	ldr	r0, [pc, #356]	; (80202a0 <ce303_current+0x500>)
 802013c:	f7f3 f84a 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8020140:	2206      	movs	r2, #6
 8020142:	4959      	ldr	r1, [pc, #356]	; (80202a8 <ce303_current+0x508>)
 8020144:	4857      	ldr	r0, [pc, #348]	; (80202a4 <ce303_current+0x504>)
 8020146:	f7f5 fafd 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 802014a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802014e:	f7f1 fd8d 	bl	8011c6c <HAL_Delay>

	meter_rx_number = 0;
 8020152:	4b52      	ldr	r3, [pc, #328]	; (802029c <ce303_current+0x4fc>)
 8020154:	2200      	movs	r2, #0
 8020156:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8020158:	f7fe fbbc 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802015c:	2201      	movs	r2, #1
 802015e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020162:	484f      	ldr	r0, [pc, #316]	; (80202a0 <ce303_current+0x500>)
 8020164:	f7f3 f836 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &current_buf[0], 13); // передаем команду
 8020168:	220d      	movs	r2, #13
 802016a:	4950      	ldr	r1, [pc, #320]	; (80202ac <ce303_current+0x50c>)
 802016c:	484d      	ldr	r0, [pc, #308]	; (80202a4 <ce303_current+0x504>)
 802016e:	f7f5 fae9 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8020172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8020176:	f7f1 fd79 	bl	8011c6c <HAL_Delay>

	current_a_state = 0; // обнуляем переменные состояния прочтения тока перед их прочтением
 802017a:	2300      	movs	r3, #0
 802017c:	757b      	strb	r3, [r7, #21]
	current_b_state = 0;
 802017e:	2300      	movs	r3, #0
 8020180:	753b      	strb	r3, [r7, #20]
	current_c_state = 0;
 8020182:	2300      	movs	r3, #0
 8020184:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 8020186:	2300      	movs	r3, #0
 8020188:	823b      	strh	r3, [r7, #16]
 802018a:	f001 b829 	b.w	80211e0 <ce303_current+0x1440>
	{

		if( (meter_rx_buffer[i] == 0x28) && (current_a_state==0) && (current_b_state==0) && (current_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 802018e:	8a3b      	ldrh	r3, [r7, #16]
 8020190:	4a47      	ldr	r2, [pc, #284]	; (80202b0 <ce303_current+0x510>)
 8020192:	5cd3      	ldrb	r3, [r2, r3]
 8020194:	2b28      	cmp	r3, #40	; 0x28
 8020196:	f040 82b7 	bne.w	8020708 <ce303_current+0x968>
 802019a:	7d7b      	ldrb	r3, [r7, #21]
 802019c:	2b00      	cmp	r3, #0
 802019e:	f040 82b3 	bne.w	8020708 <ce303_current+0x968>
 80201a2:	7d3b      	ldrb	r3, [r7, #20]
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	f040 82af 	bne.w	8020708 <ce303_current+0x968>
 80201aa:	7cfb      	ldrb	r3, [r7, #19]
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	f040 82ab 	bne.w	8020708 <ce303_current+0x968>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80201b2:	8a3b      	ldrh	r3, [r7, #16]
 80201b4:	3302      	adds	r3, #2
 80201b6:	4a3e      	ldr	r2, [pc, #248]	; (80202b0 <ce303_current+0x510>)
 80201b8:	5cd3      	ldrb	r3, [r2, r3]
 80201ba:	2b2e      	cmp	r3, #46	; 0x2e
 80201bc:	f040 80d7 	bne.w	802036e <ce303_current+0x5ce>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 80201c0:	8a3b      	ldrh	r3, [r7, #16]
 80201c2:	3301      	adds	r3, #1
 80201c4:	4a3a      	ldr	r2, [pc, #232]	; (80202b0 <ce303_current+0x510>)
 80201c6:	5cd3      	ldrb	r3, [r2, r3]
 80201c8:	b29b      	uxth	r3, r3
 80201ca:	3b30      	subs	r3, #48	; 0x30
 80201cc:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 80201ce:	8a3b      	ldrh	r3, [r7, #16]
 80201d0:	3304      	adds	r3, #4
 80201d2:	4a37      	ldr	r2, [pc, #220]	; (80202b0 <ce303_current+0x510>)
 80201d4:	5cd3      	ldrb	r3, [r2, r3]
 80201d6:	2b29      	cmp	r3, #41	; 0x29
 80201d8:	d110      	bne.n	80201fc <ce303_current+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 80201da:	8a3b      	ldrh	r3, [r7, #16]
 80201dc:	3303      	adds	r3, #3
 80201de:	4a34      	ldr	r2, [pc, #208]	; (80202b0 <ce303_current+0x510>)
 80201e0:	5cd3      	ldrb	r3, [r2, r3]
 80201e2:	3b30      	subs	r3, #48	; 0x30
 80201e4:	b29b      	uxth	r3, r3
 80201e6:	461a      	mov	r2, r3
 80201e8:	0092      	lsls	r2, r2, #2
 80201ea:	4413      	add	r3, r2
 80201ec:	461a      	mov	r2, r3
 80201ee:	0091      	lsls	r1, r2, #2
 80201f0:	461a      	mov	r2, r3
 80201f2:	460b      	mov	r3, r1
 80201f4:	4413      	add	r3, r2
 80201f6:	009b      	lsls	r3, r3, #2
 80201f8:	82fb      	strh	r3, [r7, #22]
 80201fa:	e081      	b.n	8020300 <ce303_current+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 80201fc:	8a3b      	ldrh	r3, [r7, #16]
 80201fe:	3305      	adds	r3, #5
 8020200:	4a2b      	ldr	r2, [pc, #172]	; (80202b0 <ce303_current+0x510>)
 8020202:	5cd3      	ldrb	r3, [r2, r3]
 8020204:	2b29      	cmp	r3, #41	; 0x29
 8020206:	d117      	bne.n	8020238 <ce303_current+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8020208:	8a3b      	ldrh	r3, [r7, #16]
 802020a:	3303      	adds	r3, #3
 802020c:	4a28      	ldr	r2, [pc, #160]	; (80202b0 <ce303_current+0x510>)
 802020e:	5cd3      	ldrb	r3, [r2, r3]
 8020210:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8020214:	4613      	mov	r3, r2
 8020216:	009b      	lsls	r3, r3, #2
 8020218:	4413      	add	r3, r2
 802021a:	005b      	lsls	r3, r3, #1
 802021c:	4619      	mov	r1, r3
 802021e:	8a3b      	ldrh	r3, [r7, #16]
 8020220:	3304      	adds	r3, #4
 8020222:	4a23      	ldr	r2, [pc, #140]	; (80202b0 <ce303_current+0x510>)
 8020224:	5cd3      	ldrb	r3, [r2, r3]
 8020226:	3b30      	subs	r3, #48	; 0x30
 8020228:	440b      	add	r3, r1
 802022a:	b29b      	uxth	r3, r3
 802022c:	461a      	mov	r2, r3
 802022e:	0092      	lsls	r2, r2, #2
 8020230:	4413      	add	r3, r2
 8020232:	005b      	lsls	r3, r3, #1
 8020234:	82fb      	strh	r3, [r7, #22]
 8020236:	e063      	b.n	8020300 <ce303_current+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8020238:	8a3b      	ldrh	r3, [r7, #16]
 802023a:	3306      	adds	r3, #6
 802023c:	4a1c      	ldr	r2, [pc, #112]	; (80202b0 <ce303_current+0x510>)
 802023e:	5cd3      	ldrb	r3, [r2, r3]
 8020240:	2b29      	cmp	r3, #41	; 0x29
 8020242:	d137      	bne.n	80202b4 <ce303_current+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8020244:	8a3b      	ldrh	r3, [r7, #16]
 8020246:	3303      	adds	r3, #3
 8020248:	4a19      	ldr	r2, [pc, #100]	; (80202b0 <ce303_current+0x510>)
 802024a:	5cd3      	ldrb	r3, [r2, r3]
 802024c:	3b30      	subs	r3, #48	; 0x30
 802024e:	b29b      	uxth	r3, r3
 8020250:	461a      	mov	r2, r3
 8020252:	0092      	lsls	r2, r2, #2
 8020254:	4413      	add	r3, r2
 8020256:	461a      	mov	r2, r3
 8020258:	0091      	lsls	r1, r2, #2
 802025a:	461a      	mov	r2, r3
 802025c:	460b      	mov	r3, r1
 802025e:	4413      	add	r3, r2
 8020260:	009b      	lsls	r3, r3, #2
 8020262:	b29a      	uxth	r2, r3
 8020264:	8a3b      	ldrh	r3, [r7, #16]
 8020266:	3304      	adds	r3, #4
 8020268:	4911      	ldr	r1, [pc, #68]	; (80202b0 <ce303_current+0x510>)
 802026a:	5ccb      	ldrb	r3, [r1, r3]
 802026c:	3b30      	subs	r3, #48	; 0x30
 802026e:	b29b      	uxth	r3, r3
 8020270:	4619      	mov	r1, r3
 8020272:	0089      	lsls	r1, r1, #2
 8020274:	440b      	add	r3, r1
 8020276:	005b      	lsls	r3, r3, #1
 8020278:	b29b      	uxth	r3, r3
 802027a:	4413      	add	r3, r2
 802027c:	b29a      	uxth	r2, r3
 802027e:	8a3b      	ldrh	r3, [r7, #16]
 8020280:	3305      	adds	r3, #5
 8020282:	490b      	ldr	r1, [pc, #44]	; (80202b0 <ce303_current+0x510>)
 8020284:	5ccb      	ldrb	r3, [r1, r3]
 8020286:	b29b      	uxth	r3, r3
 8020288:	4413      	add	r3, r2
 802028a:	b29b      	uxth	r3, r3
 802028c:	3b30      	subs	r3, #48	; 0x30
 802028e:	82fb      	strh	r3, [r7, #22]
 8020290:	e036      	b.n	8020300 <ce303_current+0x560>
 8020292:	bf00      	nop
 8020294:	20000010 	.word	0x20000010
 8020298:	cccccccd 	.word	0xcccccccd
 802029c:	2000085d 	.word	0x2000085d
 80202a0:	40021800 	.word	0x40021800
 80202a4:	20009c70 	.word	0x20009c70
 80202a8:	20000018 	.word	0x20000018
 80202ac:	20000038 	.word	0x20000038
 80202b0:	200098e4 	.word	0x200098e4
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80202b4:	8a3b      	ldrh	r3, [r7, #16]
 80202b6:	3303      	adds	r3, #3
 80202b8:	4a9a      	ldr	r2, [pc, #616]	; (8020524 <ce303_current+0x784>)
 80202ba:	5cd3      	ldrb	r3, [r2, r3]
 80202bc:	3b30      	subs	r3, #48	; 0x30
 80202be:	b29b      	uxth	r3, r3
 80202c0:	461a      	mov	r2, r3
 80202c2:	0092      	lsls	r2, r2, #2
 80202c4:	4413      	add	r3, r2
 80202c6:	461a      	mov	r2, r3
 80202c8:	0091      	lsls	r1, r2, #2
 80202ca:	461a      	mov	r2, r3
 80202cc:	460b      	mov	r3, r1
 80202ce:	4413      	add	r3, r2
 80202d0:	009b      	lsls	r3, r3, #2
 80202d2:	b29a      	uxth	r2, r3
 80202d4:	8a3b      	ldrh	r3, [r7, #16]
 80202d6:	3304      	adds	r3, #4
 80202d8:	4992      	ldr	r1, [pc, #584]	; (8020524 <ce303_current+0x784>)
 80202da:	5ccb      	ldrb	r3, [r1, r3]
 80202dc:	3b30      	subs	r3, #48	; 0x30
 80202de:	b29b      	uxth	r3, r3
 80202e0:	4619      	mov	r1, r3
 80202e2:	0089      	lsls	r1, r1, #2
 80202e4:	440b      	add	r3, r1
 80202e6:	005b      	lsls	r3, r3, #1
 80202e8:	b29b      	uxth	r3, r3
 80202ea:	4413      	add	r3, r2
 80202ec:	b29a      	uxth	r2, r3
 80202ee:	8a3b      	ldrh	r3, [r7, #16]
 80202f0:	3305      	adds	r3, #5
 80202f2:	498c      	ldr	r1, [pc, #560]	; (8020524 <ce303_current+0x784>)
 80202f4:	5ccb      	ldrb	r3, [r1, r3]
 80202f6:	b29b      	uxth	r3, r3
 80202f8:	4413      	add	r3, r2
 80202fa:	b29b      	uxth	r3, r3
 80202fc:	3b30      	subs	r3, #48	; 0x30
 80202fe:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020300:	4b89      	ldr	r3, [pc, #548]	; (8020528 <ce303_current+0x788>)
 8020302:	681b      	ldr	r3, [r3, #0]
 8020304:	f04f 31ff 	mov.w	r1, #4294967295
 8020308:	4618      	mov	r0, r3
 802030a:	f7f6 fcc9 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 802030e:	89fb      	ldrh	r3, [r7, #14]
 8020310:	0a1b      	lsrs	r3, r3, #8
 8020312:	b29b      	uxth	r3, r3
 8020314:	b2db      	uxtb	r3, r3
 8020316:	4619      	mov	r1, r3
 8020318:	f242 003e 	movw	r0, #8254	; 0x203e
 802031c:	f005 f892 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8020320:	89fb      	ldrh	r3, [r7, #14]
 8020322:	b2db      	uxtb	r3, r3
 8020324:	4619      	mov	r1, r3
 8020326:	f242 003f 	movw	r0, #8255	; 0x203f
 802032a:	f005 f88b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 802032e:	8afb      	ldrh	r3, [r7, #22]
 8020330:	0a1b      	lsrs	r3, r3, #8
 8020332:	b29b      	uxth	r3, r3
 8020334:	b2db      	uxtb	r3, r3
 8020336:	4619      	mov	r1, r3
 8020338:	f242 0044 	movw	r0, #8260	; 0x2044
 802033c:	f005 f882 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8020340:	8afb      	ldrh	r3, [r7, #22]
 8020342:	b2db      	uxtb	r3, r3
 8020344:	4619      	mov	r1, r3
 8020346:	f242 0045 	movw	r0, #8261	; 0x2045
 802034a:	f005 f87b 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 802034e:	4b76      	ldr	r3, [pc, #472]	; (8020528 <ce303_current+0x788>)
 8020350:	681b      	ldr	r3, [r3, #0]
 8020352:	4618      	mov	r0, r3
 8020354:	f7f6 fcf2 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 8020358:	4a74      	ldr	r2, [pc, #464]	; (802052c <ce303_current+0x78c>)
 802035a:	89fb      	ldrh	r3, [r7, #14]
 802035c:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg =  temp_mil;
 802035e:	4a73      	ldr	r2, [pc, #460]	; (802052c <ce303_current+0x78c>)
 8020360:	8afb      	ldrh	r3, [r7, #22]
 8020362:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 8020366:	2301      	movs	r3, #1
 8020368:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802036a:	f000 bf33 	b.w	80211d4 <ce303_current+0x1434>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 802036e:	8a3b      	ldrh	r3, [r7, #16]
 8020370:	3303      	adds	r3, #3
 8020372:	4a6c      	ldr	r2, [pc, #432]	; (8020524 <ce303_current+0x784>)
 8020374:	5cd3      	ldrb	r3, [r2, r3]
 8020376:	2b2e      	cmp	r3, #46	; 0x2e
 8020378:	f040 80da 	bne.w	8020530 <ce303_current+0x790>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 802037c:	8a3b      	ldrh	r3, [r7, #16]
 802037e:	3301      	adds	r3, #1
 8020380:	4a68      	ldr	r2, [pc, #416]	; (8020524 <ce303_current+0x784>)
 8020382:	5cd3      	ldrb	r3, [r2, r3]
 8020384:	3b30      	subs	r3, #48	; 0x30
 8020386:	b29b      	uxth	r3, r3
 8020388:	461a      	mov	r2, r3
 802038a:	0092      	lsls	r2, r2, #2
 802038c:	4413      	add	r3, r2
 802038e:	005b      	lsls	r3, r3, #1
 8020390:	b29a      	uxth	r2, r3
 8020392:	8a3b      	ldrh	r3, [r7, #16]
 8020394:	3302      	adds	r3, #2
 8020396:	4963      	ldr	r1, [pc, #396]	; (8020524 <ce303_current+0x784>)
 8020398:	5ccb      	ldrb	r3, [r1, r3]
 802039a:	b29b      	uxth	r3, r3
 802039c:	4413      	add	r3, r2
 802039e:	b29b      	uxth	r3, r3
 80203a0:	3b30      	subs	r3, #48	; 0x30
 80203a2:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80203a4:	8a3b      	ldrh	r3, [r7, #16]
 80203a6:	3305      	adds	r3, #5
 80203a8:	4a5e      	ldr	r2, [pc, #376]	; (8020524 <ce303_current+0x784>)
 80203aa:	5cd3      	ldrb	r3, [r2, r3]
 80203ac:	2b29      	cmp	r3, #41	; 0x29
 80203ae:	d110      	bne.n	80203d2 <ce303_current+0x632>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80203b0:	8a3b      	ldrh	r3, [r7, #16]
 80203b2:	3304      	adds	r3, #4
 80203b4:	4a5b      	ldr	r2, [pc, #364]	; (8020524 <ce303_current+0x784>)
 80203b6:	5cd3      	ldrb	r3, [r2, r3]
 80203b8:	3b30      	subs	r3, #48	; 0x30
 80203ba:	b29b      	uxth	r3, r3
 80203bc:	461a      	mov	r2, r3
 80203be:	0092      	lsls	r2, r2, #2
 80203c0:	4413      	add	r3, r2
 80203c2:	461a      	mov	r2, r3
 80203c4:	0091      	lsls	r1, r2, #2
 80203c6:	461a      	mov	r2, r3
 80203c8:	460b      	mov	r3, r1
 80203ca:	4413      	add	r3, r2
 80203cc:	009b      	lsls	r3, r3, #2
 80203ce:	82fb      	strh	r3, [r7, #22]
 80203d0:	e070      	b.n	80204b4 <ce303_current+0x714>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 80203d2:	8a3b      	ldrh	r3, [r7, #16]
 80203d4:	3306      	adds	r3, #6
 80203d6:	4a53      	ldr	r2, [pc, #332]	; (8020524 <ce303_current+0x784>)
 80203d8:	5cd3      	ldrb	r3, [r2, r3]
 80203da:	2b29      	cmp	r3, #41	; 0x29
 80203dc:	d117      	bne.n	802040e <ce303_current+0x66e>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 80203de:	8a3b      	ldrh	r3, [r7, #16]
 80203e0:	3304      	adds	r3, #4
 80203e2:	4a50      	ldr	r2, [pc, #320]	; (8020524 <ce303_current+0x784>)
 80203e4:	5cd3      	ldrb	r3, [r2, r3]
 80203e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80203ea:	4613      	mov	r3, r2
 80203ec:	009b      	lsls	r3, r3, #2
 80203ee:	4413      	add	r3, r2
 80203f0:	005b      	lsls	r3, r3, #1
 80203f2:	4619      	mov	r1, r3
 80203f4:	8a3b      	ldrh	r3, [r7, #16]
 80203f6:	3305      	adds	r3, #5
 80203f8:	4a4a      	ldr	r2, [pc, #296]	; (8020524 <ce303_current+0x784>)
 80203fa:	5cd3      	ldrb	r3, [r2, r3]
 80203fc:	3b30      	subs	r3, #48	; 0x30
 80203fe:	440b      	add	r3, r1
 8020400:	b29b      	uxth	r3, r3
 8020402:	461a      	mov	r2, r3
 8020404:	0092      	lsls	r2, r2, #2
 8020406:	4413      	add	r3, r2
 8020408:	005b      	lsls	r3, r3, #1
 802040a:	82fb      	strh	r3, [r7, #22]
 802040c:	e052      	b.n	80204b4 <ce303_current+0x714>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 802040e:	8a3b      	ldrh	r3, [r7, #16]
 8020410:	3307      	adds	r3, #7
 8020412:	4a44      	ldr	r2, [pc, #272]	; (8020524 <ce303_current+0x784>)
 8020414:	5cd3      	ldrb	r3, [r2, r3]
 8020416:	2b29      	cmp	r3, #41	; 0x29
 8020418:	d126      	bne.n	8020468 <ce303_current+0x6c8>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 802041a:	8a3b      	ldrh	r3, [r7, #16]
 802041c:	3304      	adds	r3, #4
 802041e:	4a41      	ldr	r2, [pc, #260]	; (8020524 <ce303_current+0x784>)
 8020420:	5cd3      	ldrb	r3, [r2, r3]
 8020422:	3b30      	subs	r3, #48	; 0x30
 8020424:	b29b      	uxth	r3, r3
 8020426:	461a      	mov	r2, r3
 8020428:	0092      	lsls	r2, r2, #2
 802042a:	4413      	add	r3, r2
 802042c:	461a      	mov	r2, r3
 802042e:	0091      	lsls	r1, r2, #2
 8020430:	461a      	mov	r2, r3
 8020432:	460b      	mov	r3, r1
 8020434:	4413      	add	r3, r2
 8020436:	009b      	lsls	r3, r3, #2
 8020438:	b29a      	uxth	r2, r3
 802043a:	8a3b      	ldrh	r3, [r7, #16]
 802043c:	3305      	adds	r3, #5
 802043e:	4939      	ldr	r1, [pc, #228]	; (8020524 <ce303_current+0x784>)
 8020440:	5ccb      	ldrb	r3, [r1, r3]
 8020442:	3b30      	subs	r3, #48	; 0x30
 8020444:	b29b      	uxth	r3, r3
 8020446:	4619      	mov	r1, r3
 8020448:	0089      	lsls	r1, r1, #2
 802044a:	440b      	add	r3, r1
 802044c:	005b      	lsls	r3, r3, #1
 802044e:	b29b      	uxth	r3, r3
 8020450:	4413      	add	r3, r2
 8020452:	b29a      	uxth	r2, r3
 8020454:	8a3b      	ldrh	r3, [r7, #16]
 8020456:	3306      	adds	r3, #6
 8020458:	4932      	ldr	r1, [pc, #200]	; (8020524 <ce303_current+0x784>)
 802045a:	5ccb      	ldrb	r3, [r1, r3]
 802045c:	b29b      	uxth	r3, r3
 802045e:	4413      	add	r3, r2
 8020460:	b29b      	uxth	r3, r3
 8020462:	3b30      	subs	r3, #48	; 0x30
 8020464:	82fb      	strh	r3, [r7, #22]
 8020466:	e025      	b.n	80204b4 <ce303_current+0x714>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8020468:	8a3b      	ldrh	r3, [r7, #16]
 802046a:	3304      	adds	r3, #4
 802046c:	4a2d      	ldr	r2, [pc, #180]	; (8020524 <ce303_current+0x784>)
 802046e:	5cd3      	ldrb	r3, [r2, r3]
 8020470:	3b30      	subs	r3, #48	; 0x30
 8020472:	b29b      	uxth	r3, r3
 8020474:	461a      	mov	r2, r3
 8020476:	0092      	lsls	r2, r2, #2
 8020478:	4413      	add	r3, r2
 802047a:	461a      	mov	r2, r3
 802047c:	0091      	lsls	r1, r2, #2
 802047e:	461a      	mov	r2, r3
 8020480:	460b      	mov	r3, r1
 8020482:	4413      	add	r3, r2
 8020484:	009b      	lsls	r3, r3, #2
 8020486:	b29a      	uxth	r2, r3
 8020488:	8a3b      	ldrh	r3, [r7, #16]
 802048a:	3305      	adds	r3, #5
 802048c:	4925      	ldr	r1, [pc, #148]	; (8020524 <ce303_current+0x784>)
 802048e:	5ccb      	ldrb	r3, [r1, r3]
 8020490:	3b30      	subs	r3, #48	; 0x30
 8020492:	b29b      	uxth	r3, r3
 8020494:	4619      	mov	r1, r3
 8020496:	0089      	lsls	r1, r1, #2
 8020498:	440b      	add	r3, r1
 802049a:	005b      	lsls	r3, r3, #1
 802049c:	b29b      	uxth	r3, r3
 802049e:	4413      	add	r3, r2
 80204a0:	b29a      	uxth	r2, r3
 80204a2:	8a3b      	ldrh	r3, [r7, #16]
 80204a4:	3306      	adds	r3, #6
 80204a6:	491f      	ldr	r1, [pc, #124]	; (8020524 <ce303_current+0x784>)
 80204a8:	5ccb      	ldrb	r3, [r1, r3]
 80204aa:	b29b      	uxth	r3, r3
 80204ac:	4413      	add	r3, r2
 80204ae:	b29b      	uxth	r3, r3
 80204b0:	3b30      	subs	r3, #48	; 0x30
 80204b2:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80204b4:	4b1c      	ldr	r3, [pc, #112]	; (8020528 <ce303_current+0x788>)
 80204b6:	681b      	ldr	r3, [r3, #0]
 80204b8:	f04f 31ff 	mov.w	r1, #4294967295
 80204bc:	4618      	mov	r0, r3
 80204be:	f7f6 fbef 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 80204c2:	89fb      	ldrh	r3, [r7, #14]
 80204c4:	0a1b      	lsrs	r3, r3, #8
 80204c6:	b29b      	uxth	r3, r3
 80204c8:	b2db      	uxtb	r3, r3
 80204ca:	4619      	mov	r1, r3
 80204cc:	f242 003e 	movw	r0, #8254	; 0x203e
 80204d0:	f004 ffb8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 80204d4:	89fb      	ldrh	r3, [r7, #14]
 80204d6:	b2db      	uxtb	r3, r3
 80204d8:	4619      	mov	r1, r3
 80204da:	f242 003f 	movw	r0, #8255	; 0x203f
 80204de:	f004 ffb1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 80204e2:	8afb      	ldrh	r3, [r7, #22]
 80204e4:	0a1b      	lsrs	r3, r3, #8
 80204e6:	b29b      	uxth	r3, r3
 80204e8:	b2db      	uxtb	r3, r3
 80204ea:	4619      	mov	r1, r3
 80204ec:	f242 0044 	movw	r0, #8260	; 0x2044
 80204f0:	f004 ffa8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80204f4:	8afb      	ldrh	r3, [r7, #22]
 80204f6:	b2db      	uxtb	r3, r3
 80204f8:	4619      	mov	r1, r3
 80204fa:	f242 0045 	movw	r0, #8261	; 0x2045
 80204fe:	f004 ffa1 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8020502:	4b09      	ldr	r3, [pc, #36]	; (8020528 <ce303_current+0x788>)
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	4618      	mov	r0, r3
 8020508:	f7f6 fc18 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 802050c:	4a07      	ldr	r2, [pc, #28]	; (802052c <ce303_current+0x78c>)
 802050e:	89fb      	ldrh	r3, [r7, #14]
 8020510:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg = temp_mil;
 8020512:	4a06      	ldr	r2, [pc, #24]	; (802052c <ce303_current+0x78c>)
 8020514:	8afb      	ldrh	r3, [r7, #22]
 8020516:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 802051a:	2301      	movs	r3, #1
 802051c:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802051e:	f000 be59 	b.w	80211d4 <ce303_current+0x1434>
 8020522:	bf00      	nop
 8020524:	200098e4 	.word	0x200098e4
 8020528:	20009a6c 	.word	0x20009a6c
 802052c:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8020530:	8a3b      	ldrh	r3, [r7, #16]
 8020532:	3304      	adds	r3, #4
 8020534:	4a9f      	ldr	r2, [pc, #636]	; (80207b4 <ce303_current+0xa14>)
 8020536:	5cd3      	ldrb	r3, [r2, r3]
 8020538:	2b2e      	cmp	r3, #46	; 0x2e
 802053a:	f040 864b 	bne.w	80211d4 <ce303_current+0x1434>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 802053e:	8a3b      	ldrh	r3, [r7, #16]
 8020540:	3301      	adds	r3, #1
 8020542:	4a9c      	ldr	r2, [pc, #624]	; (80207b4 <ce303_current+0xa14>)
 8020544:	5cd3      	ldrb	r3, [r2, r3]
 8020546:	3b30      	subs	r3, #48	; 0x30
 8020548:	b29b      	uxth	r3, r3
 802054a:	461a      	mov	r2, r3
 802054c:	0092      	lsls	r2, r2, #2
 802054e:	4413      	add	r3, r2
 8020550:	461a      	mov	r2, r3
 8020552:	0091      	lsls	r1, r2, #2
 8020554:	461a      	mov	r2, r3
 8020556:	460b      	mov	r3, r1
 8020558:	4413      	add	r3, r2
 802055a:	009b      	lsls	r3, r3, #2
 802055c:	b29a      	uxth	r2, r3
 802055e:	8a3b      	ldrh	r3, [r7, #16]
 8020560:	3302      	adds	r3, #2
 8020562:	4994      	ldr	r1, [pc, #592]	; (80207b4 <ce303_current+0xa14>)
 8020564:	5ccb      	ldrb	r3, [r1, r3]
 8020566:	3b30      	subs	r3, #48	; 0x30
 8020568:	b29b      	uxth	r3, r3
 802056a:	4619      	mov	r1, r3
 802056c:	0089      	lsls	r1, r1, #2
 802056e:	440b      	add	r3, r1
 8020570:	005b      	lsls	r3, r3, #1
 8020572:	b29b      	uxth	r3, r3
 8020574:	4413      	add	r3, r2
 8020576:	b29a      	uxth	r2, r3
 8020578:	8a3b      	ldrh	r3, [r7, #16]
 802057a:	3303      	adds	r3, #3
 802057c:	498d      	ldr	r1, [pc, #564]	; (80207b4 <ce303_current+0xa14>)
 802057e:	5ccb      	ldrb	r3, [r1, r3]
 8020580:	b29b      	uxth	r3, r3
 8020582:	4413      	add	r3, r2
 8020584:	b29b      	uxth	r3, r3
 8020586:	3b30      	subs	r3, #48	; 0x30
 8020588:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 802058a:	8a3b      	ldrh	r3, [r7, #16]
 802058c:	3306      	adds	r3, #6
 802058e:	4a89      	ldr	r2, [pc, #548]	; (80207b4 <ce303_current+0xa14>)
 8020590:	5cd3      	ldrb	r3, [r2, r3]
 8020592:	2b29      	cmp	r3, #41	; 0x29
 8020594:	d110      	bne.n	80205b8 <ce303_current+0x818>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8020596:	8a3b      	ldrh	r3, [r7, #16]
 8020598:	3305      	adds	r3, #5
 802059a:	4a86      	ldr	r2, [pc, #536]	; (80207b4 <ce303_current+0xa14>)
 802059c:	5cd3      	ldrb	r3, [r2, r3]
 802059e:	3b30      	subs	r3, #48	; 0x30
 80205a0:	b29b      	uxth	r3, r3
 80205a2:	461a      	mov	r2, r3
 80205a4:	0092      	lsls	r2, r2, #2
 80205a6:	4413      	add	r3, r2
 80205a8:	461a      	mov	r2, r3
 80205aa:	0091      	lsls	r1, r2, #2
 80205ac:	461a      	mov	r2, r3
 80205ae:	460b      	mov	r3, r1
 80205b0:	4413      	add	r3, r2
 80205b2:	009b      	lsls	r3, r3, #2
 80205b4:	82fb      	strh	r3, [r7, #22]
 80205b6:	e070      	b.n	802069a <ce303_current+0x8fa>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 80205b8:	8a3b      	ldrh	r3, [r7, #16]
 80205ba:	3307      	adds	r3, #7
 80205bc:	4a7d      	ldr	r2, [pc, #500]	; (80207b4 <ce303_current+0xa14>)
 80205be:	5cd3      	ldrb	r3, [r2, r3]
 80205c0:	2b29      	cmp	r3, #41	; 0x29
 80205c2:	d117      	bne.n	80205f4 <ce303_current+0x854>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 80205c4:	8a3b      	ldrh	r3, [r7, #16]
 80205c6:	3305      	adds	r3, #5
 80205c8:	4a7a      	ldr	r2, [pc, #488]	; (80207b4 <ce303_current+0xa14>)
 80205ca:	5cd3      	ldrb	r3, [r2, r3]
 80205cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80205d0:	4613      	mov	r3, r2
 80205d2:	009b      	lsls	r3, r3, #2
 80205d4:	4413      	add	r3, r2
 80205d6:	005b      	lsls	r3, r3, #1
 80205d8:	4619      	mov	r1, r3
 80205da:	8a3b      	ldrh	r3, [r7, #16]
 80205dc:	3306      	adds	r3, #6
 80205de:	4a75      	ldr	r2, [pc, #468]	; (80207b4 <ce303_current+0xa14>)
 80205e0:	5cd3      	ldrb	r3, [r2, r3]
 80205e2:	3b30      	subs	r3, #48	; 0x30
 80205e4:	440b      	add	r3, r1
 80205e6:	b29b      	uxth	r3, r3
 80205e8:	461a      	mov	r2, r3
 80205ea:	0092      	lsls	r2, r2, #2
 80205ec:	4413      	add	r3, r2
 80205ee:	005b      	lsls	r3, r3, #1
 80205f0:	82fb      	strh	r3, [r7, #22]
 80205f2:	e052      	b.n	802069a <ce303_current+0x8fa>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80205f4:	8a3b      	ldrh	r3, [r7, #16]
 80205f6:	3308      	adds	r3, #8
 80205f8:	4a6e      	ldr	r2, [pc, #440]	; (80207b4 <ce303_current+0xa14>)
 80205fa:	5cd3      	ldrb	r3, [r2, r3]
 80205fc:	2b29      	cmp	r3, #41	; 0x29
 80205fe:	d126      	bne.n	802064e <ce303_current+0x8ae>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8020600:	8a3b      	ldrh	r3, [r7, #16]
 8020602:	3305      	adds	r3, #5
 8020604:	4a6b      	ldr	r2, [pc, #428]	; (80207b4 <ce303_current+0xa14>)
 8020606:	5cd3      	ldrb	r3, [r2, r3]
 8020608:	3b30      	subs	r3, #48	; 0x30
 802060a:	b29b      	uxth	r3, r3
 802060c:	461a      	mov	r2, r3
 802060e:	0092      	lsls	r2, r2, #2
 8020610:	4413      	add	r3, r2
 8020612:	461a      	mov	r2, r3
 8020614:	0091      	lsls	r1, r2, #2
 8020616:	461a      	mov	r2, r3
 8020618:	460b      	mov	r3, r1
 802061a:	4413      	add	r3, r2
 802061c:	009b      	lsls	r3, r3, #2
 802061e:	b29a      	uxth	r2, r3
 8020620:	8a3b      	ldrh	r3, [r7, #16]
 8020622:	3306      	adds	r3, #6
 8020624:	4963      	ldr	r1, [pc, #396]	; (80207b4 <ce303_current+0xa14>)
 8020626:	5ccb      	ldrb	r3, [r1, r3]
 8020628:	3b30      	subs	r3, #48	; 0x30
 802062a:	b29b      	uxth	r3, r3
 802062c:	4619      	mov	r1, r3
 802062e:	0089      	lsls	r1, r1, #2
 8020630:	440b      	add	r3, r1
 8020632:	005b      	lsls	r3, r3, #1
 8020634:	b29b      	uxth	r3, r3
 8020636:	4413      	add	r3, r2
 8020638:	b29a      	uxth	r2, r3
 802063a:	8a3b      	ldrh	r3, [r7, #16]
 802063c:	3307      	adds	r3, #7
 802063e:	495d      	ldr	r1, [pc, #372]	; (80207b4 <ce303_current+0xa14>)
 8020640:	5ccb      	ldrb	r3, [r1, r3]
 8020642:	b29b      	uxth	r3, r3
 8020644:	4413      	add	r3, r2
 8020646:	b29b      	uxth	r3, r3
 8020648:	3b30      	subs	r3, #48	; 0x30
 802064a:	82fb      	strh	r3, [r7, #22]
 802064c:	e025      	b.n	802069a <ce303_current+0x8fa>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 802064e:	8a3b      	ldrh	r3, [r7, #16]
 8020650:	3305      	adds	r3, #5
 8020652:	4a58      	ldr	r2, [pc, #352]	; (80207b4 <ce303_current+0xa14>)
 8020654:	5cd3      	ldrb	r3, [r2, r3]
 8020656:	3b30      	subs	r3, #48	; 0x30
 8020658:	b29b      	uxth	r3, r3
 802065a:	461a      	mov	r2, r3
 802065c:	0092      	lsls	r2, r2, #2
 802065e:	4413      	add	r3, r2
 8020660:	461a      	mov	r2, r3
 8020662:	0091      	lsls	r1, r2, #2
 8020664:	461a      	mov	r2, r3
 8020666:	460b      	mov	r3, r1
 8020668:	4413      	add	r3, r2
 802066a:	009b      	lsls	r3, r3, #2
 802066c:	b29a      	uxth	r2, r3
 802066e:	8a3b      	ldrh	r3, [r7, #16]
 8020670:	3306      	adds	r3, #6
 8020672:	4950      	ldr	r1, [pc, #320]	; (80207b4 <ce303_current+0xa14>)
 8020674:	5ccb      	ldrb	r3, [r1, r3]
 8020676:	3b30      	subs	r3, #48	; 0x30
 8020678:	b29b      	uxth	r3, r3
 802067a:	4619      	mov	r1, r3
 802067c:	0089      	lsls	r1, r1, #2
 802067e:	440b      	add	r3, r1
 8020680:	005b      	lsls	r3, r3, #1
 8020682:	b29b      	uxth	r3, r3
 8020684:	4413      	add	r3, r2
 8020686:	b29a      	uxth	r2, r3
 8020688:	8a3b      	ldrh	r3, [r7, #16]
 802068a:	3307      	adds	r3, #7
 802068c:	4949      	ldr	r1, [pc, #292]	; (80207b4 <ce303_current+0xa14>)
 802068e:	5ccb      	ldrb	r3, [r1, r3]
 8020690:	b29b      	uxth	r3, r3
 8020692:	4413      	add	r3, r2
 8020694:	b29b      	uxth	r3, r3
 8020696:	3b30      	subs	r3, #48	; 0x30
 8020698:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802069a:	4b47      	ldr	r3, [pc, #284]	; (80207b8 <ce303_current+0xa18>)
 802069c:	681b      	ldr	r3, [r3, #0]
 802069e:	f04f 31ff 	mov.w	r1, #4294967295
 80206a2:	4618      	mov	r0, r3
 80206a4:	f7f6 fafc 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 80206a8:	89fb      	ldrh	r3, [r7, #14]
 80206aa:	0a1b      	lsrs	r3, r3, #8
 80206ac:	b29b      	uxth	r3, r3
 80206ae:	b2db      	uxtb	r3, r3
 80206b0:	4619      	mov	r1, r3
 80206b2:	f242 003e 	movw	r0, #8254	; 0x203e
 80206b6:	f004 fec5 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 80206ba:	89fb      	ldrh	r3, [r7, #14]
 80206bc:	b2db      	uxtb	r3, r3
 80206be:	4619      	mov	r1, r3
 80206c0:	f242 003f 	movw	r0, #8255	; 0x203f
 80206c4:	f004 febe 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 80206c8:	8afb      	ldrh	r3, [r7, #22]
 80206ca:	0a1b      	lsrs	r3, r3, #8
 80206cc:	b29b      	uxth	r3, r3
 80206ce:	b2db      	uxtb	r3, r3
 80206d0:	4619      	mov	r1, r3
 80206d2:	f242 0044 	movw	r0, #8260	; 0x2044
 80206d6:	f004 feb5 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80206da:	8afb      	ldrh	r3, [r7, #22]
 80206dc:	b2db      	uxtb	r3, r3
 80206de:	4619      	mov	r1, r3
 80206e0:	f242 0045 	movw	r0, #8261	; 0x2045
 80206e4:	f004 feae 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80206e8:	4b33      	ldr	r3, [pc, #204]	; (80207b8 <ce303_current+0xa18>)
 80206ea:	681b      	ldr	r3, [r3, #0]
 80206ec:	4618      	mov	r0, r3
 80206ee:	f7f6 fb25 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 80206f2:	4a32      	ldr	r2, [pc, #200]	; (80207bc <ce303_current+0xa1c>)
 80206f4:	89fb      	ldrh	r3, [r7, #14]
 80206f6:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg = temp_mil;
 80206f8:	4a30      	ldr	r2, [pc, #192]	; (80207bc <ce303_current+0xa1c>)
 80206fa:	8afb      	ldrh	r3, [r7, #22]
 80206fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 8020700:	2301      	movs	r3, #1
 8020702:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8020704:	f000 bd66 	b.w	80211d4 <ce303_current+0x1434>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (current_a_state==1) && (current_b_state==0) && (current_c_state==0) )
 8020708:	8a3b      	ldrh	r3, [r7, #16]
 802070a:	4a2a      	ldr	r2, [pc, #168]	; (80207b4 <ce303_current+0xa14>)
 802070c:	5cd3      	ldrb	r3, [r2, r3]
 802070e:	2b28      	cmp	r3, #40	; 0x28
 8020710:	f040 82ae 	bne.w	8020c70 <ce303_current+0xed0>
 8020714:	7d7b      	ldrb	r3, [r7, #21]
 8020716:	2b01      	cmp	r3, #1
 8020718:	f040 82aa 	bne.w	8020c70 <ce303_current+0xed0>
 802071c:	7d3b      	ldrb	r3, [r7, #20]
 802071e:	2b00      	cmp	r3, #0
 8020720:	f040 82a6 	bne.w	8020c70 <ce303_current+0xed0>
 8020724:	7cfb      	ldrb	r3, [r7, #19]
 8020726:	2b00      	cmp	r3, #0
 8020728:	f040 82a2 	bne.w	8020c70 <ce303_current+0xed0>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802072c:	8a3b      	ldrh	r3, [r7, #16]
 802072e:	3302      	adds	r3, #2
 8020730:	4a20      	ldr	r2, [pc, #128]	; (80207b4 <ce303_current+0xa14>)
 8020732:	5cd3      	ldrb	r3, [r2, r3]
 8020734:	2b2e      	cmp	r3, #46	; 0x2e
 8020736:	f040 80ce 	bne.w	80208d6 <ce303_current+0xb36>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 802073a:	8a3b      	ldrh	r3, [r7, #16]
 802073c:	3301      	adds	r3, #1
 802073e:	4a1d      	ldr	r2, [pc, #116]	; (80207b4 <ce303_current+0xa14>)
 8020740:	5cd3      	ldrb	r3, [r2, r3]
 8020742:	b29b      	uxth	r3, r3
 8020744:	3b30      	subs	r3, #48	; 0x30
 8020746:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8020748:	8a3b      	ldrh	r3, [r7, #16]
 802074a:	3304      	adds	r3, #4
 802074c:	4a19      	ldr	r2, [pc, #100]	; (80207b4 <ce303_current+0xa14>)
 802074e:	5cd3      	ldrb	r3, [r2, r3]
 8020750:	2b29      	cmp	r3, #41	; 0x29
 8020752:	d110      	bne.n	8020776 <ce303_current+0x9d6>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8020754:	8a3b      	ldrh	r3, [r7, #16]
 8020756:	3303      	adds	r3, #3
 8020758:	4a16      	ldr	r2, [pc, #88]	; (80207b4 <ce303_current+0xa14>)
 802075a:	5cd3      	ldrb	r3, [r2, r3]
 802075c:	3b30      	subs	r3, #48	; 0x30
 802075e:	b29b      	uxth	r3, r3
 8020760:	461a      	mov	r2, r3
 8020762:	0092      	lsls	r2, r2, #2
 8020764:	4413      	add	r3, r2
 8020766:	461a      	mov	r2, r3
 8020768:	0091      	lsls	r1, r2, #2
 802076a:	461a      	mov	r2, r3
 802076c:	460b      	mov	r3, r1
 802076e:	4413      	add	r3, r2
 8020770:	009b      	lsls	r3, r3, #2
 8020772:	82fb      	strh	r3, [r7, #22]
 8020774:	e077      	b.n	8020866 <ce303_current+0xac6>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8020776:	8a3b      	ldrh	r3, [r7, #16]
 8020778:	3305      	adds	r3, #5
 802077a:	4a0e      	ldr	r2, [pc, #56]	; (80207b4 <ce303_current+0xa14>)
 802077c:	5cd3      	ldrb	r3, [r2, r3]
 802077e:	2b29      	cmp	r3, #41	; 0x29
 8020780:	d11e      	bne.n	80207c0 <ce303_current+0xa20>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8020782:	8a3b      	ldrh	r3, [r7, #16]
 8020784:	3303      	adds	r3, #3
 8020786:	4a0b      	ldr	r2, [pc, #44]	; (80207b4 <ce303_current+0xa14>)
 8020788:	5cd3      	ldrb	r3, [r2, r3]
 802078a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802078e:	4613      	mov	r3, r2
 8020790:	009b      	lsls	r3, r3, #2
 8020792:	4413      	add	r3, r2
 8020794:	005b      	lsls	r3, r3, #1
 8020796:	4619      	mov	r1, r3
 8020798:	8a3b      	ldrh	r3, [r7, #16]
 802079a:	3304      	adds	r3, #4
 802079c:	4a05      	ldr	r2, [pc, #20]	; (80207b4 <ce303_current+0xa14>)
 802079e:	5cd3      	ldrb	r3, [r2, r3]
 80207a0:	3b30      	subs	r3, #48	; 0x30
 80207a2:	440b      	add	r3, r1
 80207a4:	b29b      	uxth	r3, r3
 80207a6:	461a      	mov	r2, r3
 80207a8:	0092      	lsls	r2, r2, #2
 80207aa:	4413      	add	r3, r2
 80207ac:	005b      	lsls	r3, r3, #1
 80207ae:	82fb      	strh	r3, [r7, #22]
 80207b0:	e059      	b.n	8020866 <ce303_current+0xac6>
 80207b2:	bf00      	nop
 80207b4:	200098e4 	.word	0x200098e4
 80207b8:	20009a6c 	.word	0x20009a6c
 80207bc:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80207c0:	8a3b      	ldrh	r3, [r7, #16]
 80207c2:	3306      	adds	r3, #6
 80207c4:	4ab1      	ldr	r2, [pc, #708]	; (8020a8c <ce303_current+0xcec>)
 80207c6:	5cd3      	ldrb	r3, [r2, r3]
 80207c8:	2b29      	cmp	r3, #41	; 0x29
 80207ca:	d126      	bne.n	802081a <ce303_current+0xa7a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80207cc:	8a3b      	ldrh	r3, [r7, #16]
 80207ce:	3303      	adds	r3, #3
 80207d0:	4aae      	ldr	r2, [pc, #696]	; (8020a8c <ce303_current+0xcec>)
 80207d2:	5cd3      	ldrb	r3, [r2, r3]
 80207d4:	3b30      	subs	r3, #48	; 0x30
 80207d6:	b29b      	uxth	r3, r3
 80207d8:	461a      	mov	r2, r3
 80207da:	0092      	lsls	r2, r2, #2
 80207dc:	4413      	add	r3, r2
 80207de:	461a      	mov	r2, r3
 80207e0:	0091      	lsls	r1, r2, #2
 80207e2:	461a      	mov	r2, r3
 80207e4:	460b      	mov	r3, r1
 80207e6:	4413      	add	r3, r2
 80207e8:	009b      	lsls	r3, r3, #2
 80207ea:	b29a      	uxth	r2, r3
 80207ec:	8a3b      	ldrh	r3, [r7, #16]
 80207ee:	3304      	adds	r3, #4
 80207f0:	49a6      	ldr	r1, [pc, #664]	; (8020a8c <ce303_current+0xcec>)
 80207f2:	5ccb      	ldrb	r3, [r1, r3]
 80207f4:	3b30      	subs	r3, #48	; 0x30
 80207f6:	b29b      	uxth	r3, r3
 80207f8:	4619      	mov	r1, r3
 80207fa:	0089      	lsls	r1, r1, #2
 80207fc:	440b      	add	r3, r1
 80207fe:	005b      	lsls	r3, r3, #1
 8020800:	b29b      	uxth	r3, r3
 8020802:	4413      	add	r3, r2
 8020804:	b29a      	uxth	r2, r3
 8020806:	8a3b      	ldrh	r3, [r7, #16]
 8020808:	3305      	adds	r3, #5
 802080a:	49a0      	ldr	r1, [pc, #640]	; (8020a8c <ce303_current+0xcec>)
 802080c:	5ccb      	ldrb	r3, [r1, r3]
 802080e:	b29b      	uxth	r3, r3
 8020810:	4413      	add	r3, r2
 8020812:	b29b      	uxth	r3, r3
 8020814:	3b30      	subs	r3, #48	; 0x30
 8020816:	82fb      	strh	r3, [r7, #22]
 8020818:	e025      	b.n	8020866 <ce303_current+0xac6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 802081a:	8a3b      	ldrh	r3, [r7, #16]
 802081c:	3303      	adds	r3, #3
 802081e:	4a9b      	ldr	r2, [pc, #620]	; (8020a8c <ce303_current+0xcec>)
 8020820:	5cd3      	ldrb	r3, [r2, r3]
 8020822:	3b30      	subs	r3, #48	; 0x30
 8020824:	b29b      	uxth	r3, r3
 8020826:	461a      	mov	r2, r3
 8020828:	0092      	lsls	r2, r2, #2
 802082a:	4413      	add	r3, r2
 802082c:	461a      	mov	r2, r3
 802082e:	0091      	lsls	r1, r2, #2
 8020830:	461a      	mov	r2, r3
 8020832:	460b      	mov	r3, r1
 8020834:	4413      	add	r3, r2
 8020836:	009b      	lsls	r3, r3, #2
 8020838:	b29a      	uxth	r2, r3
 802083a:	8a3b      	ldrh	r3, [r7, #16]
 802083c:	3304      	adds	r3, #4
 802083e:	4993      	ldr	r1, [pc, #588]	; (8020a8c <ce303_current+0xcec>)
 8020840:	5ccb      	ldrb	r3, [r1, r3]
 8020842:	3b30      	subs	r3, #48	; 0x30
 8020844:	b29b      	uxth	r3, r3
 8020846:	4619      	mov	r1, r3
 8020848:	0089      	lsls	r1, r1, #2
 802084a:	440b      	add	r3, r1
 802084c:	005b      	lsls	r3, r3, #1
 802084e:	b29b      	uxth	r3, r3
 8020850:	4413      	add	r3, r2
 8020852:	b29a      	uxth	r2, r3
 8020854:	8a3b      	ldrh	r3, [r7, #16]
 8020856:	3305      	adds	r3, #5
 8020858:	498c      	ldr	r1, [pc, #560]	; (8020a8c <ce303_current+0xcec>)
 802085a:	5ccb      	ldrb	r3, [r1, r3]
 802085c:	b29b      	uxth	r3, r3
 802085e:	4413      	add	r3, r2
 8020860:	b29b      	uxth	r3, r3
 8020862:	3b30      	subs	r3, #48	; 0x30
 8020864:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020866:	4b8a      	ldr	r3, [pc, #552]	; (8020a90 <ce303_current+0xcf0>)
 8020868:	681b      	ldr	r3, [r3, #0]
 802086a:	f04f 31ff 	mov.w	r1, #4294967295
 802086e:	4618      	mov	r0, r3
 8020870:	f7f6 fa16 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8020874:	89fb      	ldrh	r3, [r7, #14]
 8020876:	0a1b      	lsrs	r3, r3, #8
 8020878:	b29b      	uxth	r3, r3
 802087a:	b2db      	uxtb	r3, r3
 802087c:	4619      	mov	r1, r3
 802087e:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8020882:	f004 fddf 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8020886:	89fb      	ldrh	r3, [r7, #14]
 8020888:	b2db      	uxtb	r3, r3
 802088a:	4619      	mov	r1, r3
 802088c:	f242 0041 	movw	r0, #8257	; 0x2041
 8020890:	f004 fdd8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8020894:	8afb      	ldrh	r3, [r7, #22]
 8020896:	0a1b      	lsrs	r3, r3, #8
 8020898:	b29b      	uxth	r3, r3
 802089a:	b2db      	uxtb	r3, r3
 802089c:	4619      	mov	r1, r3
 802089e:	f242 0046 	movw	r0, #8262	; 0x2046
 80208a2:	f004 fdcf 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80208a6:	8afb      	ldrh	r3, [r7, #22]
 80208a8:	b2db      	uxtb	r3, r3
 80208aa:	4619      	mov	r1, r3
 80208ac:	f242 0047 	movw	r0, #8263	; 0x2047
 80208b0:	f004 fdc8 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80208b4:	4b76      	ldr	r3, [pc, #472]	; (8020a90 <ce303_current+0xcf0>)
 80208b6:	681b      	ldr	r3, [r3, #0]
 80208b8:	4618      	mov	r0, r3
 80208ba:	f7f6 fa3f 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 80208be:	4a75      	ldr	r2, [pc, #468]	; (8020a94 <ce303_current+0xcf4>)
 80208c0:	89fb      	ldrh	r3, [r7, #14]
 80208c2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg =  temp_mil;
 80208c6:	4a73      	ldr	r2, [pc, #460]	; (8020a94 <ce303_current+0xcf4>)
 80208c8:	8afb      	ldrh	r3, [r7, #22]
 80208ca:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 80208ce:	2301      	movs	r3, #1
 80208d0:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80208d2:	f000 bc81 	b.w	80211d8 <ce303_current+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 80208d6:	8a3b      	ldrh	r3, [r7, #16]
 80208d8:	3303      	adds	r3, #3
 80208da:	4a6c      	ldr	r2, [pc, #432]	; (8020a8c <ce303_current+0xcec>)
 80208dc:	5cd3      	ldrb	r3, [r2, r3]
 80208de:	2b2e      	cmp	r3, #46	; 0x2e
 80208e0:	f040 80da 	bne.w	8020a98 <ce303_current+0xcf8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80208e4:	8a3b      	ldrh	r3, [r7, #16]
 80208e6:	3301      	adds	r3, #1
 80208e8:	4a68      	ldr	r2, [pc, #416]	; (8020a8c <ce303_current+0xcec>)
 80208ea:	5cd3      	ldrb	r3, [r2, r3]
 80208ec:	3b30      	subs	r3, #48	; 0x30
 80208ee:	b29b      	uxth	r3, r3
 80208f0:	461a      	mov	r2, r3
 80208f2:	0092      	lsls	r2, r2, #2
 80208f4:	4413      	add	r3, r2
 80208f6:	005b      	lsls	r3, r3, #1
 80208f8:	b29a      	uxth	r2, r3
 80208fa:	8a3b      	ldrh	r3, [r7, #16]
 80208fc:	3302      	adds	r3, #2
 80208fe:	4963      	ldr	r1, [pc, #396]	; (8020a8c <ce303_current+0xcec>)
 8020900:	5ccb      	ldrb	r3, [r1, r3]
 8020902:	b29b      	uxth	r3, r3
 8020904:	4413      	add	r3, r2
 8020906:	b29b      	uxth	r3, r3
 8020908:	3b30      	subs	r3, #48	; 0x30
 802090a:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 802090c:	8a3b      	ldrh	r3, [r7, #16]
 802090e:	3305      	adds	r3, #5
 8020910:	4a5e      	ldr	r2, [pc, #376]	; (8020a8c <ce303_current+0xcec>)
 8020912:	5cd3      	ldrb	r3, [r2, r3]
 8020914:	2b29      	cmp	r3, #41	; 0x29
 8020916:	d110      	bne.n	802093a <ce303_current+0xb9a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8020918:	8a3b      	ldrh	r3, [r7, #16]
 802091a:	3304      	adds	r3, #4
 802091c:	4a5b      	ldr	r2, [pc, #364]	; (8020a8c <ce303_current+0xcec>)
 802091e:	5cd3      	ldrb	r3, [r2, r3]
 8020920:	3b30      	subs	r3, #48	; 0x30
 8020922:	b29b      	uxth	r3, r3
 8020924:	461a      	mov	r2, r3
 8020926:	0092      	lsls	r2, r2, #2
 8020928:	4413      	add	r3, r2
 802092a:	461a      	mov	r2, r3
 802092c:	0091      	lsls	r1, r2, #2
 802092e:	461a      	mov	r2, r3
 8020930:	460b      	mov	r3, r1
 8020932:	4413      	add	r3, r2
 8020934:	009b      	lsls	r3, r3, #2
 8020936:	82fb      	strh	r3, [r7, #22]
 8020938:	e070      	b.n	8020a1c <ce303_current+0xc7c>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 802093a:	8a3b      	ldrh	r3, [r7, #16]
 802093c:	3306      	adds	r3, #6
 802093e:	4a53      	ldr	r2, [pc, #332]	; (8020a8c <ce303_current+0xcec>)
 8020940:	5cd3      	ldrb	r3, [r2, r3]
 8020942:	2b29      	cmp	r3, #41	; 0x29
 8020944:	d117      	bne.n	8020976 <ce303_current+0xbd6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8020946:	8a3b      	ldrh	r3, [r7, #16]
 8020948:	3304      	adds	r3, #4
 802094a:	4a50      	ldr	r2, [pc, #320]	; (8020a8c <ce303_current+0xcec>)
 802094c:	5cd3      	ldrb	r3, [r2, r3]
 802094e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8020952:	4613      	mov	r3, r2
 8020954:	009b      	lsls	r3, r3, #2
 8020956:	4413      	add	r3, r2
 8020958:	005b      	lsls	r3, r3, #1
 802095a:	4619      	mov	r1, r3
 802095c:	8a3b      	ldrh	r3, [r7, #16]
 802095e:	3305      	adds	r3, #5
 8020960:	4a4a      	ldr	r2, [pc, #296]	; (8020a8c <ce303_current+0xcec>)
 8020962:	5cd3      	ldrb	r3, [r2, r3]
 8020964:	3b30      	subs	r3, #48	; 0x30
 8020966:	440b      	add	r3, r1
 8020968:	b29b      	uxth	r3, r3
 802096a:	461a      	mov	r2, r3
 802096c:	0092      	lsls	r2, r2, #2
 802096e:	4413      	add	r3, r2
 8020970:	005b      	lsls	r3, r3, #1
 8020972:	82fb      	strh	r3, [r7, #22]
 8020974:	e052      	b.n	8020a1c <ce303_current+0xc7c>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8020976:	8a3b      	ldrh	r3, [r7, #16]
 8020978:	3307      	adds	r3, #7
 802097a:	4a44      	ldr	r2, [pc, #272]	; (8020a8c <ce303_current+0xcec>)
 802097c:	5cd3      	ldrb	r3, [r2, r3]
 802097e:	2b29      	cmp	r3, #41	; 0x29
 8020980:	d126      	bne.n	80209d0 <ce303_current+0xc30>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8020982:	8a3b      	ldrh	r3, [r7, #16]
 8020984:	3304      	adds	r3, #4
 8020986:	4a41      	ldr	r2, [pc, #260]	; (8020a8c <ce303_current+0xcec>)
 8020988:	5cd3      	ldrb	r3, [r2, r3]
 802098a:	3b30      	subs	r3, #48	; 0x30
 802098c:	b29b      	uxth	r3, r3
 802098e:	461a      	mov	r2, r3
 8020990:	0092      	lsls	r2, r2, #2
 8020992:	4413      	add	r3, r2
 8020994:	461a      	mov	r2, r3
 8020996:	0091      	lsls	r1, r2, #2
 8020998:	461a      	mov	r2, r3
 802099a:	460b      	mov	r3, r1
 802099c:	4413      	add	r3, r2
 802099e:	009b      	lsls	r3, r3, #2
 80209a0:	b29a      	uxth	r2, r3
 80209a2:	8a3b      	ldrh	r3, [r7, #16]
 80209a4:	3305      	adds	r3, #5
 80209a6:	4939      	ldr	r1, [pc, #228]	; (8020a8c <ce303_current+0xcec>)
 80209a8:	5ccb      	ldrb	r3, [r1, r3]
 80209aa:	3b30      	subs	r3, #48	; 0x30
 80209ac:	b29b      	uxth	r3, r3
 80209ae:	4619      	mov	r1, r3
 80209b0:	0089      	lsls	r1, r1, #2
 80209b2:	440b      	add	r3, r1
 80209b4:	005b      	lsls	r3, r3, #1
 80209b6:	b29b      	uxth	r3, r3
 80209b8:	4413      	add	r3, r2
 80209ba:	b29a      	uxth	r2, r3
 80209bc:	8a3b      	ldrh	r3, [r7, #16]
 80209be:	3306      	adds	r3, #6
 80209c0:	4932      	ldr	r1, [pc, #200]	; (8020a8c <ce303_current+0xcec>)
 80209c2:	5ccb      	ldrb	r3, [r1, r3]
 80209c4:	b29b      	uxth	r3, r3
 80209c6:	4413      	add	r3, r2
 80209c8:	b29b      	uxth	r3, r3
 80209ca:	3b30      	subs	r3, #48	; 0x30
 80209cc:	82fb      	strh	r3, [r7, #22]
 80209ce:	e025      	b.n	8020a1c <ce303_current+0xc7c>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80209d0:	8a3b      	ldrh	r3, [r7, #16]
 80209d2:	3304      	adds	r3, #4
 80209d4:	4a2d      	ldr	r2, [pc, #180]	; (8020a8c <ce303_current+0xcec>)
 80209d6:	5cd3      	ldrb	r3, [r2, r3]
 80209d8:	3b30      	subs	r3, #48	; 0x30
 80209da:	b29b      	uxth	r3, r3
 80209dc:	461a      	mov	r2, r3
 80209de:	0092      	lsls	r2, r2, #2
 80209e0:	4413      	add	r3, r2
 80209e2:	461a      	mov	r2, r3
 80209e4:	0091      	lsls	r1, r2, #2
 80209e6:	461a      	mov	r2, r3
 80209e8:	460b      	mov	r3, r1
 80209ea:	4413      	add	r3, r2
 80209ec:	009b      	lsls	r3, r3, #2
 80209ee:	b29a      	uxth	r2, r3
 80209f0:	8a3b      	ldrh	r3, [r7, #16]
 80209f2:	3305      	adds	r3, #5
 80209f4:	4925      	ldr	r1, [pc, #148]	; (8020a8c <ce303_current+0xcec>)
 80209f6:	5ccb      	ldrb	r3, [r1, r3]
 80209f8:	3b30      	subs	r3, #48	; 0x30
 80209fa:	b29b      	uxth	r3, r3
 80209fc:	4619      	mov	r1, r3
 80209fe:	0089      	lsls	r1, r1, #2
 8020a00:	440b      	add	r3, r1
 8020a02:	005b      	lsls	r3, r3, #1
 8020a04:	b29b      	uxth	r3, r3
 8020a06:	4413      	add	r3, r2
 8020a08:	b29a      	uxth	r2, r3
 8020a0a:	8a3b      	ldrh	r3, [r7, #16]
 8020a0c:	3306      	adds	r3, #6
 8020a0e:	491f      	ldr	r1, [pc, #124]	; (8020a8c <ce303_current+0xcec>)
 8020a10:	5ccb      	ldrb	r3, [r1, r3]
 8020a12:	b29b      	uxth	r3, r3
 8020a14:	4413      	add	r3, r2
 8020a16:	b29b      	uxth	r3, r3
 8020a18:	3b30      	subs	r3, #48	; 0x30
 8020a1a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020a1c:	4b1c      	ldr	r3, [pc, #112]	; (8020a90 <ce303_current+0xcf0>)
 8020a1e:	681b      	ldr	r3, [r3, #0]
 8020a20:	f04f 31ff 	mov.w	r1, #4294967295
 8020a24:	4618      	mov	r0, r3
 8020a26:	f7f6 f93b 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8020a2a:	89fb      	ldrh	r3, [r7, #14]
 8020a2c:	0a1b      	lsrs	r3, r3, #8
 8020a2e:	b29b      	uxth	r3, r3
 8020a30:	b2db      	uxtb	r3, r3
 8020a32:	4619      	mov	r1, r3
 8020a34:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8020a38:	f004 fd04 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8020a3c:	89fb      	ldrh	r3, [r7, #14]
 8020a3e:	b2db      	uxtb	r3, r3
 8020a40:	4619      	mov	r1, r3
 8020a42:	f242 0041 	movw	r0, #8257	; 0x2041
 8020a46:	f004 fcfd 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8020a4a:	8afb      	ldrh	r3, [r7, #22]
 8020a4c:	0a1b      	lsrs	r3, r3, #8
 8020a4e:	b29b      	uxth	r3, r3
 8020a50:	b2db      	uxtb	r3, r3
 8020a52:	4619      	mov	r1, r3
 8020a54:	f242 0046 	movw	r0, #8262	; 0x2046
 8020a58:	f004 fcf4 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8020a5c:	8afb      	ldrh	r3, [r7, #22]
 8020a5e:	b2db      	uxtb	r3, r3
 8020a60:	4619      	mov	r1, r3
 8020a62:	f242 0047 	movw	r0, #8263	; 0x2047
 8020a66:	f004 fced 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8020a6a:	4b09      	ldr	r3, [pc, #36]	; (8020a90 <ce303_current+0xcf0>)
 8020a6c:	681b      	ldr	r3, [r3, #0]
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f7f6 f964 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 8020a74:	4a07      	ldr	r2, [pc, #28]	; (8020a94 <ce303_current+0xcf4>)
 8020a76:	89fb      	ldrh	r3, [r7, #14]
 8020a78:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg = temp_mil;
 8020a7c:	4a05      	ldr	r2, [pc, #20]	; (8020a94 <ce303_current+0xcf4>)
 8020a7e:	8afb      	ldrh	r3, [r7, #22]
 8020a80:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 8020a84:	2301      	movs	r3, #1
 8020a86:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8020a88:	e3a6      	b.n	80211d8 <ce303_current+0x1438>
 8020a8a:	bf00      	nop
 8020a8c:	200098e4 	.word	0x200098e4
 8020a90:	20009a6c 	.word	0x20009a6c
 8020a94:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8020a98:	8a3b      	ldrh	r3, [r7, #16]
 8020a9a:	3304      	adds	r3, #4
 8020a9c:	4a9f      	ldr	r2, [pc, #636]	; (8020d1c <ce303_current+0xf7c>)
 8020a9e:	5cd3      	ldrb	r3, [r2, r3]
 8020aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8020aa2:	f040 8399 	bne.w	80211d8 <ce303_current+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8020aa6:	8a3b      	ldrh	r3, [r7, #16]
 8020aa8:	3301      	adds	r3, #1
 8020aaa:	4a9c      	ldr	r2, [pc, #624]	; (8020d1c <ce303_current+0xf7c>)
 8020aac:	5cd3      	ldrb	r3, [r2, r3]
 8020aae:	3b30      	subs	r3, #48	; 0x30
 8020ab0:	b29b      	uxth	r3, r3
 8020ab2:	461a      	mov	r2, r3
 8020ab4:	0092      	lsls	r2, r2, #2
 8020ab6:	4413      	add	r3, r2
 8020ab8:	461a      	mov	r2, r3
 8020aba:	0091      	lsls	r1, r2, #2
 8020abc:	461a      	mov	r2, r3
 8020abe:	460b      	mov	r3, r1
 8020ac0:	4413      	add	r3, r2
 8020ac2:	009b      	lsls	r3, r3, #2
 8020ac4:	b29a      	uxth	r2, r3
 8020ac6:	8a3b      	ldrh	r3, [r7, #16]
 8020ac8:	3302      	adds	r3, #2
 8020aca:	4994      	ldr	r1, [pc, #592]	; (8020d1c <ce303_current+0xf7c>)
 8020acc:	5ccb      	ldrb	r3, [r1, r3]
 8020ace:	3b30      	subs	r3, #48	; 0x30
 8020ad0:	b29b      	uxth	r3, r3
 8020ad2:	4619      	mov	r1, r3
 8020ad4:	0089      	lsls	r1, r1, #2
 8020ad6:	440b      	add	r3, r1
 8020ad8:	005b      	lsls	r3, r3, #1
 8020ada:	b29b      	uxth	r3, r3
 8020adc:	4413      	add	r3, r2
 8020ade:	b29a      	uxth	r2, r3
 8020ae0:	8a3b      	ldrh	r3, [r7, #16]
 8020ae2:	3303      	adds	r3, #3
 8020ae4:	498d      	ldr	r1, [pc, #564]	; (8020d1c <ce303_current+0xf7c>)
 8020ae6:	5ccb      	ldrb	r3, [r1, r3]
 8020ae8:	b29b      	uxth	r3, r3
 8020aea:	4413      	add	r3, r2
 8020aec:	b29b      	uxth	r3, r3
 8020aee:	3b30      	subs	r3, #48	; 0x30
 8020af0:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8020af2:	8a3b      	ldrh	r3, [r7, #16]
 8020af4:	3306      	adds	r3, #6
 8020af6:	4a89      	ldr	r2, [pc, #548]	; (8020d1c <ce303_current+0xf7c>)
 8020af8:	5cd3      	ldrb	r3, [r2, r3]
 8020afa:	2b29      	cmp	r3, #41	; 0x29
 8020afc:	d110      	bne.n	8020b20 <ce303_current+0xd80>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8020afe:	8a3b      	ldrh	r3, [r7, #16]
 8020b00:	3305      	adds	r3, #5
 8020b02:	4a86      	ldr	r2, [pc, #536]	; (8020d1c <ce303_current+0xf7c>)
 8020b04:	5cd3      	ldrb	r3, [r2, r3]
 8020b06:	3b30      	subs	r3, #48	; 0x30
 8020b08:	b29b      	uxth	r3, r3
 8020b0a:	461a      	mov	r2, r3
 8020b0c:	0092      	lsls	r2, r2, #2
 8020b0e:	4413      	add	r3, r2
 8020b10:	461a      	mov	r2, r3
 8020b12:	0091      	lsls	r1, r2, #2
 8020b14:	461a      	mov	r2, r3
 8020b16:	460b      	mov	r3, r1
 8020b18:	4413      	add	r3, r2
 8020b1a:	009b      	lsls	r3, r3, #2
 8020b1c:	82fb      	strh	r3, [r7, #22]
 8020b1e:	e070      	b.n	8020c02 <ce303_current+0xe62>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8020b20:	8a3b      	ldrh	r3, [r7, #16]
 8020b22:	3307      	adds	r3, #7
 8020b24:	4a7d      	ldr	r2, [pc, #500]	; (8020d1c <ce303_current+0xf7c>)
 8020b26:	5cd3      	ldrb	r3, [r2, r3]
 8020b28:	2b29      	cmp	r3, #41	; 0x29
 8020b2a:	d117      	bne.n	8020b5c <ce303_current+0xdbc>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8020b2c:	8a3b      	ldrh	r3, [r7, #16]
 8020b2e:	3305      	adds	r3, #5
 8020b30:	4a7a      	ldr	r2, [pc, #488]	; (8020d1c <ce303_current+0xf7c>)
 8020b32:	5cd3      	ldrb	r3, [r2, r3]
 8020b34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8020b38:	4613      	mov	r3, r2
 8020b3a:	009b      	lsls	r3, r3, #2
 8020b3c:	4413      	add	r3, r2
 8020b3e:	005b      	lsls	r3, r3, #1
 8020b40:	4619      	mov	r1, r3
 8020b42:	8a3b      	ldrh	r3, [r7, #16]
 8020b44:	3306      	adds	r3, #6
 8020b46:	4a75      	ldr	r2, [pc, #468]	; (8020d1c <ce303_current+0xf7c>)
 8020b48:	5cd3      	ldrb	r3, [r2, r3]
 8020b4a:	3b30      	subs	r3, #48	; 0x30
 8020b4c:	440b      	add	r3, r1
 8020b4e:	b29b      	uxth	r3, r3
 8020b50:	461a      	mov	r2, r3
 8020b52:	0092      	lsls	r2, r2, #2
 8020b54:	4413      	add	r3, r2
 8020b56:	005b      	lsls	r3, r3, #1
 8020b58:	82fb      	strh	r3, [r7, #22]
 8020b5a:	e052      	b.n	8020c02 <ce303_current+0xe62>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8020b5c:	8a3b      	ldrh	r3, [r7, #16]
 8020b5e:	3308      	adds	r3, #8
 8020b60:	4a6e      	ldr	r2, [pc, #440]	; (8020d1c <ce303_current+0xf7c>)
 8020b62:	5cd3      	ldrb	r3, [r2, r3]
 8020b64:	2b29      	cmp	r3, #41	; 0x29
 8020b66:	d126      	bne.n	8020bb6 <ce303_current+0xe16>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8020b68:	8a3b      	ldrh	r3, [r7, #16]
 8020b6a:	3305      	adds	r3, #5
 8020b6c:	4a6b      	ldr	r2, [pc, #428]	; (8020d1c <ce303_current+0xf7c>)
 8020b6e:	5cd3      	ldrb	r3, [r2, r3]
 8020b70:	3b30      	subs	r3, #48	; 0x30
 8020b72:	b29b      	uxth	r3, r3
 8020b74:	461a      	mov	r2, r3
 8020b76:	0092      	lsls	r2, r2, #2
 8020b78:	4413      	add	r3, r2
 8020b7a:	461a      	mov	r2, r3
 8020b7c:	0091      	lsls	r1, r2, #2
 8020b7e:	461a      	mov	r2, r3
 8020b80:	460b      	mov	r3, r1
 8020b82:	4413      	add	r3, r2
 8020b84:	009b      	lsls	r3, r3, #2
 8020b86:	b29a      	uxth	r2, r3
 8020b88:	8a3b      	ldrh	r3, [r7, #16]
 8020b8a:	3306      	adds	r3, #6
 8020b8c:	4963      	ldr	r1, [pc, #396]	; (8020d1c <ce303_current+0xf7c>)
 8020b8e:	5ccb      	ldrb	r3, [r1, r3]
 8020b90:	3b30      	subs	r3, #48	; 0x30
 8020b92:	b29b      	uxth	r3, r3
 8020b94:	4619      	mov	r1, r3
 8020b96:	0089      	lsls	r1, r1, #2
 8020b98:	440b      	add	r3, r1
 8020b9a:	005b      	lsls	r3, r3, #1
 8020b9c:	b29b      	uxth	r3, r3
 8020b9e:	4413      	add	r3, r2
 8020ba0:	b29a      	uxth	r2, r3
 8020ba2:	8a3b      	ldrh	r3, [r7, #16]
 8020ba4:	3307      	adds	r3, #7
 8020ba6:	495d      	ldr	r1, [pc, #372]	; (8020d1c <ce303_current+0xf7c>)
 8020ba8:	5ccb      	ldrb	r3, [r1, r3]
 8020baa:	b29b      	uxth	r3, r3
 8020bac:	4413      	add	r3, r2
 8020bae:	b29b      	uxth	r3, r3
 8020bb0:	3b30      	subs	r3, #48	; 0x30
 8020bb2:	82fb      	strh	r3, [r7, #22]
 8020bb4:	e025      	b.n	8020c02 <ce303_current+0xe62>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8020bb6:	8a3b      	ldrh	r3, [r7, #16]
 8020bb8:	3305      	adds	r3, #5
 8020bba:	4a58      	ldr	r2, [pc, #352]	; (8020d1c <ce303_current+0xf7c>)
 8020bbc:	5cd3      	ldrb	r3, [r2, r3]
 8020bbe:	3b30      	subs	r3, #48	; 0x30
 8020bc0:	b29b      	uxth	r3, r3
 8020bc2:	461a      	mov	r2, r3
 8020bc4:	0092      	lsls	r2, r2, #2
 8020bc6:	4413      	add	r3, r2
 8020bc8:	461a      	mov	r2, r3
 8020bca:	0091      	lsls	r1, r2, #2
 8020bcc:	461a      	mov	r2, r3
 8020bce:	460b      	mov	r3, r1
 8020bd0:	4413      	add	r3, r2
 8020bd2:	009b      	lsls	r3, r3, #2
 8020bd4:	b29a      	uxth	r2, r3
 8020bd6:	8a3b      	ldrh	r3, [r7, #16]
 8020bd8:	3306      	adds	r3, #6
 8020bda:	4950      	ldr	r1, [pc, #320]	; (8020d1c <ce303_current+0xf7c>)
 8020bdc:	5ccb      	ldrb	r3, [r1, r3]
 8020bde:	3b30      	subs	r3, #48	; 0x30
 8020be0:	b29b      	uxth	r3, r3
 8020be2:	4619      	mov	r1, r3
 8020be4:	0089      	lsls	r1, r1, #2
 8020be6:	440b      	add	r3, r1
 8020be8:	005b      	lsls	r3, r3, #1
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	4413      	add	r3, r2
 8020bee:	b29a      	uxth	r2, r3
 8020bf0:	8a3b      	ldrh	r3, [r7, #16]
 8020bf2:	3307      	adds	r3, #7
 8020bf4:	4949      	ldr	r1, [pc, #292]	; (8020d1c <ce303_current+0xf7c>)
 8020bf6:	5ccb      	ldrb	r3, [r1, r3]
 8020bf8:	b29b      	uxth	r3, r3
 8020bfa:	4413      	add	r3, r2
 8020bfc:	b29b      	uxth	r3, r3
 8020bfe:	3b30      	subs	r3, #48	; 0x30
 8020c00:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020c02:	4b47      	ldr	r3, [pc, #284]	; (8020d20 <ce303_current+0xf80>)
 8020c04:	681b      	ldr	r3, [r3, #0]
 8020c06:	f04f 31ff 	mov.w	r1, #4294967295
 8020c0a:	4618      	mov	r0, r3
 8020c0c:	f7f6 f848 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8020c10:	89fb      	ldrh	r3, [r7, #14]
 8020c12:	0a1b      	lsrs	r3, r3, #8
 8020c14:	b29b      	uxth	r3, r3
 8020c16:	b2db      	uxtb	r3, r3
 8020c18:	4619      	mov	r1, r3
 8020c1a:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8020c1e:	f004 fc11 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8020c22:	89fb      	ldrh	r3, [r7, #14]
 8020c24:	b2db      	uxtb	r3, r3
 8020c26:	4619      	mov	r1, r3
 8020c28:	f242 0041 	movw	r0, #8257	; 0x2041
 8020c2c:	f004 fc0a 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8020c30:	8afb      	ldrh	r3, [r7, #22]
 8020c32:	0a1b      	lsrs	r3, r3, #8
 8020c34:	b29b      	uxth	r3, r3
 8020c36:	b2db      	uxtb	r3, r3
 8020c38:	4619      	mov	r1, r3
 8020c3a:	f242 0046 	movw	r0, #8262	; 0x2046
 8020c3e:	f004 fc01 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8020c42:	8afb      	ldrh	r3, [r7, #22]
 8020c44:	b2db      	uxtb	r3, r3
 8020c46:	4619      	mov	r1, r3
 8020c48:	f242 0047 	movw	r0, #8263	; 0x2047
 8020c4c:	f004 fbfa 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8020c50:	4b33      	ldr	r3, [pc, #204]	; (8020d20 <ce303_current+0xf80>)
 8020c52:	681b      	ldr	r3, [r3, #0]
 8020c54:	4618      	mov	r0, r3
 8020c56:	f7f6 f871 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 8020c5a:	4a32      	ldr	r2, [pc, #200]	; (8020d24 <ce303_current+0xf84>)
 8020c5c:	89fb      	ldrh	r3, [r7, #14]
 8020c5e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg = temp_mil;
 8020c62:	4a30      	ldr	r2, [pc, #192]	; (8020d24 <ce303_current+0xf84>)
 8020c64:	8afb      	ldrh	r3, [r7, #22]
 8020c66:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 8020c6a:	2301      	movs	r3, #1
 8020c6c:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8020c6e:	e2b3      	b.n	80211d8 <ce303_current+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (current_a_state==1) && (current_b_state==1) && (current_c_state==0) )
 8020c70:	8a3b      	ldrh	r3, [r7, #16]
 8020c72:	4a2a      	ldr	r2, [pc, #168]	; (8020d1c <ce303_current+0xf7c>)
 8020c74:	5cd3      	ldrb	r3, [r2, r3]
 8020c76:	2b28      	cmp	r3, #40	; 0x28
 8020c78:	f040 82af 	bne.w	80211da <ce303_current+0x143a>
 8020c7c:	7d7b      	ldrb	r3, [r7, #21]
 8020c7e:	2b01      	cmp	r3, #1
 8020c80:	f040 82ab 	bne.w	80211da <ce303_current+0x143a>
 8020c84:	7d3b      	ldrb	r3, [r7, #20]
 8020c86:	2b01      	cmp	r3, #1
 8020c88:	f040 82a7 	bne.w	80211da <ce303_current+0x143a>
 8020c8c:	7cfb      	ldrb	r3, [r7, #19]
 8020c8e:	2b00      	cmp	r3, #0
 8020c90:	f040 82a3 	bne.w	80211da <ce303_current+0x143a>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8020c94:	8a3b      	ldrh	r3, [r7, #16]
 8020c96:	3302      	adds	r3, #2
 8020c98:	4a20      	ldr	r2, [pc, #128]	; (8020d1c <ce303_current+0xf7c>)
 8020c9a:	5cd3      	ldrb	r3, [r2, r3]
 8020c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8020c9e:	f040 80cd 	bne.w	8020e3c <ce303_current+0x109c>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8020ca2:	8a3b      	ldrh	r3, [r7, #16]
 8020ca4:	3301      	adds	r3, #1
 8020ca6:	4a1d      	ldr	r2, [pc, #116]	; (8020d1c <ce303_current+0xf7c>)
 8020ca8:	5cd3      	ldrb	r3, [r2, r3]
 8020caa:	b29b      	uxth	r3, r3
 8020cac:	3b30      	subs	r3, #48	; 0x30
 8020cae:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8020cb0:	8a3b      	ldrh	r3, [r7, #16]
 8020cb2:	3304      	adds	r3, #4
 8020cb4:	4a19      	ldr	r2, [pc, #100]	; (8020d1c <ce303_current+0xf7c>)
 8020cb6:	5cd3      	ldrb	r3, [r2, r3]
 8020cb8:	2b29      	cmp	r3, #41	; 0x29
 8020cba:	d110      	bne.n	8020cde <ce303_current+0xf3e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8020cbc:	8a3b      	ldrh	r3, [r7, #16]
 8020cbe:	3303      	adds	r3, #3
 8020cc0:	4a16      	ldr	r2, [pc, #88]	; (8020d1c <ce303_current+0xf7c>)
 8020cc2:	5cd3      	ldrb	r3, [r2, r3]
 8020cc4:	3b30      	subs	r3, #48	; 0x30
 8020cc6:	b29b      	uxth	r3, r3
 8020cc8:	461a      	mov	r2, r3
 8020cca:	0092      	lsls	r2, r2, #2
 8020ccc:	4413      	add	r3, r2
 8020cce:	461a      	mov	r2, r3
 8020cd0:	0091      	lsls	r1, r2, #2
 8020cd2:	461a      	mov	r2, r3
 8020cd4:	460b      	mov	r3, r1
 8020cd6:	4413      	add	r3, r2
 8020cd8:	009b      	lsls	r3, r3, #2
 8020cda:	82fb      	strh	r3, [r7, #22]
 8020cdc:	e077      	b.n	8020dce <ce303_current+0x102e>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8020cde:	8a3b      	ldrh	r3, [r7, #16]
 8020ce0:	3305      	adds	r3, #5
 8020ce2:	4a0e      	ldr	r2, [pc, #56]	; (8020d1c <ce303_current+0xf7c>)
 8020ce4:	5cd3      	ldrb	r3, [r2, r3]
 8020ce6:	2b29      	cmp	r3, #41	; 0x29
 8020ce8:	d11e      	bne.n	8020d28 <ce303_current+0xf88>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8020cea:	8a3b      	ldrh	r3, [r7, #16]
 8020cec:	3303      	adds	r3, #3
 8020cee:	4a0b      	ldr	r2, [pc, #44]	; (8020d1c <ce303_current+0xf7c>)
 8020cf0:	5cd3      	ldrb	r3, [r2, r3]
 8020cf2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8020cf6:	4613      	mov	r3, r2
 8020cf8:	009b      	lsls	r3, r3, #2
 8020cfa:	4413      	add	r3, r2
 8020cfc:	005b      	lsls	r3, r3, #1
 8020cfe:	4619      	mov	r1, r3
 8020d00:	8a3b      	ldrh	r3, [r7, #16]
 8020d02:	3304      	adds	r3, #4
 8020d04:	4a05      	ldr	r2, [pc, #20]	; (8020d1c <ce303_current+0xf7c>)
 8020d06:	5cd3      	ldrb	r3, [r2, r3]
 8020d08:	3b30      	subs	r3, #48	; 0x30
 8020d0a:	440b      	add	r3, r1
 8020d0c:	b29b      	uxth	r3, r3
 8020d0e:	461a      	mov	r2, r3
 8020d10:	0092      	lsls	r2, r2, #2
 8020d12:	4413      	add	r3, r2
 8020d14:	005b      	lsls	r3, r3, #1
 8020d16:	82fb      	strh	r3, [r7, #22]
 8020d18:	e059      	b.n	8020dce <ce303_current+0x102e>
 8020d1a:	bf00      	nop
 8020d1c:	200098e4 	.word	0x200098e4
 8020d20:	20009a6c 	.word	0x20009a6c
 8020d24:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8020d28:	8a3b      	ldrh	r3, [r7, #16]
 8020d2a:	3306      	adds	r3, #6
 8020d2c:	4ab0      	ldr	r2, [pc, #704]	; (8020ff0 <ce303_current+0x1250>)
 8020d2e:	5cd3      	ldrb	r3, [r2, r3]
 8020d30:	2b29      	cmp	r3, #41	; 0x29
 8020d32:	d126      	bne.n	8020d82 <ce303_current+0xfe2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8020d34:	8a3b      	ldrh	r3, [r7, #16]
 8020d36:	3303      	adds	r3, #3
 8020d38:	4aad      	ldr	r2, [pc, #692]	; (8020ff0 <ce303_current+0x1250>)
 8020d3a:	5cd3      	ldrb	r3, [r2, r3]
 8020d3c:	3b30      	subs	r3, #48	; 0x30
 8020d3e:	b29b      	uxth	r3, r3
 8020d40:	461a      	mov	r2, r3
 8020d42:	0092      	lsls	r2, r2, #2
 8020d44:	4413      	add	r3, r2
 8020d46:	461a      	mov	r2, r3
 8020d48:	0091      	lsls	r1, r2, #2
 8020d4a:	461a      	mov	r2, r3
 8020d4c:	460b      	mov	r3, r1
 8020d4e:	4413      	add	r3, r2
 8020d50:	009b      	lsls	r3, r3, #2
 8020d52:	b29a      	uxth	r2, r3
 8020d54:	8a3b      	ldrh	r3, [r7, #16]
 8020d56:	3304      	adds	r3, #4
 8020d58:	49a5      	ldr	r1, [pc, #660]	; (8020ff0 <ce303_current+0x1250>)
 8020d5a:	5ccb      	ldrb	r3, [r1, r3]
 8020d5c:	3b30      	subs	r3, #48	; 0x30
 8020d5e:	b29b      	uxth	r3, r3
 8020d60:	4619      	mov	r1, r3
 8020d62:	0089      	lsls	r1, r1, #2
 8020d64:	440b      	add	r3, r1
 8020d66:	005b      	lsls	r3, r3, #1
 8020d68:	b29b      	uxth	r3, r3
 8020d6a:	4413      	add	r3, r2
 8020d6c:	b29a      	uxth	r2, r3
 8020d6e:	8a3b      	ldrh	r3, [r7, #16]
 8020d70:	3305      	adds	r3, #5
 8020d72:	499f      	ldr	r1, [pc, #636]	; (8020ff0 <ce303_current+0x1250>)
 8020d74:	5ccb      	ldrb	r3, [r1, r3]
 8020d76:	b29b      	uxth	r3, r3
 8020d78:	4413      	add	r3, r2
 8020d7a:	b29b      	uxth	r3, r3
 8020d7c:	3b30      	subs	r3, #48	; 0x30
 8020d7e:	82fb      	strh	r3, [r7, #22]
 8020d80:	e025      	b.n	8020dce <ce303_current+0x102e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8020d82:	8a3b      	ldrh	r3, [r7, #16]
 8020d84:	3303      	adds	r3, #3
 8020d86:	4a9a      	ldr	r2, [pc, #616]	; (8020ff0 <ce303_current+0x1250>)
 8020d88:	5cd3      	ldrb	r3, [r2, r3]
 8020d8a:	3b30      	subs	r3, #48	; 0x30
 8020d8c:	b29b      	uxth	r3, r3
 8020d8e:	461a      	mov	r2, r3
 8020d90:	0092      	lsls	r2, r2, #2
 8020d92:	4413      	add	r3, r2
 8020d94:	461a      	mov	r2, r3
 8020d96:	0091      	lsls	r1, r2, #2
 8020d98:	461a      	mov	r2, r3
 8020d9a:	460b      	mov	r3, r1
 8020d9c:	4413      	add	r3, r2
 8020d9e:	009b      	lsls	r3, r3, #2
 8020da0:	b29a      	uxth	r2, r3
 8020da2:	8a3b      	ldrh	r3, [r7, #16]
 8020da4:	3304      	adds	r3, #4
 8020da6:	4992      	ldr	r1, [pc, #584]	; (8020ff0 <ce303_current+0x1250>)
 8020da8:	5ccb      	ldrb	r3, [r1, r3]
 8020daa:	3b30      	subs	r3, #48	; 0x30
 8020dac:	b29b      	uxth	r3, r3
 8020dae:	4619      	mov	r1, r3
 8020db0:	0089      	lsls	r1, r1, #2
 8020db2:	440b      	add	r3, r1
 8020db4:	005b      	lsls	r3, r3, #1
 8020db6:	b29b      	uxth	r3, r3
 8020db8:	4413      	add	r3, r2
 8020dba:	b29a      	uxth	r2, r3
 8020dbc:	8a3b      	ldrh	r3, [r7, #16]
 8020dbe:	3305      	adds	r3, #5
 8020dc0:	498b      	ldr	r1, [pc, #556]	; (8020ff0 <ce303_current+0x1250>)
 8020dc2:	5ccb      	ldrb	r3, [r1, r3]
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	4413      	add	r3, r2
 8020dc8:	b29b      	uxth	r3, r3
 8020dca:	3b30      	subs	r3, #48	; 0x30
 8020dcc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020dce:	4b89      	ldr	r3, [pc, #548]	; (8020ff4 <ce303_current+0x1254>)
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8020dd6:	4618      	mov	r0, r3
 8020dd8:	f7f5 ff62 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 8020ddc:	89fb      	ldrh	r3, [r7, #14]
 8020dde:	0a1b      	lsrs	r3, r3, #8
 8020de0:	b29b      	uxth	r3, r3
 8020de2:	b2db      	uxtb	r3, r3
 8020de4:	4619      	mov	r1, r3
 8020de6:	f242 0042 	movw	r0, #8258	; 0x2042
 8020dea:	f004 fb2b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8020dee:	89fb      	ldrh	r3, [r7, #14]
 8020df0:	b2db      	uxtb	r3, r3
 8020df2:	4619      	mov	r1, r3
 8020df4:	f242 0043 	movw	r0, #8259	; 0x2043
 8020df8:	f004 fb24 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8020dfc:	8afb      	ldrh	r3, [r7, #22]
 8020dfe:	0a1b      	lsrs	r3, r3, #8
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	b2db      	uxtb	r3, r3
 8020e04:	4619      	mov	r1, r3
 8020e06:	f242 0048 	movw	r0, #8264	; 0x2048
 8020e0a:	f004 fb1b 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8020e0e:	8afb      	ldrh	r3, [r7, #22]
 8020e10:	b2db      	uxtb	r3, r3
 8020e12:	4619      	mov	r1, r3
 8020e14:	f242 0049 	movw	r0, #8265	; 0x2049
 8020e18:	f004 fb14 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8020e1c:	4b75      	ldr	r3, [pc, #468]	; (8020ff4 <ce303_current+0x1254>)
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	4618      	mov	r0, r3
 8020e22:	f7f5 ff8b 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 8020e26:	4a74      	ldr	r2, [pc, #464]	; (8020ff8 <ce303_current+0x1258>)
 8020e28:	89fb      	ldrh	r3, [r7, #14]
 8020e2a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 8020e2e:	4a72      	ldr	r2, [pc, #456]	; (8020ff8 <ce303_current+0x1258>)
 8020e30:	8afb      	ldrh	r3, [r7, #22]
 8020e32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 8020e36:	2301      	movs	r3, #1
 8020e38:	74fb      	strb	r3, [r7, #19]
 8020e3a:	e1ce      	b.n	80211da <ce303_current+0x143a>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8020e3c:	8a3b      	ldrh	r3, [r7, #16]
 8020e3e:	3303      	adds	r3, #3
 8020e40:	4a6b      	ldr	r2, [pc, #428]	; (8020ff0 <ce303_current+0x1250>)
 8020e42:	5cd3      	ldrb	r3, [r2, r3]
 8020e44:	2b2e      	cmp	r3, #46	; 0x2e
 8020e46:	f040 80d9 	bne.w	8020ffc <ce303_current+0x125c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8020e4a:	8a3b      	ldrh	r3, [r7, #16]
 8020e4c:	3301      	adds	r3, #1
 8020e4e:	4a68      	ldr	r2, [pc, #416]	; (8020ff0 <ce303_current+0x1250>)
 8020e50:	5cd3      	ldrb	r3, [r2, r3]
 8020e52:	3b30      	subs	r3, #48	; 0x30
 8020e54:	b29b      	uxth	r3, r3
 8020e56:	461a      	mov	r2, r3
 8020e58:	0092      	lsls	r2, r2, #2
 8020e5a:	4413      	add	r3, r2
 8020e5c:	005b      	lsls	r3, r3, #1
 8020e5e:	b29a      	uxth	r2, r3
 8020e60:	8a3b      	ldrh	r3, [r7, #16]
 8020e62:	3302      	adds	r3, #2
 8020e64:	4962      	ldr	r1, [pc, #392]	; (8020ff0 <ce303_current+0x1250>)
 8020e66:	5ccb      	ldrb	r3, [r1, r3]
 8020e68:	b29b      	uxth	r3, r3
 8020e6a:	4413      	add	r3, r2
 8020e6c:	b29b      	uxth	r3, r3
 8020e6e:	3b30      	subs	r3, #48	; 0x30
 8020e70:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8020e72:	8a3b      	ldrh	r3, [r7, #16]
 8020e74:	3305      	adds	r3, #5
 8020e76:	4a5e      	ldr	r2, [pc, #376]	; (8020ff0 <ce303_current+0x1250>)
 8020e78:	5cd3      	ldrb	r3, [r2, r3]
 8020e7a:	2b29      	cmp	r3, #41	; 0x29
 8020e7c:	d110      	bne.n	8020ea0 <ce303_current+0x1100>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8020e7e:	8a3b      	ldrh	r3, [r7, #16]
 8020e80:	3304      	adds	r3, #4
 8020e82:	4a5b      	ldr	r2, [pc, #364]	; (8020ff0 <ce303_current+0x1250>)
 8020e84:	5cd3      	ldrb	r3, [r2, r3]
 8020e86:	3b30      	subs	r3, #48	; 0x30
 8020e88:	b29b      	uxth	r3, r3
 8020e8a:	461a      	mov	r2, r3
 8020e8c:	0092      	lsls	r2, r2, #2
 8020e8e:	4413      	add	r3, r2
 8020e90:	461a      	mov	r2, r3
 8020e92:	0091      	lsls	r1, r2, #2
 8020e94:	461a      	mov	r2, r3
 8020e96:	460b      	mov	r3, r1
 8020e98:	4413      	add	r3, r2
 8020e9a:	009b      	lsls	r3, r3, #2
 8020e9c:	82fb      	strh	r3, [r7, #22]
 8020e9e:	e070      	b.n	8020f82 <ce303_current+0x11e2>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8020ea0:	8a3b      	ldrh	r3, [r7, #16]
 8020ea2:	3306      	adds	r3, #6
 8020ea4:	4a52      	ldr	r2, [pc, #328]	; (8020ff0 <ce303_current+0x1250>)
 8020ea6:	5cd3      	ldrb	r3, [r2, r3]
 8020ea8:	2b29      	cmp	r3, #41	; 0x29
 8020eaa:	d117      	bne.n	8020edc <ce303_current+0x113c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8020eac:	8a3b      	ldrh	r3, [r7, #16]
 8020eae:	3304      	adds	r3, #4
 8020eb0:	4a4f      	ldr	r2, [pc, #316]	; (8020ff0 <ce303_current+0x1250>)
 8020eb2:	5cd3      	ldrb	r3, [r2, r3]
 8020eb4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8020eb8:	4613      	mov	r3, r2
 8020eba:	009b      	lsls	r3, r3, #2
 8020ebc:	4413      	add	r3, r2
 8020ebe:	005b      	lsls	r3, r3, #1
 8020ec0:	4619      	mov	r1, r3
 8020ec2:	8a3b      	ldrh	r3, [r7, #16]
 8020ec4:	3305      	adds	r3, #5
 8020ec6:	4a4a      	ldr	r2, [pc, #296]	; (8020ff0 <ce303_current+0x1250>)
 8020ec8:	5cd3      	ldrb	r3, [r2, r3]
 8020eca:	3b30      	subs	r3, #48	; 0x30
 8020ecc:	440b      	add	r3, r1
 8020ece:	b29b      	uxth	r3, r3
 8020ed0:	461a      	mov	r2, r3
 8020ed2:	0092      	lsls	r2, r2, #2
 8020ed4:	4413      	add	r3, r2
 8020ed6:	005b      	lsls	r3, r3, #1
 8020ed8:	82fb      	strh	r3, [r7, #22]
 8020eda:	e052      	b.n	8020f82 <ce303_current+0x11e2>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8020edc:	8a3b      	ldrh	r3, [r7, #16]
 8020ede:	3307      	adds	r3, #7
 8020ee0:	4a43      	ldr	r2, [pc, #268]	; (8020ff0 <ce303_current+0x1250>)
 8020ee2:	5cd3      	ldrb	r3, [r2, r3]
 8020ee4:	2b29      	cmp	r3, #41	; 0x29
 8020ee6:	d126      	bne.n	8020f36 <ce303_current+0x1196>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8020ee8:	8a3b      	ldrh	r3, [r7, #16]
 8020eea:	3304      	adds	r3, #4
 8020eec:	4a40      	ldr	r2, [pc, #256]	; (8020ff0 <ce303_current+0x1250>)
 8020eee:	5cd3      	ldrb	r3, [r2, r3]
 8020ef0:	3b30      	subs	r3, #48	; 0x30
 8020ef2:	b29b      	uxth	r3, r3
 8020ef4:	461a      	mov	r2, r3
 8020ef6:	0092      	lsls	r2, r2, #2
 8020ef8:	4413      	add	r3, r2
 8020efa:	461a      	mov	r2, r3
 8020efc:	0091      	lsls	r1, r2, #2
 8020efe:	461a      	mov	r2, r3
 8020f00:	460b      	mov	r3, r1
 8020f02:	4413      	add	r3, r2
 8020f04:	009b      	lsls	r3, r3, #2
 8020f06:	b29a      	uxth	r2, r3
 8020f08:	8a3b      	ldrh	r3, [r7, #16]
 8020f0a:	3305      	adds	r3, #5
 8020f0c:	4938      	ldr	r1, [pc, #224]	; (8020ff0 <ce303_current+0x1250>)
 8020f0e:	5ccb      	ldrb	r3, [r1, r3]
 8020f10:	3b30      	subs	r3, #48	; 0x30
 8020f12:	b29b      	uxth	r3, r3
 8020f14:	4619      	mov	r1, r3
 8020f16:	0089      	lsls	r1, r1, #2
 8020f18:	440b      	add	r3, r1
 8020f1a:	005b      	lsls	r3, r3, #1
 8020f1c:	b29b      	uxth	r3, r3
 8020f1e:	4413      	add	r3, r2
 8020f20:	b29a      	uxth	r2, r3
 8020f22:	8a3b      	ldrh	r3, [r7, #16]
 8020f24:	3306      	adds	r3, #6
 8020f26:	4932      	ldr	r1, [pc, #200]	; (8020ff0 <ce303_current+0x1250>)
 8020f28:	5ccb      	ldrb	r3, [r1, r3]
 8020f2a:	b29b      	uxth	r3, r3
 8020f2c:	4413      	add	r3, r2
 8020f2e:	b29b      	uxth	r3, r3
 8020f30:	3b30      	subs	r3, #48	; 0x30
 8020f32:	82fb      	strh	r3, [r7, #22]
 8020f34:	e025      	b.n	8020f82 <ce303_current+0x11e2>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8020f36:	8a3b      	ldrh	r3, [r7, #16]
 8020f38:	3304      	adds	r3, #4
 8020f3a:	4a2d      	ldr	r2, [pc, #180]	; (8020ff0 <ce303_current+0x1250>)
 8020f3c:	5cd3      	ldrb	r3, [r2, r3]
 8020f3e:	3b30      	subs	r3, #48	; 0x30
 8020f40:	b29b      	uxth	r3, r3
 8020f42:	461a      	mov	r2, r3
 8020f44:	0092      	lsls	r2, r2, #2
 8020f46:	4413      	add	r3, r2
 8020f48:	461a      	mov	r2, r3
 8020f4a:	0091      	lsls	r1, r2, #2
 8020f4c:	461a      	mov	r2, r3
 8020f4e:	460b      	mov	r3, r1
 8020f50:	4413      	add	r3, r2
 8020f52:	009b      	lsls	r3, r3, #2
 8020f54:	b29a      	uxth	r2, r3
 8020f56:	8a3b      	ldrh	r3, [r7, #16]
 8020f58:	3305      	adds	r3, #5
 8020f5a:	4925      	ldr	r1, [pc, #148]	; (8020ff0 <ce303_current+0x1250>)
 8020f5c:	5ccb      	ldrb	r3, [r1, r3]
 8020f5e:	3b30      	subs	r3, #48	; 0x30
 8020f60:	b29b      	uxth	r3, r3
 8020f62:	4619      	mov	r1, r3
 8020f64:	0089      	lsls	r1, r1, #2
 8020f66:	440b      	add	r3, r1
 8020f68:	005b      	lsls	r3, r3, #1
 8020f6a:	b29b      	uxth	r3, r3
 8020f6c:	4413      	add	r3, r2
 8020f6e:	b29a      	uxth	r2, r3
 8020f70:	8a3b      	ldrh	r3, [r7, #16]
 8020f72:	3306      	adds	r3, #6
 8020f74:	491e      	ldr	r1, [pc, #120]	; (8020ff0 <ce303_current+0x1250>)
 8020f76:	5ccb      	ldrb	r3, [r1, r3]
 8020f78:	b29b      	uxth	r3, r3
 8020f7a:	4413      	add	r3, r2
 8020f7c:	b29b      	uxth	r3, r3
 8020f7e:	3b30      	subs	r3, #48	; 0x30
 8020f80:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020f82:	4b1c      	ldr	r3, [pc, #112]	; (8020ff4 <ce303_current+0x1254>)
 8020f84:	681b      	ldr	r3, [r3, #0]
 8020f86:	f04f 31ff 	mov.w	r1, #4294967295
 8020f8a:	4618      	mov	r0, r3
 8020f8c:	f7f5 fe88 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 8020f90:	89fb      	ldrh	r3, [r7, #14]
 8020f92:	0a1b      	lsrs	r3, r3, #8
 8020f94:	b29b      	uxth	r3, r3
 8020f96:	b2db      	uxtb	r3, r3
 8020f98:	4619      	mov	r1, r3
 8020f9a:	f242 0042 	movw	r0, #8258	; 0x2042
 8020f9e:	f004 fa51 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8020fa2:	89fb      	ldrh	r3, [r7, #14]
 8020fa4:	b2db      	uxtb	r3, r3
 8020fa6:	4619      	mov	r1, r3
 8020fa8:	f242 0043 	movw	r0, #8259	; 0x2043
 8020fac:	f004 fa4a 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8020fb0:	8afb      	ldrh	r3, [r7, #22]
 8020fb2:	0a1b      	lsrs	r3, r3, #8
 8020fb4:	b29b      	uxth	r3, r3
 8020fb6:	b2db      	uxtb	r3, r3
 8020fb8:	4619      	mov	r1, r3
 8020fba:	f242 0048 	movw	r0, #8264	; 0x2048
 8020fbe:	f004 fa41 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8020fc2:	8afb      	ldrh	r3, [r7, #22]
 8020fc4:	b2db      	uxtb	r3, r3
 8020fc6:	4619      	mov	r1, r3
 8020fc8:	f242 0049 	movw	r0, #8265	; 0x2049
 8020fcc:	f004 fa3a 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8020fd0:	4b08      	ldr	r3, [pc, #32]	; (8020ff4 <ce303_current+0x1254>)
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	4618      	mov	r0, r3
 8020fd6:	f7f5 feb1 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 8020fda:	4a07      	ldr	r2, [pc, #28]	; (8020ff8 <ce303_current+0x1258>)
 8020fdc:	89fb      	ldrh	r3, [r7, #14]
 8020fde:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 8020fe2:	4a05      	ldr	r2, [pc, #20]	; (8020ff8 <ce303_current+0x1258>)
 8020fe4:	8afb      	ldrh	r3, [r7, #22]
 8020fe6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 8020fea:	2301      	movs	r3, #1
 8020fec:	74fb      	strb	r3, [r7, #19]
 8020fee:	e0f4      	b.n	80211da <ce303_current+0x143a>
 8020ff0:	200098e4 	.word	0x200098e4
 8020ff4:	20009a6c 	.word	0x20009a6c
 8020ff8:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8020ffc:	8a3b      	ldrh	r3, [r7, #16]
 8020ffe:	3304      	adds	r3, #4
 8021000:	4a85      	ldr	r2, [pc, #532]	; (8021218 <ce303_current+0x1478>)
 8021002:	5cd3      	ldrb	r3, [r2, r3]
 8021004:	2b2e      	cmp	r3, #46	; 0x2e
 8021006:	f040 80e8 	bne.w	80211da <ce303_current+0x143a>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 802100a:	8a3b      	ldrh	r3, [r7, #16]
 802100c:	3301      	adds	r3, #1
 802100e:	4a82      	ldr	r2, [pc, #520]	; (8021218 <ce303_current+0x1478>)
 8021010:	5cd3      	ldrb	r3, [r2, r3]
 8021012:	3b30      	subs	r3, #48	; 0x30
 8021014:	b29b      	uxth	r3, r3
 8021016:	461a      	mov	r2, r3
 8021018:	0092      	lsls	r2, r2, #2
 802101a:	4413      	add	r3, r2
 802101c:	461a      	mov	r2, r3
 802101e:	0091      	lsls	r1, r2, #2
 8021020:	461a      	mov	r2, r3
 8021022:	460b      	mov	r3, r1
 8021024:	4413      	add	r3, r2
 8021026:	009b      	lsls	r3, r3, #2
 8021028:	b29a      	uxth	r2, r3
 802102a:	8a3b      	ldrh	r3, [r7, #16]
 802102c:	3302      	adds	r3, #2
 802102e:	497a      	ldr	r1, [pc, #488]	; (8021218 <ce303_current+0x1478>)
 8021030:	5ccb      	ldrb	r3, [r1, r3]
 8021032:	3b30      	subs	r3, #48	; 0x30
 8021034:	b29b      	uxth	r3, r3
 8021036:	4619      	mov	r1, r3
 8021038:	0089      	lsls	r1, r1, #2
 802103a:	440b      	add	r3, r1
 802103c:	005b      	lsls	r3, r3, #1
 802103e:	b29b      	uxth	r3, r3
 8021040:	4413      	add	r3, r2
 8021042:	b29a      	uxth	r2, r3
 8021044:	8a3b      	ldrh	r3, [r7, #16]
 8021046:	3303      	adds	r3, #3
 8021048:	4973      	ldr	r1, [pc, #460]	; (8021218 <ce303_current+0x1478>)
 802104a:	5ccb      	ldrb	r3, [r1, r3]
 802104c:	b29b      	uxth	r3, r3
 802104e:	4413      	add	r3, r2
 8021050:	b29b      	uxth	r3, r3
 8021052:	3b30      	subs	r3, #48	; 0x30
 8021054:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8021056:	8a3b      	ldrh	r3, [r7, #16]
 8021058:	3306      	adds	r3, #6
 802105a:	4a6f      	ldr	r2, [pc, #444]	; (8021218 <ce303_current+0x1478>)
 802105c:	5cd3      	ldrb	r3, [r2, r3]
 802105e:	2b29      	cmp	r3, #41	; 0x29
 8021060:	d110      	bne.n	8021084 <ce303_current+0x12e4>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8021062:	8a3b      	ldrh	r3, [r7, #16]
 8021064:	3305      	adds	r3, #5
 8021066:	4a6c      	ldr	r2, [pc, #432]	; (8021218 <ce303_current+0x1478>)
 8021068:	5cd3      	ldrb	r3, [r2, r3]
 802106a:	3b30      	subs	r3, #48	; 0x30
 802106c:	b29b      	uxth	r3, r3
 802106e:	461a      	mov	r2, r3
 8021070:	0092      	lsls	r2, r2, #2
 8021072:	4413      	add	r3, r2
 8021074:	461a      	mov	r2, r3
 8021076:	0091      	lsls	r1, r2, #2
 8021078:	461a      	mov	r2, r3
 802107a:	460b      	mov	r3, r1
 802107c:	4413      	add	r3, r2
 802107e:	009b      	lsls	r3, r3, #2
 8021080:	82fb      	strh	r3, [r7, #22]
 8021082:	e070      	b.n	8021166 <ce303_current+0x13c6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8021084:	8a3b      	ldrh	r3, [r7, #16]
 8021086:	3307      	adds	r3, #7
 8021088:	4a63      	ldr	r2, [pc, #396]	; (8021218 <ce303_current+0x1478>)
 802108a:	5cd3      	ldrb	r3, [r2, r3]
 802108c:	2b29      	cmp	r3, #41	; 0x29
 802108e:	d117      	bne.n	80210c0 <ce303_current+0x1320>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8021090:	8a3b      	ldrh	r3, [r7, #16]
 8021092:	3305      	adds	r3, #5
 8021094:	4a60      	ldr	r2, [pc, #384]	; (8021218 <ce303_current+0x1478>)
 8021096:	5cd3      	ldrb	r3, [r2, r3]
 8021098:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802109c:	4613      	mov	r3, r2
 802109e:	009b      	lsls	r3, r3, #2
 80210a0:	4413      	add	r3, r2
 80210a2:	005b      	lsls	r3, r3, #1
 80210a4:	4619      	mov	r1, r3
 80210a6:	8a3b      	ldrh	r3, [r7, #16]
 80210a8:	3306      	adds	r3, #6
 80210aa:	4a5b      	ldr	r2, [pc, #364]	; (8021218 <ce303_current+0x1478>)
 80210ac:	5cd3      	ldrb	r3, [r2, r3]
 80210ae:	3b30      	subs	r3, #48	; 0x30
 80210b0:	440b      	add	r3, r1
 80210b2:	b29b      	uxth	r3, r3
 80210b4:	461a      	mov	r2, r3
 80210b6:	0092      	lsls	r2, r2, #2
 80210b8:	4413      	add	r3, r2
 80210ba:	005b      	lsls	r3, r3, #1
 80210bc:	82fb      	strh	r3, [r7, #22]
 80210be:	e052      	b.n	8021166 <ce303_current+0x13c6>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80210c0:	8a3b      	ldrh	r3, [r7, #16]
 80210c2:	3308      	adds	r3, #8
 80210c4:	4a54      	ldr	r2, [pc, #336]	; (8021218 <ce303_current+0x1478>)
 80210c6:	5cd3      	ldrb	r3, [r2, r3]
 80210c8:	2b29      	cmp	r3, #41	; 0x29
 80210ca:	d126      	bne.n	802111a <ce303_current+0x137a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80210cc:	8a3b      	ldrh	r3, [r7, #16]
 80210ce:	3305      	adds	r3, #5
 80210d0:	4a51      	ldr	r2, [pc, #324]	; (8021218 <ce303_current+0x1478>)
 80210d2:	5cd3      	ldrb	r3, [r2, r3]
 80210d4:	3b30      	subs	r3, #48	; 0x30
 80210d6:	b29b      	uxth	r3, r3
 80210d8:	461a      	mov	r2, r3
 80210da:	0092      	lsls	r2, r2, #2
 80210dc:	4413      	add	r3, r2
 80210de:	461a      	mov	r2, r3
 80210e0:	0091      	lsls	r1, r2, #2
 80210e2:	461a      	mov	r2, r3
 80210e4:	460b      	mov	r3, r1
 80210e6:	4413      	add	r3, r2
 80210e8:	009b      	lsls	r3, r3, #2
 80210ea:	b29a      	uxth	r2, r3
 80210ec:	8a3b      	ldrh	r3, [r7, #16]
 80210ee:	3306      	adds	r3, #6
 80210f0:	4949      	ldr	r1, [pc, #292]	; (8021218 <ce303_current+0x1478>)
 80210f2:	5ccb      	ldrb	r3, [r1, r3]
 80210f4:	3b30      	subs	r3, #48	; 0x30
 80210f6:	b29b      	uxth	r3, r3
 80210f8:	4619      	mov	r1, r3
 80210fa:	0089      	lsls	r1, r1, #2
 80210fc:	440b      	add	r3, r1
 80210fe:	005b      	lsls	r3, r3, #1
 8021100:	b29b      	uxth	r3, r3
 8021102:	4413      	add	r3, r2
 8021104:	b29a      	uxth	r2, r3
 8021106:	8a3b      	ldrh	r3, [r7, #16]
 8021108:	3307      	adds	r3, #7
 802110a:	4943      	ldr	r1, [pc, #268]	; (8021218 <ce303_current+0x1478>)
 802110c:	5ccb      	ldrb	r3, [r1, r3]
 802110e:	b29b      	uxth	r3, r3
 8021110:	4413      	add	r3, r2
 8021112:	b29b      	uxth	r3, r3
 8021114:	3b30      	subs	r3, #48	; 0x30
 8021116:	82fb      	strh	r3, [r7, #22]
 8021118:	e025      	b.n	8021166 <ce303_current+0x13c6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 802111a:	8a3b      	ldrh	r3, [r7, #16]
 802111c:	3305      	adds	r3, #5
 802111e:	4a3e      	ldr	r2, [pc, #248]	; (8021218 <ce303_current+0x1478>)
 8021120:	5cd3      	ldrb	r3, [r2, r3]
 8021122:	3b30      	subs	r3, #48	; 0x30
 8021124:	b29b      	uxth	r3, r3
 8021126:	461a      	mov	r2, r3
 8021128:	0092      	lsls	r2, r2, #2
 802112a:	4413      	add	r3, r2
 802112c:	461a      	mov	r2, r3
 802112e:	0091      	lsls	r1, r2, #2
 8021130:	461a      	mov	r2, r3
 8021132:	460b      	mov	r3, r1
 8021134:	4413      	add	r3, r2
 8021136:	009b      	lsls	r3, r3, #2
 8021138:	b29a      	uxth	r2, r3
 802113a:	8a3b      	ldrh	r3, [r7, #16]
 802113c:	3306      	adds	r3, #6
 802113e:	4936      	ldr	r1, [pc, #216]	; (8021218 <ce303_current+0x1478>)
 8021140:	5ccb      	ldrb	r3, [r1, r3]
 8021142:	3b30      	subs	r3, #48	; 0x30
 8021144:	b29b      	uxth	r3, r3
 8021146:	4619      	mov	r1, r3
 8021148:	0089      	lsls	r1, r1, #2
 802114a:	440b      	add	r3, r1
 802114c:	005b      	lsls	r3, r3, #1
 802114e:	b29b      	uxth	r3, r3
 8021150:	4413      	add	r3, r2
 8021152:	b29a      	uxth	r2, r3
 8021154:	8a3b      	ldrh	r3, [r7, #16]
 8021156:	3307      	adds	r3, #7
 8021158:	492f      	ldr	r1, [pc, #188]	; (8021218 <ce303_current+0x1478>)
 802115a:	5ccb      	ldrb	r3, [r1, r3]
 802115c:	b29b      	uxth	r3, r3
 802115e:	4413      	add	r3, r2
 8021160:	b29b      	uxth	r3, r3
 8021162:	3b30      	subs	r3, #48	; 0x30
 8021164:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021166:	4b2d      	ldr	r3, [pc, #180]	; (802121c <ce303_current+0x147c>)
 8021168:	681b      	ldr	r3, [r3, #0]
 802116a:	f04f 31ff 	mov.w	r1, #4294967295
 802116e:	4618      	mov	r0, r3
 8021170:	f7f5 fd96 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 8021174:	89fb      	ldrh	r3, [r7, #14]
 8021176:	0a1b      	lsrs	r3, r3, #8
 8021178:	b29b      	uxth	r3, r3
 802117a:	b2db      	uxtb	r3, r3
 802117c:	4619      	mov	r1, r3
 802117e:	f242 0042 	movw	r0, #8258	; 0x2042
 8021182:	f004 f95f 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8021186:	89fb      	ldrh	r3, [r7, #14]
 8021188:	b2db      	uxtb	r3, r3
 802118a:	4619      	mov	r1, r3
 802118c:	f242 0043 	movw	r0, #8259	; 0x2043
 8021190:	f004 f958 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8021194:	8afb      	ldrh	r3, [r7, #22]
 8021196:	0a1b      	lsrs	r3, r3, #8
 8021198:	b29b      	uxth	r3, r3
 802119a:	b2db      	uxtb	r3, r3
 802119c:	4619      	mov	r1, r3
 802119e:	f242 0048 	movw	r0, #8264	; 0x2048
 80211a2:	f004 f94f 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80211a6:	8afb      	ldrh	r3, [r7, #22]
 80211a8:	b2db      	uxtb	r3, r3
 80211aa:	4619      	mov	r1, r3
 80211ac:	f242 0049 	movw	r0, #8265	; 0x2049
 80211b0:	f004 f948 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80211b4:	4b19      	ldr	r3, [pc, #100]	; (802121c <ce303_current+0x147c>)
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	4618      	mov	r0, r3
 80211ba:	f7f5 fdbf 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 80211be:	4a18      	ldr	r2, [pc, #96]	; (8021220 <ce303_current+0x1480>)
 80211c0:	89fb      	ldrh	r3, [r7, #14]
 80211c2:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 80211c6:	4a16      	ldr	r2, [pc, #88]	; (8021220 <ce303_current+0x1480>)
 80211c8:	8afb      	ldrh	r3, [r7, #22]
 80211ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 80211ce:	2301      	movs	r3, #1
 80211d0:	74fb      	strb	r3, [r7, #19]
 80211d2:	e002      	b.n	80211da <ce303_current+0x143a>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80211d4:	bf00      	nop
 80211d6:	e000      	b.n	80211da <ce303_current+0x143a>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80211d8:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 80211da:	8a3b      	ldrh	r3, [r7, #16]
 80211dc:	3301      	adds	r3, #1
 80211de:	823b      	strh	r3, [r7, #16]
 80211e0:	8a3b      	ldrh	r3, [r7, #16]
 80211e2:	2bff      	cmp	r3, #255	; 0xff
 80211e4:	f67e afd3 	bls.w	802018e <ce303_current+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 80211e8:	4b0e      	ldr	r3, [pc, #56]	; (8021224 <ce303_current+0x1484>)
 80211ea:	2200      	movs	r2, #0
 80211ec:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80211ee:	f7fd fb71 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80211f2:	2201      	movs	r2, #1
 80211f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80211f8:	480b      	ldr	r0, [pc, #44]	; (8021228 <ce303_current+0x1488>)
 80211fa:	f7f1 ffeb 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 80211fe:	2205      	movs	r2, #5
 8021200:	490a      	ldr	r1, [pc, #40]	; (802122c <ce303_current+0x148c>)
 8021202:	480b      	ldr	r0, [pc, #44]	; (8021230 <ce303_current+0x1490>)
 8021204:	f7f4 fa9e 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8021208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802120c:	f7f0 fd2e 	bl	8011c6c <HAL_Delay>

}
 8021210:	bf00      	nop
 8021212:	3718      	adds	r7, #24
 8021214:	46bd      	mov	sp, r7
 8021216:	bd80      	pop	{r7, pc}
 8021218:	200098e4 	.word	0x200098e4
 802121c:	20009a6c 	.word	0x20009a6c
 8021220:	2000a10c 	.word	0x2000a10c
 8021224:	2000085d 	.word	0x2000085d
 8021228:	40021800 	.word	0x40021800
 802122c:	20000030 	.word	0x20000030
 8021230:	20009c70 	.word	0x20009c70

08021234 <ce303_power>:

void ce303_power (uint8_t meter_id)
{
 8021234:	b580      	push	{r7, lr}
 8021236:	b086      	sub	sp, #24
 8021238:	af00      	add	r7, sp, #0
 802123a:	4603      	mov	r3, r0
 802123c:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t power_a_state; // переменные состояния прочтения значений мощности ( если переменная равна 0, то значение мощности не прочитано, если 1 - значение прочитанно )
	uint8_t power_b_state;
	uint8_t power_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 802123e:	79fb      	ldrb	r3, [r7, #7]
 8021240:	2b63      	cmp	r3, #99	; 0x63
 8021242:	d962      	bls.n	802130a <ce303_power+0xd6>
	{
		start_buf[0] = 0x2F;
 8021244:	4b9d      	ldr	r3, [pc, #628]	; (80214bc <ce303_power+0x288>)
 8021246:	222f      	movs	r2, #47	; 0x2f
 8021248:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 802124a:	4b9c      	ldr	r3, [pc, #624]	; (80214bc <ce303_power+0x288>)
 802124c:	223f      	movs	r2, #63	; 0x3f
 802124e:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8021250:	79fb      	ldrb	r3, [r7, #7]
 8021252:	4a9b      	ldr	r2, [pc, #620]	; (80214c0 <ce303_power+0x28c>)
 8021254:	fba2 2303 	umull	r2, r3, r2, r3
 8021258:	095b      	lsrs	r3, r3, #5
 802125a:	b2db      	uxtb	r3, r3
 802125c:	3330      	adds	r3, #48	; 0x30
 802125e:	b2da      	uxtb	r2, r3
 8021260:	4b96      	ldr	r3, [pc, #600]	; (80214bc <ce303_power+0x288>)
 8021262:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8021264:	79fa      	ldrb	r2, [r7, #7]
 8021266:	79fb      	ldrb	r3, [r7, #7]
 8021268:	4995      	ldr	r1, [pc, #596]	; (80214c0 <ce303_power+0x28c>)
 802126a:	fba1 1303 	umull	r1, r3, r1, r3
 802126e:	095b      	lsrs	r3, r3, #5
 8021270:	b2db      	uxtb	r3, r3
 8021272:	4619      	mov	r1, r3
 8021274:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8021278:	fb03 f301 	mul.w	r3, r3, r1
 802127c:	4413      	add	r3, r2
 802127e:	4a91      	ldr	r2, [pc, #580]	; (80214c4 <ce303_power+0x290>)
 8021280:	fb82 1203 	smull	r1, r2, r2, r3
 8021284:	1092      	asrs	r2, r2, #2
 8021286:	17db      	asrs	r3, r3, #31
 8021288:	1ad3      	subs	r3, r2, r3
 802128a:	b2db      	uxtb	r3, r3
 802128c:	3330      	adds	r3, #48	; 0x30
 802128e:	b2da      	uxtb	r2, r3
 8021290:	4b8a      	ldr	r3, [pc, #552]	; (80214bc <ce303_power+0x288>)
 8021292:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8021294:	79fa      	ldrb	r2, [r7, #7]
 8021296:	79fb      	ldrb	r3, [r7, #7]
 8021298:	4989      	ldr	r1, [pc, #548]	; (80214c0 <ce303_power+0x28c>)
 802129a:	fba1 1303 	umull	r1, r3, r1, r3
 802129e:	095b      	lsrs	r3, r3, #5
 80212a0:	b2db      	uxtb	r3, r3
 80212a2:	4619      	mov	r1, r3
 80212a4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80212a8:	fb03 f301 	mul.w	r3, r3, r1
 80212ac:	441a      	add	r2, r3
 80212ae:	4b85      	ldr	r3, [pc, #532]	; (80214c4 <ce303_power+0x290>)
 80212b0:	fb83 1302 	smull	r1, r3, r3, r2
 80212b4:	1099      	asrs	r1, r3, #2
 80212b6:	17d3      	asrs	r3, r2, #31
 80212b8:	1ac9      	subs	r1, r1, r3
 80212ba:	460b      	mov	r3, r1
 80212bc:	009b      	lsls	r3, r3, #2
 80212be:	440b      	add	r3, r1
 80212c0:	005b      	lsls	r3, r3, #1
 80212c2:	1ad1      	subs	r1, r2, r3
 80212c4:	b2cb      	uxtb	r3, r1
 80212c6:	3330      	adds	r3, #48	; 0x30
 80212c8:	b2da      	uxtb	r2, r3
 80212ca:	4b7c      	ldr	r3, [pc, #496]	; (80214bc <ce303_power+0x288>)
 80212cc:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 80212ce:	4b7b      	ldr	r3, [pc, #492]	; (80214bc <ce303_power+0x288>)
 80212d0:	2221      	movs	r2, #33	; 0x21
 80212d2:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 80212d4:	4b79      	ldr	r3, [pc, #484]	; (80214bc <ce303_power+0x288>)
 80212d6:	220d      	movs	r2, #13
 80212d8:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 80212da:	4b78      	ldr	r3, [pc, #480]	; (80214bc <ce303_power+0x288>)
 80212dc:	220a      	movs	r2, #10
 80212de:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 80212e0:	4b79      	ldr	r3, [pc, #484]	; (80214c8 <ce303_power+0x294>)
 80212e2:	2200      	movs	r2, #0
 80212e4:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80212e6:	f7fd faf5 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80212ea:	2201      	movs	r2, #1
 80212ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80212f0:	4876      	ldr	r0, [pc, #472]	; (80214cc <ce303_power+0x298>)
 80212f2:	f7f1 ff6f 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 80212f6:	2208      	movs	r2, #8
 80212f8:	4970      	ldr	r1, [pc, #448]	; (80214bc <ce303_power+0x288>)
 80212fa:	4875      	ldr	r0, [pc, #468]	; (80214d0 <ce303_power+0x29c>)
 80212fc:	f7f4 fa22 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8021300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021304:	f7f0 fcb2 	bl	8011c6c <HAL_Delay>
 8021308:	e072      	b.n	80213f0 <ce303_power+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 802130a:	79fb      	ldrb	r3, [r7, #7]
 802130c:	2b09      	cmp	r3, #9
 802130e:	d944      	bls.n	802139a <ce303_power+0x166>
 8021310:	79fb      	ldrb	r3, [r7, #7]
 8021312:	2b63      	cmp	r3, #99	; 0x63
 8021314:	d841      	bhi.n	802139a <ce303_power+0x166>
	{
		start_buf[0] = 0x2F;
 8021316:	4b69      	ldr	r3, [pc, #420]	; (80214bc <ce303_power+0x288>)
 8021318:	222f      	movs	r2, #47	; 0x2f
 802131a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 802131c:	4b67      	ldr	r3, [pc, #412]	; (80214bc <ce303_power+0x288>)
 802131e:	223f      	movs	r2, #63	; 0x3f
 8021320:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8021322:	79fb      	ldrb	r3, [r7, #7]
 8021324:	4a6b      	ldr	r2, [pc, #428]	; (80214d4 <ce303_power+0x2a0>)
 8021326:	fba2 2303 	umull	r2, r3, r2, r3
 802132a:	08db      	lsrs	r3, r3, #3
 802132c:	b2db      	uxtb	r3, r3
 802132e:	3330      	adds	r3, #48	; 0x30
 8021330:	b2da      	uxtb	r2, r3
 8021332:	4b62      	ldr	r3, [pc, #392]	; (80214bc <ce303_power+0x288>)
 8021334:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8021336:	79fb      	ldrb	r3, [r7, #7]
 8021338:	4a66      	ldr	r2, [pc, #408]	; (80214d4 <ce303_power+0x2a0>)
 802133a:	fba2 2303 	umull	r2, r3, r2, r3
 802133e:	08db      	lsrs	r3, r3, #3
 8021340:	b2db      	uxtb	r3, r3
 8021342:	461a      	mov	r2, r3
 8021344:	0152      	lsls	r2, r2, #5
 8021346:	1ad2      	subs	r2, r2, r3
 8021348:	0092      	lsls	r2, r2, #2
 802134a:	1ad3      	subs	r3, r2, r3
 802134c:	005b      	lsls	r3, r3, #1
 802134e:	b2da      	uxtb	r2, r3
 8021350:	79fb      	ldrb	r3, [r7, #7]
 8021352:	4413      	add	r3, r2
 8021354:	b2db      	uxtb	r3, r3
 8021356:	3330      	adds	r3, #48	; 0x30
 8021358:	b2da      	uxtb	r2, r3
 802135a:	4b58      	ldr	r3, [pc, #352]	; (80214bc <ce303_power+0x288>)
 802135c:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 802135e:	4b57      	ldr	r3, [pc, #348]	; (80214bc <ce303_power+0x288>)
 8021360:	2221      	movs	r2, #33	; 0x21
 8021362:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8021364:	4b55      	ldr	r3, [pc, #340]	; (80214bc <ce303_power+0x288>)
 8021366:	220d      	movs	r2, #13
 8021368:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 802136a:	4b54      	ldr	r3, [pc, #336]	; (80214bc <ce303_power+0x288>)
 802136c:	220a      	movs	r2, #10
 802136e:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8021370:	4b55      	ldr	r3, [pc, #340]	; (80214c8 <ce303_power+0x294>)
 8021372:	2200      	movs	r2, #0
 8021374:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8021376:	f7fd faad 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802137a:	2201      	movs	r2, #1
 802137c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021380:	4852      	ldr	r0, [pc, #328]	; (80214cc <ce303_power+0x298>)
 8021382:	f7f1 ff27 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8021386:	2207      	movs	r2, #7
 8021388:	494c      	ldr	r1, [pc, #304]	; (80214bc <ce303_power+0x288>)
 802138a:	4851      	ldr	r0, [pc, #324]	; (80214d0 <ce303_power+0x29c>)
 802138c:	f7f4 f9da 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8021390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021394:	f7f0 fc6a 	bl	8011c6c <HAL_Delay>
 8021398:	e02a      	b.n	80213f0 <ce303_power+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 802139a:	79fb      	ldrb	r3, [r7, #7]
 802139c:	2b09      	cmp	r3, #9
 802139e:	d827      	bhi.n	80213f0 <ce303_power+0x1bc>
	{
		start_buf[0] = 0x2F;
 80213a0:	4b46      	ldr	r3, [pc, #280]	; (80214bc <ce303_power+0x288>)
 80213a2:	222f      	movs	r2, #47	; 0x2f
 80213a4:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80213a6:	4b45      	ldr	r3, [pc, #276]	; (80214bc <ce303_power+0x288>)
 80213a8:	223f      	movs	r2, #63	; 0x3f
 80213aa:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 80213ac:	79fb      	ldrb	r3, [r7, #7]
 80213ae:	3330      	adds	r3, #48	; 0x30
 80213b0:	b2da      	uxtb	r2, r3
 80213b2:	4b42      	ldr	r3, [pc, #264]	; (80214bc <ce303_power+0x288>)
 80213b4:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 80213b6:	4b41      	ldr	r3, [pc, #260]	; (80214bc <ce303_power+0x288>)
 80213b8:	2221      	movs	r2, #33	; 0x21
 80213ba:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 80213bc:	4b3f      	ldr	r3, [pc, #252]	; (80214bc <ce303_power+0x288>)
 80213be:	220d      	movs	r2, #13
 80213c0:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 80213c2:	4b3e      	ldr	r3, [pc, #248]	; (80214bc <ce303_power+0x288>)
 80213c4:	220a      	movs	r2, #10
 80213c6:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 80213c8:	4b3f      	ldr	r3, [pc, #252]	; (80214c8 <ce303_power+0x294>)
 80213ca:	2200      	movs	r2, #0
 80213cc:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80213ce:	f7fd fa81 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80213d2:	2201      	movs	r2, #1
 80213d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80213d8:	483c      	ldr	r0, [pc, #240]	; (80214cc <ce303_power+0x298>)
 80213da:	f7f1 fefb 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 80213de:	2206      	movs	r2, #6
 80213e0:	4936      	ldr	r1, [pc, #216]	; (80214bc <ce303_power+0x288>)
 80213e2:	483b      	ldr	r0, [pc, #236]	; (80214d0 <ce303_power+0x29c>)
 80213e4:	f7f4 f9ae 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80213e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80213ec:	f7f0 fc3e 	bl	8011c6c <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 80213f0:	79fb      	ldrb	r3, [r7, #7]
 80213f2:	2b63      	cmp	r3, #99	; 0x63
 80213f4:	d970      	bls.n	80214d8 <ce303_power+0x2a4>
	{
		start_buf[0] = 0x2F;
 80213f6:	4b31      	ldr	r3, [pc, #196]	; (80214bc <ce303_power+0x288>)
 80213f8:	222f      	movs	r2, #47	; 0x2f
 80213fa:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80213fc:	4b2f      	ldr	r3, [pc, #188]	; (80214bc <ce303_power+0x288>)
 80213fe:	223f      	movs	r2, #63	; 0x3f
 8021400:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8021402:	79fb      	ldrb	r3, [r7, #7]
 8021404:	4a2e      	ldr	r2, [pc, #184]	; (80214c0 <ce303_power+0x28c>)
 8021406:	fba2 2303 	umull	r2, r3, r2, r3
 802140a:	095b      	lsrs	r3, r3, #5
 802140c:	b2db      	uxtb	r3, r3
 802140e:	3330      	adds	r3, #48	; 0x30
 8021410:	b2da      	uxtb	r2, r3
 8021412:	4b2a      	ldr	r3, [pc, #168]	; (80214bc <ce303_power+0x288>)
 8021414:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8021416:	79fa      	ldrb	r2, [r7, #7]
 8021418:	79fb      	ldrb	r3, [r7, #7]
 802141a:	4929      	ldr	r1, [pc, #164]	; (80214c0 <ce303_power+0x28c>)
 802141c:	fba1 1303 	umull	r1, r3, r1, r3
 8021420:	095b      	lsrs	r3, r3, #5
 8021422:	b2db      	uxtb	r3, r3
 8021424:	4619      	mov	r1, r3
 8021426:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802142a:	fb03 f301 	mul.w	r3, r3, r1
 802142e:	4413      	add	r3, r2
 8021430:	4a24      	ldr	r2, [pc, #144]	; (80214c4 <ce303_power+0x290>)
 8021432:	fb82 1203 	smull	r1, r2, r2, r3
 8021436:	1092      	asrs	r2, r2, #2
 8021438:	17db      	asrs	r3, r3, #31
 802143a:	1ad3      	subs	r3, r2, r3
 802143c:	b2db      	uxtb	r3, r3
 802143e:	3330      	adds	r3, #48	; 0x30
 8021440:	b2da      	uxtb	r2, r3
 8021442:	4b1e      	ldr	r3, [pc, #120]	; (80214bc <ce303_power+0x288>)
 8021444:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8021446:	79fa      	ldrb	r2, [r7, #7]
 8021448:	79fb      	ldrb	r3, [r7, #7]
 802144a:	491d      	ldr	r1, [pc, #116]	; (80214c0 <ce303_power+0x28c>)
 802144c:	fba1 1303 	umull	r1, r3, r1, r3
 8021450:	095b      	lsrs	r3, r3, #5
 8021452:	b2db      	uxtb	r3, r3
 8021454:	4619      	mov	r1, r3
 8021456:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802145a:	fb03 f301 	mul.w	r3, r3, r1
 802145e:	441a      	add	r2, r3
 8021460:	4b18      	ldr	r3, [pc, #96]	; (80214c4 <ce303_power+0x290>)
 8021462:	fb83 1302 	smull	r1, r3, r3, r2
 8021466:	1099      	asrs	r1, r3, #2
 8021468:	17d3      	asrs	r3, r2, #31
 802146a:	1ac9      	subs	r1, r1, r3
 802146c:	460b      	mov	r3, r1
 802146e:	009b      	lsls	r3, r3, #2
 8021470:	440b      	add	r3, r1
 8021472:	005b      	lsls	r3, r3, #1
 8021474:	1ad1      	subs	r1, r2, r3
 8021476:	b2cb      	uxtb	r3, r1
 8021478:	3330      	adds	r3, #48	; 0x30
 802147a:	b2da      	uxtb	r2, r3
 802147c:	4b0f      	ldr	r3, [pc, #60]	; (80214bc <ce303_power+0x288>)
 802147e:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8021480:	4b0e      	ldr	r3, [pc, #56]	; (80214bc <ce303_power+0x288>)
 8021482:	2221      	movs	r2, #33	; 0x21
 8021484:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8021486:	4b0d      	ldr	r3, [pc, #52]	; (80214bc <ce303_power+0x288>)
 8021488:	220d      	movs	r2, #13
 802148a:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 802148c:	4b0b      	ldr	r3, [pc, #44]	; (80214bc <ce303_power+0x288>)
 802148e:	220a      	movs	r2, #10
 8021490:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8021492:	4b0d      	ldr	r3, [pc, #52]	; (80214c8 <ce303_power+0x294>)
 8021494:	2200      	movs	r2, #0
 8021496:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8021498:	f7fd fa1c 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802149c:	2201      	movs	r2, #1
 802149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80214a2:	480a      	ldr	r0, [pc, #40]	; (80214cc <ce303_power+0x298>)
 80214a4:	f7f1 fe96 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 80214a8:	2208      	movs	r2, #8
 80214aa:	4904      	ldr	r1, [pc, #16]	; (80214bc <ce303_power+0x288>)
 80214ac:	4808      	ldr	r0, [pc, #32]	; (80214d0 <ce303_power+0x29c>)
 80214ae:	f7f4 f949 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80214b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80214b6:	f7f0 fbd9 	bl	8011c6c <HAL_Delay>
 80214ba:	e080      	b.n	80215be <ce303_power+0x38a>
 80214bc:	20000010 	.word	0x20000010
 80214c0:	51eb851f 	.word	0x51eb851f
 80214c4:	66666667 	.word	0x66666667
 80214c8:	2000085d 	.word	0x2000085d
 80214cc:	40021800 	.word	0x40021800
 80214d0:	20009c70 	.word	0x20009c70
 80214d4:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 80214d8:	79fb      	ldrb	r3, [r7, #7]
 80214da:	2b09      	cmp	r3, #9
 80214dc:	d944      	bls.n	8021568 <ce303_power+0x334>
 80214de:	79fb      	ldrb	r3, [r7, #7]
 80214e0:	2b63      	cmp	r3, #99	; 0x63
 80214e2:	d841      	bhi.n	8021568 <ce303_power+0x334>
	{
		start_buf[0] = 0x2F;
 80214e4:	4b90      	ldr	r3, [pc, #576]	; (8021728 <ce303_power+0x4f4>)
 80214e6:	222f      	movs	r2, #47	; 0x2f
 80214e8:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80214ea:	4b8f      	ldr	r3, [pc, #572]	; (8021728 <ce303_power+0x4f4>)
 80214ec:	223f      	movs	r2, #63	; 0x3f
 80214ee:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 80214f0:	79fb      	ldrb	r3, [r7, #7]
 80214f2:	4a8e      	ldr	r2, [pc, #568]	; (802172c <ce303_power+0x4f8>)
 80214f4:	fba2 2303 	umull	r2, r3, r2, r3
 80214f8:	08db      	lsrs	r3, r3, #3
 80214fa:	b2db      	uxtb	r3, r3
 80214fc:	3330      	adds	r3, #48	; 0x30
 80214fe:	b2da      	uxtb	r2, r3
 8021500:	4b89      	ldr	r3, [pc, #548]	; (8021728 <ce303_power+0x4f4>)
 8021502:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8021504:	79fb      	ldrb	r3, [r7, #7]
 8021506:	4a89      	ldr	r2, [pc, #548]	; (802172c <ce303_power+0x4f8>)
 8021508:	fba2 2303 	umull	r2, r3, r2, r3
 802150c:	08db      	lsrs	r3, r3, #3
 802150e:	b2db      	uxtb	r3, r3
 8021510:	461a      	mov	r2, r3
 8021512:	0152      	lsls	r2, r2, #5
 8021514:	1ad2      	subs	r2, r2, r3
 8021516:	0092      	lsls	r2, r2, #2
 8021518:	1ad3      	subs	r3, r2, r3
 802151a:	005b      	lsls	r3, r3, #1
 802151c:	b2da      	uxtb	r2, r3
 802151e:	79fb      	ldrb	r3, [r7, #7]
 8021520:	4413      	add	r3, r2
 8021522:	b2db      	uxtb	r3, r3
 8021524:	3330      	adds	r3, #48	; 0x30
 8021526:	b2da      	uxtb	r2, r3
 8021528:	4b7f      	ldr	r3, [pc, #508]	; (8021728 <ce303_power+0x4f4>)
 802152a:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 802152c:	4b7e      	ldr	r3, [pc, #504]	; (8021728 <ce303_power+0x4f4>)
 802152e:	2221      	movs	r2, #33	; 0x21
 8021530:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8021532:	4b7d      	ldr	r3, [pc, #500]	; (8021728 <ce303_power+0x4f4>)
 8021534:	220d      	movs	r2, #13
 8021536:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8021538:	4b7b      	ldr	r3, [pc, #492]	; (8021728 <ce303_power+0x4f4>)
 802153a:	220a      	movs	r2, #10
 802153c:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 802153e:	4b7c      	ldr	r3, [pc, #496]	; (8021730 <ce303_power+0x4fc>)
 8021540:	2200      	movs	r2, #0
 8021542:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8021544:	f7fd f9c6 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8021548:	2201      	movs	r2, #1
 802154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802154e:	4879      	ldr	r0, [pc, #484]	; (8021734 <ce303_power+0x500>)
 8021550:	f7f1 fe40 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8021554:	2207      	movs	r2, #7
 8021556:	4974      	ldr	r1, [pc, #464]	; (8021728 <ce303_power+0x4f4>)
 8021558:	4877      	ldr	r0, [pc, #476]	; (8021738 <ce303_power+0x504>)
 802155a:	f7f4 f8f3 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 802155e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021562:	f7f0 fb83 	bl	8011c6c <HAL_Delay>
 8021566:	e02a      	b.n	80215be <ce303_power+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8021568:	79fb      	ldrb	r3, [r7, #7]
 802156a:	2b09      	cmp	r3, #9
 802156c:	d827      	bhi.n	80215be <ce303_power+0x38a>
	{
		start_buf[0] = 0x2F;
 802156e:	4b6e      	ldr	r3, [pc, #440]	; (8021728 <ce303_power+0x4f4>)
 8021570:	222f      	movs	r2, #47	; 0x2f
 8021572:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8021574:	4b6c      	ldr	r3, [pc, #432]	; (8021728 <ce303_power+0x4f4>)
 8021576:	223f      	movs	r2, #63	; 0x3f
 8021578:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 802157a:	79fb      	ldrb	r3, [r7, #7]
 802157c:	3330      	adds	r3, #48	; 0x30
 802157e:	b2da      	uxtb	r2, r3
 8021580:	4b69      	ldr	r3, [pc, #420]	; (8021728 <ce303_power+0x4f4>)
 8021582:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8021584:	4b68      	ldr	r3, [pc, #416]	; (8021728 <ce303_power+0x4f4>)
 8021586:	2221      	movs	r2, #33	; 0x21
 8021588:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 802158a:	4b67      	ldr	r3, [pc, #412]	; (8021728 <ce303_power+0x4f4>)
 802158c:	220d      	movs	r2, #13
 802158e:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8021590:	4b65      	ldr	r3, [pc, #404]	; (8021728 <ce303_power+0x4f4>)
 8021592:	220a      	movs	r2, #10
 8021594:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8021596:	4b66      	ldr	r3, [pc, #408]	; (8021730 <ce303_power+0x4fc>)
 8021598:	2200      	movs	r2, #0
 802159a:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802159c:	f7fd f99a 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80215a0:	2201      	movs	r2, #1
 80215a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80215a6:	4863      	ldr	r0, [pc, #396]	; (8021734 <ce303_power+0x500>)
 80215a8:	f7f1 fe14 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 80215ac:	2206      	movs	r2, #6
 80215ae:	495e      	ldr	r1, [pc, #376]	; (8021728 <ce303_power+0x4f4>)
 80215b0:	4861      	ldr	r0, [pc, #388]	; (8021738 <ce303_power+0x504>)
 80215b2:	f7f4 f8c7 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80215b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80215ba:	f7f0 fb57 	bl	8011c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 80215be:	4b5c      	ldr	r3, [pc, #368]	; (8021730 <ce303_power+0x4fc>)
 80215c0:	2200      	movs	r2, #0
 80215c2:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80215c4:	f7fd f986 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80215c8:	2201      	movs	r2, #1
 80215ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80215ce:	4859      	ldr	r0, [pc, #356]	; (8021734 <ce303_power+0x500>)
 80215d0:	f7f1 fe00 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 80215d4:	2206      	movs	r2, #6
 80215d6:	4959      	ldr	r1, [pc, #356]	; (802173c <ce303_power+0x508>)
 80215d8:	4857      	ldr	r0, [pc, #348]	; (8021738 <ce303_power+0x504>)
 80215da:	f7f4 f8b3 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80215de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80215e2:	f7f0 fb43 	bl	8011c6c <HAL_Delay>

	meter_rx_number = 0;
 80215e6:	4b52      	ldr	r3, [pc, #328]	; (8021730 <ce303_power+0x4fc>)
 80215e8:	2200      	movs	r2, #0
 80215ea:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80215ec:	f7fd f972 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80215f0:	2201      	movs	r2, #1
 80215f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80215f6:	484f      	ldr	r0, [pc, #316]	; (8021734 <ce303_power+0x500>)
 80215f8:	f7f1 fdec 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &power_buf[0], 13); // передаем команду
 80215fc:	220d      	movs	r2, #13
 80215fe:	4950      	ldr	r1, [pc, #320]	; (8021740 <ce303_power+0x50c>)
 8021600:	484d      	ldr	r0, [pc, #308]	; (8021738 <ce303_power+0x504>)
 8021602:	f7f4 f89f 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8021606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802160a:	f7f0 fb2f 	bl	8011c6c <HAL_Delay>

	power_a_state = 0; // обнуляем переменные состояния прочтения мощщности перед их прочтением
 802160e:	2300      	movs	r3, #0
 8021610:	757b      	strb	r3, [r7, #21]
	power_b_state = 0;
 8021612:	2300      	movs	r3, #0
 8021614:	753b      	strb	r3, [r7, #20]
	power_c_state = 0;
 8021616:	2300      	movs	r3, #0
 8021618:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 802161a:	2300      	movs	r3, #0
 802161c:	823b      	strh	r3, [r7, #16]
 802161e:	f001 b82b 	b.w	8022678 <ce303_power+0x1444>
	{

		if( (meter_rx_buffer[i] == 0x28) && (power_a_state==0) && (power_b_state==0) && (power_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8021622:	8a3b      	ldrh	r3, [r7, #16]
 8021624:	4a47      	ldr	r2, [pc, #284]	; (8021744 <ce303_power+0x510>)
 8021626:	5cd3      	ldrb	r3, [r2, r3]
 8021628:	2b28      	cmp	r3, #40	; 0x28
 802162a:	f040 82ba 	bne.w	8021ba2 <ce303_power+0x96e>
 802162e:	7d7b      	ldrb	r3, [r7, #21]
 8021630:	2b00      	cmp	r3, #0
 8021632:	f040 82b6 	bne.w	8021ba2 <ce303_power+0x96e>
 8021636:	7d3b      	ldrb	r3, [r7, #20]
 8021638:	2b00      	cmp	r3, #0
 802163a:	f040 82b2 	bne.w	8021ba2 <ce303_power+0x96e>
 802163e:	7cfb      	ldrb	r3, [r7, #19]
 8021640:	2b00      	cmp	r3, #0
 8021642:	f040 82ae 	bne.w	8021ba2 <ce303_power+0x96e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8021646:	8a3b      	ldrh	r3, [r7, #16]
 8021648:	3302      	adds	r3, #2
 802164a:	4a3e      	ldr	r2, [pc, #248]	; (8021744 <ce303_power+0x510>)
 802164c:	5cd3      	ldrb	r3, [r2, r3]
 802164e:	2b2e      	cmp	r3, #46	; 0x2e
 8021650:	f040 80d8 	bne.w	8021804 <ce303_power+0x5d0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8021654:	8a3b      	ldrh	r3, [r7, #16]
 8021656:	3301      	adds	r3, #1
 8021658:	4a3a      	ldr	r2, [pc, #232]	; (8021744 <ce303_power+0x510>)
 802165a:	5cd3      	ldrb	r3, [r2, r3]
 802165c:	b29b      	uxth	r3, r3
 802165e:	3b30      	subs	r3, #48	; 0x30
 8021660:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8021662:	8a3b      	ldrh	r3, [r7, #16]
 8021664:	3304      	adds	r3, #4
 8021666:	4a37      	ldr	r2, [pc, #220]	; (8021744 <ce303_power+0x510>)
 8021668:	5cd3      	ldrb	r3, [r2, r3]
 802166a:	2b29      	cmp	r3, #41	; 0x29
 802166c:	d110      	bne.n	8021690 <ce303_power+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 802166e:	8a3b      	ldrh	r3, [r7, #16]
 8021670:	3303      	adds	r3, #3
 8021672:	4a34      	ldr	r2, [pc, #208]	; (8021744 <ce303_power+0x510>)
 8021674:	5cd3      	ldrb	r3, [r2, r3]
 8021676:	3b30      	subs	r3, #48	; 0x30
 8021678:	b29b      	uxth	r3, r3
 802167a:	461a      	mov	r2, r3
 802167c:	0092      	lsls	r2, r2, #2
 802167e:	4413      	add	r3, r2
 8021680:	461a      	mov	r2, r3
 8021682:	0091      	lsls	r1, r2, #2
 8021684:	461a      	mov	r2, r3
 8021686:	460b      	mov	r3, r1
 8021688:	4413      	add	r3, r2
 802168a:	009b      	lsls	r3, r3, #2
 802168c:	82fb      	strh	r3, [r7, #22]
 802168e:	e081      	b.n	8021794 <ce303_power+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8021690:	8a3b      	ldrh	r3, [r7, #16]
 8021692:	3305      	adds	r3, #5
 8021694:	4a2b      	ldr	r2, [pc, #172]	; (8021744 <ce303_power+0x510>)
 8021696:	5cd3      	ldrb	r3, [r2, r3]
 8021698:	2b29      	cmp	r3, #41	; 0x29
 802169a:	d117      	bne.n	80216cc <ce303_power+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 802169c:	8a3b      	ldrh	r3, [r7, #16]
 802169e:	3303      	adds	r3, #3
 80216a0:	4a28      	ldr	r2, [pc, #160]	; (8021744 <ce303_power+0x510>)
 80216a2:	5cd3      	ldrb	r3, [r2, r3]
 80216a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80216a8:	4613      	mov	r3, r2
 80216aa:	009b      	lsls	r3, r3, #2
 80216ac:	4413      	add	r3, r2
 80216ae:	005b      	lsls	r3, r3, #1
 80216b0:	4619      	mov	r1, r3
 80216b2:	8a3b      	ldrh	r3, [r7, #16]
 80216b4:	3304      	adds	r3, #4
 80216b6:	4a23      	ldr	r2, [pc, #140]	; (8021744 <ce303_power+0x510>)
 80216b8:	5cd3      	ldrb	r3, [r2, r3]
 80216ba:	3b30      	subs	r3, #48	; 0x30
 80216bc:	440b      	add	r3, r1
 80216be:	b29b      	uxth	r3, r3
 80216c0:	461a      	mov	r2, r3
 80216c2:	0092      	lsls	r2, r2, #2
 80216c4:	4413      	add	r3, r2
 80216c6:	005b      	lsls	r3, r3, #1
 80216c8:	82fb      	strh	r3, [r7, #22]
 80216ca:	e063      	b.n	8021794 <ce303_power+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80216cc:	8a3b      	ldrh	r3, [r7, #16]
 80216ce:	3306      	adds	r3, #6
 80216d0:	4a1c      	ldr	r2, [pc, #112]	; (8021744 <ce303_power+0x510>)
 80216d2:	5cd3      	ldrb	r3, [r2, r3]
 80216d4:	2b29      	cmp	r3, #41	; 0x29
 80216d6:	d137      	bne.n	8021748 <ce303_power+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80216d8:	8a3b      	ldrh	r3, [r7, #16]
 80216da:	3303      	adds	r3, #3
 80216dc:	4a19      	ldr	r2, [pc, #100]	; (8021744 <ce303_power+0x510>)
 80216de:	5cd3      	ldrb	r3, [r2, r3]
 80216e0:	3b30      	subs	r3, #48	; 0x30
 80216e2:	b29b      	uxth	r3, r3
 80216e4:	461a      	mov	r2, r3
 80216e6:	0092      	lsls	r2, r2, #2
 80216e8:	4413      	add	r3, r2
 80216ea:	461a      	mov	r2, r3
 80216ec:	0091      	lsls	r1, r2, #2
 80216ee:	461a      	mov	r2, r3
 80216f0:	460b      	mov	r3, r1
 80216f2:	4413      	add	r3, r2
 80216f4:	009b      	lsls	r3, r3, #2
 80216f6:	b29a      	uxth	r2, r3
 80216f8:	8a3b      	ldrh	r3, [r7, #16]
 80216fa:	3304      	adds	r3, #4
 80216fc:	4911      	ldr	r1, [pc, #68]	; (8021744 <ce303_power+0x510>)
 80216fe:	5ccb      	ldrb	r3, [r1, r3]
 8021700:	3b30      	subs	r3, #48	; 0x30
 8021702:	b29b      	uxth	r3, r3
 8021704:	4619      	mov	r1, r3
 8021706:	0089      	lsls	r1, r1, #2
 8021708:	440b      	add	r3, r1
 802170a:	005b      	lsls	r3, r3, #1
 802170c:	b29b      	uxth	r3, r3
 802170e:	4413      	add	r3, r2
 8021710:	b29a      	uxth	r2, r3
 8021712:	8a3b      	ldrh	r3, [r7, #16]
 8021714:	3305      	adds	r3, #5
 8021716:	490b      	ldr	r1, [pc, #44]	; (8021744 <ce303_power+0x510>)
 8021718:	5ccb      	ldrb	r3, [r1, r3]
 802171a:	b29b      	uxth	r3, r3
 802171c:	4413      	add	r3, r2
 802171e:	b29b      	uxth	r3, r3
 8021720:	3b30      	subs	r3, #48	; 0x30
 8021722:	82fb      	strh	r3, [r7, #22]
 8021724:	e036      	b.n	8021794 <ce303_power+0x560>
 8021726:	bf00      	nop
 8021728:	20000010 	.word	0x20000010
 802172c:	cccccccd 	.word	0xcccccccd
 8021730:	2000085d 	.word	0x2000085d
 8021734:	40021800 	.word	0x40021800
 8021738:	20009c70 	.word	0x20009c70
 802173c:	20000018 	.word	0x20000018
 8021740:	20000048 	.word	0x20000048
 8021744:	200098e4 	.word	0x200098e4
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8021748:	8a3b      	ldrh	r3, [r7, #16]
 802174a:	3303      	adds	r3, #3
 802174c:	4a9b      	ldr	r2, [pc, #620]	; (80219bc <ce303_power+0x788>)
 802174e:	5cd3      	ldrb	r3, [r2, r3]
 8021750:	3b30      	subs	r3, #48	; 0x30
 8021752:	b29b      	uxth	r3, r3
 8021754:	461a      	mov	r2, r3
 8021756:	0092      	lsls	r2, r2, #2
 8021758:	4413      	add	r3, r2
 802175a:	461a      	mov	r2, r3
 802175c:	0091      	lsls	r1, r2, #2
 802175e:	461a      	mov	r2, r3
 8021760:	460b      	mov	r3, r1
 8021762:	4413      	add	r3, r2
 8021764:	009b      	lsls	r3, r3, #2
 8021766:	b29a      	uxth	r2, r3
 8021768:	8a3b      	ldrh	r3, [r7, #16]
 802176a:	3304      	adds	r3, #4
 802176c:	4993      	ldr	r1, [pc, #588]	; (80219bc <ce303_power+0x788>)
 802176e:	5ccb      	ldrb	r3, [r1, r3]
 8021770:	3b30      	subs	r3, #48	; 0x30
 8021772:	b29b      	uxth	r3, r3
 8021774:	4619      	mov	r1, r3
 8021776:	0089      	lsls	r1, r1, #2
 8021778:	440b      	add	r3, r1
 802177a:	005b      	lsls	r3, r3, #1
 802177c:	b29b      	uxth	r3, r3
 802177e:	4413      	add	r3, r2
 8021780:	b29a      	uxth	r2, r3
 8021782:	8a3b      	ldrh	r3, [r7, #16]
 8021784:	3305      	adds	r3, #5
 8021786:	498d      	ldr	r1, [pc, #564]	; (80219bc <ce303_power+0x788>)
 8021788:	5ccb      	ldrb	r3, [r1, r3]
 802178a:	b29b      	uxth	r3, r3
 802178c:	4413      	add	r3, r2
 802178e:	b29b      	uxth	r3, r3
 8021790:	3b30      	subs	r3, #48	; 0x30
 8021792:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021794:	4b8a      	ldr	r3, [pc, #552]	; (80219c0 <ce303_power+0x78c>)
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	f04f 31ff 	mov.w	r1, #4294967295
 802179c:	4618      	mov	r0, r3
 802179e:	f7f5 fa7f 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 80217a2:	89fb      	ldrh	r3, [r7, #14]
 80217a4:	0a1b      	lsrs	r3, r3, #8
 80217a6:	b29b      	uxth	r3, r3
 80217a8:	b2db      	uxtb	r3, r3
 80217aa:	4619      	mov	r1, r3
 80217ac:	f242 0056 	movw	r0, #8278	; 0x2056
 80217b0:	f003 fe48 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 80217b4:	89fb      	ldrh	r3, [r7, #14]
 80217b6:	b2db      	uxtb	r3, r3
 80217b8:	4619      	mov	r1, r3
 80217ba:	f242 0057 	movw	r0, #8279	; 0x2057
 80217be:	f003 fe41 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 80217c2:	8afb      	ldrh	r3, [r7, #22]
 80217c4:	0a1b      	lsrs	r3, r3, #8
 80217c6:	b29b      	uxth	r3, r3
 80217c8:	b2db      	uxtb	r3, r3
 80217ca:	4619      	mov	r1, r3
 80217cc:	f242 005c 	movw	r0, #8284	; 0x205c
 80217d0:	f003 fe38 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80217d4:	8afb      	ldrh	r3, [r7, #22]
 80217d6:	b2db      	uxtb	r3, r3
 80217d8:	4619      	mov	r1, r3
 80217da:	f242 005d 	movw	r0, #8285	; 0x205d
 80217de:	f003 fe31 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80217e2:	4b77      	ldr	r3, [pc, #476]	; (80219c0 <ce303_power+0x78c>)
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	4618      	mov	r0, r3
 80217e8:	f7f5 faa8 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 80217ec:	4a75      	ldr	r2, [pc, #468]	; (80219c4 <ce303_power+0x790>)
 80217ee:	89fb      	ldrh	r3, [r7, #14]
 80217f0:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg =  temp_mil;
 80217f4:	4a73      	ldr	r2, [pc, #460]	; (80219c4 <ce303_power+0x790>)
 80217f6:	8afb      	ldrh	r3, [r7, #22]
 80217f8:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 80217fc:	2301      	movs	r3, #1
 80217fe:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8021800:	f000 bf34 	b.w	802266c <ce303_power+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8021804:	8a3b      	ldrh	r3, [r7, #16]
 8021806:	3303      	adds	r3, #3
 8021808:	4a6c      	ldr	r2, [pc, #432]	; (80219bc <ce303_power+0x788>)
 802180a:	5cd3      	ldrb	r3, [r2, r3]
 802180c:	2b2e      	cmp	r3, #46	; 0x2e
 802180e:	f040 80db 	bne.w	80219c8 <ce303_power+0x794>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8021812:	8a3b      	ldrh	r3, [r7, #16]
 8021814:	3301      	adds	r3, #1
 8021816:	4a69      	ldr	r2, [pc, #420]	; (80219bc <ce303_power+0x788>)
 8021818:	5cd3      	ldrb	r3, [r2, r3]
 802181a:	3b30      	subs	r3, #48	; 0x30
 802181c:	b29b      	uxth	r3, r3
 802181e:	461a      	mov	r2, r3
 8021820:	0092      	lsls	r2, r2, #2
 8021822:	4413      	add	r3, r2
 8021824:	005b      	lsls	r3, r3, #1
 8021826:	b29a      	uxth	r2, r3
 8021828:	8a3b      	ldrh	r3, [r7, #16]
 802182a:	3302      	adds	r3, #2
 802182c:	4963      	ldr	r1, [pc, #396]	; (80219bc <ce303_power+0x788>)
 802182e:	5ccb      	ldrb	r3, [r1, r3]
 8021830:	b29b      	uxth	r3, r3
 8021832:	4413      	add	r3, r2
 8021834:	b29b      	uxth	r3, r3
 8021836:	3b30      	subs	r3, #48	; 0x30
 8021838:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 802183a:	8a3b      	ldrh	r3, [r7, #16]
 802183c:	3305      	adds	r3, #5
 802183e:	4a5f      	ldr	r2, [pc, #380]	; (80219bc <ce303_power+0x788>)
 8021840:	5cd3      	ldrb	r3, [r2, r3]
 8021842:	2b29      	cmp	r3, #41	; 0x29
 8021844:	d110      	bne.n	8021868 <ce303_power+0x634>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8021846:	8a3b      	ldrh	r3, [r7, #16]
 8021848:	3304      	adds	r3, #4
 802184a:	4a5c      	ldr	r2, [pc, #368]	; (80219bc <ce303_power+0x788>)
 802184c:	5cd3      	ldrb	r3, [r2, r3]
 802184e:	3b30      	subs	r3, #48	; 0x30
 8021850:	b29b      	uxth	r3, r3
 8021852:	461a      	mov	r2, r3
 8021854:	0092      	lsls	r2, r2, #2
 8021856:	4413      	add	r3, r2
 8021858:	461a      	mov	r2, r3
 802185a:	0091      	lsls	r1, r2, #2
 802185c:	461a      	mov	r2, r3
 802185e:	460b      	mov	r3, r1
 8021860:	4413      	add	r3, r2
 8021862:	009b      	lsls	r3, r3, #2
 8021864:	82fb      	strh	r3, [r7, #22]
 8021866:	e070      	b.n	802194a <ce303_power+0x716>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8021868:	8a3b      	ldrh	r3, [r7, #16]
 802186a:	3306      	adds	r3, #6
 802186c:	4a53      	ldr	r2, [pc, #332]	; (80219bc <ce303_power+0x788>)
 802186e:	5cd3      	ldrb	r3, [r2, r3]
 8021870:	2b29      	cmp	r3, #41	; 0x29
 8021872:	d117      	bne.n	80218a4 <ce303_power+0x670>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8021874:	8a3b      	ldrh	r3, [r7, #16]
 8021876:	3304      	adds	r3, #4
 8021878:	4a50      	ldr	r2, [pc, #320]	; (80219bc <ce303_power+0x788>)
 802187a:	5cd3      	ldrb	r3, [r2, r3]
 802187c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021880:	4613      	mov	r3, r2
 8021882:	009b      	lsls	r3, r3, #2
 8021884:	4413      	add	r3, r2
 8021886:	005b      	lsls	r3, r3, #1
 8021888:	4619      	mov	r1, r3
 802188a:	8a3b      	ldrh	r3, [r7, #16]
 802188c:	3305      	adds	r3, #5
 802188e:	4a4b      	ldr	r2, [pc, #300]	; (80219bc <ce303_power+0x788>)
 8021890:	5cd3      	ldrb	r3, [r2, r3]
 8021892:	3b30      	subs	r3, #48	; 0x30
 8021894:	440b      	add	r3, r1
 8021896:	b29b      	uxth	r3, r3
 8021898:	461a      	mov	r2, r3
 802189a:	0092      	lsls	r2, r2, #2
 802189c:	4413      	add	r3, r2
 802189e:	005b      	lsls	r3, r3, #1
 80218a0:	82fb      	strh	r3, [r7, #22]
 80218a2:	e052      	b.n	802194a <ce303_power+0x716>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80218a4:	8a3b      	ldrh	r3, [r7, #16]
 80218a6:	3307      	adds	r3, #7
 80218a8:	4a44      	ldr	r2, [pc, #272]	; (80219bc <ce303_power+0x788>)
 80218aa:	5cd3      	ldrb	r3, [r2, r3]
 80218ac:	2b29      	cmp	r3, #41	; 0x29
 80218ae:	d126      	bne.n	80218fe <ce303_power+0x6ca>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80218b0:	8a3b      	ldrh	r3, [r7, #16]
 80218b2:	3304      	adds	r3, #4
 80218b4:	4a41      	ldr	r2, [pc, #260]	; (80219bc <ce303_power+0x788>)
 80218b6:	5cd3      	ldrb	r3, [r2, r3]
 80218b8:	3b30      	subs	r3, #48	; 0x30
 80218ba:	b29b      	uxth	r3, r3
 80218bc:	461a      	mov	r2, r3
 80218be:	0092      	lsls	r2, r2, #2
 80218c0:	4413      	add	r3, r2
 80218c2:	461a      	mov	r2, r3
 80218c4:	0091      	lsls	r1, r2, #2
 80218c6:	461a      	mov	r2, r3
 80218c8:	460b      	mov	r3, r1
 80218ca:	4413      	add	r3, r2
 80218cc:	009b      	lsls	r3, r3, #2
 80218ce:	b29a      	uxth	r2, r3
 80218d0:	8a3b      	ldrh	r3, [r7, #16]
 80218d2:	3305      	adds	r3, #5
 80218d4:	4939      	ldr	r1, [pc, #228]	; (80219bc <ce303_power+0x788>)
 80218d6:	5ccb      	ldrb	r3, [r1, r3]
 80218d8:	3b30      	subs	r3, #48	; 0x30
 80218da:	b29b      	uxth	r3, r3
 80218dc:	4619      	mov	r1, r3
 80218de:	0089      	lsls	r1, r1, #2
 80218e0:	440b      	add	r3, r1
 80218e2:	005b      	lsls	r3, r3, #1
 80218e4:	b29b      	uxth	r3, r3
 80218e6:	4413      	add	r3, r2
 80218e8:	b29a      	uxth	r2, r3
 80218ea:	8a3b      	ldrh	r3, [r7, #16]
 80218ec:	3306      	adds	r3, #6
 80218ee:	4933      	ldr	r1, [pc, #204]	; (80219bc <ce303_power+0x788>)
 80218f0:	5ccb      	ldrb	r3, [r1, r3]
 80218f2:	b29b      	uxth	r3, r3
 80218f4:	4413      	add	r3, r2
 80218f6:	b29b      	uxth	r3, r3
 80218f8:	3b30      	subs	r3, #48	; 0x30
 80218fa:	82fb      	strh	r3, [r7, #22]
 80218fc:	e025      	b.n	802194a <ce303_power+0x716>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80218fe:	8a3b      	ldrh	r3, [r7, #16]
 8021900:	3304      	adds	r3, #4
 8021902:	4a2e      	ldr	r2, [pc, #184]	; (80219bc <ce303_power+0x788>)
 8021904:	5cd3      	ldrb	r3, [r2, r3]
 8021906:	3b30      	subs	r3, #48	; 0x30
 8021908:	b29b      	uxth	r3, r3
 802190a:	461a      	mov	r2, r3
 802190c:	0092      	lsls	r2, r2, #2
 802190e:	4413      	add	r3, r2
 8021910:	461a      	mov	r2, r3
 8021912:	0091      	lsls	r1, r2, #2
 8021914:	461a      	mov	r2, r3
 8021916:	460b      	mov	r3, r1
 8021918:	4413      	add	r3, r2
 802191a:	009b      	lsls	r3, r3, #2
 802191c:	b29a      	uxth	r2, r3
 802191e:	8a3b      	ldrh	r3, [r7, #16]
 8021920:	3305      	adds	r3, #5
 8021922:	4926      	ldr	r1, [pc, #152]	; (80219bc <ce303_power+0x788>)
 8021924:	5ccb      	ldrb	r3, [r1, r3]
 8021926:	3b30      	subs	r3, #48	; 0x30
 8021928:	b29b      	uxth	r3, r3
 802192a:	4619      	mov	r1, r3
 802192c:	0089      	lsls	r1, r1, #2
 802192e:	440b      	add	r3, r1
 8021930:	005b      	lsls	r3, r3, #1
 8021932:	b29b      	uxth	r3, r3
 8021934:	4413      	add	r3, r2
 8021936:	b29a      	uxth	r2, r3
 8021938:	8a3b      	ldrh	r3, [r7, #16]
 802193a:	3306      	adds	r3, #6
 802193c:	491f      	ldr	r1, [pc, #124]	; (80219bc <ce303_power+0x788>)
 802193e:	5ccb      	ldrb	r3, [r1, r3]
 8021940:	b29b      	uxth	r3, r3
 8021942:	4413      	add	r3, r2
 8021944:	b29b      	uxth	r3, r3
 8021946:	3b30      	subs	r3, #48	; 0x30
 8021948:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802194a:	4b1d      	ldr	r3, [pc, #116]	; (80219c0 <ce303_power+0x78c>)
 802194c:	681b      	ldr	r3, [r3, #0]
 802194e:	f04f 31ff 	mov.w	r1, #4294967295
 8021952:	4618      	mov	r0, r3
 8021954:	f7f5 f9a4 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 8021958:	89fb      	ldrh	r3, [r7, #14]
 802195a:	0a1b      	lsrs	r3, r3, #8
 802195c:	b29b      	uxth	r3, r3
 802195e:	b2db      	uxtb	r3, r3
 8021960:	4619      	mov	r1, r3
 8021962:	f242 0056 	movw	r0, #8278	; 0x2056
 8021966:	f003 fd6d 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 802196a:	89fb      	ldrh	r3, [r7, #14]
 802196c:	b2db      	uxtb	r3, r3
 802196e:	4619      	mov	r1, r3
 8021970:	f242 0057 	movw	r0, #8279	; 0x2057
 8021974:	f003 fd66 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8021978:	8afb      	ldrh	r3, [r7, #22]
 802197a:	0a1b      	lsrs	r3, r3, #8
 802197c:	b29b      	uxth	r3, r3
 802197e:	b2db      	uxtb	r3, r3
 8021980:	4619      	mov	r1, r3
 8021982:	f242 005c 	movw	r0, #8284	; 0x205c
 8021986:	f003 fd5d 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 802198a:	8afb      	ldrh	r3, [r7, #22]
 802198c:	b2db      	uxtb	r3, r3
 802198e:	4619      	mov	r1, r3
 8021990:	f242 005d 	movw	r0, #8285	; 0x205d
 8021994:	f003 fd56 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8021998:	4b09      	ldr	r3, [pc, #36]	; (80219c0 <ce303_power+0x78c>)
 802199a:	681b      	ldr	r3, [r3, #0]
 802199c:	4618      	mov	r0, r3
 802199e:	f7f5 f9cd 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 80219a2:	4a08      	ldr	r2, [pc, #32]	; (80219c4 <ce303_power+0x790>)
 80219a4:	89fb      	ldrh	r3, [r7, #14]
 80219a6:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg = temp_mil;
 80219aa:	4a06      	ldr	r2, [pc, #24]	; (80219c4 <ce303_power+0x790>)
 80219ac:	8afb      	ldrh	r3, [r7, #22]
 80219ae:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 80219b2:	2301      	movs	r3, #1
 80219b4:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80219b6:	f000 be59 	b.w	802266c <ce303_power+0x1438>
 80219ba:	bf00      	nop
 80219bc:	200098e4 	.word	0x200098e4
 80219c0:	20009a6c 	.word	0x20009a6c
 80219c4:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 80219c8:	8a3b      	ldrh	r3, [r7, #16]
 80219ca:	3304      	adds	r3, #4
 80219cc:	4a9f      	ldr	r2, [pc, #636]	; (8021c4c <ce303_power+0xa18>)
 80219ce:	5cd3      	ldrb	r3, [r2, r3]
 80219d0:	2b2e      	cmp	r3, #46	; 0x2e
 80219d2:	f040 864b 	bne.w	802266c <ce303_power+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80219d6:	8a3b      	ldrh	r3, [r7, #16]
 80219d8:	3301      	adds	r3, #1
 80219da:	4a9c      	ldr	r2, [pc, #624]	; (8021c4c <ce303_power+0xa18>)
 80219dc:	5cd3      	ldrb	r3, [r2, r3]
 80219de:	3b30      	subs	r3, #48	; 0x30
 80219e0:	b29b      	uxth	r3, r3
 80219e2:	461a      	mov	r2, r3
 80219e4:	0092      	lsls	r2, r2, #2
 80219e6:	4413      	add	r3, r2
 80219e8:	461a      	mov	r2, r3
 80219ea:	0091      	lsls	r1, r2, #2
 80219ec:	461a      	mov	r2, r3
 80219ee:	460b      	mov	r3, r1
 80219f0:	4413      	add	r3, r2
 80219f2:	009b      	lsls	r3, r3, #2
 80219f4:	b29a      	uxth	r2, r3
 80219f6:	8a3b      	ldrh	r3, [r7, #16]
 80219f8:	3302      	adds	r3, #2
 80219fa:	4994      	ldr	r1, [pc, #592]	; (8021c4c <ce303_power+0xa18>)
 80219fc:	5ccb      	ldrb	r3, [r1, r3]
 80219fe:	3b30      	subs	r3, #48	; 0x30
 8021a00:	b29b      	uxth	r3, r3
 8021a02:	4619      	mov	r1, r3
 8021a04:	0089      	lsls	r1, r1, #2
 8021a06:	440b      	add	r3, r1
 8021a08:	005b      	lsls	r3, r3, #1
 8021a0a:	b29b      	uxth	r3, r3
 8021a0c:	4413      	add	r3, r2
 8021a0e:	b29a      	uxth	r2, r3
 8021a10:	8a3b      	ldrh	r3, [r7, #16]
 8021a12:	3303      	adds	r3, #3
 8021a14:	498d      	ldr	r1, [pc, #564]	; (8021c4c <ce303_power+0xa18>)
 8021a16:	5ccb      	ldrb	r3, [r1, r3]
 8021a18:	b29b      	uxth	r3, r3
 8021a1a:	4413      	add	r3, r2
 8021a1c:	b29b      	uxth	r3, r3
 8021a1e:	3b30      	subs	r3, #48	; 0x30
 8021a20:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8021a22:	8a3b      	ldrh	r3, [r7, #16]
 8021a24:	3306      	adds	r3, #6
 8021a26:	4a89      	ldr	r2, [pc, #548]	; (8021c4c <ce303_power+0xa18>)
 8021a28:	5cd3      	ldrb	r3, [r2, r3]
 8021a2a:	2b29      	cmp	r3, #41	; 0x29
 8021a2c:	d110      	bne.n	8021a50 <ce303_power+0x81c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8021a2e:	8a3b      	ldrh	r3, [r7, #16]
 8021a30:	3305      	adds	r3, #5
 8021a32:	4a86      	ldr	r2, [pc, #536]	; (8021c4c <ce303_power+0xa18>)
 8021a34:	5cd3      	ldrb	r3, [r2, r3]
 8021a36:	3b30      	subs	r3, #48	; 0x30
 8021a38:	b29b      	uxth	r3, r3
 8021a3a:	461a      	mov	r2, r3
 8021a3c:	0092      	lsls	r2, r2, #2
 8021a3e:	4413      	add	r3, r2
 8021a40:	461a      	mov	r2, r3
 8021a42:	0091      	lsls	r1, r2, #2
 8021a44:	461a      	mov	r2, r3
 8021a46:	460b      	mov	r3, r1
 8021a48:	4413      	add	r3, r2
 8021a4a:	009b      	lsls	r3, r3, #2
 8021a4c:	82fb      	strh	r3, [r7, #22]
 8021a4e:	e070      	b.n	8021b32 <ce303_power+0x8fe>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8021a50:	8a3b      	ldrh	r3, [r7, #16]
 8021a52:	3307      	adds	r3, #7
 8021a54:	4a7d      	ldr	r2, [pc, #500]	; (8021c4c <ce303_power+0xa18>)
 8021a56:	5cd3      	ldrb	r3, [r2, r3]
 8021a58:	2b29      	cmp	r3, #41	; 0x29
 8021a5a:	d117      	bne.n	8021a8c <ce303_power+0x858>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8021a5c:	8a3b      	ldrh	r3, [r7, #16]
 8021a5e:	3305      	adds	r3, #5
 8021a60:	4a7a      	ldr	r2, [pc, #488]	; (8021c4c <ce303_power+0xa18>)
 8021a62:	5cd3      	ldrb	r3, [r2, r3]
 8021a64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021a68:	4613      	mov	r3, r2
 8021a6a:	009b      	lsls	r3, r3, #2
 8021a6c:	4413      	add	r3, r2
 8021a6e:	005b      	lsls	r3, r3, #1
 8021a70:	4619      	mov	r1, r3
 8021a72:	8a3b      	ldrh	r3, [r7, #16]
 8021a74:	3306      	adds	r3, #6
 8021a76:	4a75      	ldr	r2, [pc, #468]	; (8021c4c <ce303_power+0xa18>)
 8021a78:	5cd3      	ldrb	r3, [r2, r3]
 8021a7a:	3b30      	subs	r3, #48	; 0x30
 8021a7c:	440b      	add	r3, r1
 8021a7e:	b29b      	uxth	r3, r3
 8021a80:	461a      	mov	r2, r3
 8021a82:	0092      	lsls	r2, r2, #2
 8021a84:	4413      	add	r3, r2
 8021a86:	005b      	lsls	r3, r3, #1
 8021a88:	82fb      	strh	r3, [r7, #22]
 8021a8a:	e052      	b.n	8021b32 <ce303_power+0x8fe>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8021a8c:	8a3b      	ldrh	r3, [r7, #16]
 8021a8e:	3308      	adds	r3, #8
 8021a90:	4a6e      	ldr	r2, [pc, #440]	; (8021c4c <ce303_power+0xa18>)
 8021a92:	5cd3      	ldrb	r3, [r2, r3]
 8021a94:	2b29      	cmp	r3, #41	; 0x29
 8021a96:	d126      	bne.n	8021ae6 <ce303_power+0x8b2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8021a98:	8a3b      	ldrh	r3, [r7, #16]
 8021a9a:	3305      	adds	r3, #5
 8021a9c:	4a6b      	ldr	r2, [pc, #428]	; (8021c4c <ce303_power+0xa18>)
 8021a9e:	5cd3      	ldrb	r3, [r2, r3]
 8021aa0:	3b30      	subs	r3, #48	; 0x30
 8021aa2:	b29b      	uxth	r3, r3
 8021aa4:	461a      	mov	r2, r3
 8021aa6:	0092      	lsls	r2, r2, #2
 8021aa8:	4413      	add	r3, r2
 8021aaa:	461a      	mov	r2, r3
 8021aac:	0091      	lsls	r1, r2, #2
 8021aae:	461a      	mov	r2, r3
 8021ab0:	460b      	mov	r3, r1
 8021ab2:	4413      	add	r3, r2
 8021ab4:	009b      	lsls	r3, r3, #2
 8021ab6:	b29a      	uxth	r2, r3
 8021ab8:	8a3b      	ldrh	r3, [r7, #16]
 8021aba:	3306      	adds	r3, #6
 8021abc:	4963      	ldr	r1, [pc, #396]	; (8021c4c <ce303_power+0xa18>)
 8021abe:	5ccb      	ldrb	r3, [r1, r3]
 8021ac0:	3b30      	subs	r3, #48	; 0x30
 8021ac2:	b29b      	uxth	r3, r3
 8021ac4:	4619      	mov	r1, r3
 8021ac6:	0089      	lsls	r1, r1, #2
 8021ac8:	440b      	add	r3, r1
 8021aca:	005b      	lsls	r3, r3, #1
 8021acc:	b29b      	uxth	r3, r3
 8021ace:	4413      	add	r3, r2
 8021ad0:	b29a      	uxth	r2, r3
 8021ad2:	8a3b      	ldrh	r3, [r7, #16]
 8021ad4:	3307      	adds	r3, #7
 8021ad6:	495d      	ldr	r1, [pc, #372]	; (8021c4c <ce303_power+0xa18>)
 8021ad8:	5ccb      	ldrb	r3, [r1, r3]
 8021ada:	b29b      	uxth	r3, r3
 8021adc:	4413      	add	r3, r2
 8021ade:	b29b      	uxth	r3, r3
 8021ae0:	3b30      	subs	r3, #48	; 0x30
 8021ae2:	82fb      	strh	r3, [r7, #22]
 8021ae4:	e025      	b.n	8021b32 <ce303_power+0x8fe>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8021ae6:	8a3b      	ldrh	r3, [r7, #16]
 8021ae8:	3305      	adds	r3, #5
 8021aea:	4a58      	ldr	r2, [pc, #352]	; (8021c4c <ce303_power+0xa18>)
 8021aec:	5cd3      	ldrb	r3, [r2, r3]
 8021aee:	3b30      	subs	r3, #48	; 0x30
 8021af0:	b29b      	uxth	r3, r3
 8021af2:	461a      	mov	r2, r3
 8021af4:	0092      	lsls	r2, r2, #2
 8021af6:	4413      	add	r3, r2
 8021af8:	461a      	mov	r2, r3
 8021afa:	0091      	lsls	r1, r2, #2
 8021afc:	461a      	mov	r2, r3
 8021afe:	460b      	mov	r3, r1
 8021b00:	4413      	add	r3, r2
 8021b02:	009b      	lsls	r3, r3, #2
 8021b04:	b29a      	uxth	r2, r3
 8021b06:	8a3b      	ldrh	r3, [r7, #16]
 8021b08:	3306      	adds	r3, #6
 8021b0a:	4950      	ldr	r1, [pc, #320]	; (8021c4c <ce303_power+0xa18>)
 8021b0c:	5ccb      	ldrb	r3, [r1, r3]
 8021b0e:	3b30      	subs	r3, #48	; 0x30
 8021b10:	b29b      	uxth	r3, r3
 8021b12:	4619      	mov	r1, r3
 8021b14:	0089      	lsls	r1, r1, #2
 8021b16:	440b      	add	r3, r1
 8021b18:	005b      	lsls	r3, r3, #1
 8021b1a:	b29b      	uxth	r3, r3
 8021b1c:	4413      	add	r3, r2
 8021b1e:	b29a      	uxth	r2, r3
 8021b20:	8a3b      	ldrh	r3, [r7, #16]
 8021b22:	3307      	adds	r3, #7
 8021b24:	4949      	ldr	r1, [pc, #292]	; (8021c4c <ce303_power+0xa18>)
 8021b26:	5ccb      	ldrb	r3, [r1, r3]
 8021b28:	b29b      	uxth	r3, r3
 8021b2a:	4413      	add	r3, r2
 8021b2c:	b29b      	uxth	r3, r3
 8021b2e:	3b30      	subs	r3, #48	; 0x30
 8021b30:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021b32:	4b47      	ldr	r3, [pc, #284]	; (8021c50 <ce303_power+0xa1c>)
 8021b34:	681b      	ldr	r3, [r3, #0]
 8021b36:	f04f 31ff 	mov.w	r1, #4294967295
 8021b3a:	4618      	mov	r0, r3
 8021b3c:	f7f5 f8b0 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 8021b40:	89fb      	ldrh	r3, [r7, #14]
 8021b42:	0a1b      	lsrs	r3, r3, #8
 8021b44:	b29b      	uxth	r3, r3
 8021b46:	b2db      	uxtb	r3, r3
 8021b48:	4619      	mov	r1, r3
 8021b4a:	f242 0056 	movw	r0, #8278	; 0x2056
 8021b4e:	f003 fc79 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8021b52:	89fb      	ldrh	r3, [r7, #14]
 8021b54:	b2db      	uxtb	r3, r3
 8021b56:	4619      	mov	r1, r3
 8021b58:	f242 0057 	movw	r0, #8279	; 0x2057
 8021b5c:	f003 fc72 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8021b60:	8afb      	ldrh	r3, [r7, #22]
 8021b62:	0a1b      	lsrs	r3, r3, #8
 8021b64:	b29b      	uxth	r3, r3
 8021b66:	b2db      	uxtb	r3, r3
 8021b68:	4619      	mov	r1, r3
 8021b6a:	f242 005c 	movw	r0, #8284	; 0x205c
 8021b6e:	f003 fc69 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8021b72:	8afb      	ldrh	r3, [r7, #22]
 8021b74:	b2db      	uxtb	r3, r3
 8021b76:	4619      	mov	r1, r3
 8021b78:	f242 005d 	movw	r0, #8285	; 0x205d
 8021b7c:	f003 fc62 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8021b80:	4b33      	ldr	r3, [pc, #204]	; (8021c50 <ce303_power+0xa1c>)
 8021b82:	681b      	ldr	r3, [r3, #0]
 8021b84:	4618      	mov	r0, r3
 8021b86:	f7f5 f8d9 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 8021b8a:	4a32      	ldr	r2, [pc, #200]	; (8021c54 <ce303_power+0xa20>)
 8021b8c:	89fb      	ldrh	r3, [r7, #14]
 8021b8e:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg = temp_mil;
 8021b92:	4a30      	ldr	r2, [pc, #192]	; (8021c54 <ce303_power+0xa20>)
 8021b94:	8afb      	ldrh	r3, [r7, #22]
 8021b96:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 8021b9a:	2301      	movs	r3, #1
 8021b9c:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8021b9e:	f000 bd65 	b.w	802266c <ce303_power+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (power_a_state==1) && (power_b_state==0) && (power_c_state==0) )
 8021ba2:	8a3b      	ldrh	r3, [r7, #16]
 8021ba4:	4a29      	ldr	r2, [pc, #164]	; (8021c4c <ce303_power+0xa18>)
 8021ba6:	5cd3      	ldrb	r3, [r2, r3]
 8021ba8:	2b28      	cmp	r3, #40	; 0x28
 8021baa:	f040 82ad 	bne.w	8022108 <ce303_power+0xed4>
 8021bae:	7d7b      	ldrb	r3, [r7, #21]
 8021bb0:	2b01      	cmp	r3, #1
 8021bb2:	f040 82a9 	bne.w	8022108 <ce303_power+0xed4>
 8021bb6:	7d3b      	ldrb	r3, [r7, #20]
 8021bb8:	2b00      	cmp	r3, #0
 8021bba:	f040 82a5 	bne.w	8022108 <ce303_power+0xed4>
 8021bbe:	7cfb      	ldrb	r3, [r7, #19]
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	f040 82a1 	bne.w	8022108 <ce303_power+0xed4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8021bc6:	8a3b      	ldrh	r3, [r7, #16]
 8021bc8:	3302      	adds	r3, #2
 8021bca:	4a20      	ldr	r2, [pc, #128]	; (8021c4c <ce303_power+0xa18>)
 8021bcc:	5cd3      	ldrb	r3, [r2, r3]
 8021bce:	2b2e      	cmp	r3, #46	; 0x2e
 8021bd0:	f040 80cd 	bne.w	8021d6e <ce303_power+0xb3a>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8021bd4:	8a3b      	ldrh	r3, [r7, #16]
 8021bd6:	3301      	adds	r3, #1
 8021bd8:	4a1c      	ldr	r2, [pc, #112]	; (8021c4c <ce303_power+0xa18>)
 8021bda:	5cd3      	ldrb	r3, [r2, r3]
 8021bdc:	b29b      	uxth	r3, r3
 8021bde:	3b30      	subs	r3, #48	; 0x30
 8021be0:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8021be2:	8a3b      	ldrh	r3, [r7, #16]
 8021be4:	3304      	adds	r3, #4
 8021be6:	4a19      	ldr	r2, [pc, #100]	; (8021c4c <ce303_power+0xa18>)
 8021be8:	5cd3      	ldrb	r3, [r2, r3]
 8021bea:	2b29      	cmp	r3, #41	; 0x29
 8021bec:	d110      	bne.n	8021c10 <ce303_power+0x9dc>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8021bee:	8a3b      	ldrh	r3, [r7, #16]
 8021bf0:	3303      	adds	r3, #3
 8021bf2:	4a16      	ldr	r2, [pc, #88]	; (8021c4c <ce303_power+0xa18>)
 8021bf4:	5cd3      	ldrb	r3, [r2, r3]
 8021bf6:	3b30      	subs	r3, #48	; 0x30
 8021bf8:	b29b      	uxth	r3, r3
 8021bfa:	461a      	mov	r2, r3
 8021bfc:	0092      	lsls	r2, r2, #2
 8021bfe:	4413      	add	r3, r2
 8021c00:	461a      	mov	r2, r3
 8021c02:	0091      	lsls	r1, r2, #2
 8021c04:	461a      	mov	r2, r3
 8021c06:	460b      	mov	r3, r1
 8021c08:	4413      	add	r3, r2
 8021c0a:	009b      	lsls	r3, r3, #2
 8021c0c:	82fb      	strh	r3, [r7, #22]
 8021c0e:	e076      	b.n	8021cfe <ce303_power+0xaca>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8021c10:	8a3b      	ldrh	r3, [r7, #16]
 8021c12:	3305      	adds	r3, #5
 8021c14:	4a0d      	ldr	r2, [pc, #52]	; (8021c4c <ce303_power+0xa18>)
 8021c16:	5cd3      	ldrb	r3, [r2, r3]
 8021c18:	2b29      	cmp	r3, #41	; 0x29
 8021c1a:	d11d      	bne.n	8021c58 <ce303_power+0xa24>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8021c1c:	8a3b      	ldrh	r3, [r7, #16]
 8021c1e:	3303      	adds	r3, #3
 8021c20:	4a0a      	ldr	r2, [pc, #40]	; (8021c4c <ce303_power+0xa18>)
 8021c22:	5cd3      	ldrb	r3, [r2, r3]
 8021c24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021c28:	4613      	mov	r3, r2
 8021c2a:	009b      	lsls	r3, r3, #2
 8021c2c:	4413      	add	r3, r2
 8021c2e:	005b      	lsls	r3, r3, #1
 8021c30:	4619      	mov	r1, r3
 8021c32:	8a3b      	ldrh	r3, [r7, #16]
 8021c34:	3304      	adds	r3, #4
 8021c36:	4a05      	ldr	r2, [pc, #20]	; (8021c4c <ce303_power+0xa18>)
 8021c38:	5cd3      	ldrb	r3, [r2, r3]
 8021c3a:	3b30      	subs	r3, #48	; 0x30
 8021c3c:	440b      	add	r3, r1
 8021c3e:	b29b      	uxth	r3, r3
 8021c40:	461a      	mov	r2, r3
 8021c42:	0092      	lsls	r2, r2, #2
 8021c44:	4413      	add	r3, r2
 8021c46:	005b      	lsls	r3, r3, #1
 8021c48:	82fb      	strh	r3, [r7, #22]
 8021c4a:	e058      	b.n	8021cfe <ce303_power+0xaca>
 8021c4c:	200098e4 	.word	0x200098e4
 8021c50:	20009a6c 	.word	0x20009a6c
 8021c54:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8021c58:	8a3b      	ldrh	r3, [r7, #16]
 8021c5a:	3306      	adds	r3, #6
 8021c5c:	4ab1      	ldr	r2, [pc, #708]	; (8021f24 <ce303_power+0xcf0>)
 8021c5e:	5cd3      	ldrb	r3, [r2, r3]
 8021c60:	2b29      	cmp	r3, #41	; 0x29
 8021c62:	d126      	bne.n	8021cb2 <ce303_power+0xa7e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8021c64:	8a3b      	ldrh	r3, [r7, #16]
 8021c66:	3303      	adds	r3, #3
 8021c68:	4aae      	ldr	r2, [pc, #696]	; (8021f24 <ce303_power+0xcf0>)
 8021c6a:	5cd3      	ldrb	r3, [r2, r3]
 8021c6c:	3b30      	subs	r3, #48	; 0x30
 8021c6e:	b29b      	uxth	r3, r3
 8021c70:	461a      	mov	r2, r3
 8021c72:	0092      	lsls	r2, r2, #2
 8021c74:	4413      	add	r3, r2
 8021c76:	461a      	mov	r2, r3
 8021c78:	0091      	lsls	r1, r2, #2
 8021c7a:	461a      	mov	r2, r3
 8021c7c:	460b      	mov	r3, r1
 8021c7e:	4413      	add	r3, r2
 8021c80:	009b      	lsls	r3, r3, #2
 8021c82:	b29a      	uxth	r2, r3
 8021c84:	8a3b      	ldrh	r3, [r7, #16]
 8021c86:	3304      	adds	r3, #4
 8021c88:	49a6      	ldr	r1, [pc, #664]	; (8021f24 <ce303_power+0xcf0>)
 8021c8a:	5ccb      	ldrb	r3, [r1, r3]
 8021c8c:	3b30      	subs	r3, #48	; 0x30
 8021c8e:	b29b      	uxth	r3, r3
 8021c90:	4619      	mov	r1, r3
 8021c92:	0089      	lsls	r1, r1, #2
 8021c94:	440b      	add	r3, r1
 8021c96:	005b      	lsls	r3, r3, #1
 8021c98:	b29b      	uxth	r3, r3
 8021c9a:	4413      	add	r3, r2
 8021c9c:	b29a      	uxth	r2, r3
 8021c9e:	8a3b      	ldrh	r3, [r7, #16]
 8021ca0:	3305      	adds	r3, #5
 8021ca2:	49a0      	ldr	r1, [pc, #640]	; (8021f24 <ce303_power+0xcf0>)
 8021ca4:	5ccb      	ldrb	r3, [r1, r3]
 8021ca6:	b29b      	uxth	r3, r3
 8021ca8:	4413      	add	r3, r2
 8021caa:	b29b      	uxth	r3, r3
 8021cac:	3b30      	subs	r3, #48	; 0x30
 8021cae:	82fb      	strh	r3, [r7, #22]
 8021cb0:	e025      	b.n	8021cfe <ce303_power+0xaca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8021cb2:	8a3b      	ldrh	r3, [r7, #16]
 8021cb4:	3303      	adds	r3, #3
 8021cb6:	4a9b      	ldr	r2, [pc, #620]	; (8021f24 <ce303_power+0xcf0>)
 8021cb8:	5cd3      	ldrb	r3, [r2, r3]
 8021cba:	3b30      	subs	r3, #48	; 0x30
 8021cbc:	b29b      	uxth	r3, r3
 8021cbe:	461a      	mov	r2, r3
 8021cc0:	0092      	lsls	r2, r2, #2
 8021cc2:	4413      	add	r3, r2
 8021cc4:	461a      	mov	r2, r3
 8021cc6:	0091      	lsls	r1, r2, #2
 8021cc8:	461a      	mov	r2, r3
 8021cca:	460b      	mov	r3, r1
 8021ccc:	4413      	add	r3, r2
 8021cce:	009b      	lsls	r3, r3, #2
 8021cd0:	b29a      	uxth	r2, r3
 8021cd2:	8a3b      	ldrh	r3, [r7, #16]
 8021cd4:	3304      	adds	r3, #4
 8021cd6:	4993      	ldr	r1, [pc, #588]	; (8021f24 <ce303_power+0xcf0>)
 8021cd8:	5ccb      	ldrb	r3, [r1, r3]
 8021cda:	3b30      	subs	r3, #48	; 0x30
 8021cdc:	b29b      	uxth	r3, r3
 8021cde:	4619      	mov	r1, r3
 8021ce0:	0089      	lsls	r1, r1, #2
 8021ce2:	440b      	add	r3, r1
 8021ce4:	005b      	lsls	r3, r3, #1
 8021ce6:	b29b      	uxth	r3, r3
 8021ce8:	4413      	add	r3, r2
 8021cea:	b29a      	uxth	r2, r3
 8021cec:	8a3b      	ldrh	r3, [r7, #16]
 8021cee:	3305      	adds	r3, #5
 8021cf0:	498c      	ldr	r1, [pc, #560]	; (8021f24 <ce303_power+0xcf0>)
 8021cf2:	5ccb      	ldrb	r3, [r1, r3]
 8021cf4:	b29b      	uxth	r3, r3
 8021cf6:	4413      	add	r3, r2
 8021cf8:	b29b      	uxth	r3, r3
 8021cfa:	3b30      	subs	r3, #48	; 0x30
 8021cfc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021cfe:	4b8a      	ldr	r3, [pc, #552]	; (8021f28 <ce303_power+0xcf4>)
 8021d00:	681b      	ldr	r3, [r3, #0]
 8021d02:	f04f 31ff 	mov.w	r1, #4294967295
 8021d06:	4618      	mov	r0, r3
 8021d08:	f7f4 ffca 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 8021d0c:	89fb      	ldrh	r3, [r7, #14]
 8021d0e:	0a1b      	lsrs	r3, r3, #8
 8021d10:	b29b      	uxth	r3, r3
 8021d12:	b2db      	uxtb	r3, r3
 8021d14:	4619      	mov	r1, r3
 8021d16:	f242 0058 	movw	r0, #8280	; 0x2058
 8021d1a:	f003 fb93 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8021d1e:	89fb      	ldrh	r3, [r7, #14]
 8021d20:	b2db      	uxtb	r3, r3
 8021d22:	4619      	mov	r1, r3
 8021d24:	f242 0059 	movw	r0, #8281	; 0x2059
 8021d28:	f003 fb8c 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8021d2c:	8afb      	ldrh	r3, [r7, #22]
 8021d2e:	0a1b      	lsrs	r3, r3, #8
 8021d30:	b29b      	uxth	r3, r3
 8021d32:	b2db      	uxtb	r3, r3
 8021d34:	4619      	mov	r1, r3
 8021d36:	f242 005e 	movw	r0, #8286	; 0x205e
 8021d3a:	f003 fb83 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8021d3e:	8afb      	ldrh	r3, [r7, #22]
 8021d40:	b2db      	uxtb	r3, r3
 8021d42:	4619      	mov	r1, r3
 8021d44:	f242 005f 	movw	r0, #8287	; 0x205f
 8021d48:	f003 fb7c 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8021d4c:	4b76      	ldr	r3, [pc, #472]	; (8021f28 <ce303_power+0xcf4>)
 8021d4e:	681b      	ldr	r3, [r3, #0]
 8021d50:	4618      	mov	r0, r3
 8021d52:	f7f4 fff3 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 8021d56:	4a75      	ldr	r2, [pc, #468]	; (8021f2c <ce303_power+0xcf8>)
 8021d58:	89fb      	ldrh	r3, [r7, #14]
 8021d5a:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg =  temp_mil;
 8021d5e:	4a73      	ldr	r2, [pc, #460]	; (8021f2c <ce303_power+0xcf8>)
 8021d60:	8afb      	ldrh	r3, [r7, #22]
 8021d62:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 8021d66:	2301      	movs	r3, #1
 8021d68:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8021d6a:	f000 bc81 	b.w	8022670 <ce303_power+0x143c>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8021d6e:	8a3b      	ldrh	r3, [r7, #16]
 8021d70:	3303      	adds	r3, #3
 8021d72:	4a6c      	ldr	r2, [pc, #432]	; (8021f24 <ce303_power+0xcf0>)
 8021d74:	5cd3      	ldrb	r3, [r2, r3]
 8021d76:	2b2e      	cmp	r3, #46	; 0x2e
 8021d78:	f040 80da 	bne.w	8021f30 <ce303_power+0xcfc>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8021d7c:	8a3b      	ldrh	r3, [r7, #16]
 8021d7e:	3301      	adds	r3, #1
 8021d80:	4a68      	ldr	r2, [pc, #416]	; (8021f24 <ce303_power+0xcf0>)
 8021d82:	5cd3      	ldrb	r3, [r2, r3]
 8021d84:	3b30      	subs	r3, #48	; 0x30
 8021d86:	b29b      	uxth	r3, r3
 8021d88:	461a      	mov	r2, r3
 8021d8a:	0092      	lsls	r2, r2, #2
 8021d8c:	4413      	add	r3, r2
 8021d8e:	005b      	lsls	r3, r3, #1
 8021d90:	b29a      	uxth	r2, r3
 8021d92:	8a3b      	ldrh	r3, [r7, #16]
 8021d94:	3302      	adds	r3, #2
 8021d96:	4963      	ldr	r1, [pc, #396]	; (8021f24 <ce303_power+0xcf0>)
 8021d98:	5ccb      	ldrb	r3, [r1, r3]
 8021d9a:	b29b      	uxth	r3, r3
 8021d9c:	4413      	add	r3, r2
 8021d9e:	b29b      	uxth	r3, r3
 8021da0:	3b30      	subs	r3, #48	; 0x30
 8021da2:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8021da4:	8a3b      	ldrh	r3, [r7, #16]
 8021da6:	3305      	adds	r3, #5
 8021da8:	4a5e      	ldr	r2, [pc, #376]	; (8021f24 <ce303_power+0xcf0>)
 8021daa:	5cd3      	ldrb	r3, [r2, r3]
 8021dac:	2b29      	cmp	r3, #41	; 0x29
 8021dae:	d110      	bne.n	8021dd2 <ce303_power+0xb9e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8021db0:	8a3b      	ldrh	r3, [r7, #16]
 8021db2:	3304      	adds	r3, #4
 8021db4:	4a5b      	ldr	r2, [pc, #364]	; (8021f24 <ce303_power+0xcf0>)
 8021db6:	5cd3      	ldrb	r3, [r2, r3]
 8021db8:	3b30      	subs	r3, #48	; 0x30
 8021dba:	b29b      	uxth	r3, r3
 8021dbc:	461a      	mov	r2, r3
 8021dbe:	0092      	lsls	r2, r2, #2
 8021dc0:	4413      	add	r3, r2
 8021dc2:	461a      	mov	r2, r3
 8021dc4:	0091      	lsls	r1, r2, #2
 8021dc6:	461a      	mov	r2, r3
 8021dc8:	460b      	mov	r3, r1
 8021dca:	4413      	add	r3, r2
 8021dcc:	009b      	lsls	r3, r3, #2
 8021dce:	82fb      	strh	r3, [r7, #22]
 8021dd0:	e070      	b.n	8021eb4 <ce303_power+0xc80>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8021dd2:	8a3b      	ldrh	r3, [r7, #16]
 8021dd4:	3306      	adds	r3, #6
 8021dd6:	4a53      	ldr	r2, [pc, #332]	; (8021f24 <ce303_power+0xcf0>)
 8021dd8:	5cd3      	ldrb	r3, [r2, r3]
 8021dda:	2b29      	cmp	r3, #41	; 0x29
 8021ddc:	d117      	bne.n	8021e0e <ce303_power+0xbda>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8021dde:	8a3b      	ldrh	r3, [r7, #16]
 8021de0:	3304      	adds	r3, #4
 8021de2:	4a50      	ldr	r2, [pc, #320]	; (8021f24 <ce303_power+0xcf0>)
 8021de4:	5cd3      	ldrb	r3, [r2, r3]
 8021de6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021dea:	4613      	mov	r3, r2
 8021dec:	009b      	lsls	r3, r3, #2
 8021dee:	4413      	add	r3, r2
 8021df0:	005b      	lsls	r3, r3, #1
 8021df2:	4619      	mov	r1, r3
 8021df4:	8a3b      	ldrh	r3, [r7, #16]
 8021df6:	3305      	adds	r3, #5
 8021df8:	4a4a      	ldr	r2, [pc, #296]	; (8021f24 <ce303_power+0xcf0>)
 8021dfa:	5cd3      	ldrb	r3, [r2, r3]
 8021dfc:	3b30      	subs	r3, #48	; 0x30
 8021dfe:	440b      	add	r3, r1
 8021e00:	b29b      	uxth	r3, r3
 8021e02:	461a      	mov	r2, r3
 8021e04:	0092      	lsls	r2, r2, #2
 8021e06:	4413      	add	r3, r2
 8021e08:	005b      	lsls	r3, r3, #1
 8021e0a:	82fb      	strh	r3, [r7, #22]
 8021e0c:	e052      	b.n	8021eb4 <ce303_power+0xc80>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8021e0e:	8a3b      	ldrh	r3, [r7, #16]
 8021e10:	3307      	adds	r3, #7
 8021e12:	4a44      	ldr	r2, [pc, #272]	; (8021f24 <ce303_power+0xcf0>)
 8021e14:	5cd3      	ldrb	r3, [r2, r3]
 8021e16:	2b29      	cmp	r3, #41	; 0x29
 8021e18:	d126      	bne.n	8021e68 <ce303_power+0xc34>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8021e1a:	8a3b      	ldrh	r3, [r7, #16]
 8021e1c:	3304      	adds	r3, #4
 8021e1e:	4a41      	ldr	r2, [pc, #260]	; (8021f24 <ce303_power+0xcf0>)
 8021e20:	5cd3      	ldrb	r3, [r2, r3]
 8021e22:	3b30      	subs	r3, #48	; 0x30
 8021e24:	b29b      	uxth	r3, r3
 8021e26:	461a      	mov	r2, r3
 8021e28:	0092      	lsls	r2, r2, #2
 8021e2a:	4413      	add	r3, r2
 8021e2c:	461a      	mov	r2, r3
 8021e2e:	0091      	lsls	r1, r2, #2
 8021e30:	461a      	mov	r2, r3
 8021e32:	460b      	mov	r3, r1
 8021e34:	4413      	add	r3, r2
 8021e36:	009b      	lsls	r3, r3, #2
 8021e38:	b29a      	uxth	r2, r3
 8021e3a:	8a3b      	ldrh	r3, [r7, #16]
 8021e3c:	3305      	adds	r3, #5
 8021e3e:	4939      	ldr	r1, [pc, #228]	; (8021f24 <ce303_power+0xcf0>)
 8021e40:	5ccb      	ldrb	r3, [r1, r3]
 8021e42:	3b30      	subs	r3, #48	; 0x30
 8021e44:	b29b      	uxth	r3, r3
 8021e46:	4619      	mov	r1, r3
 8021e48:	0089      	lsls	r1, r1, #2
 8021e4a:	440b      	add	r3, r1
 8021e4c:	005b      	lsls	r3, r3, #1
 8021e4e:	b29b      	uxth	r3, r3
 8021e50:	4413      	add	r3, r2
 8021e52:	b29a      	uxth	r2, r3
 8021e54:	8a3b      	ldrh	r3, [r7, #16]
 8021e56:	3306      	adds	r3, #6
 8021e58:	4932      	ldr	r1, [pc, #200]	; (8021f24 <ce303_power+0xcf0>)
 8021e5a:	5ccb      	ldrb	r3, [r1, r3]
 8021e5c:	b29b      	uxth	r3, r3
 8021e5e:	4413      	add	r3, r2
 8021e60:	b29b      	uxth	r3, r3
 8021e62:	3b30      	subs	r3, #48	; 0x30
 8021e64:	82fb      	strh	r3, [r7, #22]
 8021e66:	e025      	b.n	8021eb4 <ce303_power+0xc80>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8021e68:	8a3b      	ldrh	r3, [r7, #16]
 8021e6a:	3304      	adds	r3, #4
 8021e6c:	4a2d      	ldr	r2, [pc, #180]	; (8021f24 <ce303_power+0xcf0>)
 8021e6e:	5cd3      	ldrb	r3, [r2, r3]
 8021e70:	3b30      	subs	r3, #48	; 0x30
 8021e72:	b29b      	uxth	r3, r3
 8021e74:	461a      	mov	r2, r3
 8021e76:	0092      	lsls	r2, r2, #2
 8021e78:	4413      	add	r3, r2
 8021e7a:	461a      	mov	r2, r3
 8021e7c:	0091      	lsls	r1, r2, #2
 8021e7e:	461a      	mov	r2, r3
 8021e80:	460b      	mov	r3, r1
 8021e82:	4413      	add	r3, r2
 8021e84:	009b      	lsls	r3, r3, #2
 8021e86:	b29a      	uxth	r2, r3
 8021e88:	8a3b      	ldrh	r3, [r7, #16]
 8021e8a:	3305      	adds	r3, #5
 8021e8c:	4925      	ldr	r1, [pc, #148]	; (8021f24 <ce303_power+0xcf0>)
 8021e8e:	5ccb      	ldrb	r3, [r1, r3]
 8021e90:	3b30      	subs	r3, #48	; 0x30
 8021e92:	b29b      	uxth	r3, r3
 8021e94:	4619      	mov	r1, r3
 8021e96:	0089      	lsls	r1, r1, #2
 8021e98:	440b      	add	r3, r1
 8021e9a:	005b      	lsls	r3, r3, #1
 8021e9c:	b29b      	uxth	r3, r3
 8021e9e:	4413      	add	r3, r2
 8021ea0:	b29a      	uxth	r2, r3
 8021ea2:	8a3b      	ldrh	r3, [r7, #16]
 8021ea4:	3306      	adds	r3, #6
 8021ea6:	491f      	ldr	r1, [pc, #124]	; (8021f24 <ce303_power+0xcf0>)
 8021ea8:	5ccb      	ldrb	r3, [r1, r3]
 8021eaa:	b29b      	uxth	r3, r3
 8021eac:	4413      	add	r3, r2
 8021eae:	b29b      	uxth	r3, r3
 8021eb0:	3b30      	subs	r3, #48	; 0x30
 8021eb2:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021eb4:	4b1c      	ldr	r3, [pc, #112]	; (8021f28 <ce303_power+0xcf4>)
 8021eb6:	681b      	ldr	r3, [r3, #0]
 8021eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8021ebc:	4618      	mov	r0, r3
 8021ebe:	f7f4 feef 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 8021ec2:	89fb      	ldrh	r3, [r7, #14]
 8021ec4:	0a1b      	lsrs	r3, r3, #8
 8021ec6:	b29b      	uxth	r3, r3
 8021ec8:	b2db      	uxtb	r3, r3
 8021eca:	4619      	mov	r1, r3
 8021ecc:	f242 0058 	movw	r0, #8280	; 0x2058
 8021ed0:	f003 fab8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8021ed4:	89fb      	ldrh	r3, [r7, #14]
 8021ed6:	b2db      	uxtb	r3, r3
 8021ed8:	4619      	mov	r1, r3
 8021eda:	f242 0059 	movw	r0, #8281	; 0x2059
 8021ede:	f003 fab1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8021ee2:	8afb      	ldrh	r3, [r7, #22]
 8021ee4:	0a1b      	lsrs	r3, r3, #8
 8021ee6:	b29b      	uxth	r3, r3
 8021ee8:	b2db      	uxtb	r3, r3
 8021eea:	4619      	mov	r1, r3
 8021eec:	f242 005e 	movw	r0, #8286	; 0x205e
 8021ef0:	f003 faa8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8021ef4:	8afb      	ldrh	r3, [r7, #22]
 8021ef6:	b2db      	uxtb	r3, r3
 8021ef8:	4619      	mov	r1, r3
 8021efa:	f242 005f 	movw	r0, #8287	; 0x205f
 8021efe:	f003 faa1 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8021f02:	4b09      	ldr	r3, [pc, #36]	; (8021f28 <ce303_power+0xcf4>)
 8021f04:	681b      	ldr	r3, [r3, #0]
 8021f06:	4618      	mov	r0, r3
 8021f08:	f7f4 ff18 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 8021f0c:	4a07      	ldr	r2, [pc, #28]	; (8021f2c <ce303_power+0xcf8>)
 8021f0e:	89fb      	ldrh	r3, [r7, #14]
 8021f10:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg = temp_mil;
 8021f14:	4a05      	ldr	r2, [pc, #20]	; (8021f2c <ce303_power+0xcf8>)
 8021f16:	8afb      	ldrh	r3, [r7, #22]
 8021f18:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 8021f1c:	2301      	movs	r3, #1
 8021f1e:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8021f20:	e3a6      	b.n	8022670 <ce303_power+0x143c>
 8021f22:	bf00      	nop
 8021f24:	200098e4 	.word	0x200098e4
 8021f28:	20009a6c 	.word	0x20009a6c
 8021f2c:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8021f30:	8a3b      	ldrh	r3, [r7, #16]
 8021f32:	3304      	adds	r3, #4
 8021f34:	4a9f      	ldr	r2, [pc, #636]	; (80221b4 <ce303_power+0xf80>)
 8021f36:	5cd3      	ldrb	r3, [r2, r3]
 8021f38:	2b2e      	cmp	r3, #46	; 0x2e
 8021f3a:	f040 8399 	bne.w	8022670 <ce303_power+0x143c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8021f3e:	8a3b      	ldrh	r3, [r7, #16]
 8021f40:	3301      	adds	r3, #1
 8021f42:	4a9c      	ldr	r2, [pc, #624]	; (80221b4 <ce303_power+0xf80>)
 8021f44:	5cd3      	ldrb	r3, [r2, r3]
 8021f46:	3b30      	subs	r3, #48	; 0x30
 8021f48:	b29b      	uxth	r3, r3
 8021f4a:	461a      	mov	r2, r3
 8021f4c:	0092      	lsls	r2, r2, #2
 8021f4e:	4413      	add	r3, r2
 8021f50:	461a      	mov	r2, r3
 8021f52:	0091      	lsls	r1, r2, #2
 8021f54:	461a      	mov	r2, r3
 8021f56:	460b      	mov	r3, r1
 8021f58:	4413      	add	r3, r2
 8021f5a:	009b      	lsls	r3, r3, #2
 8021f5c:	b29a      	uxth	r2, r3
 8021f5e:	8a3b      	ldrh	r3, [r7, #16]
 8021f60:	3302      	adds	r3, #2
 8021f62:	4994      	ldr	r1, [pc, #592]	; (80221b4 <ce303_power+0xf80>)
 8021f64:	5ccb      	ldrb	r3, [r1, r3]
 8021f66:	3b30      	subs	r3, #48	; 0x30
 8021f68:	b29b      	uxth	r3, r3
 8021f6a:	4619      	mov	r1, r3
 8021f6c:	0089      	lsls	r1, r1, #2
 8021f6e:	440b      	add	r3, r1
 8021f70:	005b      	lsls	r3, r3, #1
 8021f72:	b29b      	uxth	r3, r3
 8021f74:	4413      	add	r3, r2
 8021f76:	b29a      	uxth	r2, r3
 8021f78:	8a3b      	ldrh	r3, [r7, #16]
 8021f7a:	3303      	adds	r3, #3
 8021f7c:	498d      	ldr	r1, [pc, #564]	; (80221b4 <ce303_power+0xf80>)
 8021f7e:	5ccb      	ldrb	r3, [r1, r3]
 8021f80:	b29b      	uxth	r3, r3
 8021f82:	4413      	add	r3, r2
 8021f84:	b29b      	uxth	r3, r3
 8021f86:	3b30      	subs	r3, #48	; 0x30
 8021f88:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8021f8a:	8a3b      	ldrh	r3, [r7, #16]
 8021f8c:	3306      	adds	r3, #6
 8021f8e:	4a89      	ldr	r2, [pc, #548]	; (80221b4 <ce303_power+0xf80>)
 8021f90:	5cd3      	ldrb	r3, [r2, r3]
 8021f92:	2b29      	cmp	r3, #41	; 0x29
 8021f94:	d110      	bne.n	8021fb8 <ce303_power+0xd84>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8021f96:	8a3b      	ldrh	r3, [r7, #16]
 8021f98:	3305      	adds	r3, #5
 8021f9a:	4a86      	ldr	r2, [pc, #536]	; (80221b4 <ce303_power+0xf80>)
 8021f9c:	5cd3      	ldrb	r3, [r2, r3]
 8021f9e:	3b30      	subs	r3, #48	; 0x30
 8021fa0:	b29b      	uxth	r3, r3
 8021fa2:	461a      	mov	r2, r3
 8021fa4:	0092      	lsls	r2, r2, #2
 8021fa6:	4413      	add	r3, r2
 8021fa8:	461a      	mov	r2, r3
 8021faa:	0091      	lsls	r1, r2, #2
 8021fac:	461a      	mov	r2, r3
 8021fae:	460b      	mov	r3, r1
 8021fb0:	4413      	add	r3, r2
 8021fb2:	009b      	lsls	r3, r3, #2
 8021fb4:	82fb      	strh	r3, [r7, #22]
 8021fb6:	e070      	b.n	802209a <ce303_power+0xe66>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8021fb8:	8a3b      	ldrh	r3, [r7, #16]
 8021fba:	3307      	adds	r3, #7
 8021fbc:	4a7d      	ldr	r2, [pc, #500]	; (80221b4 <ce303_power+0xf80>)
 8021fbe:	5cd3      	ldrb	r3, [r2, r3]
 8021fc0:	2b29      	cmp	r3, #41	; 0x29
 8021fc2:	d117      	bne.n	8021ff4 <ce303_power+0xdc0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8021fc4:	8a3b      	ldrh	r3, [r7, #16]
 8021fc6:	3305      	adds	r3, #5
 8021fc8:	4a7a      	ldr	r2, [pc, #488]	; (80221b4 <ce303_power+0xf80>)
 8021fca:	5cd3      	ldrb	r3, [r2, r3]
 8021fcc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021fd0:	4613      	mov	r3, r2
 8021fd2:	009b      	lsls	r3, r3, #2
 8021fd4:	4413      	add	r3, r2
 8021fd6:	005b      	lsls	r3, r3, #1
 8021fd8:	4619      	mov	r1, r3
 8021fda:	8a3b      	ldrh	r3, [r7, #16]
 8021fdc:	3306      	adds	r3, #6
 8021fde:	4a75      	ldr	r2, [pc, #468]	; (80221b4 <ce303_power+0xf80>)
 8021fe0:	5cd3      	ldrb	r3, [r2, r3]
 8021fe2:	3b30      	subs	r3, #48	; 0x30
 8021fe4:	440b      	add	r3, r1
 8021fe6:	b29b      	uxth	r3, r3
 8021fe8:	461a      	mov	r2, r3
 8021fea:	0092      	lsls	r2, r2, #2
 8021fec:	4413      	add	r3, r2
 8021fee:	005b      	lsls	r3, r3, #1
 8021ff0:	82fb      	strh	r3, [r7, #22]
 8021ff2:	e052      	b.n	802209a <ce303_power+0xe66>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8021ff4:	8a3b      	ldrh	r3, [r7, #16]
 8021ff6:	3308      	adds	r3, #8
 8021ff8:	4a6e      	ldr	r2, [pc, #440]	; (80221b4 <ce303_power+0xf80>)
 8021ffa:	5cd3      	ldrb	r3, [r2, r3]
 8021ffc:	2b29      	cmp	r3, #41	; 0x29
 8021ffe:	d126      	bne.n	802204e <ce303_power+0xe1a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8022000:	8a3b      	ldrh	r3, [r7, #16]
 8022002:	3305      	adds	r3, #5
 8022004:	4a6b      	ldr	r2, [pc, #428]	; (80221b4 <ce303_power+0xf80>)
 8022006:	5cd3      	ldrb	r3, [r2, r3]
 8022008:	3b30      	subs	r3, #48	; 0x30
 802200a:	b29b      	uxth	r3, r3
 802200c:	461a      	mov	r2, r3
 802200e:	0092      	lsls	r2, r2, #2
 8022010:	4413      	add	r3, r2
 8022012:	461a      	mov	r2, r3
 8022014:	0091      	lsls	r1, r2, #2
 8022016:	461a      	mov	r2, r3
 8022018:	460b      	mov	r3, r1
 802201a:	4413      	add	r3, r2
 802201c:	009b      	lsls	r3, r3, #2
 802201e:	b29a      	uxth	r2, r3
 8022020:	8a3b      	ldrh	r3, [r7, #16]
 8022022:	3306      	adds	r3, #6
 8022024:	4963      	ldr	r1, [pc, #396]	; (80221b4 <ce303_power+0xf80>)
 8022026:	5ccb      	ldrb	r3, [r1, r3]
 8022028:	3b30      	subs	r3, #48	; 0x30
 802202a:	b29b      	uxth	r3, r3
 802202c:	4619      	mov	r1, r3
 802202e:	0089      	lsls	r1, r1, #2
 8022030:	440b      	add	r3, r1
 8022032:	005b      	lsls	r3, r3, #1
 8022034:	b29b      	uxth	r3, r3
 8022036:	4413      	add	r3, r2
 8022038:	b29a      	uxth	r2, r3
 802203a:	8a3b      	ldrh	r3, [r7, #16]
 802203c:	3307      	adds	r3, #7
 802203e:	495d      	ldr	r1, [pc, #372]	; (80221b4 <ce303_power+0xf80>)
 8022040:	5ccb      	ldrb	r3, [r1, r3]
 8022042:	b29b      	uxth	r3, r3
 8022044:	4413      	add	r3, r2
 8022046:	b29b      	uxth	r3, r3
 8022048:	3b30      	subs	r3, #48	; 0x30
 802204a:	82fb      	strh	r3, [r7, #22]
 802204c:	e025      	b.n	802209a <ce303_power+0xe66>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 802204e:	8a3b      	ldrh	r3, [r7, #16]
 8022050:	3305      	adds	r3, #5
 8022052:	4a58      	ldr	r2, [pc, #352]	; (80221b4 <ce303_power+0xf80>)
 8022054:	5cd3      	ldrb	r3, [r2, r3]
 8022056:	3b30      	subs	r3, #48	; 0x30
 8022058:	b29b      	uxth	r3, r3
 802205a:	461a      	mov	r2, r3
 802205c:	0092      	lsls	r2, r2, #2
 802205e:	4413      	add	r3, r2
 8022060:	461a      	mov	r2, r3
 8022062:	0091      	lsls	r1, r2, #2
 8022064:	461a      	mov	r2, r3
 8022066:	460b      	mov	r3, r1
 8022068:	4413      	add	r3, r2
 802206a:	009b      	lsls	r3, r3, #2
 802206c:	b29a      	uxth	r2, r3
 802206e:	8a3b      	ldrh	r3, [r7, #16]
 8022070:	3306      	adds	r3, #6
 8022072:	4950      	ldr	r1, [pc, #320]	; (80221b4 <ce303_power+0xf80>)
 8022074:	5ccb      	ldrb	r3, [r1, r3]
 8022076:	3b30      	subs	r3, #48	; 0x30
 8022078:	b29b      	uxth	r3, r3
 802207a:	4619      	mov	r1, r3
 802207c:	0089      	lsls	r1, r1, #2
 802207e:	440b      	add	r3, r1
 8022080:	005b      	lsls	r3, r3, #1
 8022082:	b29b      	uxth	r3, r3
 8022084:	4413      	add	r3, r2
 8022086:	b29a      	uxth	r2, r3
 8022088:	8a3b      	ldrh	r3, [r7, #16]
 802208a:	3307      	adds	r3, #7
 802208c:	4949      	ldr	r1, [pc, #292]	; (80221b4 <ce303_power+0xf80>)
 802208e:	5ccb      	ldrb	r3, [r1, r3]
 8022090:	b29b      	uxth	r3, r3
 8022092:	4413      	add	r3, r2
 8022094:	b29b      	uxth	r3, r3
 8022096:	3b30      	subs	r3, #48	; 0x30
 8022098:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802209a:	4b47      	ldr	r3, [pc, #284]	; (80221b8 <ce303_power+0xf84>)
 802209c:	681b      	ldr	r3, [r3, #0]
 802209e:	f04f 31ff 	mov.w	r1, #4294967295
 80220a2:	4618      	mov	r0, r3
 80220a4:	f7f4 fdfc 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 80220a8:	89fb      	ldrh	r3, [r7, #14]
 80220aa:	0a1b      	lsrs	r3, r3, #8
 80220ac:	b29b      	uxth	r3, r3
 80220ae:	b2db      	uxtb	r3, r3
 80220b0:	4619      	mov	r1, r3
 80220b2:	f242 0058 	movw	r0, #8280	; 0x2058
 80220b6:	f003 f9c5 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 80220ba:	89fb      	ldrh	r3, [r7, #14]
 80220bc:	b2db      	uxtb	r3, r3
 80220be:	4619      	mov	r1, r3
 80220c0:	f242 0059 	movw	r0, #8281	; 0x2059
 80220c4:	f003 f9be 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 80220c8:	8afb      	ldrh	r3, [r7, #22]
 80220ca:	0a1b      	lsrs	r3, r3, #8
 80220cc:	b29b      	uxth	r3, r3
 80220ce:	b2db      	uxtb	r3, r3
 80220d0:	4619      	mov	r1, r3
 80220d2:	f242 005e 	movw	r0, #8286	; 0x205e
 80220d6:	f003 f9b5 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80220da:	8afb      	ldrh	r3, [r7, #22]
 80220dc:	b2db      	uxtb	r3, r3
 80220de:	4619      	mov	r1, r3
 80220e0:	f242 005f 	movw	r0, #8287	; 0x205f
 80220e4:	f003 f9ae 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80220e8:	4b33      	ldr	r3, [pc, #204]	; (80221b8 <ce303_power+0xf84>)
 80220ea:	681b      	ldr	r3, [r3, #0]
 80220ec:	4618      	mov	r0, r3
 80220ee:	f7f4 fe25 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 80220f2:	4a32      	ldr	r2, [pc, #200]	; (80221bc <ce303_power+0xf88>)
 80220f4:	89fb      	ldrh	r3, [r7, #14]
 80220f6:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg = temp_mil;
 80220fa:	4a30      	ldr	r2, [pc, #192]	; (80221bc <ce303_power+0xf88>)
 80220fc:	8afb      	ldrh	r3, [r7, #22]
 80220fe:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 8022102:	2301      	movs	r3, #1
 8022104:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8022106:	e2b3      	b.n	8022670 <ce303_power+0x143c>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (power_a_state==1) && (power_b_state==1) && (power_c_state==0) )
 8022108:	8a3b      	ldrh	r3, [r7, #16]
 802210a:	4a2a      	ldr	r2, [pc, #168]	; (80221b4 <ce303_power+0xf80>)
 802210c:	5cd3      	ldrb	r3, [r2, r3]
 802210e:	2b28      	cmp	r3, #40	; 0x28
 8022110:	f040 82af 	bne.w	8022672 <ce303_power+0x143e>
 8022114:	7d7b      	ldrb	r3, [r7, #21]
 8022116:	2b01      	cmp	r3, #1
 8022118:	f040 82ab 	bne.w	8022672 <ce303_power+0x143e>
 802211c:	7d3b      	ldrb	r3, [r7, #20]
 802211e:	2b01      	cmp	r3, #1
 8022120:	f040 82a7 	bne.w	8022672 <ce303_power+0x143e>
 8022124:	7cfb      	ldrb	r3, [r7, #19]
 8022126:	2b00      	cmp	r3, #0
 8022128:	f040 82a3 	bne.w	8022672 <ce303_power+0x143e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802212c:	8a3b      	ldrh	r3, [r7, #16]
 802212e:	3302      	adds	r3, #2
 8022130:	4a20      	ldr	r2, [pc, #128]	; (80221b4 <ce303_power+0xf80>)
 8022132:	5cd3      	ldrb	r3, [r2, r3]
 8022134:	2b2e      	cmp	r3, #46	; 0x2e
 8022136:	f040 80cd 	bne.w	80222d4 <ce303_power+0x10a0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 802213a:	8a3b      	ldrh	r3, [r7, #16]
 802213c:	3301      	adds	r3, #1
 802213e:	4a1d      	ldr	r2, [pc, #116]	; (80221b4 <ce303_power+0xf80>)
 8022140:	5cd3      	ldrb	r3, [r2, r3]
 8022142:	b29b      	uxth	r3, r3
 8022144:	3b30      	subs	r3, #48	; 0x30
 8022146:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8022148:	8a3b      	ldrh	r3, [r7, #16]
 802214a:	3304      	adds	r3, #4
 802214c:	4a19      	ldr	r2, [pc, #100]	; (80221b4 <ce303_power+0xf80>)
 802214e:	5cd3      	ldrb	r3, [r2, r3]
 8022150:	2b29      	cmp	r3, #41	; 0x29
 8022152:	d110      	bne.n	8022176 <ce303_power+0xf42>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8022154:	8a3b      	ldrh	r3, [r7, #16]
 8022156:	3303      	adds	r3, #3
 8022158:	4a16      	ldr	r2, [pc, #88]	; (80221b4 <ce303_power+0xf80>)
 802215a:	5cd3      	ldrb	r3, [r2, r3]
 802215c:	3b30      	subs	r3, #48	; 0x30
 802215e:	b29b      	uxth	r3, r3
 8022160:	461a      	mov	r2, r3
 8022162:	0092      	lsls	r2, r2, #2
 8022164:	4413      	add	r3, r2
 8022166:	461a      	mov	r2, r3
 8022168:	0091      	lsls	r1, r2, #2
 802216a:	461a      	mov	r2, r3
 802216c:	460b      	mov	r3, r1
 802216e:	4413      	add	r3, r2
 8022170:	009b      	lsls	r3, r3, #2
 8022172:	82fb      	strh	r3, [r7, #22]
 8022174:	e077      	b.n	8022266 <ce303_power+0x1032>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8022176:	8a3b      	ldrh	r3, [r7, #16]
 8022178:	3305      	adds	r3, #5
 802217a:	4a0e      	ldr	r2, [pc, #56]	; (80221b4 <ce303_power+0xf80>)
 802217c:	5cd3      	ldrb	r3, [r2, r3]
 802217e:	2b29      	cmp	r3, #41	; 0x29
 8022180:	d11e      	bne.n	80221c0 <ce303_power+0xf8c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8022182:	8a3b      	ldrh	r3, [r7, #16]
 8022184:	3303      	adds	r3, #3
 8022186:	4a0b      	ldr	r2, [pc, #44]	; (80221b4 <ce303_power+0xf80>)
 8022188:	5cd3      	ldrb	r3, [r2, r3]
 802218a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802218e:	4613      	mov	r3, r2
 8022190:	009b      	lsls	r3, r3, #2
 8022192:	4413      	add	r3, r2
 8022194:	005b      	lsls	r3, r3, #1
 8022196:	4619      	mov	r1, r3
 8022198:	8a3b      	ldrh	r3, [r7, #16]
 802219a:	3304      	adds	r3, #4
 802219c:	4a05      	ldr	r2, [pc, #20]	; (80221b4 <ce303_power+0xf80>)
 802219e:	5cd3      	ldrb	r3, [r2, r3]
 80221a0:	3b30      	subs	r3, #48	; 0x30
 80221a2:	440b      	add	r3, r1
 80221a4:	b29b      	uxth	r3, r3
 80221a6:	461a      	mov	r2, r3
 80221a8:	0092      	lsls	r2, r2, #2
 80221aa:	4413      	add	r3, r2
 80221ac:	005b      	lsls	r3, r3, #1
 80221ae:	82fb      	strh	r3, [r7, #22]
 80221b0:	e059      	b.n	8022266 <ce303_power+0x1032>
 80221b2:	bf00      	nop
 80221b4:	200098e4 	.word	0x200098e4
 80221b8:	20009a6c 	.word	0x20009a6c
 80221bc:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80221c0:	8a3b      	ldrh	r3, [r7, #16]
 80221c2:	3306      	adds	r3, #6
 80221c4:	4ab0      	ldr	r2, [pc, #704]	; (8022488 <ce303_power+0x1254>)
 80221c6:	5cd3      	ldrb	r3, [r2, r3]
 80221c8:	2b29      	cmp	r3, #41	; 0x29
 80221ca:	d126      	bne.n	802221a <ce303_power+0xfe6>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80221cc:	8a3b      	ldrh	r3, [r7, #16]
 80221ce:	3303      	adds	r3, #3
 80221d0:	4aad      	ldr	r2, [pc, #692]	; (8022488 <ce303_power+0x1254>)
 80221d2:	5cd3      	ldrb	r3, [r2, r3]
 80221d4:	3b30      	subs	r3, #48	; 0x30
 80221d6:	b29b      	uxth	r3, r3
 80221d8:	461a      	mov	r2, r3
 80221da:	0092      	lsls	r2, r2, #2
 80221dc:	4413      	add	r3, r2
 80221de:	461a      	mov	r2, r3
 80221e0:	0091      	lsls	r1, r2, #2
 80221e2:	461a      	mov	r2, r3
 80221e4:	460b      	mov	r3, r1
 80221e6:	4413      	add	r3, r2
 80221e8:	009b      	lsls	r3, r3, #2
 80221ea:	b29a      	uxth	r2, r3
 80221ec:	8a3b      	ldrh	r3, [r7, #16]
 80221ee:	3304      	adds	r3, #4
 80221f0:	49a5      	ldr	r1, [pc, #660]	; (8022488 <ce303_power+0x1254>)
 80221f2:	5ccb      	ldrb	r3, [r1, r3]
 80221f4:	3b30      	subs	r3, #48	; 0x30
 80221f6:	b29b      	uxth	r3, r3
 80221f8:	4619      	mov	r1, r3
 80221fa:	0089      	lsls	r1, r1, #2
 80221fc:	440b      	add	r3, r1
 80221fe:	005b      	lsls	r3, r3, #1
 8022200:	b29b      	uxth	r3, r3
 8022202:	4413      	add	r3, r2
 8022204:	b29a      	uxth	r2, r3
 8022206:	8a3b      	ldrh	r3, [r7, #16]
 8022208:	3305      	adds	r3, #5
 802220a:	499f      	ldr	r1, [pc, #636]	; (8022488 <ce303_power+0x1254>)
 802220c:	5ccb      	ldrb	r3, [r1, r3]
 802220e:	b29b      	uxth	r3, r3
 8022210:	4413      	add	r3, r2
 8022212:	b29b      	uxth	r3, r3
 8022214:	3b30      	subs	r3, #48	; 0x30
 8022216:	82fb      	strh	r3, [r7, #22]
 8022218:	e025      	b.n	8022266 <ce303_power+0x1032>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 802221a:	8a3b      	ldrh	r3, [r7, #16]
 802221c:	3303      	adds	r3, #3
 802221e:	4a9a      	ldr	r2, [pc, #616]	; (8022488 <ce303_power+0x1254>)
 8022220:	5cd3      	ldrb	r3, [r2, r3]
 8022222:	3b30      	subs	r3, #48	; 0x30
 8022224:	b29b      	uxth	r3, r3
 8022226:	461a      	mov	r2, r3
 8022228:	0092      	lsls	r2, r2, #2
 802222a:	4413      	add	r3, r2
 802222c:	461a      	mov	r2, r3
 802222e:	0091      	lsls	r1, r2, #2
 8022230:	461a      	mov	r2, r3
 8022232:	460b      	mov	r3, r1
 8022234:	4413      	add	r3, r2
 8022236:	009b      	lsls	r3, r3, #2
 8022238:	b29a      	uxth	r2, r3
 802223a:	8a3b      	ldrh	r3, [r7, #16]
 802223c:	3304      	adds	r3, #4
 802223e:	4992      	ldr	r1, [pc, #584]	; (8022488 <ce303_power+0x1254>)
 8022240:	5ccb      	ldrb	r3, [r1, r3]
 8022242:	3b30      	subs	r3, #48	; 0x30
 8022244:	b29b      	uxth	r3, r3
 8022246:	4619      	mov	r1, r3
 8022248:	0089      	lsls	r1, r1, #2
 802224a:	440b      	add	r3, r1
 802224c:	005b      	lsls	r3, r3, #1
 802224e:	b29b      	uxth	r3, r3
 8022250:	4413      	add	r3, r2
 8022252:	b29a      	uxth	r2, r3
 8022254:	8a3b      	ldrh	r3, [r7, #16]
 8022256:	3305      	adds	r3, #5
 8022258:	498b      	ldr	r1, [pc, #556]	; (8022488 <ce303_power+0x1254>)
 802225a:	5ccb      	ldrb	r3, [r1, r3]
 802225c:	b29b      	uxth	r3, r3
 802225e:	4413      	add	r3, r2
 8022260:	b29b      	uxth	r3, r3
 8022262:	3b30      	subs	r3, #48	; 0x30
 8022264:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8022266:	4b89      	ldr	r3, [pc, #548]	; (802248c <ce303_power+0x1258>)
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	f04f 31ff 	mov.w	r1, #4294967295
 802226e:	4618      	mov	r0, r3
 8022270:	f7f4 fd16 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 8022274:	89fb      	ldrh	r3, [r7, #14]
 8022276:	0a1b      	lsrs	r3, r3, #8
 8022278:	b29b      	uxth	r3, r3
 802227a:	b2db      	uxtb	r3, r3
 802227c:	4619      	mov	r1, r3
 802227e:	f242 005a 	movw	r0, #8282	; 0x205a
 8022282:	f003 f8df 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8022286:	89fb      	ldrh	r3, [r7, #14]
 8022288:	b2db      	uxtb	r3, r3
 802228a:	4619      	mov	r1, r3
 802228c:	f242 005b 	movw	r0, #8283	; 0x205b
 8022290:	f003 f8d8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8022294:	8afb      	ldrh	r3, [r7, #22]
 8022296:	0a1b      	lsrs	r3, r3, #8
 8022298:	b29b      	uxth	r3, r3
 802229a:	b2db      	uxtb	r3, r3
 802229c:	4619      	mov	r1, r3
 802229e:	f242 0060 	movw	r0, #8288	; 0x2060
 80222a2:	f003 f8cf 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80222a6:	8afb      	ldrh	r3, [r7, #22]
 80222a8:	b2db      	uxtb	r3, r3
 80222aa:	4619      	mov	r1, r3
 80222ac:	f242 0061 	movw	r0, #8289	; 0x2061
 80222b0:	f003 f8c8 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80222b4:	4b75      	ldr	r3, [pc, #468]	; (802248c <ce303_power+0x1258>)
 80222b6:	681b      	ldr	r3, [r3, #0]
 80222b8:	4618      	mov	r0, r3
 80222ba:	f7f4 fd3f 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 80222be:	4a74      	ldr	r2, [pc, #464]	; (8022490 <ce303_power+0x125c>)
 80222c0:	89fb      	ldrh	r3, [r7, #14]
 80222c2:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 80222c6:	4a72      	ldr	r2, [pc, #456]	; (8022490 <ce303_power+0x125c>)
 80222c8:	8afb      	ldrh	r3, [r7, #22]
 80222ca:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 80222ce:	2301      	movs	r3, #1
 80222d0:	74fb      	strb	r3, [r7, #19]
 80222d2:	e1ce      	b.n	8022672 <ce303_power+0x143e>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 80222d4:	8a3b      	ldrh	r3, [r7, #16]
 80222d6:	3303      	adds	r3, #3
 80222d8:	4a6b      	ldr	r2, [pc, #428]	; (8022488 <ce303_power+0x1254>)
 80222da:	5cd3      	ldrb	r3, [r2, r3]
 80222dc:	2b2e      	cmp	r3, #46	; 0x2e
 80222de:	f040 80d9 	bne.w	8022494 <ce303_power+0x1260>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80222e2:	8a3b      	ldrh	r3, [r7, #16]
 80222e4:	3301      	adds	r3, #1
 80222e6:	4a68      	ldr	r2, [pc, #416]	; (8022488 <ce303_power+0x1254>)
 80222e8:	5cd3      	ldrb	r3, [r2, r3]
 80222ea:	3b30      	subs	r3, #48	; 0x30
 80222ec:	b29b      	uxth	r3, r3
 80222ee:	461a      	mov	r2, r3
 80222f0:	0092      	lsls	r2, r2, #2
 80222f2:	4413      	add	r3, r2
 80222f4:	005b      	lsls	r3, r3, #1
 80222f6:	b29a      	uxth	r2, r3
 80222f8:	8a3b      	ldrh	r3, [r7, #16]
 80222fa:	3302      	adds	r3, #2
 80222fc:	4962      	ldr	r1, [pc, #392]	; (8022488 <ce303_power+0x1254>)
 80222fe:	5ccb      	ldrb	r3, [r1, r3]
 8022300:	b29b      	uxth	r3, r3
 8022302:	4413      	add	r3, r2
 8022304:	b29b      	uxth	r3, r3
 8022306:	3b30      	subs	r3, #48	; 0x30
 8022308:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 802230a:	8a3b      	ldrh	r3, [r7, #16]
 802230c:	3305      	adds	r3, #5
 802230e:	4a5e      	ldr	r2, [pc, #376]	; (8022488 <ce303_power+0x1254>)
 8022310:	5cd3      	ldrb	r3, [r2, r3]
 8022312:	2b29      	cmp	r3, #41	; 0x29
 8022314:	d110      	bne.n	8022338 <ce303_power+0x1104>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8022316:	8a3b      	ldrh	r3, [r7, #16]
 8022318:	3304      	adds	r3, #4
 802231a:	4a5b      	ldr	r2, [pc, #364]	; (8022488 <ce303_power+0x1254>)
 802231c:	5cd3      	ldrb	r3, [r2, r3]
 802231e:	3b30      	subs	r3, #48	; 0x30
 8022320:	b29b      	uxth	r3, r3
 8022322:	461a      	mov	r2, r3
 8022324:	0092      	lsls	r2, r2, #2
 8022326:	4413      	add	r3, r2
 8022328:	461a      	mov	r2, r3
 802232a:	0091      	lsls	r1, r2, #2
 802232c:	461a      	mov	r2, r3
 802232e:	460b      	mov	r3, r1
 8022330:	4413      	add	r3, r2
 8022332:	009b      	lsls	r3, r3, #2
 8022334:	82fb      	strh	r3, [r7, #22]
 8022336:	e070      	b.n	802241a <ce303_power+0x11e6>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8022338:	8a3b      	ldrh	r3, [r7, #16]
 802233a:	3306      	adds	r3, #6
 802233c:	4a52      	ldr	r2, [pc, #328]	; (8022488 <ce303_power+0x1254>)
 802233e:	5cd3      	ldrb	r3, [r2, r3]
 8022340:	2b29      	cmp	r3, #41	; 0x29
 8022342:	d117      	bne.n	8022374 <ce303_power+0x1140>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8022344:	8a3b      	ldrh	r3, [r7, #16]
 8022346:	3304      	adds	r3, #4
 8022348:	4a4f      	ldr	r2, [pc, #316]	; (8022488 <ce303_power+0x1254>)
 802234a:	5cd3      	ldrb	r3, [r2, r3]
 802234c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8022350:	4613      	mov	r3, r2
 8022352:	009b      	lsls	r3, r3, #2
 8022354:	4413      	add	r3, r2
 8022356:	005b      	lsls	r3, r3, #1
 8022358:	4619      	mov	r1, r3
 802235a:	8a3b      	ldrh	r3, [r7, #16]
 802235c:	3305      	adds	r3, #5
 802235e:	4a4a      	ldr	r2, [pc, #296]	; (8022488 <ce303_power+0x1254>)
 8022360:	5cd3      	ldrb	r3, [r2, r3]
 8022362:	3b30      	subs	r3, #48	; 0x30
 8022364:	440b      	add	r3, r1
 8022366:	b29b      	uxth	r3, r3
 8022368:	461a      	mov	r2, r3
 802236a:	0092      	lsls	r2, r2, #2
 802236c:	4413      	add	r3, r2
 802236e:	005b      	lsls	r3, r3, #1
 8022370:	82fb      	strh	r3, [r7, #22]
 8022372:	e052      	b.n	802241a <ce303_power+0x11e6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8022374:	8a3b      	ldrh	r3, [r7, #16]
 8022376:	3307      	adds	r3, #7
 8022378:	4a43      	ldr	r2, [pc, #268]	; (8022488 <ce303_power+0x1254>)
 802237a:	5cd3      	ldrb	r3, [r2, r3]
 802237c:	2b29      	cmp	r3, #41	; 0x29
 802237e:	d126      	bne.n	80223ce <ce303_power+0x119a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8022380:	8a3b      	ldrh	r3, [r7, #16]
 8022382:	3304      	adds	r3, #4
 8022384:	4a40      	ldr	r2, [pc, #256]	; (8022488 <ce303_power+0x1254>)
 8022386:	5cd3      	ldrb	r3, [r2, r3]
 8022388:	3b30      	subs	r3, #48	; 0x30
 802238a:	b29b      	uxth	r3, r3
 802238c:	461a      	mov	r2, r3
 802238e:	0092      	lsls	r2, r2, #2
 8022390:	4413      	add	r3, r2
 8022392:	461a      	mov	r2, r3
 8022394:	0091      	lsls	r1, r2, #2
 8022396:	461a      	mov	r2, r3
 8022398:	460b      	mov	r3, r1
 802239a:	4413      	add	r3, r2
 802239c:	009b      	lsls	r3, r3, #2
 802239e:	b29a      	uxth	r2, r3
 80223a0:	8a3b      	ldrh	r3, [r7, #16]
 80223a2:	3305      	adds	r3, #5
 80223a4:	4938      	ldr	r1, [pc, #224]	; (8022488 <ce303_power+0x1254>)
 80223a6:	5ccb      	ldrb	r3, [r1, r3]
 80223a8:	3b30      	subs	r3, #48	; 0x30
 80223aa:	b29b      	uxth	r3, r3
 80223ac:	4619      	mov	r1, r3
 80223ae:	0089      	lsls	r1, r1, #2
 80223b0:	440b      	add	r3, r1
 80223b2:	005b      	lsls	r3, r3, #1
 80223b4:	b29b      	uxth	r3, r3
 80223b6:	4413      	add	r3, r2
 80223b8:	b29a      	uxth	r2, r3
 80223ba:	8a3b      	ldrh	r3, [r7, #16]
 80223bc:	3306      	adds	r3, #6
 80223be:	4932      	ldr	r1, [pc, #200]	; (8022488 <ce303_power+0x1254>)
 80223c0:	5ccb      	ldrb	r3, [r1, r3]
 80223c2:	b29b      	uxth	r3, r3
 80223c4:	4413      	add	r3, r2
 80223c6:	b29b      	uxth	r3, r3
 80223c8:	3b30      	subs	r3, #48	; 0x30
 80223ca:	82fb      	strh	r3, [r7, #22]
 80223cc:	e025      	b.n	802241a <ce303_power+0x11e6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80223ce:	8a3b      	ldrh	r3, [r7, #16]
 80223d0:	3304      	adds	r3, #4
 80223d2:	4a2d      	ldr	r2, [pc, #180]	; (8022488 <ce303_power+0x1254>)
 80223d4:	5cd3      	ldrb	r3, [r2, r3]
 80223d6:	3b30      	subs	r3, #48	; 0x30
 80223d8:	b29b      	uxth	r3, r3
 80223da:	461a      	mov	r2, r3
 80223dc:	0092      	lsls	r2, r2, #2
 80223de:	4413      	add	r3, r2
 80223e0:	461a      	mov	r2, r3
 80223e2:	0091      	lsls	r1, r2, #2
 80223e4:	461a      	mov	r2, r3
 80223e6:	460b      	mov	r3, r1
 80223e8:	4413      	add	r3, r2
 80223ea:	009b      	lsls	r3, r3, #2
 80223ec:	b29a      	uxth	r2, r3
 80223ee:	8a3b      	ldrh	r3, [r7, #16]
 80223f0:	3305      	adds	r3, #5
 80223f2:	4925      	ldr	r1, [pc, #148]	; (8022488 <ce303_power+0x1254>)
 80223f4:	5ccb      	ldrb	r3, [r1, r3]
 80223f6:	3b30      	subs	r3, #48	; 0x30
 80223f8:	b29b      	uxth	r3, r3
 80223fa:	4619      	mov	r1, r3
 80223fc:	0089      	lsls	r1, r1, #2
 80223fe:	440b      	add	r3, r1
 8022400:	005b      	lsls	r3, r3, #1
 8022402:	b29b      	uxth	r3, r3
 8022404:	4413      	add	r3, r2
 8022406:	b29a      	uxth	r2, r3
 8022408:	8a3b      	ldrh	r3, [r7, #16]
 802240a:	3306      	adds	r3, #6
 802240c:	491e      	ldr	r1, [pc, #120]	; (8022488 <ce303_power+0x1254>)
 802240e:	5ccb      	ldrb	r3, [r1, r3]
 8022410:	b29b      	uxth	r3, r3
 8022412:	4413      	add	r3, r2
 8022414:	b29b      	uxth	r3, r3
 8022416:	3b30      	subs	r3, #48	; 0x30
 8022418:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802241a:	4b1c      	ldr	r3, [pc, #112]	; (802248c <ce303_power+0x1258>)
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	f04f 31ff 	mov.w	r1, #4294967295
 8022422:	4618      	mov	r0, r3
 8022424:	f7f4 fc3c 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 8022428:	89fb      	ldrh	r3, [r7, #14]
 802242a:	0a1b      	lsrs	r3, r3, #8
 802242c:	b29b      	uxth	r3, r3
 802242e:	b2db      	uxtb	r3, r3
 8022430:	4619      	mov	r1, r3
 8022432:	f242 005a 	movw	r0, #8282	; 0x205a
 8022436:	f003 f805 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 802243a:	89fb      	ldrh	r3, [r7, #14]
 802243c:	b2db      	uxtb	r3, r3
 802243e:	4619      	mov	r1, r3
 8022440:	f242 005b 	movw	r0, #8283	; 0x205b
 8022444:	f002 fffe 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8022448:	8afb      	ldrh	r3, [r7, #22]
 802244a:	0a1b      	lsrs	r3, r3, #8
 802244c:	b29b      	uxth	r3, r3
 802244e:	b2db      	uxtb	r3, r3
 8022450:	4619      	mov	r1, r3
 8022452:	f242 0060 	movw	r0, #8288	; 0x2060
 8022456:	f002 fff5 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 802245a:	8afb      	ldrh	r3, [r7, #22]
 802245c:	b2db      	uxtb	r3, r3
 802245e:	4619      	mov	r1, r3
 8022460:	f242 0061 	movw	r0, #8289	; 0x2061
 8022464:	f002 ffee 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8022468:	4b08      	ldr	r3, [pc, #32]	; (802248c <ce303_power+0x1258>)
 802246a:	681b      	ldr	r3, [r3, #0]
 802246c:	4618      	mov	r0, r3
 802246e:	f7f4 fc65 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 8022472:	4a07      	ldr	r2, [pc, #28]	; (8022490 <ce303_power+0x125c>)
 8022474:	89fb      	ldrh	r3, [r7, #14]
 8022476:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 802247a:	4a05      	ldr	r2, [pc, #20]	; (8022490 <ce303_power+0x125c>)
 802247c:	8afb      	ldrh	r3, [r7, #22]
 802247e:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 8022482:	2301      	movs	r3, #1
 8022484:	74fb      	strb	r3, [r7, #19]
 8022486:	e0f4      	b.n	8022672 <ce303_power+0x143e>
 8022488:	200098e4 	.word	0x200098e4
 802248c:	20009a6c 	.word	0x20009a6c
 8022490:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8022494:	8a3b      	ldrh	r3, [r7, #16]
 8022496:	3304      	adds	r3, #4
 8022498:	4a85      	ldr	r2, [pc, #532]	; (80226b0 <ce303_power+0x147c>)
 802249a:	5cd3      	ldrb	r3, [r2, r3]
 802249c:	2b2e      	cmp	r3, #46	; 0x2e
 802249e:	f040 80e8 	bne.w	8022672 <ce303_power+0x143e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80224a2:	8a3b      	ldrh	r3, [r7, #16]
 80224a4:	3301      	adds	r3, #1
 80224a6:	4a82      	ldr	r2, [pc, #520]	; (80226b0 <ce303_power+0x147c>)
 80224a8:	5cd3      	ldrb	r3, [r2, r3]
 80224aa:	3b30      	subs	r3, #48	; 0x30
 80224ac:	b29b      	uxth	r3, r3
 80224ae:	461a      	mov	r2, r3
 80224b0:	0092      	lsls	r2, r2, #2
 80224b2:	4413      	add	r3, r2
 80224b4:	461a      	mov	r2, r3
 80224b6:	0091      	lsls	r1, r2, #2
 80224b8:	461a      	mov	r2, r3
 80224ba:	460b      	mov	r3, r1
 80224bc:	4413      	add	r3, r2
 80224be:	009b      	lsls	r3, r3, #2
 80224c0:	b29a      	uxth	r2, r3
 80224c2:	8a3b      	ldrh	r3, [r7, #16]
 80224c4:	3302      	adds	r3, #2
 80224c6:	497a      	ldr	r1, [pc, #488]	; (80226b0 <ce303_power+0x147c>)
 80224c8:	5ccb      	ldrb	r3, [r1, r3]
 80224ca:	3b30      	subs	r3, #48	; 0x30
 80224cc:	b29b      	uxth	r3, r3
 80224ce:	4619      	mov	r1, r3
 80224d0:	0089      	lsls	r1, r1, #2
 80224d2:	440b      	add	r3, r1
 80224d4:	005b      	lsls	r3, r3, #1
 80224d6:	b29b      	uxth	r3, r3
 80224d8:	4413      	add	r3, r2
 80224da:	b29a      	uxth	r2, r3
 80224dc:	8a3b      	ldrh	r3, [r7, #16]
 80224de:	3303      	adds	r3, #3
 80224e0:	4973      	ldr	r1, [pc, #460]	; (80226b0 <ce303_power+0x147c>)
 80224e2:	5ccb      	ldrb	r3, [r1, r3]
 80224e4:	b29b      	uxth	r3, r3
 80224e6:	4413      	add	r3, r2
 80224e8:	b29b      	uxth	r3, r3
 80224ea:	3b30      	subs	r3, #48	; 0x30
 80224ec:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80224ee:	8a3b      	ldrh	r3, [r7, #16]
 80224f0:	3306      	adds	r3, #6
 80224f2:	4a6f      	ldr	r2, [pc, #444]	; (80226b0 <ce303_power+0x147c>)
 80224f4:	5cd3      	ldrb	r3, [r2, r3]
 80224f6:	2b29      	cmp	r3, #41	; 0x29
 80224f8:	d110      	bne.n	802251c <ce303_power+0x12e8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80224fa:	8a3b      	ldrh	r3, [r7, #16]
 80224fc:	3305      	adds	r3, #5
 80224fe:	4a6c      	ldr	r2, [pc, #432]	; (80226b0 <ce303_power+0x147c>)
 8022500:	5cd3      	ldrb	r3, [r2, r3]
 8022502:	3b30      	subs	r3, #48	; 0x30
 8022504:	b29b      	uxth	r3, r3
 8022506:	461a      	mov	r2, r3
 8022508:	0092      	lsls	r2, r2, #2
 802250a:	4413      	add	r3, r2
 802250c:	461a      	mov	r2, r3
 802250e:	0091      	lsls	r1, r2, #2
 8022510:	461a      	mov	r2, r3
 8022512:	460b      	mov	r3, r1
 8022514:	4413      	add	r3, r2
 8022516:	009b      	lsls	r3, r3, #2
 8022518:	82fb      	strh	r3, [r7, #22]
 802251a:	e070      	b.n	80225fe <ce303_power+0x13ca>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 802251c:	8a3b      	ldrh	r3, [r7, #16]
 802251e:	3307      	adds	r3, #7
 8022520:	4a63      	ldr	r2, [pc, #396]	; (80226b0 <ce303_power+0x147c>)
 8022522:	5cd3      	ldrb	r3, [r2, r3]
 8022524:	2b29      	cmp	r3, #41	; 0x29
 8022526:	d117      	bne.n	8022558 <ce303_power+0x1324>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8022528:	8a3b      	ldrh	r3, [r7, #16]
 802252a:	3305      	adds	r3, #5
 802252c:	4a60      	ldr	r2, [pc, #384]	; (80226b0 <ce303_power+0x147c>)
 802252e:	5cd3      	ldrb	r3, [r2, r3]
 8022530:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8022534:	4613      	mov	r3, r2
 8022536:	009b      	lsls	r3, r3, #2
 8022538:	4413      	add	r3, r2
 802253a:	005b      	lsls	r3, r3, #1
 802253c:	4619      	mov	r1, r3
 802253e:	8a3b      	ldrh	r3, [r7, #16]
 8022540:	3306      	adds	r3, #6
 8022542:	4a5b      	ldr	r2, [pc, #364]	; (80226b0 <ce303_power+0x147c>)
 8022544:	5cd3      	ldrb	r3, [r2, r3]
 8022546:	3b30      	subs	r3, #48	; 0x30
 8022548:	440b      	add	r3, r1
 802254a:	b29b      	uxth	r3, r3
 802254c:	461a      	mov	r2, r3
 802254e:	0092      	lsls	r2, r2, #2
 8022550:	4413      	add	r3, r2
 8022552:	005b      	lsls	r3, r3, #1
 8022554:	82fb      	strh	r3, [r7, #22]
 8022556:	e052      	b.n	80225fe <ce303_power+0x13ca>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8022558:	8a3b      	ldrh	r3, [r7, #16]
 802255a:	3308      	adds	r3, #8
 802255c:	4a54      	ldr	r2, [pc, #336]	; (80226b0 <ce303_power+0x147c>)
 802255e:	5cd3      	ldrb	r3, [r2, r3]
 8022560:	2b29      	cmp	r3, #41	; 0x29
 8022562:	d126      	bne.n	80225b2 <ce303_power+0x137e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8022564:	8a3b      	ldrh	r3, [r7, #16]
 8022566:	3305      	adds	r3, #5
 8022568:	4a51      	ldr	r2, [pc, #324]	; (80226b0 <ce303_power+0x147c>)
 802256a:	5cd3      	ldrb	r3, [r2, r3]
 802256c:	3b30      	subs	r3, #48	; 0x30
 802256e:	b29b      	uxth	r3, r3
 8022570:	461a      	mov	r2, r3
 8022572:	0092      	lsls	r2, r2, #2
 8022574:	4413      	add	r3, r2
 8022576:	461a      	mov	r2, r3
 8022578:	0091      	lsls	r1, r2, #2
 802257a:	461a      	mov	r2, r3
 802257c:	460b      	mov	r3, r1
 802257e:	4413      	add	r3, r2
 8022580:	009b      	lsls	r3, r3, #2
 8022582:	b29a      	uxth	r2, r3
 8022584:	8a3b      	ldrh	r3, [r7, #16]
 8022586:	3306      	adds	r3, #6
 8022588:	4949      	ldr	r1, [pc, #292]	; (80226b0 <ce303_power+0x147c>)
 802258a:	5ccb      	ldrb	r3, [r1, r3]
 802258c:	3b30      	subs	r3, #48	; 0x30
 802258e:	b29b      	uxth	r3, r3
 8022590:	4619      	mov	r1, r3
 8022592:	0089      	lsls	r1, r1, #2
 8022594:	440b      	add	r3, r1
 8022596:	005b      	lsls	r3, r3, #1
 8022598:	b29b      	uxth	r3, r3
 802259a:	4413      	add	r3, r2
 802259c:	b29a      	uxth	r2, r3
 802259e:	8a3b      	ldrh	r3, [r7, #16]
 80225a0:	3307      	adds	r3, #7
 80225a2:	4943      	ldr	r1, [pc, #268]	; (80226b0 <ce303_power+0x147c>)
 80225a4:	5ccb      	ldrb	r3, [r1, r3]
 80225a6:	b29b      	uxth	r3, r3
 80225a8:	4413      	add	r3, r2
 80225aa:	b29b      	uxth	r3, r3
 80225ac:	3b30      	subs	r3, #48	; 0x30
 80225ae:	82fb      	strh	r3, [r7, #22]
 80225b0:	e025      	b.n	80225fe <ce303_power+0x13ca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80225b2:	8a3b      	ldrh	r3, [r7, #16]
 80225b4:	3305      	adds	r3, #5
 80225b6:	4a3e      	ldr	r2, [pc, #248]	; (80226b0 <ce303_power+0x147c>)
 80225b8:	5cd3      	ldrb	r3, [r2, r3]
 80225ba:	3b30      	subs	r3, #48	; 0x30
 80225bc:	b29b      	uxth	r3, r3
 80225be:	461a      	mov	r2, r3
 80225c0:	0092      	lsls	r2, r2, #2
 80225c2:	4413      	add	r3, r2
 80225c4:	461a      	mov	r2, r3
 80225c6:	0091      	lsls	r1, r2, #2
 80225c8:	461a      	mov	r2, r3
 80225ca:	460b      	mov	r3, r1
 80225cc:	4413      	add	r3, r2
 80225ce:	009b      	lsls	r3, r3, #2
 80225d0:	b29a      	uxth	r2, r3
 80225d2:	8a3b      	ldrh	r3, [r7, #16]
 80225d4:	3306      	adds	r3, #6
 80225d6:	4936      	ldr	r1, [pc, #216]	; (80226b0 <ce303_power+0x147c>)
 80225d8:	5ccb      	ldrb	r3, [r1, r3]
 80225da:	3b30      	subs	r3, #48	; 0x30
 80225dc:	b29b      	uxth	r3, r3
 80225de:	4619      	mov	r1, r3
 80225e0:	0089      	lsls	r1, r1, #2
 80225e2:	440b      	add	r3, r1
 80225e4:	005b      	lsls	r3, r3, #1
 80225e6:	b29b      	uxth	r3, r3
 80225e8:	4413      	add	r3, r2
 80225ea:	b29a      	uxth	r2, r3
 80225ec:	8a3b      	ldrh	r3, [r7, #16]
 80225ee:	3307      	adds	r3, #7
 80225f0:	492f      	ldr	r1, [pc, #188]	; (80226b0 <ce303_power+0x147c>)
 80225f2:	5ccb      	ldrb	r3, [r1, r3]
 80225f4:	b29b      	uxth	r3, r3
 80225f6:	4413      	add	r3, r2
 80225f8:	b29b      	uxth	r3, r3
 80225fa:	3b30      	subs	r3, #48	; 0x30
 80225fc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80225fe:	4b2d      	ldr	r3, [pc, #180]	; (80226b4 <ce303_power+0x1480>)
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	f04f 31ff 	mov.w	r1, #4294967295
 8022606:	4618      	mov	r0, r3
 8022608:	f7f4 fb4a 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 802260c:	89fb      	ldrh	r3, [r7, #14]
 802260e:	0a1b      	lsrs	r3, r3, #8
 8022610:	b29b      	uxth	r3, r3
 8022612:	b2db      	uxtb	r3, r3
 8022614:	4619      	mov	r1, r3
 8022616:	f242 005a 	movw	r0, #8282	; 0x205a
 802261a:	f002 ff13 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 802261e:	89fb      	ldrh	r3, [r7, #14]
 8022620:	b2db      	uxtb	r3, r3
 8022622:	4619      	mov	r1, r3
 8022624:	f242 005b 	movw	r0, #8283	; 0x205b
 8022628:	f002 ff0c 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 802262c:	8afb      	ldrh	r3, [r7, #22]
 802262e:	0a1b      	lsrs	r3, r3, #8
 8022630:	b29b      	uxth	r3, r3
 8022632:	b2db      	uxtb	r3, r3
 8022634:	4619      	mov	r1, r3
 8022636:	f242 0060 	movw	r0, #8288	; 0x2060
 802263a:	f002 ff03 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 802263e:	8afb      	ldrh	r3, [r7, #22]
 8022640:	b2db      	uxtb	r3, r3
 8022642:	4619      	mov	r1, r3
 8022644:	f242 0061 	movw	r0, #8289	; 0x2061
 8022648:	f002 fefc 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 802264c:	4b19      	ldr	r3, [pc, #100]	; (80226b4 <ce303_power+0x1480>)
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	4618      	mov	r0, r3
 8022652:	f7f4 fb73 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 8022656:	4a18      	ldr	r2, [pc, #96]	; (80226b8 <ce303_power+0x1484>)
 8022658:	89fb      	ldrh	r3, [r7, #14]
 802265a:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 802265e:	4a16      	ldr	r2, [pc, #88]	; (80226b8 <ce303_power+0x1484>)
 8022660:	8afb      	ldrh	r3, [r7, #22]
 8022662:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 8022666:	2301      	movs	r3, #1
 8022668:	74fb      	strb	r3, [r7, #19]
 802266a:	e002      	b.n	8022672 <ce303_power+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802266c:	bf00      	nop
 802266e:	e000      	b.n	8022672 <ce303_power+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8022670:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 8022672:	8a3b      	ldrh	r3, [r7, #16]
 8022674:	3301      	adds	r3, #1
 8022676:	823b      	strh	r3, [r7, #16]
 8022678:	8a3b      	ldrh	r3, [r7, #16]
 802267a:	2bff      	cmp	r3, #255	; 0xff
 802267c:	f67e afd1 	bls.w	8021622 <ce303_power+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 8022680:	4b0e      	ldr	r3, [pc, #56]	; (80226bc <ce303_power+0x1488>)
 8022682:	2200      	movs	r2, #0
 8022684:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022686:	f7fc f925 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802268a:	2201      	movs	r2, #1
 802268c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022690:	480b      	ldr	r0, [pc, #44]	; (80226c0 <ce303_power+0x148c>)
 8022692:	f7f0 fd9f 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 8022696:	2205      	movs	r2, #5
 8022698:	490a      	ldr	r1, [pc, #40]	; (80226c4 <ce303_power+0x1490>)
 802269a:	480b      	ldr	r0, [pc, #44]	; (80226c8 <ce303_power+0x1494>)
 802269c:	f7f3 f852 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80226a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80226a4:	f7ef fae2 	bl	8011c6c <HAL_Delay>

}
 80226a8:	bf00      	nop
 80226aa:	3718      	adds	r7, #24
 80226ac:	46bd      	mov	sp, r7
 80226ae:	bd80      	pop	{r7, pc}
 80226b0:	200098e4 	.word	0x200098e4
 80226b4:	20009a6c 	.word	0x20009a6c
 80226b8:	2000a10c 	.word	0x2000a10c
 80226bc:	2000085d 	.word	0x2000085d
 80226c0:	40021800 	.word	0x40021800
 80226c4:	20000030 	.word	0x20000030
 80226c8:	20009c70 	.word	0x20009c70

080226cc <ce303_tarif>:

void ce303_tarif (uint8_t meter_id)
{
 80226cc:	b580      	push	{r7, lr}
 80226ce:	b086      	sub	sp, #24
 80226d0:	af00      	add	r7, sp, #0
 80226d2:	4603      	mov	r3, r0
 80226d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tarif_2_state;
	uint8_t tarif_3_state;
	uint8_t tarif_4_state;
	uint8_t tarif_5_state;

	if( (meter_id>99)&&(meter_id<1000) )
 80226d6:	79fb      	ldrb	r3, [r7, #7]
 80226d8:	2b63      	cmp	r3, #99	; 0x63
 80226da:	d962      	bls.n	80227a2 <ce303_tarif+0xd6>
	{
		start_buf[0] = 0x2F;
 80226dc:	4b9d      	ldr	r3, [pc, #628]	; (8022954 <ce303_tarif+0x288>)
 80226de:	222f      	movs	r2, #47	; 0x2f
 80226e0:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80226e2:	4b9c      	ldr	r3, [pc, #624]	; (8022954 <ce303_tarif+0x288>)
 80226e4:	223f      	movs	r2, #63	; 0x3f
 80226e6:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 80226e8:	79fb      	ldrb	r3, [r7, #7]
 80226ea:	4a9b      	ldr	r2, [pc, #620]	; (8022958 <ce303_tarif+0x28c>)
 80226ec:	fba2 2303 	umull	r2, r3, r2, r3
 80226f0:	095b      	lsrs	r3, r3, #5
 80226f2:	b2db      	uxtb	r3, r3
 80226f4:	3330      	adds	r3, #48	; 0x30
 80226f6:	b2da      	uxtb	r2, r3
 80226f8:	4b96      	ldr	r3, [pc, #600]	; (8022954 <ce303_tarif+0x288>)
 80226fa:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 80226fc:	79fa      	ldrb	r2, [r7, #7]
 80226fe:	79fb      	ldrb	r3, [r7, #7]
 8022700:	4995      	ldr	r1, [pc, #596]	; (8022958 <ce303_tarif+0x28c>)
 8022702:	fba1 1303 	umull	r1, r3, r1, r3
 8022706:	095b      	lsrs	r3, r3, #5
 8022708:	b2db      	uxtb	r3, r3
 802270a:	4619      	mov	r1, r3
 802270c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8022710:	fb03 f301 	mul.w	r3, r3, r1
 8022714:	4413      	add	r3, r2
 8022716:	4a91      	ldr	r2, [pc, #580]	; (802295c <ce303_tarif+0x290>)
 8022718:	fb82 1203 	smull	r1, r2, r2, r3
 802271c:	1092      	asrs	r2, r2, #2
 802271e:	17db      	asrs	r3, r3, #31
 8022720:	1ad3      	subs	r3, r2, r3
 8022722:	b2db      	uxtb	r3, r3
 8022724:	3330      	adds	r3, #48	; 0x30
 8022726:	b2da      	uxtb	r2, r3
 8022728:	4b8a      	ldr	r3, [pc, #552]	; (8022954 <ce303_tarif+0x288>)
 802272a:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 802272c:	79fa      	ldrb	r2, [r7, #7]
 802272e:	79fb      	ldrb	r3, [r7, #7]
 8022730:	4989      	ldr	r1, [pc, #548]	; (8022958 <ce303_tarif+0x28c>)
 8022732:	fba1 1303 	umull	r1, r3, r1, r3
 8022736:	095b      	lsrs	r3, r3, #5
 8022738:	b2db      	uxtb	r3, r3
 802273a:	4619      	mov	r1, r3
 802273c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8022740:	fb03 f301 	mul.w	r3, r3, r1
 8022744:	441a      	add	r2, r3
 8022746:	4b85      	ldr	r3, [pc, #532]	; (802295c <ce303_tarif+0x290>)
 8022748:	fb83 1302 	smull	r1, r3, r3, r2
 802274c:	1099      	asrs	r1, r3, #2
 802274e:	17d3      	asrs	r3, r2, #31
 8022750:	1ac9      	subs	r1, r1, r3
 8022752:	460b      	mov	r3, r1
 8022754:	009b      	lsls	r3, r3, #2
 8022756:	440b      	add	r3, r1
 8022758:	005b      	lsls	r3, r3, #1
 802275a:	1ad1      	subs	r1, r2, r3
 802275c:	b2cb      	uxtb	r3, r1
 802275e:	3330      	adds	r3, #48	; 0x30
 8022760:	b2da      	uxtb	r2, r3
 8022762:	4b7c      	ldr	r3, [pc, #496]	; (8022954 <ce303_tarif+0x288>)
 8022764:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8022766:	4b7b      	ldr	r3, [pc, #492]	; (8022954 <ce303_tarif+0x288>)
 8022768:	2221      	movs	r2, #33	; 0x21
 802276a:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 802276c:	4b79      	ldr	r3, [pc, #484]	; (8022954 <ce303_tarif+0x288>)
 802276e:	220d      	movs	r2, #13
 8022770:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8022772:	4b78      	ldr	r3, [pc, #480]	; (8022954 <ce303_tarif+0x288>)
 8022774:	220a      	movs	r2, #10
 8022776:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8022778:	4b79      	ldr	r3, [pc, #484]	; (8022960 <ce303_tarif+0x294>)
 802277a:	2200      	movs	r2, #0
 802277c:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802277e:	f7fc f8a9 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022782:	2201      	movs	r2, #1
 8022784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022788:	4876      	ldr	r0, [pc, #472]	; (8022964 <ce303_tarif+0x298>)
 802278a:	f7f0 fd23 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 802278e:	2208      	movs	r2, #8
 8022790:	4970      	ldr	r1, [pc, #448]	; (8022954 <ce303_tarif+0x288>)
 8022792:	4875      	ldr	r0, [pc, #468]	; (8022968 <ce303_tarif+0x29c>)
 8022794:	f7f2 ffd6 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8022798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802279c:	f7ef fa66 	bl	8011c6c <HAL_Delay>
 80227a0:	e072      	b.n	8022888 <ce303_tarif+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 80227a2:	79fb      	ldrb	r3, [r7, #7]
 80227a4:	2b09      	cmp	r3, #9
 80227a6:	d944      	bls.n	8022832 <ce303_tarif+0x166>
 80227a8:	79fb      	ldrb	r3, [r7, #7]
 80227aa:	2b63      	cmp	r3, #99	; 0x63
 80227ac:	d841      	bhi.n	8022832 <ce303_tarif+0x166>
	{
		start_buf[0] = 0x2F;
 80227ae:	4b69      	ldr	r3, [pc, #420]	; (8022954 <ce303_tarif+0x288>)
 80227b0:	222f      	movs	r2, #47	; 0x2f
 80227b2:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80227b4:	4b67      	ldr	r3, [pc, #412]	; (8022954 <ce303_tarif+0x288>)
 80227b6:	223f      	movs	r2, #63	; 0x3f
 80227b8:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 80227ba:	79fb      	ldrb	r3, [r7, #7]
 80227bc:	4a6b      	ldr	r2, [pc, #428]	; (802296c <ce303_tarif+0x2a0>)
 80227be:	fba2 2303 	umull	r2, r3, r2, r3
 80227c2:	08db      	lsrs	r3, r3, #3
 80227c4:	b2db      	uxtb	r3, r3
 80227c6:	3330      	adds	r3, #48	; 0x30
 80227c8:	b2da      	uxtb	r2, r3
 80227ca:	4b62      	ldr	r3, [pc, #392]	; (8022954 <ce303_tarif+0x288>)
 80227cc:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 80227ce:	79fb      	ldrb	r3, [r7, #7]
 80227d0:	4a66      	ldr	r2, [pc, #408]	; (802296c <ce303_tarif+0x2a0>)
 80227d2:	fba2 2303 	umull	r2, r3, r2, r3
 80227d6:	08db      	lsrs	r3, r3, #3
 80227d8:	b2db      	uxtb	r3, r3
 80227da:	461a      	mov	r2, r3
 80227dc:	0152      	lsls	r2, r2, #5
 80227de:	1ad2      	subs	r2, r2, r3
 80227e0:	0092      	lsls	r2, r2, #2
 80227e2:	1ad3      	subs	r3, r2, r3
 80227e4:	005b      	lsls	r3, r3, #1
 80227e6:	b2da      	uxtb	r2, r3
 80227e8:	79fb      	ldrb	r3, [r7, #7]
 80227ea:	4413      	add	r3, r2
 80227ec:	b2db      	uxtb	r3, r3
 80227ee:	3330      	adds	r3, #48	; 0x30
 80227f0:	b2da      	uxtb	r2, r3
 80227f2:	4b58      	ldr	r3, [pc, #352]	; (8022954 <ce303_tarif+0x288>)
 80227f4:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 80227f6:	4b57      	ldr	r3, [pc, #348]	; (8022954 <ce303_tarif+0x288>)
 80227f8:	2221      	movs	r2, #33	; 0x21
 80227fa:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 80227fc:	4b55      	ldr	r3, [pc, #340]	; (8022954 <ce303_tarif+0x288>)
 80227fe:	220d      	movs	r2, #13
 8022800:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8022802:	4b54      	ldr	r3, [pc, #336]	; (8022954 <ce303_tarif+0x288>)
 8022804:	220a      	movs	r2, #10
 8022806:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8022808:	4b55      	ldr	r3, [pc, #340]	; (8022960 <ce303_tarif+0x294>)
 802280a:	2200      	movs	r2, #0
 802280c:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802280e:	f7fc f861 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022812:	2201      	movs	r2, #1
 8022814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022818:	4852      	ldr	r0, [pc, #328]	; (8022964 <ce303_tarif+0x298>)
 802281a:	f7f0 fcdb 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 802281e:	2207      	movs	r2, #7
 8022820:	494c      	ldr	r1, [pc, #304]	; (8022954 <ce303_tarif+0x288>)
 8022822:	4851      	ldr	r0, [pc, #324]	; (8022968 <ce303_tarif+0x29c>)
 8022824:	f7f2 ff8e 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8022828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802282c:	f7ef fa1e 	bl	8011c6c <HAL_Delay>
 8022830:	e02a      	b.n	8022888 <ce303_tarif+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8022832:	79fb      	ldrb	r3, [r7, #7]
 8022834:	2b09      	cmp	r3, #9
 8022836:	d827      	bhi.n	8022888 <ce303_tarif+0x1bc>
	{
		start_buf[0] = 0x2F;
 8022838:	4b46      	ldr	r3, [pc, #280]	; (8022954 <ce303_tarif+0x288>)
 802283a:	222f      	movs	r2, #47	; 0x2f
 802283c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 802283e:	4b45      	ldr	r3, [pc, #276]	; (8022954 <ce303_tarif+0x288>)
 8022840:	223f      	movs	r2, #63	; 0x3f
 8022842:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8022844:	79fb      	ldrb	r3, [r7, #7]
 8022846:	3330      	adds	r3, #48	; 0x30
 8022848:	b2da      	uxtb	r2, r3
 802284a:	4b42      	ldr	r3, [pc, #264]	; (8022954 <ce303_tarif+0x288>)
 802284c:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 802284e:	4b41      	ldr	r3, [pc, #260]	; (8022954 <ce303_tarif+0x288>)
 8022850:	2221      	movs	r2, #33	; 0x21
 8022852:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8022854:	4b3f      	ldr	r3, [pc, #252]	; (8022954 <ce303_tarif+0x288>)
 8022856:	220d      	movs	r2, #13
 8022858:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 802285a:	4b3e      	ldr	r3, [pc, #248]	; (8022954 <ce303_tarif+0x288>)
 802285c:	220a      	movs	r2, #10
 802285e:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8022860:	4b3f      	ldr	r3, [pc, #252]	; (8022960 <ce303_tarif+0x294>)
 8022862:	2200      	movs	r2, #0
 8022864:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022866:	f7fc f835 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802286a:	2201      	movs	r2, #1
 802286c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022870:	483c      	ldr	r0, [pc, #240]	; (8022964 <ce303_tarif+0x298>)
 8022872:	f7f0 fcaf 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8022876:	2206      	movs	r2, #6
 8022878:	4936      	ldr	r1, [pc, #216]	; (8022954 <ce303_tarif+0x288>)
 802287a:	483b      	ldr	r0, [pc, #236]	; (8022968 <ce303_tarif+0x29c>)
 802287c:	f7f2 ff62 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8022880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022884:	f7ef f9f2 	bl	8011c6c <HAL_Delay>
	}

	if( (meter_id>99)&&(meter_id<1000) )
 8022888:	79fb      	ldrb	r3, [r7, #7]
 802288a:	2b63      	cmp	r3, #99	; 0x63
 802288c:	d970      	bls.n	8022970 <ce303_tarif+0x2a4>
	{
		start_buf[0] = 0x2F;
 802288e:	4b31      	ldr	r3, [pc, #196]	; (8022954 <ce303_tarif+0x288>)
 8022890:	222f      	movs	r2, #47	; 0x2f
 8022892:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8022894:	4b2f      	ldr	r3, [pc, #188]	; (8022954 <ce303_tarif+0x288>)
 8022896:	223f      	movs	r2, #63	; 0x3f
 8022898:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 802289a:	79fb      	ldrb	r3, [r7, #7]
 802289c:	4a2e      	ldr	r2, [pc, #184]	; (8022958 <ce303_tarif+0x28c>)
 802289e:	fba2 2303 	umull	r2, r3, r2, r3
 80228a2:	095b      	lsrs	r3, r3, #5
 80228a4:	b2db      	uxtb	r3, r3
 80228a6:	3330      	adds	r3, #48	; 0x30
 80228a8:	b2da      	uxtb	r2, r3
 80228aa:	4b2a      	ldr	r3, [pc, #168]	; (8022954 <ce303_tarif+0x288>)
 80228ac:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 80228ae:	79fa      	ldrb	r2, [r7, #7]
 80228b0:	79fb      	ldrb	r3, [r7, #7]
 80228b2:	4929      	ldr	r1, [pc, #164]	; (8022958 <ce303_tarif+0x28c>)
 80228b4:	fba1 1303 	umull	r1, r3, r1, r3
 80228b8:	095b      	lsrs	r3, r3, #5
 80228ba:	b2db      	uxtb	r3, r3
 80228bc:	4619      	mov	r1, r3
 80228be:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80228c2:	fb03 f301 	mul.w	r3, r3, r1
 80228c6:	4413      	add	r3, r2
 80228c8:	4a24      	ldr	r2, [pc, #144]	; (802295c <ce303_tarif+0x290>)
 80228ca:	fb82 1203 	smull	r1, r2, r2, r3
 80228ce:	1092      	asrs	r2, r2, #2
 80228d0:	17db      	asrs	r3, r3, #31
 80228d2:	1ad3      	subs	r3, r2, r3
 80228d4:	b2db      	uxtb	r3, r3
 80228d6:	3330      	adds	r3, #48	; 0x30
 80228d8:	b2da      	uxtb	r2, r3
 80228da:	4b1e      	ldr	r3, [pc, #120]	; (8022954 <ce303_tarif+0x288>)
 80228dc:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 80228de:	79fa      	ldrb	r2, [r7, #7]
 80228e0:	79fb      	ldrb	r3, [r7, #7]
 80228e2:	491d      	ldr	r1, [pc, #116]	; (8022958 <ce303_tarif+0x28c>)
 80228e4:	fba1 1303 	umull	r1, r3, r1, r3
 80228e8:	095b      	lsrs	r3, r3, #5
 80228ea:	b2db      	uxtb	r3, r3
 80228ec:	4619      	mov	r1, r3
 80228ee:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80228f2:	fb03 f301 	mul.w	r3, r3, r1
 80228f6:	441a      	add	r2, r3
 80228f8:	4b18      	ldr	r3, [pc, #96]	; (802295c <ce303_tarif+0x290>)
 80228fa:	fb83 1302 	smull	r1, r3, r3, r2
 80228fe:	1099      	asrs	r1, r3, #2
 8022900:	17d3      	asrs	r3, r2, #31
 8022902:	1ac9      	subs	r1, r1, r3
 8022904:	460b      	mov	r3, r1
 8022906:	009b      	lsls	r3, r3, #2
 8022908:	440b      	add	r3, r1
 802290a:	005b      	lsls	r3, r3, #1
 802290c:	1ad1      	subs	r1, r2, r3
 802290e:	b2cb      	uxtb	r3, r1
 8022910:	3330      	adds	r3, #48	; 0x30
 8022912:	b2da      	uxtb	r2, r3
 8022914:	4b0f      	ldr	r3, [pc, #60]	; (8022954 <ce303_tarif+0x288>)
 8022916:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8022918:	4b0e      	ldr	r3, [pc, #56]	; (8022954 <ce303_tarif+0x288>)
 802291a:	2221      	movs	r2, #33	; 0x21
 802291c:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 802291e:	4b0d      	ldr	r3, [pc, #52]	; (8022954 <ce303_tarif+0x288>)
 8022920:	220d      	movs	r2, #13
 8022922:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8022924:	4b0b      	ldr	r3, [pc, #44]	; (8022954 <ce303_tarif+0x288>)
 8022926:	220a      	movs	r2, #10
 8022928:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 802292a:	4b0d      	ldr	r3, [pc, #52]	; (8022960 <ce303_tarif+0x294>)
 802292c:	2200      	movs	r2, #0
 802292e:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022930:	f7fb ffd0 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022934:	2201      	movs	r2, #1
 8022936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802293a:	480a      	ldr	r0, [pc, #40]	; (8022964 <ce303_tarif+0x298>)
 802293c:	f7f0 fc4a 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8022940:	2208      	movs	r2, #8
 8022942:	4904      	ldr	r1, [pc, #16]	; (8022954 <ce303_tarif+0x288>)
 8022944:	4808      	ldr	r0, [pc, #32]	; (8022968 <ce303_tarif+0x29c>)
 8022946:	f7f2 fefd 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 802294a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802294e:	f7ef f98d 	bl	8011c6c <HAL_Delay>
 8022952:	e080      	b.n	8022a56 <ce303_tarif+0x38a>
 8022954:	20000010 	.word	0x20000010
 8022958:	51eb851f 	.word	0x51eb851f
 802295c:	66666667 	.word	0x66666667
 8022960:	2000085d 	.word	0x2000085d
 8022964:	40021800 	.word	0x40021800
 8022968:	20009c70 	.word	0x20009c70
 802296c:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8022970:	79fb      	ldrb	r3, [r7, #7]
 8022972:	2b09      	cmp	r3, #9
 8022974:	d944      	bls.n	8022a00 <ce303_tarif+0x334>
 8022976:	79fb      	ldrb	r3, [r7, #7]
 8022978:	2b63      	cmp	r3, #99	; 0x63
 802297a:	d841      	bhi.n	8022a00 <ce303_tarif+0x334>
	{
		start_buf[0] = 0x2F;
 802297c:	4b98      	ldr	r3, [pc, #608]	; (8022be0 <ce303_tarif+0x514>)
 802297e:	222f      	movs	r2, #47	; 0x2f
 8022980:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8022982:	4b97      	ldr	r3, [pc, #604]	; (8022be0 <ce303_tarif+0x514>)
 8022984:	223f      	movs	r2, #63	; 0x3f
 8022986:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8022988:	79fb      	ldrb	r3, [r7, #7]
 802298a:	4a96      	ldr	r2, [pc, #600]	; (8022be4 <ce303_tarif+0x518>)
 802298c:	fba2 2303 	umull	r2, r3, r2, r3
 8022990:	08db      	lsrs	r3, r3, #3
 8022992:	b2db      	uxtb	r3, r3
 8022994:	3330      	adds	r3, #48	; 0x30
 8022996:	b2da      	uxtb	r2, r3
 8022998:	4b91      	ldr	r3, [pc, #580]	; (8022be0 <ce303_tarif+0x514>)
 802299a:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 802299c:	79fb      	ldrb	r3, [r7, #7]
 802299e:	4a91      	ldr	r2, [pc, #580]	; (8022be4 <ce303_tarif+0x518>)
 80229a0:	fba2 2303 	umull	r2, r3, r2, r3
 80229a4:	08db      	lsrs	r3, r3, #3
 80229a6:	b2db      	uxtb	r3, r3
 80229a8:	461a      	mov	r2, r3
 80229aa:	0152      	lsls	r2, r2, #5
 80229ac:	1ad2      	subs	r2, r2, r3
 80229ae:	0092      	lsls	r2, r2, #2
 80229b0:	1ad3      	subs	r3, r2, r3
 80229b2:	005b      	lsls	r3, r3, #1
 80229b4:	b2da      	uxtb	r2, r3
 80229b6:	79fb      	ldrb	r3, [r7, #7]
 80229b8:	4413      	add	r3, r2
 80229ba:	b2db      	uxtb	r3, r3
 80229bc:	3330      	adds	r3, #48	; 0x30
 80229be:	b2da      	uxtb	r2, r3
 80229c0:	4b87      	ldr	r3, [pc, #540]	; (8022be0 <ce303_tarif+0x514>)
 80229c2:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 80229c4:	4b86      	ldr	r3, [pc, #536]	; (8022be0 <ce303_tarif+0x514>)
 80229c6:	2221      	movs	r2, #33	; 0x21
 80229c8:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 80229ca:	4b85      	ldr	r3, [pc, #532]	; (8022be0 <ce303_tarif+0x514>)
 80229cc:	220d      	movs	r2, #13
 80229ce:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 80229d0:	4b83      	ldr	r3, [pc, #524]	; (8022be0 <ce303_tarif+0x514>)
 80229d2:	220a      	movs	r2, #10
 80229d4:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 80229d6:	4b84      	ldr	r3, [pc, #528]	; (8022be8 <ce303_tarif+0x51c>)
 80229d8:	2200      	movs	r2, #0
 80229da:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80229dc:	f7fb ff7a 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80229e0:	2201      	movs	r2, #1
 80229e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80229e6:	4881      	ldr	r0, [pc, #516]	; (8022bec <ce303_tarif+0x520>)
 80229e8:	f7f0 fbf4 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 80229ec:	2207      	movs	r2, #7
 80229ee:	497c      	ldr	r1, [pc, #496]	; (8022be0 <ce303_tarif+0x514>)
 80229f0:	487f      	ldr	r0, [pc, #508]	; (8022bf0 <ce303_tarif+0x524>)
 80229f2:	f7f2 fea7 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80229f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80229fa:	f7ef f937 	bl	8011c6c <HAL_Delay>
 80229fe:	e02a      	b.n	8022a56 <ce303_tarif+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8022a00:	79fb      	ldrb	r3, [r7, #7]
 8022a02:	2b09      	cmp	r3, #9
 8022a04:	d827      	bhi.n	8022a56 <ce303_tarif+0x38a>
	{
		start_buf[0] = 0x2F;
 8022a06:	4b76      	ldr	r3, [pc, #472]	; (8022be0 <ce303_tarif+0x514>)
 8022a08:	222f      	movs	r2, #47	; 0x2f
 8022a0a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8022a0c:	4b74      	ldr	r3, [pc, #464]	; (8022be0 <ce303_tarif+0x514>)
 8022a0e:	223f      	movs	r2, #63	; 0x3f
 8022a10:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8022a12:	79fb      	ldrb	r3, [r7, #7]
 8022a14:	3330      	adds	r3, #48	; 0x30
 8022a16:	b2da      	uxtb	r2, r3
 8022a18:	4b71      	ldr	r3, [pc, #452]	; (8022be0 <ce303_tarif+0x514>)
 8022a1a:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8022a1c:	4b70      	ldr	r3, [pc, #448]	; (8022be0 <ce303_tarif+0x514>)
 8022a1e:	2221      	movs	r2, #33	; 0x21
 8022a20:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8022a22:	4b6f      	ldr	r3, [pc, #444]	; (8022be0 <ce303_tarif+0x514>)
 8022a24:	220d      	movs	r2, #13
 8022a26:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8022a28:	4b6d      	ldr	r3, [pc, #436]	; (8022be0 <ce303_tarif+0x514>)
 8022a2a:	220a      	movs	r2, #10
 8022a2c:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8022a2e:	4b6e      	ldr	r3, [pc, #440]	; (8022be8 <ce303_tarif+0x51c>)
 8022a30:	2200      	movs	r2, #0
 8022a32:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022a34:	f7fb ff4e 	bl	801e8d4 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022a38:	2201      	movs	r2, #1
 8022a3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022a3e:	486b      	ldr	r0, [pc, #428]	; (8022bec <ce303_tarif+0x520>)
 8022a40:	f7f0 fbc8 	bl	80131d4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8022a44:	2206      	movs	r2, #6
 8022a46:	4966      	ldr	r1, [pc, #408]	; (8022be0 <ce303_tarif+0x514>)
 8022a48:	4869      	ldr	r0, [pc, #420]	; (8022bf0 <ce303_tarif+0x524>)
 8022a4a:	f7f2 fe7b 	bl	8015744 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8022a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022a52:	f7ef f90b 	bl	8011c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 8022a56:	4b64      	ldr	r3, [pc, #400]	; (8022be8 <ce303_tarif+0x51c>)
 8022a58:	2200      	movs	r2, #0
 8022a5a:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022a5c:	f7fb ff3a 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022a60:	2201      	movs	r2, #1
 8022a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022a66:	4861      	ldr	r0, [pc, #388]	; (8022bec <ce303_tarif+0x520>)
 8022a68:	f7f0 fbb4 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8022a6c:	2206      	movs	r2, #6
 8022a6e:	4961      	ldr	r1, [pc, #388]	; (8022bf4 <ce303_tarif+0x528>)
 8022a70:	485f      	ldr	r0, [pc, #380]	; (8022bf0 <ce303_tarif+0x524>)
 8022a72:	f7f2 fe67 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8022a76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022a7a:	f7ef f8f7 	bl	8011c6c <HAL_Delay>

	meter_rx_number = 0;
 8022a7e:	4b5a      	ldr	r3, [pc, #360]	; (8022be8 <ce303_tarif+0x51c>)
 8022a80:	2200      	movs	r2, #0
 8022a82:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022a84:	f7fb ff26 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022a88:	2201      	movs	r2, #1
 8022a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022a8e:	4857      	ldr	r0, [pc, #348]	; (8022bec <ce303_tarif+0x520>)
 8022a90:	f7f0 fba0 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &tarif_buf[0], 13); // передаем команду
 8022a94:	220d      	movs	r2, #13
 8022a96:	4958      	ldr	r1, [pc, #352]	; (8022bf8 <ce303_tarif+0x52c>)
 8022a98:	4855      	ldr	r0, [pc, #340]	; (8022bf0 <ce303_tarif+0x524>)
 8022a9a:	f7f2 fe53 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8022a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022aa2:	f7ef f8e3 	bl	8011c6c <HAL_Delay>

	tarif_general_state = 0; // обнуляем переменные состояния прочтения мощщности перед их прочтением
 8022aa6:	2300      	movs	r3, #0
 8022aa8:	757b      	strb	r3, [r7, #21]
	tarif_1_state = 0;
 8022aaa:	2300      	movs	r3, #0
 8022aac:	753b      	strb	r3, [r7, #20]
	tarif_2_state = 0;
 8022aae:	2300      	movs	r3, #0
 8022ab0:	74fb      	strb	r3, [r7, #19]
	tarif_3_state = 0;
 8022ab2:	2300      	movs	r3, #0
 8022ab4:	74bb      	strb	r3, [r7, #18]
	tarif_4_state = 0;
 8022ab6:	2300      	movs	r3, #0
 8022ab8:	73fb      	strb	r3, [r7, #15]
	tarif_5_state = 0;
 8022aba:	2300      	movs	r3, #0
 8022abc:	73bb      	strb	r3, [r7, #14]

	for(uint16_t i=0; i<256; i++)
 8022abe:	2300      	movs	r3, #0
 8022ac0:	823b      	strh	r3, [r7, #16]
 8022ac2:	f002 bc5b 	b.w	802537c <ce303_tarif+0x2cb0>
	{
		if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==0) && (tarif_1_state==0) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8022ac6:	8a3b      	ldrh	r3, [r7, #16]
 8022ac8:	4a4c      	ldr	r2, [pc, #304]	; (8022bfc <ce303_tarif+0x530>)
 8022aca:	5cd3      	ldrb	r3, [r2, r3]
 8022acc:	2b28      	cmp	r3, #40	; 0x28
 8022ace:	f040 8511 	bne.w	80234f4 <ce303_tarif+0xe28>
 8022ad2:	7d7b      	ldrb	r3, [r7, #21]
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	f040 850d 	bne.w	80234f4 <ce303_tarif+0xe28>
 8022ada:	7d3b      	ldrb	r3, [r7, #20]
 8022adc:	2b00      	cmp	r3, #0
 8022ade:	f040 8509 	bne.w	80234f4 <ce303_tarif+0xe28>
 8022ae2:	7cfb      	ldrb	r3, [r7, #19]
 8022ae4:	2b00      	cmp	r3, #0
 8022ae6:	f040 8505 	bne.w	80234f4 <ce303_tarif+0xe28>
 8022aea:	7cbb      	ldrb	r3, [r7, #18]
 8022aec:	2b00      	cmp	r3, #0
 8022aee:	f040 8501 	bne.w	80234f4 <ce303_tarif+0xe28>
 8022af2:	7bfb      	ldrb	r3, [r7, #15]
 8022af4:	2b00      	cmp	r3, #0
 8022af6:	f040 84fd 	bne.w	80234f4 <ce303_tarif+0xe28>
 8022afa:	7bbb      	ldrb	r3, [r7, #14]
 8022afc:	2b00      	cmp	r3, #0
 8022afe:	f040 84f9 	bne.w	80234f4 <ce303_tarif+0xe28>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8022b02:	8a3b      	ldrh	r3, [r7, #16]
 8022b04:	3302      	adds	r3, #2
 8022b06:	4a3d      	ldr	r2, [pc, #244]	; (8022bfc <ce303_tarif+0x530>)
 8022b08:	5cd3      	ldrb	r3, [r2, r3]
 8022b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8022b0c:	f040 80ec 	bne.w	8022ce8 <ce303_tarif+0x61c>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8022b10:	8a3b      	ldrh	r3, [r7, #16]
 8022b12:	3301      	adds	r3, #1
 8022b14:	4a39      	ldr	r2, [pc, #228]	; (8022bfc <ce303_tarif+0x530>)
 8022b16:	5cd3      	ldrb	r3, [r2, r3]
 8022b18:	3b30      	subs	r3, #48	; 0x30
 8022b1a:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8022b1c:	8a3b      	ldrh	r3, [r7, #16]
 8022b1e:	3304      	adds	r3, #4
 8022b20:	4a36      	ldr	r2, [pc, #216]	; (8022bfc <ce303_tarif+0x530>)
 8022b22:	5cd3      	ldrb	r3, [r2, r3]
 8022b24:	2b29      	cmp	r3, #41	; 0x29
 8022b26:	d110      	bne.n	8022b4a <ce303_tarif+0x47e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8022b28:	8a3b      	ldrh	r3, [r7, #16]
 8022b2a:	3303      	adds	r3, #3
 8022b2c:	4a33      	ldr	r2, [pc, #204]	; (8022bfc <ce303_tarif+0x530>)
 8022b2e:	5cd3      	ldrb	r3, [r2, r3]
 8022b30:	3b30      	subs	r3, #48	; 0x30
 8022b32:	b29b      	uxth	r3, r3
 8022b34:	461a      	mov	r2, r3
 8022b36:	0092      	lsls	r2, r2, #2
 8022b38:	4413      	add	r3, r2
 8022b3a:	461a      	mov	r2, r3
 8022b3c:	0091      	lsls	r1, r2, #2
 8022b3e:	461a      	mov	r2, r3
 8022b40:	460b      	mov	r3, r1
 8022b42:	4413      	add	r3, r2
 8022b44:	009b      	lsls	r3, r3, #2
 8022b46:	82fb      	strh	r3, [r7, #22]
 8022b48:	e080      	b.n	8022c4c <ce303_tarif+0x580>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8022b4a:	8a3b      	ldrh	r3, [r7, #16]
 8022b4c:	3305      	adds	r3, #5
 8022b4e:	4a2b      	ldr	r2, [pc, #172]	; (8022bfc <ce303_tarif+0x530>)
 8022b50:	5cd3      	ldrb	r3, [r2, r3]
 8022b52:	2b29      	cmp	r3, #41	; 0x29
 8022b54:	d117      	bne.n	8022b86 <ce303_tarif+0x4ba>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8022b56:	8a3b      	ldrh	r3, [r7, #16]
 8022b58:	3303      	adds	r3, #3
 8022b5a:	4a28      	ldr	r2, [pc, #160]	; (8022bfc <ce303_tarif+0x530>)
 8022b5c:	5cd3      	ldrb	r3, [r2, r3]
 8022b5e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8022b62:	4613      	mov	r3, r2
 8022b64:	009b      	lsls	r3, r3, #2
 8022b66:	4413      	add	r3, r2
 8022b68:	005b      	lsls	r3, r3, #1
 8022b6a:	4619      	mov	r1, r3
 8022b6c:	8a3b      	ldrh	r3, [r7, #16]
 8022b6e:	3304      	adds	r3, #4
 8022b70:	4a22      	ldr	r2, [pc, #136]	; (8022bfc <ce303_tarif+0x530>)
 8022b72:	5cd3      	ldrb	r3, [r2, r3]
 8022b74:	3b30      	subs	r3, #48	; 0x30
 8022b76:	440b      	add	r3, r1
 8022b78:	b29b      	uxth	r3, r3
 8022b7a:	461a      	mov	r2, r3
 8022b7c:	0092      	lsls	r2, r2, #2
 8022b7e:	4413      	add	r3, r2
 8022b80:	005b      	lsls	r3, r3, #1
 8022b82:	82fb      	strh	r3, [r7, #22]
 8022b84:	e062      	b.n	8022c4c <ce303_tarif+0x580>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8022b86:	8a3b      	ldrh	r3, [r7, #16]
 8022b88:	3306      	adds	r3, #6
 8022b8a:	4a1c      	ldr	r2, [pc, #112]	; (8022bfc <ce303_tarif+0x530>)
 8022b8c:	5cd3      	ldrb	r3, [r2, r3]
 8022b8e:	2b29      	cmp	r3, #41	; 0x29
 8022b90:	d136      	bne.n	8022c00 <ce303_tarif+0x534>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8022b92:	8a3b      	ldrh	r3, [r7, #16]
 8022b94:	3303      	adds	r3, #3
 8022b96:	4a19      	ldr	r2, [pc, #100]	; (8022bfc <ce303_tarif+0x530>)
 8022b98:	5cd3      	ldrb	r3, [r2, r3]
 8022b9a:	3b30      	subs	r3, #48	; 0x30
 8022b9c:	b29b      	uxth	r3, r3
 8022b9e:	461a      	mov	r2, r3
 8022ba0:	0092      	lsls	r2, r2, #2
 8022ba2:	4413      	add	r3, r2
 8022ba4:	461a      	mov	r2, r3
 8022ba6:	0091      	lsls	r1, r2, #2
 8022ba8:	461a      	mov	r2, r3
 8022baa:	460b      	mov	r3, r1
 8022bac:	4413      	add	r3, r2
 8022bae:	009b      	lsls	r3, r3, #2
 8022bb0:	b29a      	uxth	r2, r3
 8022bb2:	8a3b      	ldrh	r3, [r7, #16]
 8022bb4:	3304      	adds	r3, #4
 8022bb6:	4911      	ldr	r1, [pc, #68]	; (8022bfc <ce303_tarif+0x530>)
 8022bb8:	5ccb      	ldrb	r3, [r1, r3]
 8022bba:	3b30      	subs	r3, #48	; 0x30
 8022bbc:	b29b      	uxth	r3, r3
 8022bbe:	4619      	mov	r1, r3
 8022bc0:	0089      	lsls	r1, r1, #2
 8022bc2:	440b      	add	r3, r1
 8022bc4:	005b      	lsls	r3, r3, #1
 8022bc6:	b29b      	uxth	r3, r3
 8022bc8:	4413      	add	r3, r2
 8022bca:	b29a      	uxth	r2, r3
 8022bcc:	8a3b      	ldrh	r3, [r7, #16]
 8022bce:	3305      	adds	r3, #5
 8022bd0:	490a      	ldr	r1, [pc, #40]	; (8022bfc <ce303_tarif+0x530>)
 8022bd2:	5ccb      	ldrb	r3, [r1, r3]
 8022bd4:	b29b      	uxth	r3, r3
 8022bd6:	4413      	add	r3, r2
 8022bd8:	b29b      	uxth	r3, r3
 8022bda:	3b30      	subs	r3, #48	; 0x30
 8022bdc:	82fb      	strh	r3, [r7, #22]
 8022bde:	e035      	b.n	8022c4c <ce303_tarif+0x580>
 8022be0:	20000010 	.word	0x20000010
 8022be4:	cccccccd 	.word	0xcccccccd
 8022be8:	2000085d 	.word	0x2000085d
 8022bec:	40021800 	.word	0x40021800
 8022bf0:	20009c70 	.word	0x20009c70
 8022bf4:	20000018 	.word	0x20000018
 8022bf8:	20000058 	.word	0x20000058
 8022bfc:	200098e4 	.word	0x200098e4
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8022c00:	8a3b      	ldrh	r3, [r7, #16]
 8022c02:	3303      	adds	r3, #3
 8022c04:	4ab0      	ldr	r2, [pc, #704]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022c06:	5cd3      	ldrb	r3, [r2, r3]
 8022c08:	3b30      	subs	r3, #48	; 0x30
 8022c0a:	b29b      	uxth	r3, r3
 8022c0c:	461a      	mov	r2, r3
 8022c0e:	0092      	lsls	r2, r2, #2
 8022c10:	4413      	add	r3, r2
 8022c12:	461a      	mov	r2, r3
 8022c14:	0091      	lsls	r1, r2, #2
 8022c16:	461a      	mov	r2, r3
 8022c18:	460b      	mov	r3, r1
 8022c1a:	4413      	add	r3, r2
 8022c1c:	009b      	lsls	r3, r3, #2
 8022c1e:	b29a      	uxth	r2, r3
 8022c20:	8a3b      	ldrh	r3, [r7, #16]
 8022c22:	3304      	adds	r3, #4
 8022c24:	49a8      	ldr	r1, [pc, #672]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022c26:	5ccb      	ldrb	r3, [r1, r3]
 8022c28:	3b30      	subs	r3, #48	; 0x30
 8022c2a:	b29b      	uxth	r3, r3
 8022c2c:	4619      	mov	r1, r3
 8022c2e:	0089      	lsls	r1, r1, #2
 8022c30:	440b      	add	r3, r1
 8022c32:	005b      	lsls	r3, r3, #1
 8022c34:	b29b      	uxth	r3, r3
 8022c36:	4413      	add	r3, r2
 8022c38:	b29a      	uxth	r2, r3
 8022c3a:	8a3b      	ldrh	r3, [r7, #16]
 8022c3c:	3305      	adds	r3, #5
 8022c3e:	49a2      	ldr	r1, [pc, #648]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022c40:	5ccb      	ldrb	r3, [r1, r3]
 8022c42:	b29b      	uxth	r3, r3
 8022c44:	4413      	add	r3, r2
 8022c46:	b29b      	uxth	r3, r3
 8022c48:	3b30      	subs	r3, #48	; 0x30
 8022c4a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8022c4c:	4b9f      	ldr	r3, [pc, #636]	; (8022ecc <ce303_tarif+0x800>)
 8022c4e:	681b      	ldr	r3, [r3, #0]
 8022c50:	f04f 31ff 	mov.w	r1, #4294967295
 8022c54:	4618      	mov	r0, r3
 8022c56:	f7f4 f823 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8022c5a:	68bb      	ldr	r3, [r7, #8]
 8022c5c:	0e1b      	lsrs	r3, r3, #24
 8022c5e:	b2db      	uxtb	r3, r3
 8022c60:	4619      	mov	r1, r3
 8022c62:	f242 0082 	movw	r0, #8322	; 0x2082
 8022c66:	f002 fbed 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8022c6a:	68bb      	ldr	r3, [r7, #8]
 8022c6c:	0c1b      	lsrs	r3, r3, #16
 8022c6e:	b2db      	uxtb	r3, r3
 8022c70:	4619      	mov	r1, r3
 8022c72:	f242 0083 	movw	r0, #8323	; 0x2083
 8022c76:	f002 fbe5 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8022c7a:	68bb      	ldr	r3, [r7, #8]
 8022c7c:	0a1b      	lsrs	r3, r3, #8
 8022c7e:	b2db      	uxtb	r3, r3
 8022c80:	4619      	mov	r1, r3
 8022c82:	f242 0084 	movw	r0, #8324	; 0x2084
 8022c86:	f002 fbdd 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8022c8a:	68bb      	ldr	r3, [r7, #8]
 8022c8c:	b2db      	uxtb	r3, r3
 8022c8e:	4619      	mov	r1, r3
 8022c90:	f242 0085 	movw	r0, #8325	; 0x2085
 8022c94:	f002 fbd6 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 8022c98:	8afb      	ldrh	r3, [r7, #22]
 8022c9a:	0a1b      	lsrs	r3, r3, #8
 8022c9c:	b29b      	uxth	r3, r3
 8022c9e:	b2db      	uxtb	r3, r3
 8022ca0:	4619      	mov	r1, r3
 8022ca2:	f242 0086 	movw	r0, #8326	; 0x2086
 8022ca6:	f002 fbcd 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 8022caa:	8afb      	ldrh	r3, [r7, #22]
 8022cac:	b2db      	uxtb	r3, r3
 8022cae:	4619      	mov	r1, r3
 8022cb0:	f242 0087 	movw	r0, #8327	; 0x2087
 8022cb4:	f002 fbc6 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8022cb8:	4b84      	ldr	r3, [pc, #528]	; (8022ecc <ce303_tarif+0x800>)
 8022cba:	681b      	ldr	r3, [r3, #0]
 8022cbc:	4618      	mov	r0, r3
 8022cbe:	f7f4 f83d 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8022cc2:	68bb      	ldr	r3, [r7, #8]
 8022cc4:	0c1b      	lsrs	r3, r3, #16
 8022cc6:	b29a      	uxth	r2, r3
 8022cc8:	4b81      	ldr	r3, [pc, #516]	; (8022ed0 <ce303_tarif+0x804>)
 8022cca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8022cce:	68bb      	ldr	r3, [r7, #8]
 8022cd0:	b29a      	uxth	r2, r3
 8022cd2:	4b7f      	ldr	r3, [pc, #508]	; (8022ed0 <ce303_tarif+0x804>)
 8022cd4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 8022cd8:	4a7d      	ldr	r2, [pc, #500]	; (8022ed0 <ce303_tarif+0x804>)
 8022cda:	8afb      	ldrh	r3, [r7, #22]
 8022cdc:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 8022ce0:	2301      	movs	r3, #1
 8022ce2:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8022ce4:	f002 bb42 	b.w	802536c <ce303_tarif+0x2ca0>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8022ce8:	8a3b      	ldrh	r3, [r7, #16]
 8022cea:	3303      	adds	r3, #3
 8022cec:	4a76      	ldr	r2, [pc, #472]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022cee:	5cd3      	ldrb	r3, [r2, r3]
 8022cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8022cf2:	f040 80ef 	bne.w	8022ed4 <ce303_tarif+0x808>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8022cf6:	8a3b      	ldrh	r3, [r7, #16]
 8022cf8:	3301      	adds	r3, #1
 8022cfa:	4a73      	ldr	r2, [pc, #460]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022cfc:	5cd3      	ldrb	r3, [r2, r3]
 8022cfe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8022d02:	4613      	mov	r3, r2
 8022d04:	009b      	lsls	r3, r3, #2
 8022d06:	4413      	add	r3, r2
 8022d08:	005b      	lsls	r3, r3, #1
 8022d0a:	4619      	mov	r1, r3
 8022d0c:	8a3b      	ldrh	r3, [r7, #16]
 8022d0e:	3302      	adds	r3, #2
 8022d10:	4a6d      	ldr	r2, [pc, #436]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022d12:	5cd3      	ldrb	r3, [r2, r3]
 8022d14:	3b30      	subs	r3, #48	; 0x30
 8022d16:	440b      	add	r3, r1
 8022d18:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8022d1a:	8a3b      	ldrh	r3, [r7, #16]
 8022d1c:	3305      	adds	r3, #5
 8022d1e:	4a6a      	ldr	r2, [pc, #424]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022d20:	5cd3      	ldrb	r3, [r2, r3]
 8022d22:	2b29      	cmp	r3, #41	; 0x29
 8022d24:	d110      	bne.n	8022d48 <ce303_tarif+0x67c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8022d26:	8a3b      	ldrh	r3, [r7, #16]
 8022d28:	3304      	adds	r3, #4
 8022d2a:	4a67      	ldr	r2, [pc, #412]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022d2c:	5cd3      	ldrb	r3, [r2, r3]
 8022d2e:	3b30      	subs	r3, #48	; 0x30
 8022d30:	b29b      	uxth	r3, r3
 8022d32:	461a      	mov	r2, r3
 8022d34:	0092      	lsls	r2, r2, #2
 8022d36:	4413      	add	r3, r2
 8022d38:	461a      	mov	r2, r3
 8022d3a:	0091      	lsls	r1, r2, #2
 8022d3c:	461a      	mov	r2, r3
 8022d3e:	460b      	mov	r3, r1
 8022d40:	4413      	add	r3, r2
 8022d42:	009b      	lsls	r3, r3, #2
 8022d44:	82fb      	strh	r3, [r7, #22]
 8022d46:	e070      	b.n	8022e2a <ce303_tarif+0x75e>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8022d48:	8a3b      	ldrh	r3, [r7, #16]
 8022d4a:	3306      	adds	r3, #6
 8022d4c:	4a5e      	ldr	r2, [pc, #376]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022d4e:	5cd3      	ldrb	r3, [r2, r3]
 8022d50:	2b29      	cmp	r3, #41	; 0x29
 8022d52:	d117      	bne.n	8022d84 <ce303_tarif+0x6b8>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8022d54:	8a3b      	ldrh	r3, [r7, #16]
 8022d56:	3304      	adds	r3, #4
 8022d58:	4a5b      	ldr	r2, [pc, #364]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022d5a:	5cd3      	ldrb	r3, [r2, r3]
 8022d5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8022d60:	4613      	mov	r3, r2
 8022d62:	009b      	lsls	r3, r3, #2
 8022d64:	4413      	add	r3, r2
 8022d66:	005b      	lsls	r3, r3, #1
 8022d68:	4619      	mov	r1, r3
 8022d6a:	8a3b      	ldrh	r3, [r7, #16]
 8022d6c:	3305      	adds	r3, #5
 8022d6e:	4a56      	ldr	r2, [pc, #344]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022d70:	5cd3      	ldrb	r3, [r2, r3]
 8022d72:	3b30      	subs	r3, #48	; 0x30
 8022d74:	440b      	add	r3, r1
 8022d76:	b29b      	uxth	r3, r3
 8022d78:	461a      	mov	r2, r3
 8022d7a:	0092      	lsls	r2, r2, #2
 8022d7c:	4413      	add	r3, r2
 8022d7e:	005b      	lsls	r3, r3, #1
 8022d80:	82fb      	strh	r3, [r7, #22]
 8022d82:	e052      	b.n	8022e2a <ce303_tarif+0x75e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8022d84:	8a3b      	ldrh	r3, [r7, #16]
 8022d86:	3307      	adds	r3, #7
 8022d88:	4a4f      	ldr	r2, [pc, #316]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022d8a:	5cd3      	ldrb	r3, [r2, r3]
 8022d8c:	2b29      	cmp	r3, #41	; 0x29
 8022d8e:	d126      	bne.n	8022dde <ce303_tarif+0x712>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8022d90:	8a3b      	ldrh	r3, [r7, #16]
 8022d92:	3304      	adds	r3, #4
 8022d94:	4a4c      	ldr	r2, [pc, #304]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022d96:	5cd3      	ldrb	r3, [r2, r3]
 8022d98:	3b30      	subs	r3, #48	; 0x30
 8022d9a:	b29b      	uxth	r3, r3
 8022d9c:	461a      	mov	r2, r3
 8022d9e:	0092      	lsls	r2, r2, #2
 8022da0:	4413      	add	r3, r2
 8022da2:	461a      	mov	r2, r3
 8022da4:	0091      	lsls	r1, r2, #2
 8022da6:	461a      	mov	r2, r3
 8022da8:	460b      	mov	r3, r1
 8022daa:	4413      	add	r3, r2
 8022dac:	009b      	lsls	r3, r3, #2
 8022dae:	b29a      	uxth	r2, r3
 8022db0:	8a3b      	ldrh	r3, [r7, #16]
 8022db2:	3305      	adds	r3, #5
 8022db4:	4944      	ldr	r1, [pc, #272]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022db6:	5ccb      	ldrb	r3, [r1, r3]
 8022db8:	3b30      	subs	r3, #48	; 0x30
 8022dba:	b29b      	uxth	r3, r3
 8022dbc:	4619      	mov	r1, r3
 8022dbe:	0089      	lsls	r1, r1, #2
 8022dc0:	440b      	add	r3, r1
 8022dc2:	005b      	lsls	r3, r3, #1
 8022dc4:	b29b      	uxth	r3, r3
 8022dc6:	4413      	add	r3, r2
 8022dc8:	b29a      	uxth	r2, r3
 8022dca:	8a3b      	ldrh	r3, [r7, #16]
 8022dcc:	3306      	adds	r3, #6
 8022dce:	493e      	ldr	r1, [pc, #248]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022dd0:	5ccb      	ldrb	r3, [r1, r3]
 8022dd2:	b29b      	uxth	r3, r3
 8022dd4:	4413      	add	r3, r2
 8022dd6:	b29b      	uxth	r3, r3
 8022dd8:	3b30      	subs	r3, #48	; 0x30
 8022dda:	82fb      	strh	r3, [r7, #22]
 8022ddc:	e025      	b.n	8022e2a <ce303_tarif+0x75e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8022dde:	8a3b      	ldrh	r3, [r7, #16]
 8022de0:	3304      	adds	r3, #4
 8022de2:	4a39      	ldr	r2, [pc, #228]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022de4:	5cd3      	ldrb	r3, [r2, r3]
 8022de6:	3b30      	subs	r3, #48	; 0x30
 8022de8:	b29b      	uxth	r3, r3
 8022dea:	461a      	mov	r2, r3
 8022dec:	0092      	lsls	r2, r2, #2
 8022dee:	4413      	add	r3, r2
 8022df0:	461a      	mov	r2, r3
 8022df2:	0091      	lsls	r1, r2, #2
 8022df4:	461a      	mov	r2, r3
 8022df6:	460b      	mov	r3, r1
 8022df8:	4413      	add	r3, r2
 8022dfa:	009b      	lsls	r3, r3, #2
 8022dfc:	b29a      	uxth	r2, r3
 8022dfe:	8a3b      	ldrh	r3, [r7, #16]
 8022e00:	3305      	adds	r3, #5
 8022e02:	4931      	ldr	r1, [pc, #196]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022e04:	5ccb      	ldrb	r3, [r1, r3]
 8022e06:	3b30      	subs	r3, #48	; 0x30
 8022e08:	b29b      	uxth	r3, r3
 8022e0a:	4619      	mov	r1, r3
 8022e0c:	0089      	lsls	r1, r1, #2
 8022e0e:	440b      	add	r3, r1
 8022e10:	005b      	lsls	r3, r3, #1
 8022e12:	b29b      	uxth	r3, r3
 8022e14:	4413      	add	r3, r2
 8022e16:	b29a      	uxth	r2, r3
 8022e18:	8a3b      	ldrh	r3, [r7, #16]
 8022e1a:	3306      	adds	r3, #6
 8022e1c:	492a      	ldr	r1, [pc, #168]	; (8022ec8 <ce303_tarif+0x7fc>)
 8022e1e:	5ccb      	ldrb	r3, [r1, r3]
 8022e20:	b29b      	uxth	r3, r3
 8022e22:	4413      	add	r3, r2
 8022e24:	b29b      	uxth	r3, r3
 8022e26:	3b30      	subs	r3, #48	; 0x30
 8022e28:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8022e2a:	4b28      	ldr	r3, [pc, #160]	; (8022ecc <ce303_tarif+0x800>)
 8022e2c:	681b      	ldr	r3, [r3, #0]
 8022e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8022e32:	4618      	mov	r0, r3
 8022e34:	f7f3 ff34 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8022e38:	68bb      	ldr	r3, [r7, #8]
 8022e3a:	0e1b      	lsrs	r3, r3, #24
 8022e3c:	b2db      	uxtb	r3, r3
 8022e3e:	4619      	mov	r1, r3
 8022e40:	f242 0082 	movw	r0, #8322	; 0x2082
 8022e44:	f002 fafe 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8022e48:	68bb      	ldr	r3, [r7, #8]
 8022e4a:	0c1b      	lsrs	r3, r3, #16
 8022e4c:	b2db      	uxtb	r3, r3
 8022e4e:	4619      	mov	r1, r3
 8022e50:	f242 0083 	movw	r0, #8323	; 0x2083
 8022e54:	f002 faf6 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8022e58:	68bb      	ldr	r3, [r7, #8]
 8022e5a:	0a1b      	lsrs	r3, r3, #8
 8022e5c:	b2db      	uxtb	r3, r3
 8022e5e:	4619      	mov	r1, r3
 8022e60:	f242 0084 	movw	r0, #8324	; 0x2084
 8022e64:	f002 faee 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8022e68:	68bb      	ldr	r3, [r7, #8]
 8022e6a:	b2db      	uxtb	r3, r3
 8022e6c:	4619      	mov	r1, r3
 8022e6e:	f242 0085 	movw	r0, #8325	; 0x2085
 8022e72:	f002 fae7 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 8022e76:	8afb      	ldrh	r3, [r7, #22]
 8022e78:	0a1b      	lsrs	r3, r3, #8
 8022e7a:	b29b      	uxth	r3, r3
 8022e7c:	b2db      	uxtb	r3, r3
 8022e7e:	4619      	mov	r1, r3
 8022e80:	f242 0086 	movw	r0, #8326	; 0x2086
 8022e84:	f002 fade 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 8022e88:	8afb      	ldrh	r3, [r7, #22]
 8022e8a:	b2db      	uxtb	r3, r3
 8022e8c:	4619      	mov	r1, r3
 8022e8e:	f242 0087 	movw	r0, #8327	; 0x2087
 8022e92:	f002 fad7 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8022e96:	4b0d      	ldr	r3, [pc, #52]	; (8022ecc <ce303_tarif+0x800>)
 8022e98:	681b      	ldr	r3, [r3, #0]
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	f7f3 ff4e 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8022ea0:	68bb      	ldr	r3, [r7, #8]
 8022ea2:	0c1b      	lsrs	r3, r3, #16
 8022ea4:	b29a      	uxth	r2, r3
 8022ea6:	4b0a      	ldr	r3, [pc, #40]	; (8022ed0 <ce303_tarif+0x804>)
 8022ea8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8022eac:	68bb      	ldr	r3, [r7, #8]
 8022eae:	b29a      	uxth	r2, r3
 8022eb0:	4b07      	ldr	r3, [pc, #28]	; (8022ed0 <ce303_tarif+0x804>)
 8022eb2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 8022eb6:	4a06      	ldr	r2, [pc, #24]	; (8022ed0 <ce303_tarif+0x804>)
 8022eb8:	8afb      	ldrh	r3, [r7, #22]
 8022eba:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 8022ebe:	2301      	movs	r3, #1
 8022ec0:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8022ec2:	f002 ba53 	b.w	802536c <ce303_tarif+0x2ca0>
 8022ec6:	bf00      	nop
 8022ec8:	200098e4 	.word	0x200098e4
 8022ecc:	20009a6c 	.word	0x20009a6c
 8022ed0:	2000a10c 	.word	0x2000a10c

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 8022ed4:	8a3b      	ldrh	r3, [r7, #16]
 8022ed6:	3304      	adds	r3, #4
 8022ed8:	4aaa      	ldr	r2, [pc, #680]	; (8023184 <ce303_tarif+0xab8>)
 8022eda:	5cd3      	ldrb	r3, [r2, r3]
 8022edc:	2b2e      	cmp	r3, #46	; 0x2e
 8022ede:	f040 80f0 	bne.w	80230c2 <ce303_tarif+0x9f6>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8022ee2:	8a3b      	ldrh	r3, [r7, #16]
 8022ee4:	3301      	adds	r3, #1
 8022ee6:	4aa7      	ldr	r2, [pc, #668]	; (8023184 <ce303_tarif+0xab8>)
 8022ee8:	5cd3      	ldrb	r3, [r2, r3]
 8022eea:	3b30      	subs	r3, #48	; 0x30
 8022eec:	2264      	movs	r2, #100	; 0x64
 8022eee:	fb02 f103 	mul.w	r1, r2, r3
 8022ef2:	8a3b      	ldrh	r3, [r7, #16]
 8022ef4:	3302      	adds	r3, #2
 8022ef6:	4aa3      	ldr	r2, [pc, #652]	; (8023184 <ce303_tarif+0xab8>)
 8022ef8:	5cd3      	ldrb	r3, [r2, r3]
 8022efa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8022efe:	4613      	mov	r3, r2
 8022f00:	009b      	lsls	r3, r3, #2
 8022f02:	4413      	add	r3, r2
 8022f04:	005b      	lsls	r3, r3, #1
 8022f06:	18ca      	adds	r2, r1, r3
 8022f08:	8a3b      	ldrh	r3, [r7, #16]
 8022f0a:	3303      	adds	r3, #3
 8022f0c:	499d      	ldr	r1, [pc, #628]	; (8023184 <ce303_tarif+0xab8>)
 8022f0e:	5ccb      	ldrb	r3, [r1, r3]
 8022f10:	3b30      	subs	r3, #48	; 0x30
 8022f12:	4413      	add	r3, r2
 8022f14:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8022f16:	8a3b      	ldrh	r3, [r7, #16]
 8022f18:	3306      	adds	r3, #6
 8022f1a:	4a9a      	ldr	r2, [pc, #616]	; (8023184 <ce303_tarif+0xab8>)
 8022f1c:	5cd3      	ldrb	r3, [r2, r3]
 8022f1e:	2b29      	cmp	r3, #41	; 0x29
 8022f20:	d110      	bne.n	8022f44 <ce303_tarif+0x878>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8022f22:	8a3b      	ldrh	r3, [r7, #16]
 8022f24:	3305      	adds	r3, #5
 8022f26:	4a97      	ldr	r2, [pc, #604]	; (8023184 <ce303_tarif+0xab8>)
 8022f28:	5cd3      	ldrb	r3, [r2, r3]
 8022f2a:	3b30      	subs	r3, #48	; 0x30
 8022f2c:	b29b      	uxth	r3, r3
 8022f2e:	461a      	mov	r2, r3
 8022f30:	0092      	lsls	r2, r2, #2
 8022f32:	4413      	add	r3, r2
 8022f34:	461a      	mov	r2, r3
 8022f36:	0091      	lsls	r1, r2, #2
 8022f38:	461a      	mov	r2, r3
 8022f3a:	460b      	mov	r3, r1
 8022f3c:	4413      	add	r3, r2
 8022f3e:	009b      	lsls	r3, r3, #2
 8022f40:	82fb      	strh	r3, [r7, #22]
 8022f42:	e070      	b.n	8023026 <ce303_tarif+0x95a>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8022f44:	8a3b      	ldrh	r3, [r7, #16]
 8022f46:	3307      	adds	r3, #7
 8022f48:	4a8e      	ldr	r2, [pc, #568]	; (8023184 <ce303_tarif+0xab8>)
 8022f4a:	5cd3      	ldrb	r3, [r2, r3]
 8022f4c:	2b29      	cmp	r3, #41	; 0x29
 8022f4e:	d117      	bne.n	8022f80 <ce303_tarif+0x8b4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8022f50:	8a3b      	ldrh	r3, [r7, #16]
 8022f52:	3305      	adds	r3, #5
 8022f54:	4a8b      	ldr	r2, [pc, #556]	; (8023184 <ce303_tarif+0xab8>)
 8022f56:	5cd3      	ldrb	r3, [r2, r3]
 8022f58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8022f5c:	4613      	mov	r3, r2
 8022f5e:	009b      	lsls	r3, r3, #2
 8022f60:	4413      	add	r3, r2
 8022f62:	005b      	lsls	r3, r3, #1
 8022f64:	4619      	mov	r1, r3
 8022f66:	8a3b      	ldrh	r3, [r7, #16]
 8022f68:	3306      	adds	r3, #6
 8022f6a:	4a86      	ldr	r2, [pc, #536]	; (8023184 <ce303_tarif+0xab8>)
 8022f6c:	5cd3      	ldrb	r3, [r2, r3]
 8022f6e:	3b30      	subs	r3, #48	; 0x30
 8022f70:	440b      	add	r3, r1
 8022f72:	b29b      	uxth	r3, r3
 8022f74:	461a      	mov	r2, r3
 8022f76:	0092      	lsls	r2, r2, #2
 8022f78:	4413      	add	r3, r2
 8022f7a:	005b      	lsls	r3, r3, #1
 8022f7c:	82fb      	strh	r3, [r7, #22]
 8022f7e:	e052      	b.n	8023026 <ce303_tarif+0x95a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8022f80:	8a3b      	ldrh	r3, [r7, #16]
 8022f82:	3308      	adds	r3, #8
 8022f84:	4a7f      	ldr	r2, [pc, #508]	; (8023184 <ce303_tarif+0xab8>)
 8022f86:	5cd3      	ldrb	r3, [r2, r3]
 8022f88:	2b29      	cmp	r3, #41	; 0x29
 8022f8a:	d126      	bne.n	8022fda <ce303_tarif+0x90e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8022f8c:	8a3b      	ldrh	r3, [r7, #16]
 8022f8e:	3305      	adds	r3, #5
 8022f90:	4a7c      	ldr	r2, [pc, #496]	; (8023184 <ce303_tarif+0xab8>)
 8022f92:	5cd3      	ldrb	r3, [r2, r3]
 8022f94:	3b30      	subs	r3, #48	; 0x30
 8022f96:	b29b      	uxth	r3, r3
 8022f98:	461a      	mov	r2, r3
 8022f9a:	0092      	lsls	r2, r2, #2
 8022f9c:	4413      	add	r3, r2
 8022f9e:	461a      	mov	r2, r3
 8022fa0:	0091      	lsls	r1, r2, #2
 8022fa2:	461a      	mov	r2, r3
 8022fa4:	460b      	mov	r3, r1
 8022fa6:	4413      	add	r3, r2
 8022fa8:	009b      	lsls	r3, r3, #2
 8022faa:	b29a      	uxth	r2, r3
 8022fac:	8a3b      	ldrh	r3, [r7, #16]
 8022fae:	3306      	adds	r3, #6
 8022fb0:	4974      	ldr	r1, [pc, #464]	; (8023184 <ce303_tarif+0xab8>)
 8022fb2:	5ccb      	ldrb	r3, [r1, r3]
 8022fb4:	3b30      	subs	r3, #48	; 0x30
 8022fb6:	b29b      	uxth	r3, r3
 8022fb8:	4619      	mov	r1, r3
 8022fba:	0089      	lsls	r1, r1, #2
 8022fbc:	440b      	add	r3, r1
 8022fbe:	005b      	lsls	r3, r3, #1
 8022fc0:	b29b      	uxth	r3, r3
 8022fc2:	4413      	add	r3, r2
 8022fc4:	b29a      	uxth	r2, r3
 8022fc6:	8a3b      	ldrh	r3, [r7, #16]
 8022fc8:	3307      	adds	r3, #7
 8022fca:	496e      	ldr	r1, [pc, #440]	; (8023184 <ce303_tarif+0xab8>)
 8022fcc:	5ccb      	ldrb	r3, [r1, r3]
 8022fce:	b29b      	uxth	r3, r3
 8022fd0:	4413      	add	r3, r2
 8022fd2:	b29b      	uxth	r3, r3
 8022fd4:	3b30      	subs	r3, #48	; 0x30
 8022fd6:	82fb      	strh	r3, [r7, #22]
 8022fd8:	e025      	b.n	8023026 <ce303_tarif+0x95a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8022fda:	8a3b      	ldrh	r3, [r7, #16]
 8022fdc:	3305      	adds	r3, #5
 8022fde:	4a69      	ldr	r2, [pc, #420]	; (8023184 <ce303_tarif+0xab8>)
 8022fe0:	5cd3      	ldrb	r3, [r2, r3]
 8022fe2:	3b30      	subs	r3, #48	; 0x30
 8022fe4:	b29b      	uxth	r3, r3
 8022fe6:	461a      	mov	r2, r3
 8022fe8:	0092      	lsls	r2, r2, #2
 8022fea:	4413      	add	r3, r2
 8022fec:	461a      	mov	r2, r3
 8022fee:	0091      	lsls	r1, r2, #2
 8022ff0:	461a      	mov	r2, r3
 8022ff2:	460b      	mov	r3, r1
 8022ff4:	4413      	add	r3, r2
 8022ff6:	009b      	lsls	r3, r3, #2
 8022ff8:	b29a      	uxth	r2, r3
 8022ffa:	8a3b      	ldrh	r3, [r7, #16]
 8022ffc:	3306      	adds	r3, #6
 8022ffe:	4961      	ldr	r1, [pc, #388]	; (8023184 <ce303_tarif+0xab8>)
 8023000:	5ccb      	ldrb	r3, [r1, r3]
 8023002:	3b30      	subs	r3, #48	; 0x30
 8023004:	b29b      	uxth	r3, r3
 8023006:	4619      	mov	r1, r3
 8023008:	0089      	lsls	r1, r1, #2
 802300a:	440b      	add	r3, r1
 802300c:	005b      	lsls	r3, r3, #1
 802300e:	b29b      	uxth	r3, r3
 8023010:	4413      	add	r3, r2
 8023012:	b29a      	uxth	r2, r3
 8023014:	8a3b      	ldrh	r3, [r7, #16]
 8023016:	3307      	adds	r3, #7
 8023018:	495a      	ldr	r1, [pc, #360]	; (8023184 <ce303_tarif+0xab8>)
 802301a:	5ccb      	ldrb	r3, [r1, r3]
 802301c:	b29b      	uxth	r3, r3
 802301e:	4413      	add	r3, r2
 8023020:	b29b      	uxth	r3, r3
 8023022:	3b30      	subs	r3, #48	; 0x30
 8023024:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023026:	4b58      	ldr	r3, [pc, #352]	; (8023188 <ce303_tarif+0xabc>)
 8023028:	681b      	ldr	r3, [r3, #0]
 802302a:	f04f 31ff 	mov.w	r1, #4294967295
 802302e:	4618      	mov	r0, r3
 8023030:	f7f3 fe36 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8023034:	68bb      	ldr	r3, [r7, #8]
 8023036:	0e1b      	lsrs	r3, r3, #24
 8023038:	b2db      	uxtb	r3, r3
 802303a:	4619      	mov	r1, r3
 802303c:	f242 0082 	movw	r0, #8322	; 0x2082
 8023040:	f002 fa00 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8023044:	68bb      	ldr	r3, [r7, #8]
 8023046:	0c1b      	lsrs	r3, r3, #16
 8023048:	b2db      	uxtb	r3, r3
 802304a:	4619      	mov	r1, r3
 802304c:	f242 0083 	movw	r0, #8323	; 0x2083
 8023050:	f002 f9f8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8023054:	68bb      	ldr	r3, [r7, #8]
 8023056:	0a1b      	lsrs	r3, r3, #8
 8023058:	b2db      	uxtb	r3, r3
 802305a:	4619      	mov	r1, r3
 802305c:	f242 0084 	movw	r0, #8324	; 0x2084
 8023060:	f002 f9f0 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8023064:	68bb      	ldr	r3, [r7, #8]
 8023066:	b2db      	uxtb	r3, r3
 8023068:	4619      	mov	r1, r3
 802306a:	f242 0085 	movw	r0, #8325	; 0x2085
 802306e:	f002 f9e9 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 8023072:	8afb      	ldrh	r3, [r7, #22]
 8023074:	0a1b      	lsrs	r3, r3, #8
 8023076:	b29b      	uxth	r3, r3
 8023078:	b2db      	uxtb	r3, r3
 802307a:	4619      	mov	r1, r3
 802307c:	f242 0086 	movw	r0, #8326	; 0x2086
 8023080:	f002 f9e0 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 8023084:	8afb      	ldrh	r3, [r7, #22]
 8023086:	b2db      	uxtb	r3, r3
 8023088:	4619      	mov	r1, r3
 802308a:	f242 0087 	movw	r0, #8327	; 0x2087
 802308e:	f002 f9d9 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023092:	4b3d      	ldr	r3, [pc, #244]	; (8023188 <ce303_tarif+0xabc>)
 8023094:	681b      	ldr	r3, [r3, #0]
 8023096:	4618      	mov	r0, r3
 8023098:	f7f3 fe50 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 802309c:	68bb      	ldr	r3, [r7, #8]
 802309e:	0c1b      	lsrs	r3, r3, #16
 80230a0:	b29a      	uxth	r2, r3
 80230a2:	4b3a      	ldr	r3, [pc, #232]	; (802318c <ce303_tarif+0xac0>)
 80230a4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 80230a8:	68bb      	ldr	r3, [r7, #8]
 80230aa:	b29a      	uxth	r2, r3
 80230ac:	4b37      	ldr	r3, [pc, #220]	; (802318c <ce303_tarif+0xac0>)
 80230ae:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 80230b2:	4a36      	ldr	r2, [pc, #216]	; (802318c <ce303_tarif+0xac0>)
 80230b4:	8afb      	ldrh	r3, [r7, #22]
 80230b6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 80230ba:	2301      	movs	r3, #1
 80230bc:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80230be:	f002 b955 	b.w	802536c <ce303_tarif+0x2ca0>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 80230c2:	8a3b      	ldrh	r3, [r7, #16]
 80230c4:	3305      	adds	r3, #5
 80230c6:	4a2f      	ldr	r2, [pc, #188]	; (8023184 <ce303_tarif+0xab8>)
 80230c8:	5cd3      	ldrb	r3, [r2, r3]
 80230ca:	2b2e      	cmp	r3, #46	; 0x2e
 80230cc:	f040 8101 	bne.w	80232d2 <ce303_tarif+0xc06>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 80230d0:	8a3b      	ldrh	r3, [r7, #16]
 80230d2:	3301      	adds	r3, #1
 80230d4:	4a2b      	ldr	r2, [pc, #172]	; (8023184 <ce303_tarif+0xab8>)
 80230d6:	5cd3      	ldrb	r3, [r2, r3]
 80230d8:	3b30      	subs	r3, #48	; 0x30
 80230da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80230de:	fb02 f203 	mul.w	r2, r2, r3
 80230e2:	8a3b      	ldrh	r3, [r7, #16]
 80230e4:	3302      	adds	r3, #2
 80230e6:	4927      	ldr	r1, [pc, #156]	; (8023184 <ce303_tarif+0xab8>)
 80230e8:	5ccb      	ldrb	r3, [r1, r3]
 80230ea:	3b30      	subs	r3, #48	; 0x30
 80230ec:	2164      	movs	r1, #100	; 0x64
 80230ee:	fb01 f303 	mul.w	r3, r1, r3
 80230f2:	18d1      	adds	r1, r2, r3
 80230f4:	8a3b      	ldrh	r3, [r7, #16]
 80230f6:	3303      	adds	r3, #3
 80230f8:	4a22      	ldr	r2, [pc, #136]	; (8023184 <ce303_tarif+0xab8>)
 80230fa:	5cd3      	ldrb	r3, [r2, r3]
 80230fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023100:	4613      	mov	r3, r2
 8023102:	009b      	lsls	r3, r3, #2
 8023104:	4413      	add	r3, r2
 8023106:	005b      	lsls	r3, r3, #1
 8023108:	18ca      	adds	r2, r1, r3
 802310a:	8a3b      	ldrh	r3, [r7, #16]
 802310c:	3304      	adds	r3, #4
 802310e:	491d      	ldr	r1, [pc, #116]	; (8023184 <ce303_tarif+0xab8>)
 8023110:	5ccb      	ldrb	r3, [r1, r3]
 8023112:	3b30      	subs	r3, #48	; 0x30
 8023114:	4413      	add	r3, r2
 8023116:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 8023118:	8a3b      	ldrh	r3, [r7, #16]
 802311a:	3307      	adds	r3, #7
 802311c:	4a19      	ldr	r2, [pc, #100]	; (8023184 <ce303_tarif+0xab8>)
 802311e:	5cd3      	ldrb	r3, [r2, r3]
 8023120:	2b29      	cmp	r3, #41	; 0x29
 8023122:	d110      	bne.n	8023146 <ce303_tarif+0xa7a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8023124:	8a3b      	ldrh	r3, [r7, #16]
 8023126:	3306      	adds	r3, #6
 8023128:	4a16      	ldr	r2, [pc, #88]	; (8023184 <ce303_tarif+0xab8>)
 802312a:	5cd3      	ldrb	r3, [r2, r3]
 802312c:	3b30      	subs	r3, #48	; 0x30
 802312e:	b29b      	uxth	r3, r3
 8023130:	461a      	mov	r2, r3
 8023132:	0092      	lsls	r2, r2, #2
 8023134:	4413      	add	r3, r2
 8023136:	461a      	mov	r2, r3
 8023138:	0091      	lsls	r1, r2, #2
 802313a:	461a      	mov	r2, r3
 802313c:	460b      	mov	r3, r1
 802313e:	4413      	add	r3, r2
 8023140:	009b      	lsls	r3, r3, #2
 8023142:	82fb      	strh	r3, [r7, #22]
 8023144:	e077      	b.n	8023236 <ce303_tarif+0xb6a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 8023146:	8a3b      	ldrh	r3, [r7, #16]
 8023148:	3308      	adds	r3, #8
 802314a:	4a0e      	ldr	r2, [pc, #56]	; (8023184 <ce303_tarif+0xab8>)
 802314c:	5cd3      	ldrb	r3, [r2, r3]
 802314e:	2b29      	cmp	r3, #41	; 0x29
 8023150:	d11e      	bne.n	8023190 <ce303_tarif+0xac4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8023152:	8a3b      	ldrh	r3, [r7, #16]
 8023154:	3306      	adds	r3, #6
 8023156:	4a0b      	ldr	r2, [pc, #44]	; (8023184 <ce303_tarif+0xab8>)
 8023158:	5cd3      	ldrb	r3, [r2, r3]
 802315a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802315e:	4613      	mov	r3, r2
 8023160:	009b      	lsls	r3, r3, #2
 8023162:	4413      	add	r3, r2
 8023164:	005b      	lsls	r3, r3, #1
 8023166:	4619      	mov	r1, r3
 8023168:	8a3b      	ldrh	r3, [r7, #16]
 802316a:	3307      	adds	r3, #7
 802316c:	4a05      	ldr	r2, [pc, #20]	; (8023184 <ce303_tarif+0xab8>)
 802316e:	5cd3      	ldrb	r3, [r2, r3]
 8023170:	3b30      	subs	r3, #48	; 0x30
 8023172:	440b      	add	r3, r1
 8023174:	b29b      	uxth	r3, r3
 8023176:	461a      	mov	r2, r3
 8023178:	0092      	lsls	r2, r2, #2
 802317a:	4413      	add	r3, r2
 802317c:	005b      	lsls	r3, r3, #1
 802317e:	82fb      	strh	r3, [r7, #22]
 8023180:	e059      	b.n	8023236 <ce303_tarif+0xb6a>
 8023182:	bf00      	nop
 8023184:	200098e4 	.word	0x200098e4
 8023188:	20009a6c 	.word	0x20009a6c
 802318c:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8023190:	8a3b      	ldrh	r3, [r7, #16]
 8023192:	3309      	adds	r3, #9
 8023194:	4a9a      	ldr	r2, [pc, #616]	; (8023400 <ce303_tarif+0xd34>)
 8023196:	5cd3      	ldrb	r3, [r2, r3]
 8023198:	2b29      	cmp	r3, #41	; 0x29
 802319a:	d126      	bne.n	80231ea <ce303_tarif+0xb1e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 802319c:	8a3b      	ldrh	r3, [r7, #16]
 802319e:	3306      	adds	r3, #6
 80231a0:	4a97      	ldr	r2, [pc, #604]	; (8023400 <ce303_tarif+0xd34>)
 80231a2:	5cd3      	ldrb	r3, [r2, r3]
 80231a4:	3b30      	subs	r3, #48	; 0x30
 80231a6:	b29b      	uxth	r3, r3
 80231a8:	461a      	mov	r2, r3
 80231aa:	0092      	lsls	r2, r2, #2
 80231ac:	4413      	add	r3, r2
 80231ae:	461a      	mov	r2, r3
 80231b0:	0091      	lsls	r1, r2, #2
 80231b2:	461a      	mov	r2, r3
 80231b4:	460b      	mov	r3, r1
 80231b6:	4413      	add	r3, r2
 80231b8:	009b      	lsls	r3, r3, #2
 80231ba:	b29a      	uxth	r2, r3
 80231bc:	8a3b      	ldrh	r3, [r7, #16]
 80231be:	3307      	adds	r3, #7
 80231c0:	498f      	ldr	r1, [pc, #572]	; (8023400 <ce303_tarif+0xd34>)
 80231c2:	5ccb      	ldrb	r3, [r1, r3]
 80231c4:	3b30      	subs	r3, #48	; 0x30
 80231c6:	b29b      	uxth	r3, r3
 80231c8:	4619      	mov	r1, r3
 80231ca:	0089      	lsls	r1, r1, #2
 80231cc:	440b      	add	r3, r1
 80231ce:	005b      	lsls	r3, r3, #1
 80231d0:	b29b      	uxth	r3, r3
 80231d2:	4413      	add	r3, r2
 80231d4:	b29a      	uxth	r2, r3
 80231d6:	8a3b      	ldrh	r3, [r7, #16]
 80231d8:	3308      	adds	r3, #8
 80231da:	4989      	ldr	r1, [pc, #548]	; (8023400 <ce303_tarif+0xd34>)
 80231dc:	5ccb      	ldrb	r3, [r1, r3]
 80231de:	b29b      	uxth	r3, r3
 80231e0:	4413      	add	r3, r2
 80231e2:	b29b      	uxth	r3, r3
 80231e4:	3b30      	subs	r3, #48	; 0x30
 80231e6:	82fb      	strh	r3, [r7, #22]
 80231e8:	e025      	b.n	8023236 <ce303_tarif+0xb6a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 80231ea:	8a3b      	ldrh	r3, [r7, #16]
 80231ec:	3306      	adds	r3, #6
 80231ee:	4a84      	ldr	r2, [pc, #528]	; (8023400 <ce303_tarif+0xd34>)
 80231f0:	5cd3      	ldrb	r3, [r2, r3]
 80231f2:	3b30      	subs	r3, #48	; 0x30
 80231f4:	b29b      	uxth	r3, r3
 80231f6:	461a      	mov	r2, r3
 80231f8:	0092      	lsls	r2, r2, #2
 80231fa:	4413      	add	r3, r2
 80231fc:	461a      	mov	r2, r3
 80231fe:	0091      	lsls	r1, r2, #2
 8023200:	461a      	mov	r2, r3
 8023202:	460b      	mov	r3, r1
 8023204:	4413      	add	r3, r2
 8023206:	009b      	lsls	r3, r3, #2
 8023208:	b29a      	uxth	r2, r3
 802320a:	8a3b      	ldrh	r3, [r7, #16]
 802320c:	3307      	adds	r3, #7
 802320e:	497c      	ldr	r1, [pc, #496]	; (8023400 <ce303_tarif+0xd34>)
 8023210:	5ccb      	ldrb	r3, [r1, r3]
 8023212:	3b30      	subs	r3, #48	; 0x30
 8023214:	b29b      	uxth	r3, r3
 8023216:	4619      	mov	r1, r3
 8023218:	0089      	lsls	r1, r1, #2
 802321a:	440b      	add	r3, r1
 802321c:	005b      	lsls	r3, r3, #1
 802321e:	b29b      	uxth	r3, r3
 8023220:	4413      	add	r3, r2
 8023222:	b29a      	uxth	r2, r3
 8023224:	8a3b      	ldrh	r3, [r7, #16]
 8023226:	3308      	adds	r3, #8
 8023228:	4975      	ldr	r1, [pc, #468]	; (8023400 <ce303_tarif+0xd34>)
 802322a:	5ccb      	ldrb	r3, [r1, r3]
 802322c:	b29b      	uxth	r3, r3
 802322e:	4413      	add	r3, r2
 8023230:	b29b      	uxth	r3, r3
 8023232:	3b30      	subs	r3, #48	; 0x30
 8023234:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023236:	4b73      	ldr	r3, [pc, #460]	; (8023404 <ce303_tarif+0xd38>)
 8023238:	681b      	ldr	r3, [r3, #0]
 802323a:	f04f 31ff 	mov.w	r1, #4294967295
 802323e:	4618      	mov	r0, r3
 8023240:	f7f3 fd2e 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8023244:	68bb      	ldr	r3, [r7, #8]
 8023246:	0e1b      	lsrs	r3, r3, #24
 8023248:	b2db      	uxtb	r3, r3
 802324a:	4619      	mov	r1, r3
 802324c:	f242 0082 	movw	r0, #8322	; 0x2082
 8023250:	f002 f8f8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8023254:	68bb      	ldr	r3, [r7, #8]
 8023256:	0c1b      	lsrs	r3, r3, #16
 8023258:	b2db      	uxtb	r3, r3
 802325a:	4619      	mov	r1, r3
 802325c:	f242 0083 	movw	r0, #8323	; 0x2083
 8023260:	f002 f8f0 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8023264:	68bb      	ldr	r3, [r7, #8]
 8023266:	0a1b      	lsrs	r3, r3, #8
 8023268:	b2db      	uxtb	r3, r3
 802326a:	4619      	mov	r1, r3
 802326c:	f242 0084 	movw	r0, #8324	; 0x2084
 8023270:	f002 f8e8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8023274:	68bb      	ldr	r3, [r7, #8]
 8023276:	b2db      	uxtb	r3, r3
 8023278:	4619      	mov	r1, r3
 802327a:	f242 0085 	movw	r0, #8325	; 0x2085
 802327e:	f002 f8e1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 8023282:	8afb      	ldrh	r3, [r7, #22]
 8023284:	0a1b      	lsrs	r3, r3, #8
 8023286:	b29b      	uxth	r3, r3
 8023288:	b2db      	uxtb	r3, r3
 802328a:	4619      	mov	r1, r3
 802328c:	f242 0086 	movw	r0, #8326	; 0x2086
 8023290:	f002 f8d8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 8023294:	8afb      	ldrh	r3, [r7, #22]
 8023296:	b2db      	uxtb	r3, r3
 8023298:	4619      	mov	r1, r3
 802329a:	f242 0087 	movw	r0, #8327	; 0x2087
 802329e:	f002 f8d1 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80232a2:	4b58      	ldr	r3, [pc, #352]	; (8023404 <ce303_tarif+0xd38>)
 80232a4:	681b      	ldr	r3, [r3, #0]
 80232a6:	4618      	mov	r0, r3
 80232a8:	f7f3 fd48 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 80232ac:	68bb      	ldr	r3, [r7, #8]
 80232ae:	0c1b      	lsrs	r3, r3, #16
 80232b0:	b29a      	uxth	r2, r3
 80232b2:	4b55      	ldr	r3, [pc, #340]	; (8023408 <ce303_tarif+0xd3c>)
 80232b4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 80232b8:	68bb      	ldr	r3, [r7, #8]
 80232ba:	b29a      	uxth	r2, r3
 80232bc:	4b52      	ldr	r3, [pc, #328]	; (8023408 <ce303_tarif+0xd3c>)
 80232be:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 80232c2:	4a51      	ldr	r2, [pc, #324]	; (8023408 <ce303_tarif+0xd3c>)
 80232c4:	8afb      	ldrh	r3, [r7, #22]
 80232c6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 80232ca:	2301      	movs	r3, #1
 80232cc:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80232ce:	f002 b84d 	b.w	802536c <ce303_tarif+0x2ca0>

			}

			else if( meter_rx_buffer[i+6] == 0x2E) // пять цифр перед запятой
 80232d2:	8a3b      	ldrh	r3, [r7, #16]
 80232d4:	3306      	adds	r3, #6
 80232d6:	4a4a      	ldr	r2, [pc, #296]	; (8023400 <ce303_tarif+0xd34>)
 80232d8:	5cd3      	ldrb	r3, [r2, r3]
 80232da:	2b2e      	cmp	r3, #46	; 0x2e
 80232dc:	f042 8046 	bne.w	802536c <ce303_tarif+0x2ca0>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80232e0:	8a3b      	ldrh	r3, [r7, #16]
 80232e2:	3301      	adds	r3, #1
 80232e4:	4a46      	ldr	r2, [pc, #280]	; (8023400 <ce303_tarif+0xd34>)
 80232e6:	5cd3      	ldrb	r3, [r2, r3]
 80232e8:	3b30      	subs	r3, #48	; 0x30
 80232ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80232ee:	fb02 f203 	mul.w	r2, r2, r3
 80232f2:	8a3b      	ldrh	r3, [r7, #16]
 80232f4:	3302      	adds	r3, #2
 80232f6:	4942      	ldr	r1, [pc, #264]	; (8023400 <ce303_tarif+0xd34>)
 80232f8:	5ccb      	ldrb	r3, [r1, r3]
 80232fa:	3b30      	subs	r3, #48	; 0x30
 80232fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8023300:	fb01 f303 	mul.w	r3, r1, r3
 8023304:	441a      	add	r2, r3
 8023306:	8a3b      	ldrh	r3, [r7, #16]
 8023308:	3303      	adds	r3, #3
 802330a:	493d      	ldr	r1, [pc, #244]	; (8023400 <ce303_tarif+0xd34>)
 802330c:	5ccb      	ldrb	r3, [r1, r3]
 802330e:	3b30      	subs	r3, #48	; 0x30
 8023310:	2164      	movs	r1, #100	; 0x64
 8023312:	fb01 f303 	mul.w	r3, r1, r3
 8023316:	18d1      	adds	r1, r2, r3
 8023318:	8a3b      	ldrh	r3, [r7, #16]
 802331a:	3304      	adds	r3, #4
 802331c:	4a38      	ldr	r2, [pc, #224]	; (8023400 <ce303_tarif+0xd34>)
 802331e:	5cd3      	ldrb	r3, [r2, r3]
 8023320:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023324:	4613      	mov	r3, r2
 8023326:	009b      	lsls	r3, r3, #2
 8023328:	4413      	add	r3, r2
 802332a:	005b      	lsls	r3, r3, #1
 802332c:	18ca      	adds	r2, r1, r3
 802332e:	8a3b      	ldrh	r3, [r7, #16]
 8023330:	3305      	adds	r3, #5
 8023332:	4933      	ldr	r1, [pc, #204]	; (8023400 <ce303_tarif+0xd34>)
 8023334:	5ccb      	ldrb	r3, [r1, r3]
 8023336:	3b30      	subs	r3, #48	; 0x30
 8023338:	4413      	add	r3, r2
 802333a:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+8] == 0x29 ) // если 1 разряд после запятой
 802333c:	8a3b      	ldrh	r3, [r7, #16]
 802333e:	3308      	adds	r3, #8
 8023340:	4a2f      	ldr	r2, [pc, #188]	; (8023400 <ce303_tarif+0xd34>)
 8023342:	5cd3      	ldrb	r3, [r2, r3]
 8023344:	2b29      	cmp	r3, #41	; 0x29
 8023346:	d110      	bne.n	802336a <ce303_tarif+0xc9e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+7])-0x30)*100;
 8023348:	8a3b      	ldrh	r3, [r7, #16]
 802334a:	3307      	adds	r3, #7
 802334c:	4a2c      	ldr	r2, [pc, #176]	; (8023400 <ce303_tarif+0xd34>)
 802334e:	5cd3      	ldrb	r3, [r2, r3]
 8023350:	3b30      	subs	r3, #48	; 0x30
 8023352:	b29b      	uxth	r3, r3
 8023354:	461a      	mov	r2, r3
 8023356:	0092      	lsls	r2, r2, #2
 8023358:	4413      	add	r3, r2
 802335a:	461a      	mov	r2, r3
 802335c:	0091      	lsls	r1, r2, #2
 802335e:	461a      	mov	r2, r3
 8023360:	460b      	mov	r3, r1
 8023362:	4413      	add	r3, r2
 8023364:	009b      	lsls	r3, r3, #2
 8023366:	82fb      	strh	r3, [r7, #22]
 8023368:	e076      	b.n	8023458 <ce303_tarif+0xd8c>
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 2 разряда после запятой
 802336a:	8a3b      	ldrh	r3, [r7, #16]
 802336c:	3309      	adds	r3, #9
 802336e:	4a24      	ldr	r2, [pc, #144]	; (8023400 <ce303_tarif+0xd34>)
 8023370:	5cd3      	ldrb	r3, [r2, r3]
 8023372:	2b29      	cmp	r3, #41	; 0x29
 8023374:	d117      	bne.n	80233a6 <ce303_tarif+0xcda>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30))*10;
 8023376:	8a3b      	ldrh	r3, [r7, #16]
 8023378:	3307      	adds	r3, #7
 802337a:	4a21      	ldr	r2, [pc, #132]	; (8023400 <ce303_tarif+0xd34>)
 802337c:	5cd3      	ldrb	r3, [r2, r3]
 802337e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023382:	4613      	mov	r3, r2
 8023384:	009b      	lsls	r3, r3, #2
 8023386:	4413      	add	r3, r2
 8023388:	005b      	lsls	r3, r3, #1
 802338a:	4619      	mov	r1, r3
 802338c:	8a3b      	ldrh	r3, [r7, #16]
 802338e:	3308      	adds	r3, #8
 8023390:	4a1b      	ldr	r2, [pc, #108]	; (8023400 <ce303_tarif+0xd34>)
 8023392:	5cd3      	ldrb	r3, [r2, r3]
 8023394:	3b30      	subs	r3, #48	; 0x30
 8023396:	440b      	add	r3, r1
 8023398:	b29b      	uxth	r3, r3
 802339a:	461a      	mov	r2, r3
 802339c:	0092      	lsls	r2, r2, #2
 802339e:	4413      	add	r3, r2
 80233a0:	005b      	lsls	r3, r3, #1
 80233a2:	82fb      	strh	r3, [r7, #22]
 80233a4:	e058      	b.n	8023458 <ce303_tarif+0xd8c>
				}
				else if( meter_rx_buffer[i+10] == 0x29 ) // если 3 разряда после запятой
 80233a6:	8a3b      	ldrh	r3, [r7, #16]
 80233a8:	330a      	adds	r3, #10
 80233aa:	4a15      	ldr	r2, [pc, #84]	; (8023400 <ce303_tarif+0xd34>)
 80233ac:	5cd3      	ldrb	r3, [r2, r3]
 80233ae:	2b29      	cmp	r3, #41	; 0x29
 80233b0:	d12c      	bne.n	802340c <ce303_tarif+0xd40>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+7])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+8])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+9])-0x30);
 80233b2:	8a3b      	ldrh	r3, [r7, #16]
 80233b4:	3307      	adds	r3, #7
 80233b6:	4a12      	ldr	r2, [pc, #72]	; (8023400 <ce303_tarif+0xd34>)
 80233b8:	5cd3      	ldrb	r3, [r2, r3]
 80233ba:	3b30      	subs	r3, #48	; 0x30
 80233bc:	b29b      	uxth	r3, r3
 80233be:	461a      	mov	r2, r3
 80233c0:	0092      	lsls	r2, r2, #2
 80233c2:	4413      	add	r3, r2
 80233c4:	461a      	mov	r2, r3
 80233c6:	0091      	lsls	r1, r2, #2
 80233c8:	461a      	mov	r2, r3
 80233ca:	460b      	mov	r3, r1
 80233cc:	4413      	add	r3, r2
 80233ce:	009b      	lsls	r3, r3, #2
 80233d0:	b29a      	uxth	r2, r3
 80233d2:	8a3b      	ldrh	r3, [r7, #16]
 80233d4:	3308      	adds	r3, #8
 80233d6:	490a      	ldr	r1, [pc, #40]	; (8023400 <ce303_tarif+0xd34>)
 80233d8:	5ccb      	ldrb	r3, [r1, r3]
 80233da:	3b30      	subs	r3, #48	; 0x30
 80233dc:	b29b      	uxth	r3, r3
 80233de:	4619      	mov	r1, r3
 80233e0:	0089      	lsls	r1, r1, #2
 80233e2:	440b      	add	r3, r1
 80233e4:	005b      	lsls	r3, r3, #1
 80233e6:	b29b      	uxth	r3, r3
 80233e8:	4413      	add	r3, r2
 80233ea:	b29a      	uxth	r2, r3
 80233ec:	8a3b      	ldrh	r3, [r7, #16]
 80233ee:	3309      	adds	r3, #9
 80233f0:	4903      	ldr	r1, [pc, #12]	; (8023400 <ce303_tarif+0xd34>)
 80233f2:	5ccb      	ldrb	r3, [r1, r3]
 80233f4:	b29b      	uxth	r3, r3
 80233f6:	4413      	add	r3, r2
 80233f8:	b29b      	uxth	r3, r3
 80233fa:	3b30      	subs	r3, #48	; 0x30
 80233fc:	82fb      	strh	r3, [r7, #22]
 80233fe:	e02b      	b.n	8023458 <ce303_tarif+0xd8c>
 8023400:	200098e4 	.word	0x200098e4
 8023404:	20009a6c 	.word	0x20009a6c
 8023408:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+7])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+8])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+9])-0x30);
 802340c:	8a3b      	ldrh	r3, [r7, #16]
 802340e:	3307      	adds	r3, #7
 8023410:	4a7f      	ldr	r2, [pc, #508]	; (8023610 <ce303_tarif+0xf44>)
 8023412:	5cd3      	ldrb	r3, [r2, r3]
 8023414:	3b30      	subs	r3, #48	; 0x30
 8023416:	b29b      	uxth	r3, r3
 8023418:	461a      	mov	r2, r3
 802341a:	0092      	lsls	r2, r2, #2
 802341c:	4413      	add	r3, r2
 802341e:	461a      	mov	r2, r3
 8023420:	0091      	lsls	r1, r2, #2
 8023422:	461a      	mov	r2, r3
 8023424:	460b      	mov	r3, r1
 8023426:	4413      	add	r3, r2
 8023428:	009b      	lsls	r3, r3, #2
 802342a:	b29a      	uxth	r2, r3
 802342c:	8a3b      	ldrh	r3, [r7, #16]
 802342e:	3308      	adds	r3, #8
 8023430:	4977      	ldr	r1, [pc, #476]	; (8023610 <ce303_tarif+0xf44>)
 8023432:	5ccb      	ldrb	r3, [r1, r3]
 8023434:	3b30      	subs	r3, #48	; 0x30
 8023436:	b29b      	uxth	r3, r3
 8023438:	4619      	mov	r1, r3
 802343a:	0089      	lsls	r1, r1, #2
 802343c:	440b      	add	r3, r1
 802343e:	005b      	lsls	r3, r3, #1
 8023440:	b29b      	uxth	r3, r3
 8023442:	4413      	add	r3, r2
 8023444:	b29a      	uxth	r2, r3
 8023446:	8a3b      	ldrh	r3, [r7, #16]
 8023448:	3309      	adds	r3, #9
 802344a:	4971      	ldr	r1, [pc, #452]	; (8023610 <ce303_tarif+0xf44>)
 802344c:	5ccb      	ldrb	r3, [r1, r3]
 802344e:	b29b      	uxth	r3, r3
 8023450:	4413      	add	r3, r2
 8023452:	b29b      	uxth	r3, r3
 8023454:	3b30      	subs	r3, #48	; 0x30
 8023456:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023458:	4b6e      	ldr	r3, [pc, #440]	; (8023614 <ce303_tarif+0xf48>)
 802345a:	681b      	ldr	r3, [r3, #0]
 802345c:	f04f 31ff 	mov.w	r1, #4294967295
 8023460:	4618      	mov	r0, r3
 8023462:	f7f3 fc1d 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8023466:	68bb      	ldr	r3, [r7, #8]
 8023468:	0e1b      	lsrs	r3, r3, #24
 802346a:	b2db      	uxtb	r3, r3
 802346c:	4619      	mov	r1, r3
 802346e:	f242 0082 	movw	r0, #8322	; 0x2082
 8023472:	f001 ffe7 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8023476:	68bb      	ldr	r3, [r7, #8]
 8023478:	0c1b      	lsrs	r3, r3, #16
 802347a:	b2db      	uxtb	r3, r3
 802347c:	4619      	mov	r1, r3
 802347e:	f242 0083 	movw	r0, #8323	; 0x2083
 8023482:	f001 ffdf 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8023486:	68bb      	ldr	r3, [r7, #8]
 8023488:	0a1b      	lsrs	r3, r3, #8
 802348a:	b2db      	uxtb	r3, r3
 802348c:	4619      	mov	r1, r3
 802348e:	f242 0084 	movw	r0, #8324	; 0x2084
 8023492:	f001 ffd7 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8023496:	68bb      	ldr	r3, [r7, #8]
 8023498:	b2db      	uxtb	r3, r3
 802349a:	4619      	mov	r1, r3
 802349c:	f242 0085 	movw	r0, #8325	; 0x2085
 80234a0:	f001 ffd0 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 80234a4:	8afb      	ldrh	r3, [r7, #22]
 80234a6:	0a1b      	lsrs	r3, r3, #8
 80234a8:	b29b      	uxth	r3, r3
 80234aa:	b2db      	uxtb	r3, r3
 80234ac:	4619      	mov	r1, r3
 80234ae:	f242 0086 	movw	r0, #8326	; 0x2086
 80234b2:	f001 ffc7 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 80234b6:	8afb      	ldrh	r3, [r7, #22]
 80234b8:	b2db      	uxtb	r3, r3
 80234ba:	4619      	mov	r1, r3
 80234bc:	f242 0087 	movw	r0, #8327	; 0x2087
 80234c0:	f001 ffc0 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80234c4:	4b53      	ldr	r3, [pc, #332]	; (8023614 <ce303_tarif+0xf48>)
 80234c6:	681b      	ldr	r3, [r3, #0]
 80234c8:	4618      	mov	r0, r3
 80234ca:	f7f3 fc37 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 80234ce:	68bb      	ldr	r3, [r7, #8]
 80234d0:	0c1b      	lsrs	r3, r3, #16
 80234d2:	b29a      	uxth	r2, r3
 80234d4:	4b50      	ldr	r3, [pc, #320]	; (8023618 <ce303_tarif+0xf4c>)
 80234d6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 80234da:	68bb      	ldr	r3, [r7, #8]
 80234dc:	b29a      	uxth	r2, r3
 80234de:	4b4e      	ldr	r3, [pc, #312]	; (8023618 <ce303_tarif+0xf4c>)
 80234e0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 80234e4:	4a4c      	ldr	r2, [pc, #304]	; (8023618 <ce303_tarif+0xf4c>)
 80234e6:	8afb      	ldrh	r3, [r7, #22]
 80234e8:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 80234ec:	2301      	movs	r3, #1
 80234ee:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80234f0:	f001 bf3c 	b.w	802536c <ce303_tarif+0x2ca0>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==0) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 80234f4:	8a3b      	ldrh	r3, [r7, #16]
 80234f6:	4a46      	ldr	r2, [pc, #280]	; (8023610 <ce303_tarif+0xf44>)
 80234f8:	5cd3      	ldrb	r3, [r2, r3]
 80234fa:	2b28      	cmp	r3, #40	; 0x28
 80234fc:	f040 8508 	bne.w	8023f10 <ce303_tarif+0x1844>
 8023500:	7d7b      	ldrb	r3, [r7, #21]
 8023502:	2b01      	cmp	r3, #1
 8023504:	f040 8504 	bne.w	8023f10 <ce303_tarif+0x1844>
 8023508:	7d3b      	ldrb	r3, [r7, #20]
 802350a:	2b00      	cmp	r3, #0
 802350c:	f040 8500 	bne.w	8023f10 <ce303_tarif+0x1844>
 8023510:	7cfb      	ldrb	r3, [r7, #19]
 8023512:	2b00      	cmp	r3, #0
 8023514:	f040 84fc 	bne.w	8023f10 <ce303_tarif+0x1844>
 8023518:	7cbb      	ldrb	r3, [r7, #18]
 802351a:	2b00      	cmp	r3, #0
 802351c:	f040 84f8 	bne.w	8023f10 <ce303_tarif+0x1844>
 8023520:	7bfb      	ldrb	r3, [r7, #15]
 8023522:	2b00      	cmp	r3, #0
 8023524:	f040 84f4 	bne.w	8023f10 <ce303_tarif+0x1844>
 8023528:	7bbb      	ldrb	r3, [r7, #14]
 802352a:	2b00      	cmp	r3, #0
 802352c:	f040 84f0 	bne.w	8023f10 <ce303_tarif+0x1844>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8023530:	8a3b      	ldrh	r3, [r7, #16]
 8023532:	3302      	adds	r3, #2
 8023534:	4a36      	ldr	r2, [pc, #216]	; (8023610 <ce303_tarif+0xf44>)
 8023536:	5cd3      	ldrb	r3, [r2, r3]
 8023538:	2b2e      	cmp	r3, #46	; 0x2e
 802353a:	f040 80e3 	bne.w	8023704 <ce303_tarif+0x1038>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 802353e:	8a3b      	ldrh	r3, [r7, #16]
 8023540:	3301      	adds	r3, #1
 8023542:	4a33      	ldr	r2, [pc, #204]	; (8023610 <ce303_tarif+0xf44>)
 8023544:	5cd3      	ldrb	r3, [r2, r3]
 8023546:	3b30      	subs	r3, #48	; 0x30
 8023548:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 802354a:	8a3b      	ldrh	r3, [r7, #16]
 802354c:	3304      	adds	r3, #4
 802354e:	4a30      	ldr	r2, [pc, #192]	; (8023610 <ce303_tarif+0xf44>)
 8023550:	5cd3      	ldrb	r3, [r2, r3]
 8023552:	2b29      	cmp	r3, #41	; 0x29
 8023554:	d110      	bne.n	8023578 <ce303_tarif+0xeac>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8023556:	8a3b      	ldrh	r3, [r7, #16]
 8023558:	3303      	adds	r3, #3
 802355a:	4a2d      	ldr	r2, [pc, #180]	; (8023610 <ce303_tarif+0xf44>)
 802355c:	5cd3      	ldrb	r3, [r2, r3]
 802355e:	3b30      	subs	r3, #48	; 0x30
 8023560:	b29b      	uxth	r3, r3
 8023562:	461a      	mov	r2, r3
 8023564:	0092      	lsls	r2, r2, #2
 8023566:	4413      	add	r3, r2
 8023568:	461a      	mov	r2, r3
 802356a:	0091      	lsls	r1, r2, #2
 802356c:	461a      	mov	r2, r3
 802356e:	460b      	mov	r3, r1
 8023570:	4413      	add	r3, r2
 8023572:	009b      	lsls	r3, r3, #2
 8023574:	82fb      	strh	r3, [r7, #22]
 8023576:	e077      	b.n	8023668 <ce303_tarif+0xf9c>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8023578:	8a3b      	ldrh	r3, [r7, #16]
 802357a:	3305      	adds	r3, #5
 802357c:	4a24      	ldr	r2, [pc, #144]	; (8023610 <ce303_tarif+0xf44>)
 802357e:	5cd3      	ldrb	r3, [r2, r3]
 8023580:	2b29      	cmp	r3, #41	; 0x29
 8023582:	d117      	bne.n	80235b4 <ce303_tarif+0xee8>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8023584:	8a3b      	ldrh	r3, [r7, #16]
 8023586:	3303      	adds	r3, #3
 8023588:	4a21      	ldr	r2, [pc, #132]	; (8023610 <ce303_tarif+0xf44>)
 802358a:	5cd3      	ldrb	r3, [r2, r3]
 802358c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023590:	4613      	mov	r3, r2
 8023592:	009b      	lsls	r3, r3, #2
 8023594:	4413      	add	r3, r2
 8023596:	005b      	lsls	r3, r3, #1
 8023598:	4619      	mov	r1, r3
 802359a:	8a3b      	ldrh	r3, [r7, #16]
 802359c:	3304      	adds	r3, #4
 802359e:	4a1c      	ldr	r2, [pc, #112]	; (8023610 <ce303_tarif+0xf44>)
 80235a0:	5cd3      	ldrb	r3, [r2, r3]
 80235a2:	3b30      	subs	r3, #48	; 0x30
 80235a4:	440b      	add	r3, r1
 80235a6:	b29b      	uxth	r3, r3
 80235a8:	461a      	mov	r2, r3
 80235aa:	0092      	lsls	r2, r2, #2
 80235ac:	4413      	add	r3, r2
 80235ae:	005b      	lsls	r3, r3, #1
 80235b0:	82fb      	strh	r3, [r7, #22]
 80235b2:	e059      	b.n	8023668 <ce303_tarif+0xf9c>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80235b4:	8a3b      	ldrh	r3, [r7, #16]
 80235b6:	3306      	adds	r3, #6
 80235b8:	4a15      	ldr	r2, [pc, #84]	; (8023610 <ce303_tarif+0xf44>)
 80235ba:	5cd3      	ldrb	r3, [r2, r3]
 80235bc:	2b29      	cmp	r3, #41	; 0x29
 80235be:	d12d      	bne.n	802361c <ce303_tarif+0xf50>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80235c0:	8a3b      	ldrh	r3, [r7, #16]
 80235c2:	3303      	adds	r3, #3
 80235c4:	4a12      	ldr	r2, [pc, #72]	; (8023610 <ce303_tarif+0xf44>)
 80235c6:	5cd3      	ldrb	r3, [r2, r3]
 80235c8:	3b30      	subs	r3, #48	; 0x30
 80235ca:	b29b      	uxth	r3, r3
 80235cc:	461a      	mov	r2, r3
 80235ce:	0092      	lsls	r2, r2, #2
 80235d0:	4413      	add	r3, r2
 80235d2:	461a      	mov	r2, r3
 80235d4:	0091      	lsls	r1, r2, #2
 80235d6:	461a      	mov	r2, r3
 80235d8:	460b      	mov	r3, r1
 80235da:	4413      	add	r3, r2
 80235dc:	009b      	lsls	r3, r3, #2
 80235de:	b29a      	uxth	r2, r3
 80235e0:	8a3b      	ldrh	r3, [r7, #16]
 80235e2:	3304      	adds	r3, #4
 80235e4:	490a      	ldr	r1, [pc, #40]	; (8023610 <ce303_tarif+0xf44>)
 80235e6:	5ccb      	ldrb	r3, [r1, r3]
 80235e8:	3b30      	subs	r3, #48	; 0x30
 80235ea:	b29b      	uxth	r3, r3
 80235ec:	4619      	mov	r1, r3
 80235ee:	0089      	lsls	r1, r1, #2
 80235f0:	440b      	add	r3, r1
 80235f2:	005b      	lsls	r3, r3, #1
 80235f4:	b29b      	uxth	r3, r3
 80235f6:	4413      	add	r3, r2
 80235f8:	b29a      	uxth	r2, r3
 80235fa:	8a3b      	ldrh	r3, [r7, #16]
 80235fc:	3305      	adds	r3, #5
 80235fe:	4904      	ldr	r1, [pc, #16]	; (8023610 <ce303_tarif+0xf44>)
 8023600:	5ccb      	ldrb	r3, [r1, r3]
 8023602:	b29b      	uxth	r3, r3
 8023604:	4413      	add	r3, r2
 8023606:	b29b      	uxth	r3, r3
 8023608:	3b30      	subs	r3, #48	; 0x30
 802360a:	82fb      	strh	r3, [r7, #22]
 802360c:	e02c      	b.n	8023668 <ce303_tarif+0xf9c>
 802360e:	bf00      	nop
 8023610:	200098e4 	.word	0x200098e4
 8023614:	20009a6c 	.word	0x20009a6c
 8023618:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 802361c:	8a3b      	ldrh	r3, [r7, #16]
 802361e:	3303      	adds	r3, #3
 8023620:	4ab0      	ldr	r2, [pc, #704]	; (80238e4 <ce303_tarif+0x1218>)
 8023622:	5cd3      	ldrb	r3, [r2, r3]
 8023624:	3b30      	subs	r3, #48	; 0x30
 8023626:	b29b      	uxth	r3, r3
 8023628:	461a      	mov	r2, r3
 802362a:	0092      	lsls	r2, r2, #2
 802362c:	4413      	add	r3, r2
 802362e:	461a      	mov	r2, r3
 8023630:	0091      	lsls	r1, r2, #2
 8023632:	461a      	mov	r2, r3
 8023634:	460b      	mov	r3, r1
 8023636:	4413      	add	r3, r2
 8023638:	009b      	lsls	r3, r3, #2
 802363a:	b29a      	uxth	r2, r3
 802363c:	8a3b      	ldrh	r3, [r7, #16]
 802363e:	3304      	adds	r3, #4
 8023640:	49a8      	ldr	r1, [pc, #672]	; (80238e4 <ce303_tarif+0x1218>)
 8023642:	5ccb      	ldrb	r3, [r1, r3]
 8023644:	3b30      	subs	r3, #48	; 0x30
 8023646:	b29b      	uxth	r3, r3
 8023648:	4619      	mov	r1, r3
 802364a:	0089      	lsls	r1, r1, #2
 802364c:	440b      	add	r3, r1
 802364e:	005b      	lsls	r3, r3, #1
 8023650:	b29b      	uxth	r3, r3
 8023652:	4413      	add	r3, r2
 8023654:	b29a      	uxth	r2, r3
 8023656:	8a3b      	ldrh	r3, [r7, #16]
 8023658:	3305      	adds	r3, #5
 802365a:	49a2      	ldr	r1, [pc, #648]	; (80238e4 <ce303_tarif+0x1218>)
 802365c:	5ccb      	ldrb	r3, [r1, r3]
 802365e:	b29b      	uxth	r3, r3
 8023660:	4413      	add	r3, r2
 8023662:	b29b      	uxth	r3, r3
 8023664:	3b30      	subs	r3, #48	; 0x30
 8023666:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023668:	4b9f      	ldr	r3, [pc, #636]	; (80238e8 <ce303_tarif+0x121c>)
 802366a:	681b      	ldr	r3, [r3, #0]
 802366c:	f04f 31ff 	mov.w	r1, #4294967295
 8023670:	4618      	mov	r0, r3
 8023672:	f7f3 fb15 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8023676:	68bb      	ldr	r3, [r7, #8]
 8023678:	0e1b      	lsrs	r3, r3, #24
 802367a:	b2db      	uxtb	r3, r3
 802367c:	4619      	mov	r1, r3
 802367e:	f242 0088 	movw	r0, #8328	; 0x2088
 8023682:	f001 fedf 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8023686:	68bb      	ldr	r3, [r7, #8]
 8023688:	0c1b      	lsrs	r3, r3, #16
 802368a:	b2db      	uxtb	r3, r3
 802368c:	4619      	mov	r1, r3
 802368e:	f242 0089 	movw	r0, #8329	; 0x2089
 8023692:	f001 fed7 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8023696:	68bb      	ldr	r3, [r7, #8]
 8023698:	0a1b      	lsrs	r3, r3, #8
 802369a:	b2db      	uxtb	r3, r3
 802369c:	4619      	mov	r1, r3
 802369e:	f242 008a 	movw	r0, #8330	; 0x208a
 80236a2:	f001 fecf 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 80236a6:	68bb      	ldr	r3, [r7, #8]
 80236a8:	b2db      	uxtb	r3, r3
 80236aa:	4619      	mov	r1, r3
 80236ac:	f242 008b 	movw	r0, #8331	; 0x208b
 80236b0:	f001 fec8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80236b4:	8afb      	ldrh	r3, [r7, #22]
 80236b6:	0a1b      	lsrs	r3, r3, #8
 80236b8:	b29b      	uxth	r3, r3
 80236ba:	b2db      	uxtb	r3, r3
 80236bc:	4619      	mov	r1, r3
 80236be:	f242 008c 	movw	r0, #8332	; 0x208c
 80236c2:	f001 febf 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80236c6:	8afb      	ldrh	r3, [r7, #22]
 80236c8:	b2db      	uxtb	r3, r3
 80236ca:	4619      	mov	r1, r3
 80236cc:	f242 008d 	movw	r0, #8333	; 0x208d
 80236d0:	f001 feb8 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80236d4:	4b84      	ldr	r3, [pc, #528]	; (80238e8 <ce303_tarif+0x121c>)
 80236d6:	681b      	ldr	r3, [r3, #0]
 80236d8:	4618      	mov	r0, r3
 80236da:	f7f3 fb2f 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 80236de:	68bb      	ldr	r3, [r7, #8]
 80236e0:	0c1b      	lsrs	r3, r3, #16
 80236e2:	b29a      	uxth	r2, r3
 80236e4:	4b81      	ldr	r3, [pc, #516]	; (80238ec <ce303_tarif+0x1220>)
 80236e6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 80236ea:	68bb      	ldr	r3, [r7, #8]
 80236ec:	b29a      	uxth	r2, r3
 80236ee:	4b7f      	ldr	r3, [pc, #508]	; (80238ec <ce303_tarif+0x1220>)
 80236f0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 80236f4:	4a7d      	ldr	r2, [pc, #500]	; (80238ec <ce303_tarif+0x1220>)
 80236f6:	8afb      	ldrh	r3, [r7, #22]
 80236f8:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 80236fc:	2301      	movs	r3, #1
 80236fe:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8023700:	f001 be36 	b.w	8025370 <ce303_tarif+0x2ca4>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8023704:	8a3b      	ldrh	r3, [r7, #16]
 8023706:	3303      	adds	r3, #3
 8023708:	4a76      	ldr	r2, [pc, #472]	; (80238e4 <ce303_tarif+0x1218>)
 802370a:	5cd3      	ldrb	r3, [r2, r3]
 802370c:	2b2e      	cmp	r3, #46	; 0x2e
 802370e:	f040 80ef 	bne.w	80238f0 <ce303_tarif+0x1224>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8023712:	8a3b      	ldrh	r3, [r7, #16]
 8023714:	3301      	adds	r3, #1
 8023716:	4a73      	ldr	r2, [pc, #460]	; (80238e4 <ce303_tarif+0x1218>)
 8023718:	5cd3      	ldrb	r3, [r2, r3]
 802371a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802371e:	4613      	mov	r3, r2
 8023720:	009b      	lsls	r3, r3, #2
 8023722:	4413      	add	r3, r2
 8023724:	005b      	lsls	r3, r3, #1
 8023726:	4619      	mov	r1, r3
 8023728:	8a3b      	ldrh	r3, [r7, #16]
 802372a:	3302      	adds	r3, #2
 802372c:	4a6d      	ldr	r2, [pc, #436]	; (80238e4 <ce303_tarif+0x1218>)
 802372e:	5cd3      	ldrb	r3, [r2, r3]
 8023730:	3b30      	subs	r3, #48	; 0x30
 8023732:	440b      	add	r3, r1
 8023734:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8023736:	8a3b      	ldrh	r3, [r7, #16]
 8023738:	3305      	adds	r3, #5
 802373a:	4a6a      	ldr	r2, [pc, #424]	; (80238e4 <ce303_tarif+0x1218>)
 802373c:	5cd3      	ldrb	r3, [r2, r3]
 802373e:	2b29      	cmp	r3, #41	; 0x29
 8023740:	d110      	bne.n	8023764 <ce303_tarif+0x1098>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8023742:	8a3b      	ldrh	r3, [r7, #16]
 8023744:	3304      	adds	r3, #4
 8023746:	4a67      	ldr	r2, [pc, #412]	; (80238e4 <ce303_tarif+0x1218>)
 8023748:	5cd3      	ldrb	r3, [r2, r3]
 802374a:	3b30      	subs	r3, #48	; 0x30
 802374c:	b29b      	uxth	r3, r3
 802374e:	461a      	mov	r2, r3
 8023750:	0092      	lsls	r2, r2, #2
 8023752:	4413      	add	r3, r2
 8023754:	461a      	mov	r2, r3
 8023756:	0091      	lsls	r1, r2, #2
 8023758:	461a      	mov	r2, r3
 802375a:	460b      	mov	r3, r1
 802375c:	4413      	add	r3, r2
 802375e:	009b      	lsls	r3, r3, #2
 8023760:	82fb      	strh	r3, [r7, #22]
 8023762:	e070      	b.n	8023846 <ce303_tarif+0x117a>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8023764:	8a3b      	ldrh	r3, [r7, #16]
 8023766:	3306      	adds	r3, #6
 8023768:	4a5e      	ldr	r2, [pc, #376]	; (80238e4 <ce303_tarif+0x1218>)
 802376a:	5cd3      	ldrb	r3, [r2, r3]
 802376c:	2b29      	cmp	r3, #41	; 0x29
 802376e:	d117      	bne.n	80237a0 <ce303_tarif+0x10d4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8023770:	8a3b      	ldrh	r3, [r7, #16]
 8023772:	3304      	adds	r3, #4
 8023774:	4a5b      	ldr	r2, [pc, #364]	; (80238e4 <ce303_tarif+0x1218>)
 8023776:	5cd3      	ldrb	r3, [r2, r3]
 8023778:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802377c:	4613      	mov	r3, r2
 802377e:	009b      	lsls	r3, r3, #2
 8023780:	4413      	add	r3, r2
 8023782:	005b      	lsls	r3, r3, #1
 8023784:	4619      	mov	r1, r3
 8023786:	8a3b      	ldrh	r3, [r7, #16]
 8023788:	3305      	adds	r3, #5
 802378a:	4a56      	ldr	r2, [pc, #344]	; (80238e4 <ce303_tarif+0x1218>)
 802378c:	5cd3      	ldrb	r3, [r2, r3]
 802378e:	3b30      	subs	r3, #48	; 0x30
 8023790:	440b      	add	r3, r1
 8023792:	b29b      	uxth	r3, r3
 8023794:	461a      	mov	r2, r3
 8023796:	0092      	lsls	r2, r2, #2
 8023798:	4413      	add	r3, r2
 802379a:	005b      	lsls	r3, r3, #1
 802379c:	82fb      	strh	r3, [r7, #22]
 802379e:	e052      	b.n	8023846 <ce303_tarif+0x117a>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80237a0:	8a3b      	ldrh	r3, [r7, #16]
 80237a2:	3307      	adds	r3, #7
 80237a4:	4a4f      	ldr	r2, [pc, #316]	; (80238e4 <ce303_tarif+0x1218>)
 80237a6:	5cd3      	ldrb	r3, [r2, r3]
 80237a8:	2b29      	cmp	r3, #41	; 0x29
 80237aa:	d126      	bne.n	80237fa <ce303_tarif+0x112e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80237ac:	8a3b      	ldrh	r3, [r7, #16]
 80237ae:	3304      	adds	r3, #4
 80237b0:	4a4c      	ldr	r2, [pc, #304]	; (80238e4 <ce303_tarif+0x1218>)
 80237b2:	5cd3      	ldrb	r3, [r2, r3]
 80237b4:	3b30      	subs	r3, #48	; 0x30
 80237b6:	b29b      	uxth	r3, r3
 80237b8:	461a      	mov	r2, r3
 80237ba:	0092      	lsls	r2, r2, #2
 80237bc:	4413      	add	r3, r2
 80237be:	461a      	mov	r2, r3
 80237c0:	0091      	lsls	r1, r2, #2
 80237c2:	461a      	mov	r2, r3
 80237c4:	460b      	mov	r3, r1
 80237c6:	4413      	add	r3, r2
 80237c8:	009b      	lsls	r3, r3, #2
 80237ca:	b29a      	uxth	r2, r3
 80237cc:	8a3b      	ldrh	r3, [r7, #16]
 80237ce:	3305      	adds	r3, #5
 80237d0:	4944      	ldr	r1, [pc, #272]	; (80238e4 <ce303_tarif+0x1218>)
 80237d2:	5ccb      	ldrb	r3, [r1, r3]
 80237d4:	3b30      	subs	r3, #48	; 0x30
 80237d6:	b29b      	uxth	r3, r3
 80237d8:	4619      	mov	r1, r3
 80237da:	0089      	lsls	r1, r1, #2
 80237dc:	440b      	add	r3, r1
 80237de:	005b      	lsls	r3, r3, #1
 80237e0:	b29b      	uxth	r3, r3
 80237e2:	4413      	add	r3, r2
 80237e4:	b29a      	uxth	r2, r3
 80237e6:	8a3b      	ldrh	r3, [r7, #16]
 80237e8:	3306      	adds	r3, #6
 80237ea:	493e      	ldr	r1, [pc, #248]	; (80238e4 <ce303_tarif+0x1218>)
 80237ec:	5ccb      	ldrb	r3, [r1, r3]
 80237ee:	b29b      	uxth	r3, r3
 80237f0:	4413      	add	r3, r2
 80237f2:	b29b      	uxth	r3, r3
 80237f4:	3b30      	subs	r3, #48	; 0x30
 80237f6:	82fb      	strh	r3, [r7, #22]
 80237f8:	e025      	b.n	8023846 <ce303_tarif+0x117a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80237fa:	8a3b      	ldrh	r3, [r7, #16]
 80237fc:	3304      	adds	r3, #4
 80237fe:	4a39      	ldr	r2, [pc, #228]	; (80238e4 <ce303_tarif+0x1218>)
 8023800:	5cd3      	ldrb	r3, [r2, r3]
 8023802:	3b30      	subs	r3, #48	; 0x30
 8023804:	b29b      	uxth	r3, r3
 8023806:	461a      	mov	r2, r3
 8023808:	0092      	lsls	r2, r2, #2
 802380a:	4413      	add	r3, r2
 802380c:	461a      	mov	r2, r3
 802380e:	0091      	lsls	r1, r2, #2
 8023810:	461a      	mov	r2, r3
 8023812:	460b      	mov	r3, r1
 8023814:	4413      	add	r3, r2
 8023816:	009b      	lsls	r3, r3, #2
 8023818:	b29a      	uxth	r2, r3
 802381a:	8a3b      	ldrh	r3, [r7, #16]
 802381c:	3305      	adds	r3, #5
 802381e:	4931      	ldr	r1, [pc, #196]	; (80238e4 <ce303_tarif+0x1218>)
 8023820:	5ccb      	ldrb	r3, [r1, r3]
 8023822:	3b30      	subs	r3, #48	; 0x30
 8023824:	b29b      	uxth	r3, r3
 8023826:	4619      	mov	r1, r3
 8023828:	0089      	lsls	r1, r1, #2
 802382a:	440b      	add	r3, r1
 802382c:	005b      	lsls	r3, r3, #1
 802382e:	b29b      	uxth	r3, r3
 8023830:	4413      	add	r3, r2
 8023832:	b29a      	uxth	r2, r3
 8023834:	8a3b      	ldrh	r3, [r7, #16]
 8023836:	3306      	adds	r3, #6
 8023838:	492a      	ldr	r1, [pc, #168]	; (80238e4 <ce303_tarif+0x1218>)
 802383a:	5ccb      	ldrb	r3, [r1, r3]
 802383c:	b29b      	uxth	r3, r3
 802383e:	4413      	add	r3, r2
 8023840:	b29b      	uxth	r3, r3
 8023842:	3b30      	subs	r3, #48	; 0x30
 8023844:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023846:	4b28      	ldr	r3, [pc, #160]	; (80238e8 <ce303_tarif+0x121c>)
 8023848:	681b      	ldr	r3, [r3, #0]
 802384a:	f04f 31ff 	mov.w	r1, #4294967295
 802384e:	4618      	mov	r0, r3
 8023850:	f7f3 fa26 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8023854:	68bb      	ldr	r3, [r7, #8]
 8023856:	0e1b      	lsrs	r3, r3, #24
 8023858:	b2db      	uxtb	r3, r3
 802385a:	4619      	mov	r1, r3
 802385c:	f242 0088 	movw	r0, #8328	; 0x2088
 8023860:	f001 fdf0 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8023864:	68bb      	ldr	r3, [r7, #8]
 8023866:	0c1b      	lsrs	r3, r3, #16
 8023868:	b2db      	uxtb	r3, r3
 802386a:	4619      	mov	r1, r3
 802386c:	f242 0089 	movw	r0, #8329	; 0x2089
 8023870:	f001 fde8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8023874:	68bb      	ldr	r3, [r7, #8]
 8023876:	0a1b      	lsrs	r3, r3, #8
 8023878:	b2db      	uxtb	r3, r3
 802387a:	4619      	mov	r1, r3
 802387c:	f242 008a 	movw	r0, #8330	; 0x208a
 8023880:	f001 fde0 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8023884:	68bb      	ldr	r3, [r7, #8]
 8023886:	b2db      	uxtb	r3, r3
 8023888:	4619      	mov	r1, r3
 802388a:	f242 008b 	movw	r0, #8331	; 0x208b
 802388e:	f001 fdd9 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8023892:	8afb      	ldrh	r3, [r7, #22]
 8023894:	0a1b      	lsrs	r3, r3, #8
 8023896:	b29b      	uxth	r3, r3
 8023898:	b2db      	uxtb	r3, r3
 802389a:	4619      	mov	r1, r3
 802389c:	f242 008c 	movw	r0, #8332	; 0x208c
 80238a0:	f001 fdd0 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80238a4:	8afb      	ldrh	r3, [r7, #22]
 80238a6:	b2db      	uxtb	r3, r3
 80238a8:	4619      	mov	r1, r3
 80238aa:	f242 008d 	movw	r0, #8333	; 0x208d
 80238ae:	f001 fdc9 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80238b2:	4b0d      	ldr	r3, [pc, #52]	; (80238e8 <ce303_tarif+0x121c>)
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	4618      	mov	r0, r3
 80238b8:	f7f3 fa40 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 80238bc:	68bb      	ldr	r3, [r7, #8]
 80238be:	0c1b      	lsrs	r3, r3, #16
 80238c0:	b29a      	uxth	r2, r3
 80238c2:	4b0a      	ldr	r3, [pc, #40]	; (80238ec <ce303_tarif+0x1220>)
 80238c4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 80238c8:	68bb      	ldr	r3, [r7, #8]
 80238ca:	b29a      	uxth	r2, r3
 80238cc:	4b07      	ldr	r3, [pc, #28]	; (80238ec <ce303_tarif+0x1220>)
 80238ce:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 80238d2:	4a06      	ldr	r2, [pc, #24]	; (80238ec <ce303_tarif+0x1220>)
 80238d4:	8afb      	ldrh	r3, [r7, #22]
 80238d6:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 80238da:	2301      	movs	r3, #1
 80238dc:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80238de:	f001 bd47 	b.w	8025370 <ce303_tarif+0x2ca4>
 80238e2:	bf00      	nop
 80238e4:	200098e4 	.word	0x200098e4
 80238e8:	20009a6c 	.word	0x20009a6c
 80238ec:	2000a10c 	.word	0x2000a10c

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 80238f0:	8a3b      	ldrh	r3, [r7, #16]
 80238f2:	3304      	adds	r3, #4
 80238f4:	4aaa      	ldr	r2, [pc, #680]	; (8023ba0 <ce303_tarif+0x14d4>)
 80238f6:	5cd3      	ldrb	r3, [r2, r3]
 80238f8:	2b2e      	cmp	r3, #46	; 0x2e
 80238fa:	f040 80f0 	bne.w	8023ade <ce303_tarif+0x1412>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80238fe:	8a3b      	ldrh	r3, [r7, #16]
 8023900:	3301      	adds	r3, #1
 8023902:	4aa7      	ldr	r2, [pc, #668]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023904:	5cd3      	ldrb	r3, [r2, r3]
 8023906:	3b30      	subs	r3, #48	; 0x30
 8023908:	2264      	movs	r2, #100	; 0x64
 802390a:	fb02 f103 	mul.w	r1, r2, r3
 802390e:	8a3b      	ldrh	r3, [r7, #16]
 8023910:	3302      	adds	r3, #2
 8023912:	4aa3      	ldr	r2, [pc, #652]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023914:	5cd3      	ldrb	r3, [r2, r3]
 8023916:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802391a:	4613      	mov	r3, r2
 802391c:	009b      	lsls	r3, r3, #2
 802391e:	4413      	add	r3, r2
 8023920:	005b      	lsls	r3, r3, #1
 8023922:	18ca      	adds	r2, r1, r3
 8023924:	8a3b      	ldrh	r3, [r7, #16]
 8023926:	3303      	adds	r3, #3
 8023928:	499d      	ldr	r1, [pc, #628]	; (8023ba0 <ce303_tarif+0x14d4>)
 802392a:	5ccb      	ldrb	r3, [r1, r3]
 802392c:	3b30      	subs	r3, #48	; 0x30
 802392e:	4413      	add	r3, r2
 8023930:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8023932:	8a3b      	ldrh	r3, [r7, #16]
 8023934:	3306      	adds	r3, #6
 8023936:	4a9a      	ldr	r2, [pc, #616]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023938:	5cd3      	ldrb	r3, [r2, r3]
 802393a:	2b29      	cmp	r3, #41	; 0x29
 802393c:	d110      	bne.n	8023960 <ce303_tarif+0x1294>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 802393e:	8a3b      	ldrh	r3, [r7, #16]
 8023940:	3305      	adds	r3, #5
 8023942:	4a97      	ldr	r2, [pc, #604]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023944:	5cd3      	ldrb	r3, [r2, r3]
 8023946:	3b30      	subs	r3, #48	; 0x30
 8023948:	b29b      	uxth	r3, r3
 802394a:	461a      	mov	r2, r3
 802394c:	0092      	lsls	r2, r2, #2
 802394e:	4413      	add	r3, r2
 8023950:	461a      	mov	r2, r3
 8023952:	0091      	lsls	r1, r2, #2
 8023954:	461a      	mov	r2, r3
 8023956:	460b      	mov	r3, r1
 8023958:	4413      	add	r3, r2
 802395a:	009b      	lsls	r3, r3, #2
 802395c:	82fb      	strh	r3, [r7, #22]
 802395e:	e070      	b.n	8023a42 <ce303_tarif+0x1376>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8023960:	8a3b      	ldrh	r3, [r7, #16]
 8023962:	3307      	adds	r3, #7
 8023964:	4a8e      	ldr	r2, [pc, #568]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023966:	5cd3      	ldrb	r3, [r2, r3]
 8023968:	2b29      	cmp	r3, #41	; 0x29
 802396a:	d117      	bne.n	802399c <ce303_tarif+0x12d0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 802396c:	8a3b      	ldrh	r3, [r7, #16]
 802396e:	3305      	adds	r3, #5
 8023970:	4a8b      	ldr	r2, [pc, #556]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023972:	5cd3      	ldrb	r3, [r2, r3]
 8023974:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023978:	4613      	mov	r3, r2
 802397a:	009b      	lsls	r3, r3, #2
 802397c:	4413      	add	r3, r2
 802397e:	005b      	lsls	r3, r3, #1
 8023980:	4619      	mov	r1, r3
 8023982:	8a3b      	ldrh	r3, [r7, #16]
 8023984:	3306      	adds	r3, #6
 8023986:	4a86      	ldr	r2, [pc, #536]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023988:	5cd3      	ldrb	r3, [r2, r3]
 802398a:	3b30      	subs	r3, #48	; 0x30
 802398c:	440b      	add	r3, r1
 802398e:	b29b      	uxth	r3, r3
 8023990:	461a      	mov	r2, r3
 8023992:	0092      	lsls	r2, r2, #2
 8023994:	4413      	add	r3, r2
 8023996:	005b      	lsls	r3, r3, #1
 8023998:	82fb      	strh	r3, [r7, #22]
 802399a:	e052      	b.n	8023a42 <ce303_tarif+0x1376>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 802399c:	8a3b      	ldrh	r3, [r7, #16]
 802399e:	3308      	adds	r3, #8
 80239a0:	4a7f      	ldr	r2, [pc, #508]	; (8023ba0 <ce303_tarif+0x14d4>)
 80239a2:	5cd3      	ldrb	r3, [r2, r3]
 80239a4:	2b29      	cmp	r3, #41	; 0x29
 80239a6:	d126      	bne.n	80239f6 <ce303_tarif+0x132a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80239a8:	8a3b      	ldrh	r3, [r7, #16]
 80239aa:	3305      	adds	r3, #5
 80239ac:	4a7c      	ldr	r2, [pc, #496]	; (8023ba0 <ce303_tarif+0x14d4>)
 80239ae:	5cd3      	ldrb	r3, [r2, r3]
 80239b0:	3b30      	subs	r3, #48	; 0x30
 80239b2:	b29b      	uxth	r3, r3
 80239b4:	461a      	mov	r2, r3
 80239b6:	0092      	lsls	r2, r2, #2
 80239b8:	4413      	add	r3, r2
 80239ba:	461a      	mov	r2, r3
 80239bc:	0091      	lsls	r1, r2, #2
 80239be:	461a      	mov	r2, r3
 80239c0:	460b      	mov	r3, r1
 80239c2:	4413      	add	r3, r2
 80239c4:	009b      	lsls	r3, r3, #2
 80239c6:	b29a      	uxth	r2, r3
 80239c8:	8a3b      	ldrh	r3, [r7, #16]
 80239ca:	3306      	adds	r3, #6
 80239cc:	4974      	ldr	r1, [pc, #464]	; (8023ba0 <ce303_tarif+0x14d4>)
 80239ce:	5ccb      	ldrb	r3, [r1, r3]
 80239d0:	3b30      	subs	r3, #48	; 0x30
 80239d2:	b29b      	uxth	r3, r3
 80239d4:	4619      	mov	r1, r3
 80239d6:	0089      	lsls	r1, r1, #2
 80239d8:	440b      	add	r3, r1
 80239da:	005b      	lsls	r3, r3, #1
 80239dc:	b29b      	uxth	r3, r3
 80239de:	4413      	add	r3, r2
 80239e0:	b29a      	uxth	r2, r3
 80239e2:	8a3b      	ldrh	r3, [r7, #16]
 80239e4:	3307      	adds	r3, #7
 80239e6:	496e      	ldr	r1, [pc, #440]	; (8023ba0 <ce303_tarif+0x14d4>)
 80239e8:	5ccb      	ldrb	r3, [r1, r3]
 80239ea:	b29b      	uxth	r3, r3
 80239ec:	4413      	add	r3, r2
 80239ee:	b29b      	uxth	r3, r3
 80239f0:	3b30      	subs	r3, #48	; 0x30
 80239f2:	82fb      	strh	r3, [r7, #22]
 80239f4:	e025      	b.n	8023a42 <ce303_tarif+0x1376>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80239f6:	8a3b      	ldrh	r3, [r7, #16]
 80239f8:	3305      	adds	r3, #5
 80239fa:	4a69      	ldr	r2, [pc, #420]	; (8023ba0 <ce303_tarif+0x14d4>)
 80239fc:	5cd3      	ldrb	r3, [r2, r3]
 80239fe:	3b30      	subs	r3, #48	; 0x30
 8023a00:	b29b      	uxth	r3, r3
 8023a02:	461a      	mov	r2, r3
 8023a04:	0092      	lsls	r2, r2, #2
 8023a06:	4413      	add	r3, r2
 8023a08:	461a      	mov	r2, r3
 8023a0a:	0091      	lsls	r1, r2, #2
 8023a0c:	461a      	mov	r2, r3
 8023a0e:	460b      	mov	r3, r1
 8023a10:	4413      	add	r3, r2
 8023a12:	009b      	lsls	r3, r3, #2
 8023a14:	b29a      	uxth	r2, r3
 8023a16:	8a3b      	ldrh	r3, [r7, #16]
 8023a18:	3306      	adds	r3, #6
 8023a1a:	4961      	ldr	r1, [pc, #388]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023a1c:	5ccb      	ldrb	r3, [r1, r3]
 8023a1e:	3b30      	subs	r3, #48	; 0x30
 8023a20:	b29b      	uxth	r3, r3
 8023a22:	4619      	mov	r1, r3
 8023a24:	0089      	lsls	r1, r1, #2
 8023a26:	440b      	add	r3, r1
 8023a28:	005b      	lsls	r3, r3, #1
 8023a2a:	b29b      	uxth	r3, r3
 8023a2c:	4413      	add	r3, r2
 8023a2e:	b29a      	uxth	r2, r3
 8023a30:	8a3b      	ldrh	r3, [r7, #16]
 8023a32:	3307      	adds	r3, #7
 8023a34:	495a      	ldr	r1, [pc, #360]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023a36:	5ccb      	ldrb	r3, [r1, r3]
 8023a38:	b29b      	uxth	r3, r3
 8023a3a:	4413      	add	r3, r2
 8023a3c:	b29b      	uxth	r3, r3
 8023a3e:	3b30      	subs	r3, #48	; 0x30
 8023a40:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023a42:	4b58      	ldr	r3, [pc, #352]	; (8023ba4 <ce303_tarif+0x14d8>)
 8023a44:	681b      	ldr	r3, [r3, #0]
 8023a46:	f04f 31ff 	mov.w	r1, #4294967295
 8023a4a:	4618      	mov	r0, r3
 8023a4c:	f7f3 f928 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8023a50:	68bb      	ldr	r3, [r7, #8]
 8023a52:	0e1b      	lsrs	r3, r3, #24
 8023a54:	b2db      	uxtb	r3, r3
 8023a56:	4619      	mov	r1, r3
 8023a58:	f242 0088 	movw	r0, #8328	; 0x2088
 8023a5c:	f001 fcf2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8023a60:	68bb      	ldr	r3, [r7, #8]
 8023a62:	0c1b      	lsrs	r3, r3, #16
 8023a64:	b2db      	uxtb	r3, r3
 8023a66:	4619      	mov	r1, r3
 8023a68:	f242 0089 	movw	r0, #8329	; 0x2089
 8023a6c:	f001 fcea 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8023a70:	68bb      	ldr	r3, [r7, #8]
 8023a72:	0a1b      	lsrs	r3, r3, #8
 8023a74:	b2db      	uxtb	r3, r3
 8023a76:	4619      	mov	r1, r3
 8023a78:	f242 008a 	movw	r0, #8330	; 0x208a
 8023a7c:	f001 fce2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8023a80:	68bb      	ldr	r3, [r7, #8]
 8023a82:	b2db      	uxtb	r3, r3
 8023a84:	4619      	mov	r1, r3
 8023a86:	f242 008b 	movw	r0, #8331	; 0x208b
 8023a8a:	f001 fcdb 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8023a8e:	8afb      	ldrh	r3, [r7, #22]
 8023a90:	0a1b      	lsrs	r3, r3, #8
 8023a92:	b29b      	uxth	r3, r3
 8023a94:	b2db      	uxtb	r3, r3
 8023a96:	4619      	mov	r1, r3
 8023a98:	f242 008c 	movw	r0, #8332	; 0x208c
 8023a9c:	f001 fcd2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8023aa0:	8afb      	ldrh	r3, [r7, #22]
 8023aa2:	b2db      	uxtb	r3, r3
 8023aa4:	4619      	mov	r1, r3
 8023aa6:	f242 008d 	movw	r0, #8333	; 0x208d
 8023aaa:	f001 fccb 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023aae:	4b3d      	ldr	r3, [pc, #244]	; (8023ba4 <ce303_tarif+0x14d8>)
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	4618      	mov	r0, r3
 8023ab4:	f7f3 f942 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8023ab8:	68bb      	ldr	r3, [r7, #8]
 8023aba:	0c1b      	lsrs	r3, r3, #16
 8023abc:	b29a      	uxth	r2, r3
 8023abe:	4b3a      	ldr	r3, [pc, #232]	; (8023ba8 <ce303_tarif+0x14dc>)
 8023ac0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8023ac4:	68bb      	ldr	r3, [r7, #8]
 8023ac6:	b29a      	uxth	r2, r3
 8023ac8:	4b37      	ldr	r3, [pc, #220]	; (8023ba8 <ce303_tarif+0x14dc>)
 8023aca:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8023ace:	4a36      	ldr	r2, [pc, #216]	; (8023ba8 <ce303_tarif+0x14dc>)
 8023ad0:	8afb      	ldrh	r3, [r7, #22]
 8023ad2:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 8023ad6:	2301      	movs	r3, #1
 8023ad8:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8023ada:	f001 bc49 	b.w	8025370 <ce303_tarif+0x2ca4>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 8023ade:	8a3b      	ldrh	r3, [r7, #16]
 8023ae0:	3305      	adds	r3, #5
 8023ae2:	4a2f      	ldr	r2, [pc, #188]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023ae4:	5cd3      	ldrb	r3, [r2, r3]
 8023ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8023ae8:	f040 8101 	bne.w	8023cee <ce303_tarif+0x1622>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8023aec:	8a3b      	ldrh	r3, [r7, #16]
 8023aee:	3301      	adds	r3, #1
 8023af0:	4a2b      	ldr	r2, [pc, #172]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023af2:	5cd3      	ldrb	r3, [r2, r3]
 8023af4:	3b30      	subs	r3, #48	; 0x30
 8023af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8023afa:	fb02 f203 	mul.w	r2, r2, r3
 8023afe:	8a3b      	ldrh	r3, [r7, #16]
 8023b00:	3302      	adds	r3, #2
 8023b02:	4927      	ldr	r1, [pc, #156]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023b04:	5ccb      	ldrb	r3, [r1, r3]
 8023b06:	3b30      	subs	r3, #48	; 0x30
 8023b08:	2164      	movs	r1, #100	; 0x64
 8023b0a:	fb01 f303 	mul.w	r3, r1, r3
 8023b0e:	18d1      	adds	r1, r2, r3
 8023b10:	8a3b      	ldrh	r3, [r7, #16]
 8023b12:	3303      	adds	r3, #3
 8023b14:	4a22      	ldr	r2, [pc, #136]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023b16:	5cd3      	ldrb	r3, [r2, r3]
 8023b18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023b1c:	4613      	mov	r3, r2
 8023b1e:	009b      	lsls	r3, r3, #2
 8023b20:	4413      	add	r3, r2
 8023b22:	005b      	lsls	r3, r3, #1
 8023b24:	18ca      	adds	r2, r1, r3
 8023b26:	8a3b      	ldrh	r3, [r7, #16]
 8023b28:	3304      	adds	r3, #4
 8023b2a:	491d      	ldr	r1, [pc, #116]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023b2c:	5ccb      	ldrb	r3, [r1, r3]
 8023b2e:	3b30      	subs	r3, #48	; 0x30
 8023b30:	4413      	add	r3, r2
 8023b32:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 8023b34:	8a3b      	ldrh	r3, [r7, #16]
 8023b36:	3307      	adds	r3, #7
 8023b38:	4a19      	ldr	r2, [pc, #100]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023b3a:	5cd3      	ldrb	r3, [r2, r3]
 8023b3c:	2b29      	cmp	r3, #41	; 0x29
 8023b3e:	d110      	bne.n	8023b62 <ce303_tarif+0x1496>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8023b40:	8a3b      	ldrh	r3, [r7, #16]
 8023b42:	3306      	adds	r3, #6
 8023b44:	4a16      	ldr	r2, [pc, #88]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023b46:	5cd3      	ldrb	r3, [r2, r3]
 8023b48:	3b30      	subs	r3, #48	; 0x30
 8023b4a:	b29b      	uxth	r3, r3
 8023b4c:	461a      	mov	r2, r3
 8023b4e:	0092      	lsls	r2, r2, #2
 8023b50:	4413      	add	r3, r2
 8023b52:	461a      	mov	r2, r3
 8023b54:	0091      	lsls	r1, r2, #2
 8023b56:	461a      	mov	r2, r3
 8023b58:	460b      	mov	r3, r1
 8023b5a:	4413      	add	r3, r2
 8023b5c:	009b      	lsls	r3, r3, #2
 8023b5e:	82fb      	strh	r3, [r7, #22]
 8023b60:	e077      	b.n	8023c52 <ce303_tarif+0x1586>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 8023b62:	8a3b      	ldrh	r3, [r7, #16]
 8023b64:	3308      	adds	r3, #8
 8023b66:	4a0e      	ldr	r2, [pc, #56]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023b68:	5cd3      	ldrb	r3, [r2, r3]
 8023b6a:	2b29      	cmp	r3, #41	; 0x29
 8023b6c:	d11e      	bne.n	8023bac <ce303_tarif+0x14e0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8023b6e:	8a3b      	ldrh	r3, [r7, #16]
 8023b70:	3306      	adds	r3, #6
 8023b72:	4a0b      	ldr	r2, [pc, #44]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023b74:	5cd3      	ldrb	r3, [r2, r3]
 8023b76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023b7a:	4613      	mov	r3, r2
 8023b7c:	009b      	lsls	r3, r3, #2
 8023b7e:	4413      	add	r3, r2
 8023b80:	005b      	lsls	r3, r3, #1
 8023b82:	4619      	mov	r1, r3
 8023b84:	8a3b      	ldrh	r3, [r7, #16]
 8023b86:	3307      	adds	r3, #7
 8023b88:	4a05      	ldr	r2, [pc, #20]	; (8023ba0 <ce303_tarif+0x14d4>)
 8023b8a:	5cd3      	ldrb	r3, [r2, r3]
 8023b8c:	3b30      	subs	r3, #48	; 0x30
 8023b8e:	440b      	add	r3, r1
 8023b90:	b29b      	uxth	r3, r3
 8023b92:	461a      	mov	r2, r3
 8023b94:	0092      	lsls	r2, r2, #2
 8023b96:	4413      	add	r3, r2
 8023b98:	005b      	lsls	r3, r3, #1
 8023b9a:	82fb      	strh	r3, [r7, #22]
 8023b9c:	e059      	b.n	8023c52 <ce303_tarif+0x1586>
 8023b9e:	bf00      	nop
 8023ba0:	200098e4 	.word	0x200098e4
 8023ba4:	20009a6c 	.word	0x20009a6c
 8023ba8:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8023bac:	8a3b      	ldrh	r3, [r7, #16]
 8023bae:	3309      	adds	r3, #9
 8023bb0:	4a9a      	ldr	r2, [pc, #616]	; (8023e1c <ce303_tarif+0x1750>)
 8023bb2:	5cd3      	ldrb	r3, [r2, r3]
 8023bb4:	2b29      	cmp	r3, #41	; 0x29
 8023bb6:	d126      	bne.n	8023c06 <ce303_tarif+0x153a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8023bb8:	8a3b      	ldrh	r3, [r7, #16]
 8023bba:	3306      	adds	r3, #6
 8023bbc:	4a97      	ldr	r2, [pc, #604]	; (8023e1c <ce303_tarif+0x1750>)
 8023bbe:	5cd3      	ldrb	r3, [r2, r3]
 8023bc0:	3b30      	subs	r3, #48	; 0x30
 8023bc2:	b29b      	uxth	r3, r3
 8023bc4:	461a      	mov	r2, r3
 8023bc6:	0092      	lsls	r2, r2, #2
 8023bc8:	4413      	add	r3, r2
 8023bca:	461a      	mov	r2, r3
 8023bcc:	0091      	lsls	r1, r2, #2
 8023bce:	461a      	mov	r2, r3
 8023bd0:	460b      	mov	r3, r1
 8023bd2:	4413      	add	r3, r2
 8023bd4:	009b      	lsls	r3, r3, #2
 8023bd6:	b29a      	uxth	r2, r3
 8023bd8:	8a3b      	ldrh	r3, [r7, #16]
 8023bda:	3307      	adds	r3, #7
 8023bdc:	498f      	ldr	r1, [pc, #572]	; (8023e1c <ce303_tarif+0x1750>)
 8023bde:	5ccb      	ldrb	r3, [r1, r3]
 8023be0:	3b30      	subs	r3, #48	; 0x30
 8023be2:	b29b      	uxth	r3, r3
 8023be4:	4619      	mov	r1, r3
 8023be6:	0089      	lsls	r1, r1, #2
 8023be8:	440b      	add	r3, r1
 8023bea:	005b      	lsls	r3, r3, #1
 8023bec:	b29b      	uxth	r3, r3
 8023bee:	4413      	add	r3, r2
 8023bf0:	b29a      	uxth	r2, r3
 8023bf2:	8a3b      	ldrh	r3, [r7, #16]
 8023bf4:	3308      	adds	r3, #8
 8023bf6:	4989      	ldr	r1, [pc, #548]	; (8023e1c <ce303_tarif+0x1750>)
 8023bf8:	5ccb      	ldrb	r3, [r1, r3]
 8023bfa:	b29b      	uxth	r3, r3
 8023bfc:	4413      	add	r3, r2
 8023bfe:	b29b      	uxth	r3, r3
 8023c00:	3b30      	subs	r3, #48	; 0x30
 8023c02:	82fb      	strh	r3, [r7, #22]
 8023c04:	e025      	b.n	8023c52 <ce303_tarif+0x1586>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8023c06:	8a3b      	ldrh	r3, [r7, #16]
 8023c08:	3306      	adds	r3, #6
 8023c0a:	4a84      	ldr	r2, [pc, #528]	; (8023e1c <ce303_tarif+0x1750>)
 8023c0c:	5cd3      	ldrb	r3, [r2, r3]
 8023c0e:	3b30      	subs	r3, #48	; 0x30
 8023c10:	b29b      	uxth	r3, r3
 8023c12:	461a      	mov	r2, r3
 8023c14:	0092      	lsls	r2, r2, #2
 8023c16:	4413      	add	r3, r2
 8023c18:	461a      	mov	r2, r3
 8023c1a:	0091      	lsls	r1, r2, #2
 8023c1c:	461a      	mov	r2, r3
 8023c1e:	460b      	mov	r3, r1
 8023c20:	4413      	add	r3, r2
 8023c22:	009b      	lsls	r3, r3, #2
 8023c24:	b29a      	uxth	r2, r3
 8023c26:	8a3b      	ldrh	r3, [r7, #16]
 8023c28:	3307      	adds	r3, #7
 8023c2a:	497c      	ldr	r1, [pc, #496]	; (8023e1c <ce303_tarif+0x1750>)
 8023c2c:	5ccb      	ldrb	r3, [r1, r3]
 8023c2e:	3b30      	subs	r3, #48	; 0x30
 8023c30:	b29b      	uxth	r3, r3
 8023c32:	4619      	mov	r1, r3
 8023c34:	0089      	lsls	r1, r1, #2
 8023c36:	440b      	add	r3, r1
 8023c38:	005b      	lsls	r3, r3, #1
 8023c3a:	b29b      	uxth	r3, r3
 8023c3c:	4413      	add	r3, r2
 8023c3e:	b29a      	uxth	r2, r3
 8023c40:	8a3b      	ldrh	r3, [r7, #16]
 8023c42:	3308      	adds	r3, #8
 8023c44:	4975      	ldr	r1, [pc, #468]	; (8023e1c <ce303_tarif+0x1750>)
 8023c46:	5ccb      	ldrb	r3, [r1, r3]
 8023c48:	b29b      	uxth	r3, r3
 8023c4a:	4413      	add	r3, r2
 8023c4c:	b29b      	uxth	r3, r3
 8023c4e:	3b30      	subs	r3, #48	; 0x30
 8023c50:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023c52:	4b73      	ldr	r3, [pc, #460]	; (8023e20 <ce303_tarif+0x1754>)
 8023c54:	681b      	ldr	r3, [r3, #0]
 8023c56:	f04f 31ff 	mov.w	r1, #4294967295
 8023c5a:	4618      	mov	r0, r3
 8023c5c:	f7f3 f820 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8023c60:	68bb      	ldr	r3, [r7, #8]
 8023c62:	0e1b      	lsrs	r3, r3, #24
 8023c64:	b2db      	uxtb	r3, r3
 8023c66:	4619      	mov	r1, r3
 8023c68:	f242 0088 	movw	r0, #8328	; 0x2088
 8023c6c:	f001 fbea 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8023c70:	68bb      	ldr	r3, [r7, #8]
 8023c72:	0c1b      	lsrs	r3, r3, #16
 8023c74:	b2db      	uxtb	r3, r3
 8023c76:	4619      	mov	r1, r3
 8023c78:	f242 0089 	movw	r0, #8329	; 0x2089
 8023c7c:	f001 fbe2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8023c80:	68bb      	ldr	r3, [r7, #8]
 8023c82:	0a1b      	lsrs	r3, r3, #8
 8023c84:	b2db      	uxtb	r3, r3
 8023c86:	4619      	mov	r1, r3
 8023c88:	f242 008a 	movw	r0, #8330	; 0x208a
 8023c8c:	f001 fbda 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8023c90:	68bb      	ldr	r3, [r7, #8]
 8023c92:	b2db      	uxtb	r3, r3
 8023c94:	4619      	mov	r1, r3
 8023c96:	f242 008b 	movw	r0, #8331	; 0x208b
 8023c9a:	f001 fbd3 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8023c9e:	8afb      	ldrh	r3, [r7, #22]
 8023ca0:	0a1b      	lsrs	r3, r3, #8
 8023ca2:	b29b      	uxth	r3, r3
 8023ca4:	b2db      	uxtb	r3, r3
 8023ca6:	4619      	mov	r1, r3
 8023ca8:	f242 008c 	movw	r0, #8332	; 0x208c
 8023cac:	f001 fbca 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8023cb0:	8afb      	ldrh	r3, [r7, #22]
 8023cb2:	b2db      	uxtb	r3, r3
 8023cb4:	4619      	mov	r1, r3
 8023cb6:	f242 008d 	movw	r0, #8333	; 0x208d
 8023cba:	f001 fbc3 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023cbe:	4b58      	ldr	r3, [pc, #352]	; (8023e20 <ce303_tarif+0x1754>)
 8023cc0:	681b      	ldr	r3, [r3, #0]
 8023cc2:	4618      	mov	r0, r3
 8023cc4:	f7f3 f83a 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8023cc8:	68bb      	ldr	r3, [r7, #8]
 8023cca:	0c1b      	lsrs	r3, r3, #16
 8023ccc:	b29a      	uxth	r2, r3
 8023cce:	4b55      	ldr	r3, [pc, #340]	; (8023e24 <ce303_tarif+0x1758>)
 8023cd0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8023cd4:	68bb      	ldr	r3, [r7, #8]
 8023cd6:	b29a      	uxth	r2, r3
 8023cd8:	4b52      	ldr	r3, [pc, #328]	; (8023e24 <ce303_tarif+0x1758>)
 8023cda:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8023cde:	4a51      	ldr	r2, [pc, #324]	; (8023e24 <ce303_tarif+0x1758>)
 8023ce0:	8afb      	ldrh	r3, [r7, #22]
 8023ce2:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 8023ce6:	2301      	movs	r3, #1
 8023ce8:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8023cea:	f001 bb41 	b.w	8025370 <ce303_tarif+0x2ca4>

			}

			else if( meter_rx_buffer[i+6] == 0x2E) // пять цифр перед запятой
 8023cee:	8a3b      	ldrh	r3, [r7, #16]
 8023cf0:	3306      	adds	r3, #6
 8023cf2:	4a4a      	ldr	r2, [pc, #296]	; (8023e1c <ce303_tarif+0x1750>)
 8023cf4:	5cd3      	ldrb	r3, [r2, r3]
 8023cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8023cf8:	f041 833a 	bne.w	8025370 <ce303_tarif+0x2ca4>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8023cfc:	8a3b      	ldrh	r3, [r7, #16]
 8023cfe:	3301      	adds	r3, #1
 8023d00:	4a46      	ldr	r2, [pc, #280]	; (8023e1c <ce303_tarif+0x1750>)
 8023d02:	5cd3      	ldrb	r3, [r2, r3]
 8023d04:	3b30      	subs	r3, #48	; 0x30
 8023d06:	f242 7210 	movw	r2, #10000	; 0x2710
 8023d0a:	fb02 f203 	mul.w	r2, r2, r3
 8023d0e:	8a3b      	ldrh	r3, [r7, #16]
 8023d10:	3302      	adds	r3, #2
 8023d12:	4942      	ldr	r1, [pc, #264]	; (8023e1c <ce303_tarif+0x1750>)
 8023d14:	5ccb      	ldrb	r3, [r1, r3]
 8023d16:	3b30      	subs	r3, #48	; 0x30
 8023d18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8023d1c:	fb01 f303 	mul.w	r3, r1, r3
 8023d20:	441a      	add	r2, r3
 8023d22:	8a3b      	ldrh	r3, [r7, #16]
 8023d24:	3303      	adds	r3, #3
 8023d26:	493d      	ldr	r1, [pc, #244]	; (8023e1c <ce303_tarif+0x1750>)
 8023d28:	5ccb      	ldrb	r3, [r1, r3]
 8023d2a:	3b30      	subs	r3, #48	; 0x30
 8023d2c:	2164      	movs	r1, #100	; 0x64
 8023d2e:	fb01 f303 	mul.w	r3, r1, r3
 8023d32:	18d1      	adds	r1, r2, r3
 8023d34:	8a3b      	ldrh	r3, [r7, #16]
 8023d36:	3304      	adds	r3, #4
 8023d38:	4a38      	ldr	r2, [pc, #224]	; (8023e1c <ce303_tarif+0x1750>)
 8023d3a:	5cd3      	ldrb	r3, [r2, r3]
 8023d3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023d40:	4613      	mov	r3, r2
 8023d42:	009b      	lsls	r3, r3, #2
 8023d44:	4413      	add	r3, r2
 8023d46:	005b      	lsls	r3, r3, #1
 8023d48:	18ca      	adds	r2, r1, r3
 8023d4a:	8a3b      	ldrh	r3, [r7, #16]
 8023d4c:	3305      	adds	r3, #5
 8023d4e:	4933      	ldr	r1, [pc, #204]	; (8023e1c <ce303_tarif+0x1750>)
 8023d50:	5ccb      	ldrb	r3, [r1, r3]
 8023d52:	3b30      	subs	r3, #48	; 0x30
 8023d54:	4413      	add	r3, r2
 8023d56:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+8] == 0x29 ) // если 1 разряд после запятой
 8023d58:	8a3b      	ldrh	r3, [r7, #16]
 8023d5a:	3308      	adds	r3, #8
 8023d5c:	4a2f      	ldr	r2, [pc, #188]	; (8023e1c <ce303_tarif+0x1750>)
 8023d5e:	5cd3      	ldrb	r3, [r2, r3]
 8023d60:	2b29      	cmp	r3, #41	; 0x29
 8023d62:	d110      	bne.n	8023d86 <ce303_tarif+0x16ba>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+7])-0x30)*100;
 8023d64:	8a3b      	ldrh	r3, [r7, #16]
 8023d66:	3307      	adds	r3, #7
 8023d68:	4a2c      	ldr	r2, [pc, #176]	; (8023e1c <ce303_tarif+0x1750>)
 8023d6a:	5cd3      	ldrb	r3, [r2, r3]
 8023d6c:	3b30      	subs	r3, #48	; 0x30
 8023d6e:	b29b      	uxth	r3, r3
 8023d70:	461a      	mov	r2, r3
 8023d72:	0092      	lsls	r2, r2, #2
 8023d74:	4413      	add	r3, r2
 8023d76:	461a      	mov	r2, r3
 8023d78:	0091      	lsls	r1, r2, #2
 8023d7a:	461a      	mov	r2, r3
 8023d7c:	460b      	mov	r3, r1
 8023d7e:	4413      	add	r3, r2
 8023d80:	009b      	lsls	r3, r3, #2
 8023d82:	82fb      	strh	r3, [r7, #22]
 8023d84:	e076      	b.n	8023e74 <ce303_tarif+0x17a8>
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 2 разряда после запятой
 8023d86:	8a3b      	ldrh	r3, [r7, #16]
 8023d88:	3309      	adds	r3, #9
 8023d8a:	4a24      	ldr	r2, [pc, #144]	; (8023e1c <ce303_tarif+0x1750>)
 8023d8c:	5cd3      	ldrb	r3, [r2, r3]
 8023d8e:	2b29      	cmp	r3, #41	; 0x29
 8023d90:	d117      	bne.n	8023dc2 <ce303_tarif+0x16f6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30))*10;
 8023d92:	8a3b      	ldrh	r3, [r7, #16]
 8023d94:	3307      	adds	r3, #7
 8023d96:	4a21      	ldr	r2, [pc, #132]	; (8023e1c <ce303_tarif+0x1750>)
 8023d98:	5cd3      	ldrb	r3, [r2, r3]
 8023d9a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023d9e:	4613      	mov	r3, r2
 8023da0:	009b      	lsls	r3, r3, #2
 8023da2:	4413      	add	r3, r2
 8023da4:	005b      	lsls	r3, r3, #1
 8023da6:	4619      	mov	r1, r3
 8023da8:	8a3b      	ldrh	r3, [r7, #16]
 8023daa:	3308      	adds	r3, #8
 8023dac:	4a1b      	ldr	r2, [pc, #108]	; (8023e1c <ce303_tarif+0x1750>)
 8023dae:	5cd3      	ldrb	r3, [r2, r3]
 8023db0:	3b30      	subs	r3, #48	; 0x30
 8023db2:	440b      	add	r3, r1
 8023db4:	b29b      	uxth	r3, r3
 8023db6:	461a      	mov	r2, r3
 8023db8:	0092      	lsls	r2, r2, #2
 8023dba:	4413      	add	r3, r2
 8023dbc:	005b      	lsls	r3, r3, #1
 8023dbe:	82fb      	strh	r3, [r7, #22]
 8023dc0:	e058      	b.n	8023e74 <ce303_tarif+0x17a8>
				}
				else if( meter_rx_buffer[i+10] == 0x29 ) // если 3 разряда после запятой
 8023dc2:	8a3b      	ldrh	r3, [r7, #16]
 8023dc4:	330a      	adds	r3, #10
 8023dc6:	4a15      	ldr	r2, [pc, #84]	; (8023e1c <ce303_tarif+0x1750>)
 8023dc8:	5cd3      	ldrb	r3, [r2, r3]
 8023dca:	2b29      	cmp	r3, #41	; 0x29
 8023dcc:	d12c      	bne.n	8023e28 <ce303_tarif+0x175c>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+7])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+8])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+9])-0x30);
 8023dce:	8a3b      	ldrh	r3, [r7, #16]
 8023dd0:	3307      	adds	r3, #7
 8023dd2:	4a12      	ldr	r2, [pc, #72]	; (8023e1c <ce303_tarif+0x1750>)
 8023dd4:	5cd3      	ldrb	r3, [r2, r3]
 8023dd6:	3b30      	subs	r3, #48	; 0x30
 8023dd8:	b29b      	uxth	r3, r3
 8023dda:	461a      	mov	r2, r3
 8023ddc:	0092      	lsls	r2, r2, #2
 8023dde:	4413      	add	r3, r2
 8023de0:	461a      	mov	r2, r3
 8023de2:	0091      	lsls	r1, r2, #2
 8023de4:	461a      	mov	r2, r3
 8023de6:	460b      	mov	r3, r1
 8023de8:	4413      	add	r3, r2
 8023dea:	009b      	lsls	r3, r3, #2
 8023dec:	b29a      	uxth	r2, r3
 8023dee:	8a3b      	ldrh	r3, [r7, #16]
 8023df0:	3308      	adds	r3, #8
 8023df2:	490a      	ldr	r1, [pc, #40]	; (8023e1c <ce303_tarif+0x1750>)
 8023df4:	5ccb      	ldrb	r3, [r1, r3]
 8023df6:	3b30      	subs	r3, #48	; 0x30
 8023df8:	b29b      	uxth	r3, r3
 8023dfa:	4619      	mov	r1, r3
 8023dfc:	0089      	lsls	r1, r1, #2
 8023dfe:	440b      	add	r3, r1
 8023e00:	005b      	lsls	r3, r3, #1
 8023e02:	b29b      	uxth	r3, r3
 8023e04:	4413      	add	r3, r2
 8023e06:	b29a      	uxth	r2, r3
 8023e08:	8a3b      	ldrh	r3, [r7, #16]
 8023e0a:	3309      	adds	r3, #9
 8023e0c:	4903      	ldr	r1, [pc, #12]	; (8023e1c <ce303_tarif+0x1750>)
 8023e0e:	5ccb      	ldrb	r3, [r1, r3]
 8023e10:	b29b      	uxth	r3, r3
 8023e12:	4413      	add	r3, r2
 8023e14:	b29b      	uxth	r3, r3
 8023e16:	3b30      	subs	r3, #48	; 0x30
 8023e18:	82fb      	strh	r3, [r7, #22]
 8023e1a:	e02b      	b.n	8023e74 <ce303_tarif+0x17a8>
 8023e1c:	200098e4 	.word	0x200098e4
 8023e20:	20009a6c 	.word	0x20009a6c
 8023e24:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+7])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+8])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+9])-0x30);
 8023e28:	8a3b      	ldrh	r3, [r7, #16]
 8023e2a:	3307      	adds	r3, #7
 8023e2c:	4a7f      	ldr	r2, [pc, #508]	; (802402c <ce303_tarif+0x1960>)
 8023e2e:	5cd3      	ldrb	r3, [r2, r3]
 8023e30:	3b30      	subs	r3, #48	; 0x30
 8023e32:	b29b      	uxth	r3, r3
 8023e34:	461a      	mov	r2, r3
 8023e36:	0092      	lsls	r2, r2, #2
 8023e38:	4413      	add	r3, r2
 8023e3a:	461a      	mov	r2, r3
 8023e3c:	0091      	lsls	r1, r2, #2
 8023e3e:	461a      	mov	r2, r3
 8023e40:	460b      	mov	r3, r1
 8023e42:	4413      	add	r3, r2
 8023e44:	009b      	lsls	r3, r3, #2
 8023e46:	b29a      	uxth	r2, r3
 8023e48:	8a3b      	ldrh	r3, [r7, #16]
 8023e4a:	3308      	adds	r3, #8
 8023e4c:	4977      	ldr	r1, [pc, #476]	; (802402c <ce303_tarif+0x1960>)
 8023e4e:	5ccb      	ldrb	r3, [r1, r3]
 8023e50:	3b30      	subs	r3, #48	; 0x30
 8023e52:	b29b      	uxth	r3, r3
 8023e54:	4619      	mov	r1, r3
 8023e56:	0089      	lsls	r1, r1, #2
 8023e58:	440b      	add	r3, r1
 8023e5a:	005b      	lsls	r3, r3, #1
 8023e5c:	b29b      	uxth	r3, r3
 8023e5e:	4413      	add	r3, r2
 8023e60:	b29a      	uxth	r2, r3
 8023e62:	8a3b      	ldrh	r3, [r7, #16]
 8023e64:	3309      	adds	r3, #9
 8023e66:	4971      	ldr	r1, [pc, #452]	; (802402c <ce303_tarif+0x1960>)
 8023e68:	5ccb      	ldrb	r3, [r1, r3]
 8023e6a:	b29b      	uxth	r3, r3
 8023e6c:	4413      	add	r3, r2
 8023e6e:	b29b      	uxth	r3, r3
 8023e70:	3b30      	subs	r3, #48	; 0x30
 8023e72:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023e74:	4b6e      	ldr	r3, [pc, #440]	; (8024030 <ce303_tarif+0x1964>)
 8023e76:	681b      	ldr	r3, [r3, #0]
 8023e78:	f04f 31ff 	mov.w	r1, #4294967295
 8023e7c:	4618      	mov	r0, r3
 8023e7e:	f7f2 ff0f 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8023e82:	68bb      	ldr	r3, [r7, #8]
 8023e84:	0e1b      	lsrs	r3, r3, #24
 8023e86:	b2db      	uxtb	r3, r3
 8023e88:	4619      	mov	r1, r3
 8023e8a:	f242 0088 	movw	r0, #8328	; 0x2088
 8023e8e:	f001 fad9 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8023e92:	68bb      	ldr	r3, [r7, #8]
 8023e94:	0c1b      	lsrs	r3, r3, #16
 8023e96:	b2db      	uxtb	r3, r3
 8023e98:	4619      	mov	r1, r3
 8023e9a:	f242 0089 	movw	r0, #8329	; 0x2089
 8023e9e:	f001 fad1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8023ea2:	68bb      	ldr	r3, [r7, #8]
 8023ea4:	0a1b      	lsrs	r3, r3, #8
 8023ea6:	b2db      	uxtb	r3, r3
 8023ea8:	4619      	mov	r1, r3
 8023eaa:	f242 008a 	movw	r0, #8330	; 0x208a
 8023eae:	f001 fac9 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8023eb2:	68bb      	ldr	r3, [r7, #8]
 8023eb4:	b2db      	uxtb	r3, r3
 8023eb6:	4619      	mov	r1, r3
 8023eb8:	f242 008b 	movw	r0, #8331	; 0x208b
 8023ebc:	f001 fac2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8023ec0:	8afb      	ldrh	r3, [r7, #22]
 8023ec2:	0a1b      	lsrs	r3, r3, #8
 8023ec4:	b29b      	uxth	r3, r3
 8023ec6:	b2db      	uxtb	r3, r3
 8023ec8:	4619      	mov	r1, r3
 8023eca:	f242 008c 	movw	r0, #8332	; 0x208c
 8023ece:	f001 fab9 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8023ed2:	8afb      	ldrh	r3, [r7, #22]
 8023ed4:	b2db      	uxtb	r3, r3
 8023ed6:	4619      	mov	r1, r3
 8023ed8:	f242 008d 	movw	r0, #8333	; 0x208d
 8023edc:	f001 fab2 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023ee0:	4b53      	ldr	r3, [pc, #332]	; (8024030 <ce303_tarif+0x1964>)
 8023ee2:	681b      	ldr	r3, [r3, #0]
 8023ee4:	4618      	mov	r0, r3
 8023ee6:	f7f2 ff29 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8023eea:	68bb      	ldr	r3, [r7, #8]
 8023eec:	0c1b      	lsrs	r3, r3, #16
 8023eee:	b29a      	uxth	r2, r3
 8023ef0:	4b50      	ldr	r3, [pc, #320]	; (8024034 <ce303_tarif+0x1968>)
 8023ef2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8023ef6:	68bb      	ldr	r3, [r7, #8]
 8023ef8:	b29a      	uxth	r2, r3
 8023efa:	4b4e      	ldr	r3, [pc, #312]	; (8024034 <ce303_tarif+0x1968>)
 8023efc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8023f00:	4a4c      	ldr	r2, [pc, #304]	; (8024034 <ce303_tarif+0x1968>)
 8023f02:	8afb      	ldrh	r3, [r7, #22]
 8023f04:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 8023f08:	2301      	movs	r3, #1
 8023f0a:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8023f0c:	f001 ba30 	b.w	8025370 <ce303_tarif+0x2ca4>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8023f10:	8a3b      	ldrh	r3, [r7, #16]
 8023f12:	4a46      	ldr	r2, [pc, #280]	; (802402c <ce303_tarif+0x1960>)
 8023f14:	5cd3      	ldrb	r3, [r2, r3]
 8023f16:	2b28      	cmp	r3, #40	; 0x28
 8023f18:	f040 8508 	bne.w	802492c <ce303_tarif+0x2260>
 8023f1c:	7d7b      	ldrb	r3, [r7, #21]
 8023f1e:	2b01      	cmp	r3, #1
 8023f20:	f040 8504 	bne.w	802492c <ce303_tarif+0x2260>
 8023f24:	7d3b      	ldrb	r3, [r7, #20]
 8023f26:	2b01      	cmp	r3, #1
 8023f28:	f040 8500 	bne.w	802492c <ce303_tarif+0x2260>
 8023f2c:	7cfb      	ldrb	r3, [r7, #19]
 8023f2e:	2b00      	cmp	r3, #0
 8023f30:	f040 84fc 	bne.w	802492c <ce303_tarif+0x2260>
 8023f34:	7cbb      	ldrb	r3, [r7, #18]
 8023f36:	2b00      	cmp	r3, #0
 8023f38:	f040 84f8 	bne.w	802492c <ce303_tarif+0x2260>
 8023f3c:	7bfb      	ldrb	r3, [r7, #15]
 8023f3e:	2b00      	cmp	r3, #0
 8023f40:	f040 84f4 	bne.w	802492c <ce303_tarif+0x2260>
 8023f44:	7bbb      	ldrb	r3, [r7, #14]
 8023f46:	2b00      	cmp	r3, #0
 8023f48:	f040 84f0 	bne.w	802492c <ce303_tarif+0x2260>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8023f4c:	8a3b      	ldrh	r3, [r7, #16]
 8023f4e:	3302      	adds	r3, #2
 8023f50:	4a36      	ldr	r2, [pc, #216]	; (802402c <ce303_tarif+0x1960>)
 8023f52:	5cd3      	ldrb	r3, [r2, r3]
 8023f54:	2b2e      	cmp	r3, #46	; 0x2e
 8023f56:	f040 80e3 	bne.w	8024120 <ce303_tarif+0x1a54>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8023f5a:	8a3b      	ldrh	r3, [r7, #16]
 8023f5c:	3301      	adds	r3, #1
 8023f5e:	4a33      	ldr	r2, [pc, #204]	; (802402c <ce303_tarif+0x1960>)
 8023f60:	5cd3      	ldrb	r3, [r2, r3]
 8023f62:	3b30      	subs	r3, #48	; 0x30
 8023f64:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8023f66:	8a3b      	ldrh	r3, [r7, #16]
 8023f68:	3304      	adds	r3, #4
 8023f6a:	4a30      	ldr	r2, [pc, #192]	; (802402c <ce303_tarif+0x1960>)
 8023f6c:	5cd3      	ldrb	r3, [r2, r3]
 8023f6e:	2b29      	cmp	r3, #41	; 0x29
 8023f70:	d110      	bne.n	8023f94 <ce303_tarif+0x18c8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8023f72:	8a3b      	ldrh	r3, [r7, #16]
 8023f74:	3303      	adds	r3, #3
 8023f76:	4a2d      	ldr	r2, [pc, #180]	; (802402c <ce303_tarif+0x1960>)
 8023f78:	5cd3      	ldrb	r3, [r2, r3]
 8023f7a:	3b30      	subs	r3, #48	; 0x30
 8023f7c:	b29b      	uxth	r3, r3
 8023f7e:	461a      	mov	r2, r3
 8023f80:	0092      	lsls	r2, r2, #2
 8023f82:	4413      	add	r3, r2
 8023f84:	461a      	mov	r2, r3
 8023f86:	0091      	lsls	r1, r2, #2
 8023f88:	461a      	mov	r2, r3
 8023f8a:	460b      	mov	r3, r1
 8023f8c:	4413      	add	r3, r2
 8023f8e:	009b      	lsls	r3, r3, #2
 8023f90:	82fb      	strh	r3, [r7, #22]
 8023f92:	e077      	b.n	8024084 <ce303_tarif+0x19b8>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8023f94:	8a3b      	ldrh	r3, [r7, #16]
 8023f96:	3305      	adds	r3, #5
 8023f98:	4a24      	ldr	r2, [pc, #144]	; (802402c <ce303_tarif+0x1960>)
 8023f9a:	5cd3      	ldrb	r3, [r2, r3]
 8023f9c:	2b29      	cmp	r3, #41	; 0x29
 8023f9e:	d117      	bne.n	8023fd0 <ce303_tarif+0x1904>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8023fa0:	8a3b      	ldrh	r3, [r7, #16]
 8023fa2:	3303      	adds	r3, #3
 8023fa4:	4a21      	ldr	r2, [pc, #132]	; (802402c <ce303_tarif+0x1960>)
 8023fa6:	5cd3      	ldrb	r3, [r2, r3]
 8023fa8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023fac:	4613      	mov	r3, r2
 8023fae:	009b      	lsls	r3, r3, #2
 8023fb0:	4413      	add	r3, r2
 8023fb2:	005b      	lsls	r3, r3, #1
 8023fb4:	4619      	mov	r1, r3
 8023fb6:	8a3b      	ldrh	r3, [r7, #16]
 8023fb8:	3304      	adds	r3, #4
 8023fba:	4a1c      	ldr	r2, [pc, #112]	; (802402c <ce303_tarif+0x1960>)
 8023fbc:	5cd3      	ldrb	r3, [r2, r3]
 8023fbe:	3b30      	subs	r3, #48	; 0x30
 8023fc0:	440b      	add	r3, r1
 8023fc2:	b29b      	uxth	r3, r3
 8023fc4:	461a      	mov	r2, r3
 8023fc6:	0092      	lsls	r2, r2, #2
 8023fc8:	4413      	add	r3, r2
 8023fca:	005b      	lsls	r3, r3, #1
 8023fcc:	82fb      	strh	r3, [r7, #22]
 8023fce:	e059      	b.n	8024084 <ce303_tarif+0x19b8>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8023fd0:	8a3b      	ldrh	r3, [r7, #16]
 8023fd2:	3306      	adds	r3, #6
 8023fd4:	4a15      	ldr	r2, [pc, #84]	; (802402c <ce303_tarif+0x1960>)
 8023fd6:	5cd3      	ldrb	r3, [r2, r3]
 8023fd8:	2b29      	cmp	r3, #41	; 0x29
 8023fda:	d12d      	bne.n	8024038 <ce303_tarif+0x196c>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8023fdc:	8a3b      	ldrh	r3, [r7, #16]
 8023fde:	3303      	adds	r3, #3
 8023fe0:	4a12      	ldr	r2, [pc, #72]	; (802402c <ce303_tarif+0x1960>)
 8023fe2:	5cd3      	ldrb	r3, [r2, r3]
 8023fe4:	3b30      	subs	r3, #48	; 0x30
 8023fe6:	b29b      	uxth	r3, r3
 8023fe8:	461a      	mov	r2, r3
 8023fea:	0092      	lsls	r2, r2, #2
 8023fec:	4413      	add	r3, r2
 8023fee:	461a      	mov	r2, r3
 8023ff0:	0091      	lsls	r1, r2, #2
 8023ff2:	461a      	mov	r2, r3
 8023ff4:	460b      	mov	r3, r1
 8023ff6:	4413      	add	r3, r2
 8023ff8:	009b      	lsls	r3, r3, #2
 8023ffa:	b29a      	uxth	r2, r3
 8023ffc:	8a3b      	ldrh	r3, [r7, #16]
 8023ffe:	3304      	adds	r3, #4
 8024000:	490a      	ldr	r1, [pc, #40]	; (802402c <ce303_tarif+0x1960>)
 8024002:	5ccb      	ldrb	r3, [r1, r3]
 8024004:	3b30      	subs	r3, #48	; 0x30
 8024006:	b29b      	uxth	r3, r3
 8024008:	4619      	mov	r1, r3
 802400a:	0089      	lsls	r1, r1, #2
 802400c:	440b      	add	r3, r1
 802400e:	005b      	lsls	r3, r3, #1
 8024010:	b29b      	uxth	r3, r3
 8024012:	4413      	add	r3, r2
 8024014:	b29a      	uxth	r2, r3
 8024016:	8a3b      	ldrh	r3, [r7, #16]
 8024018:	3305      	adds	r3, #5
 802401a:	4904      	ldr	r1, [pc, #16]	; (802402c <ce303_tarif+0x1960>)
 802401c:	5ccb      	ldrb	r3, [r1, r3]
 802401e:	b29b      	uxth	r3, r3
 8024020:	4413      	add	r3, r2
 8024022:	b29b      	uxth	r3, r3
 8024024:	3b30      	subs	r3, #48	; 0x30
 8024026:	82fb      	strh	r3, [r7, #22]
 8024028:	e02c      	b.n	8024084 <ce303_tarif+0x19b8>
 802402a:	bf00      	nop
 802402c:	200098e4 	.word	0x200098e4
 8024030:	20009a6c 	.word	0x20009a6c
 8024034:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8024038:	8a3b      	ldrh	r3, [r7, #16]
 802403a:	3303      	adds	r3, #3
 802403c:	4ab0      	ldr	r2, [pc, #704]	; (8024300 <ce303_tarif+0x1c34>)
 802403e:	5cd3      	ldrb	r3, [r2, r3]
 8024040:	3b30      	subs	r3, #48	; 0x30
 8024042:	b29b      	uxth	r3, r3
 8024044:	461a      	mov	r2, r3
 8024046:	0092      	lsls	r2, r2, #2
 8024048:	4413      	add	r3, r2
 802404a:	461a      	mov	r2, r3
 802404c:	0091      	lsls	r1, r2, #2
 802404e:	461a      	mov	r2, r3
 8024050:	460b      	mov	r3, r1
 8024052:	4413      	add	r3, r2
 8024054:	009b      	lsls	r3, r3, #2
 8024056:	b29a      	uxth	r2, r3
 8024058:	8a3b      	ldrh	r3, [r7, #16]
 802405a:	3304      	adds	r3, #4
 802405c:	49a8      	ldr	r1, [pc, #672]	; (8024300 <ce303_tarif+0x1c34>)
 802405e:	5ccb      	ldrb	r3, [r1, r3]
 8024060:	3b30      	subs	r3, #48	; 0x30
 8024062:	b29b      	uxth	r3, r3
 8024064:	4619      	mov	r1, r3
 8024066:	0089      	lsls	r1, r1, #2
 8024068:	440b      	add	r3, r1
 802406a:	005b      	lsls	r3, r3, #1
 802406c:	b29b      	uxth	r3, r3
 802406e:	4413      	add	r3, r2
 8024070:	b29a      	uxth	r2, r3
 8024072:	8a3b      	ldrh	r3, [r7, #16]
 8024074:	3305      	adds	r3, #5
 8024076:	49a2      	ldr	r1, [pc, #648]	; (8024300 <ce303_tarif+0x1c34>)
 8024078:	5ccb      	ldrb	r3, [r1, r3]
 802407a:	b29b      	uxth	r3, r3
 802407c:	4413      	add	r3, r2
 802407e:	b29b      	uxth	r3, r3
 8024080:	3b30      	subs	r3, #48	; 0x30
 8024082:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024084:	4b9f      	ldr	r3, [pc, #636]	; (8024304 <ce303_tarif+0x1c38>)
 8024086:	681b      	ldr	r3, [r3, #0]
 8024088:	f04f 31ff 	mov.w	r1, #4294967295
 802408c:	4618      	mov	r0, r3
 802408e:	f7f2 fe07 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8024092:	68bb      	ldr	r3, [r7, #8]
 8024094:	0e1b      	lsrs	r3, r3, #24
 8024096:	b2db      	uxtb	r3, r3
 8024098:	4619      	mov	r1, r3
 802409a:	f242 008e 	movw	r0, #8334	; 0x208e
 802409e:	f001 f9d1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 80240a2:	68bb      	ldr	r3, [r7, #8]
 80240a4:	0c1b      	lsrs	r3, r3, #16
 80240a6:	b2db      	uxtb	r3, r3
 80240a8:	4619      	mov	r1, r3
 80240aa:	f242 008f 	movw	r0, #8335	; 0x208f
 80240ae:	f001 f9c9 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 80240b2:	68bb      	ldr	r3, [r7, #8]
 80240b4:	0a1b      	lsrs	r3, r3, #8
 80240b6:	b2db      	uxtb	r3, r3
 80240b8:	4619      	mov	r1, r3
 80240ba:	f242 0090 	movw	r0, #8336	; 0x2090
 80240be:	f001 f9c1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 80240c2:	68bb      	ldr	r3, [r7, #8]
 80240c4:	b2db      	uxtb	r3, r3
 80240c6:	4619      	mov	r1, r3
 80240c8:	f242 0091 	movw	r0, #8337	; 0x2091
 80240cc:	f001 f9ba 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80240d0:	8afb      	ldrh	r3, [r7, #22]
 80240d2:	0a1b      	lsrs	r3, r3, #8
 80240d4:	b29b      	uxth	r3, r3
 80240d6:	b2db      	uxtb	r3, r3
 80240d8:	4619      	mov	r1, r3
 80240da:	f242 0092 	movw	r0, #8338	; 0x2092
 80240de:	f001 f9b1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80240e2:	8afb      	ldrh	r3, [r7, #22]
 80240e4:	b2db      	uxtb	r3, r3
 80240e6:	4619      	mov	r1, r3
 80240e8:	f242 0093 	movw	r0, #8339	; 0x2093
 80240ec:	f001 f9aa 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80240f0:	4b84      	ldr	r3, [pc, #528]	; (8024304 <ce303_tarif+0x1c38>)
 80240f2:	681b      	ldr	r3, [r3, #0]
 80240f4:	4618      	mov	r0, r3
 80240f6:	f7f2 fe21 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 80240fa:	68bb      	ldr	r3, [r7, #8]
 80240fc:	0c1b      	lsrs	r3, r3, #16
 80240fe:	b29a      	uxth	r2, r3
 8024100:	4b81      	ldr	r3, [pc, #516]	; (8024308 <ce303_tarif+0x1c3c>)
 8024102:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8024106:	68bb      	ldr	r3, [r7, #8]
 8024108:	b29a      	uxth	r2, r3
 802410a:	4b7f      	ldr	r3, [pc, #508]	; (8024308 <ce303_tarif+0x1c3c>)
 802410c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 8024110:	4a7d      	ldr	r2, [pc, #500]	; (8024308 <ce303_tarif+0x1c3c>)
 8024112:	8afb      	ldrh	r3, [r7, #22]
 8024114:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8024118:	2301      	movs	r3, #1
 802411a:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 802411c:	f001 b92a 	b.w	8025374 <ce303_tarif+0x2ca8>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8024120:	8a3b      	ldrh	r3, [r7, #16]
 8024122:	3303      	adds	r3, #3
 8024124:	4a76      	ldr	r2, [pc, #472]	; (8024300 <ce303_tarif+0x1c34>)
 8024126:	5cd3      	ldrb	r3, [r2, r3]
 8024128:	2b2e      	cmp	r3, #46	; 0x2e
 802412a:	f040 80ef 	bne.w	802430c <ce303_tarif+0x1c40>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 802412e:	8a3b      	ldrh	r3, [r7, #16]
 8024130:	3301      	adds	r3, #1
 8024132:	4a73      	ldr	r2, [pc, #460]	; (8024300 <ce303_tarif+0x1c34>)
 8024134:	5cd3      	ldrb	r3, [r2, r3]
 8024136:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802413a:	4613      	mov	r3, r2
 802413c:	009b      	lsls	r3, r3, #2
 802413e:	4413      	add	r3, r2
 8024140:	005b      	lsls	r3, r3, #1
 8024142:	4619      	mov	r1, r3
 8024144:	8a3b      	ldrh	r3, [r7, #16]
 8024146:	3302      	adds	r3, #2
 8024148:	4a6d      	ldr	r2, [pc, #436]	; (8024300 <ce303_tarif+0x1c34>)
 802414a:	5cd3      	ldrb	r3, [r2, r3]
 802414c:	3b30      	subs	r3, #48	; 0x30
 802414e:	440b      	add	r3, r1
 8024150:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8024152:	8a3b      	ldrh	r3, [r7, #16]
 8024154:	3305      	adds	r3, #5
 8024156:	4a6a      	ldr	r2, [pc, #424]	; (8024300 <ce303_tarif+0x1c34>)
 8024158:	5cd3      	ldrb	r3, [r2, r3]
 802415a:	2b29      	cmp	r3, #41	; 0x29
 802415c:	d110      	bne.n	8024180 <ce303_tarif+0x1ab4>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 802415e:	8a3b      	ldrh	r3, [r7, #16]
 8024160:	3304      	adds	r3, #4
 8024162:	4a67      	ldr	r2, [pc, #412]	; (8024300 <ce303_tarif+0x1c34>)
 8024164:	5cd3      	ldrb	r3, [r2, r3]
 8024166:	3b30      	subs	r3, #48	; 0x30
 8024168:	b29b      	uxth	r3, r3
 802416a:	461a      	mov	r2, r3
 802416c:	0092      	lsls	r2, r2, #2
 802416e:	4413      	add	r3, r2
 8024170:	461a      	mov	r2, r3
 8024172:	0091      	lsls	r1, r2, #2
 8024174:	461a      	mov	r2, r3
 8024176:	460b      	mov	r3, r1
 8024178:	4413      	add	r3, r2
 802417a:	009b      	lsls	r3, r3, #2
 802417c:	82fb      	strh	r3, [r7, #22]
 802417e:	e070      	b.n	8024262 <ce303_tarif+0x1b96>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8024180:	8a3b      	ldrh	r3, [r7, #16]
 8024182:	3306      	adds	r3, #6
 8024184:	4a5e      	ldr	r2, [pc, #376]	; (8024300 <ce303_tarif+0x1c34>)
 8024186:	5cd3      	ldrb	r3, [r2, r3]
 8024188:	2b29      	cmp	r3, #41	; 0x29
 802418a:	d117      	bne.n	80241bc <ce303_tarif+0x1af0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 802418c:	8a3b      	ldrh	r3, [r7, #16]
 802418e:	3304      	adds	r3, #4
 8024190:	4a5b      	ldr	r2, [pc, #364]	; (8024300 <ce303_tarif+0x1c34>)
 8024192:	5cd3      	ldrb	r3, [r2, r3]
 8024194:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024198:	4613      	mov	r3, r2
 802419a:	009b      	lsls	r3, r3, #2
 802419c:	4413      	add	r3, r2
 802419e:	005b      	lsls	r3, r3, #1
 80241a0:	4619      	mov	r1, r3
 80241a2:	8a3b      	ldrh	r3, [r7, #16]
 80241a4:	3305      	adds	r3, #5
 80241a6:	4a56      	ldr	r2, [pc, #344]	; (8024300 <ce303_tarif+0x1c34>)
 80241a8:	5cd3      	ldrb	r3, [r2, r3]
 80241aa:	3b30      	subs	r3, #48	; 0x30
 80241ac:	440b      	add	r3, r1
 80241ae:	b29b      	uxth	r3, r3
 80241b0:	461a      	mov	r2, r3
 80241b2:	0092      	lsls	r2, r2, #2
 80241b4:	4413      	add	r3, r2
 80241b6:	005b      	lsls	r3, r3, #1
 80241b8:	82fb      	strh	r3, [r7, #22]
 80241ba:	e052      	b.n	8024262 <ce303_tarif+0x1b96>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80241bc:	8a3b      	ldrh	r3, [r7, #16]
 80241be:	3307      	adds	r3, #7
 80241c0:	4a4f      	ldr	r2, [pc, #316]	; (8024300 <ce303_tarif+0x1c34>)
 80241c2:	5cd3      	ldrb	r3, [r2, r3]
 80241c4:	2b29      	cmp	r3, #41	; 0x29
 80241c6:	d126      	bne.n	8024216 <ce303_tarif+0x1b4a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80241c8:	8a3b      	ldrh	r3, [r7, #16]
 80241ca:	3304      	adds	r3, #4
 80241cc:	4a4c      	ldr	r2, [pc, #304]	; (8024300 <ce303_tarif+0x1c34>)
 80241ce:	5cd3      	ldrb	r3, [r2, r3]
 80241d0:	3b30      	subs	r3, #48	; 0x30
 80241d2:	b29b      	uxth	r3, r3
 80241d4:	461a      	mov	r2, r3
 80241d6:	0092      	lsls	r2, r2, #2
 80241d8:	4413      	add	r3, r2
 80241da:	461a      	mov	r2, r3
 80241dc:	0091      	lsls	r1, r2, #2
 80241de:	461a      	mov	r2, r3
 80241e0:	460b      	mov	r3, r1
 80241e2:	4413      	add	r3, r2
 80241e4:	009b      	lsls	r3, r3, #2
 80241e6:	b29a      	uxth	r2, r3
 80241e8:	8a3b      	ldrh	r3, [r7, #16]
 80241ea:	3305      	adds	r3, #5
 80241ec:	4944      	ldr	r1, [pc, #272]	; (8024300 <ce303_tarif+0x1c34>)
 80241ee:	5ccb      	ldrb	r3, [r1, r3]
 80241f0:	3b30      	subs	r3, #48	; 0x30
 80241f2:	b29b      	uxth	r3, r3
 80241f4:	4619      	mov	r1, r3
 80241f6:	0089      	lsls	r1, r1, #2
 80241f8:	440b      	add	r3, r1
 80241fa:	005b      	lsls	r3, r3, #1
 80241fc:	b29b      	uxth	r3, r3
 80241fe:	4413      	add	r3, r2
 8024200:	b29a      	uxth	r2, r3
 8024202:	8a3b      	ldrh	r3, [r7, #16]
 8024204:	3306      	adds	r3, #6
 8024206:	493e      	ldr	r1, [pc, #248]	; (8024300 <ce303_tarif+0x1c34>)
 8024208:	5ccb      	ldrb	r3, [r1, r3]
 802420a:	b29b      	uxth	r3, r3
 802420c:	4413      	add	r3, r2
 802420e:	b29b      	uxth	r3, r3
 8024210:	3b30      	subs	r3, #48	; 0x30
 8024212:	82fb      	strh	r3, [r7, #22]
 8024214:	e025      	b.n	8024262 <ce303_tarif+0x1b96>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8024216:	8a3b      	ldrh	r3, [r7, #16]
 8024218:	3304      	adds	r3, #4
 802421a:	4a39      	ldr	r2, [pc, #228]	; (8024300 <ce303_tarif+0x1c34>)
 802421c:	5cd3      	ldrb	r3, [r2, r3]
 802421e:	3b30      	subs	r3, #48	; 0x30
 8024220:	b29b      	uxth	r3, r3
 8024222:	461a      	mov	r2, r3
 8024224:	0092      	lsls	r2, r2, #2
 8024226:	4413      	add	r3, r2
 8024228:	461a      	mov	r2, r3
 802422a:	0091      	lsls	r1, r2, #2
 802422c:	461a      	mov	r2, r3
 802422e:	460b      	mov	r3, r1
 8024230:	4413      	add	r3, r2
 8024232:	009b      	lsls	r3, r3, #2
 8024234:	b29a      	uxth	r2, r3
 8024236:	8a3b      	ldrh	r3, [r7, #16]
 8024238:	3305      	adds	r3, #5
 802423a:	4931      	ldr	r1, [pc, #196]	; (8024300 <ce303_tarif+0x1c34>)
 802423c:	5ccb      	ldrb	r3, [r1, r3]
 802423e:	3b30      	subs	r3, #48	; 0x30
 8024240:	b29b      	uxth	r3, r3
 8024242:	4619      	mov	r1, r3
 8024244:	0089      	lsls	r1, r1, #2
 8024246:	440b      	add	r3, r1
 8024248:	005b      	lsls	r3, r3, #1
 802424a:	b29b      	uxth	r3, r3
 802424c:	4413      	add	r3, r2
 802424e:	b29a      	uxth	r2, r3
 8024250:	8a3b      	ldrh	r3, [r7, #16]
 8024252:	3306      	adds	r3, #6
 8024254:	492a      	ldr	r1, [pc, #168]	; (8024300 <ce303_tarif+0x1c34>)
 8024256:	5ccb      	ldrb	r3, [r1, r3]
 8024258:	b29b      	uxth	r3, r3
 802425a:	4413      	add	r3, r2
 802425c:	b29b      	uxth	r3, r3
 802425e:	3b30      	subs	r3, #48	; 0x30
 8024260:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024262:	4b28      	ldr	r3, [pc, #160]	; (8024304 <ce303_tarif+0x1c38>)
 8024264:	681b      	ldr	r3, [r3, #0]
 8024266:	f04f 31ff 	mov.w	r1, #4294967295
 802426a:	4618      	mov	r0, r3
 802426c:	f7f2 fd18 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8024270:	68bb      	ldr	r3, [r7, #8]
 8024272:	0e1b      	lsrs	r3, r3, #24
 8024274:	b2db      	uxtb	r3, r3
 8024276:	4619      	mov	r1, r3
 8024278:	f242 008e 	movw	r0, #8334	; 0x208e
 802427c:	f001 f8e2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8024280:	68bb      	ldr	r3, [r7, #8]
 8024282:	0c1b      	lsrs	r3, r3, #16
 8024284:	b2db      	uxtb	r3, r3
 8024286:	4619      	mov	r1, r3
 8024288:	f242 008f 	movw	r0, #8335	; 0x208f
 802428c:	f001 f8da 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8024290:	68bb      	ldr	r3, [r7, #8]
 8024292:	0a1b      	lsrs	r3, r3, #8
 8024294:	b2db      	uxtb	r3, r3
 8024296:	4619      	mov	r1, r3
 8024298:	f242 0090 	movw	r0, #8336	; 0x2090
 802429c:	f001 f8d2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 80242a0:	68bb      	ldr	r3, [r7, #8]
 80242a2:	b2db      	uxtb	r3, r3
 80242a4:	4619      	mov	r1, r3
 80242a6:	f242 0091 	movw	r0, #8337	; 0x2091
 80242aa:	f001 f8cb 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80242ae:	8afb      	ldrh	r3, [r7, #22]
 80242b0:	0a1b      	lsrs	r3, r3, #8
 80242b2:	b29b      	uxth	r3, r3
 80242b4:	b2db      	uxtb	r3, r3
 80242b6:	4619      	mov	r1, r3
 80242b8:	f242 0092 	movw	r0, #8338	; 0x2092
 80242bc:	f001 f8c2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80242c0:	8afb      	ldrh	r3, [r7, #22]
 80242c2:	b2db      	uxtb	r3, r3
 80242c4:	4619      	mov	r1, r3
 80242c6:	f242 0093 	movw	r0, #8339	; 0x2093
 80242ca:	f001 f8bb 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80242ce:	4b0d      	ldr	r3, [pc, #52]	; (8024304 <ce303_tarif+0x1c38>)
 80242d0:	681b      	ldr	r3, [r3, #0]
 80242d2:	4618      	mov	r0, r3
 80242d4:	f7f2 fd32 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 80242d8:	68bb      	ldr	r3, [r7, #8]
 80242da:	0c1b      	lsrs	r3, r3, #16
 80242dc:	b29a      	uxth	r2, r3
 80242de:	4b0a      	ldr	r3, [pc, #40]	; (8024308 <ce303_tarif+0x1c3c>)
 80242e0:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 80242e4:	68bb      	ldr	r3, [r7, #8]
 80242e6:	b29a      	uxth	r2, r3
 80242e8:	4b07      	ldr	r3, [pc, #28]	; (8024308 <ce303_tarif+0x1c3c>)
 80242ea:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 80242ee:	4a06      	ldr	r2, [pc, #24]	; (8024308 <ce303_tarif+0x1c3c>)
 80242f0:	8afb      	ldrh	r3, [r7, #22]
 80242f2:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 80242f6:	2301      	movs	r3, #1
 80242f8:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80242fa:	f001 b83b 	b.w	8025374 <ce303_tarif+0x2ca8>
 80242fe:	bf00      	nop
 8024300:	200098e4 	.word	0x200098e4
 8024304:	20009a6c 	.word	0x20009a6c
 8024308:	2000a10c 	.word	0x2000a10c

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 802430c:	8a3b      	ldrh	r3, [r7, #16]
 802430e:	3304      	adds	r3, #4
 8024310:	4aaa      	ldr	r2, [pc, #680]	; (80245bc <ce303_tarif+0x1ef0>)
 8024312:	5cd3      	ldrb	r3, [r2, r3]
 8024314:	2b2e      	cmp	r3, #46	; 0x2e
 8024316:	f040 80f0 	bne.w	80244fa <ce303_tarif+0x1e2e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 802431a:	8a3b      	ldrh	r3, [r7, #16]
 802431c:	3301      	adds	r3, #1
 802431e:	4aa7      	ldr	r2, [pc, #668]	; (80245bc <ce303_tarif+0x1ef0>)
 8024320:	5cd3      	ldrb	r3, [r2, r3]
 8024322:	3b30      	subs	r3, #48	; 0x30
 8024324:	2264      	movs	r2, #100	; 0x64
 8024326:	fb02 f103 	mul.w	r1, r2, r3
 802432a:	8a3b      	ldrh	r3, [r7, #16]
 802432c:	3302      	adds	r3, #2
 802432e:	4aa3      	ldr	r2, [pc, #652]	; (80245bc <ce303_tarif+0x1ef0>)
 8024330:	5cd3      	ldrb	r3, [r2, r3]
 8024332:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024336:	4613      	mov	r3, r2
 8024338:	009b      	lsls	r3, r3, #2
 802433a:	4413      	add	r3, r2
 802433c:	005b      	lsls	r3, r3, #1
 802433e:	18ca      	adds	r2, r1, r3
 8024340:	8a3b      	ldrh	r3, [r7, #16]
 8024342:	3303      	adds	r3, #3
 8024344:	499d      	ldr	r1, [pc, #628]	; (80245bc <ce303_tarif+0x1ef0>)
 8024346:	5ccb      	ldrb	r3, [r1, r3]
 8024348:	3b30      	subs	r3, #48	; 0x30
 802434a:	4413      	add	r3, r2
 802434c:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 802434e:	8a3b      	ldrh	r3, [r7, #16]
 8024350:	3306      	adds	r3, #6
 8024352:	4a9a      	ldr	r2, [pc, #616]	; (80245bc <ce303_tarif+0x1ef0>)
 8024354:	5cd3      	ldrb	r3, [r2, r3]
 8024356:	2b29      	cmp	r3, #41	; 0x29
 8024358:	d110      	bne.n	802437c <ce303_tarif+0x1cb0>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 802435a:	8a3b      	ldrh	r3, [r7, #16]
 802435c:	3305      	adds	r3, #5
 802435e:	4a97      	ldr	r2, [pc, #604]	; (80245bc <ce303_tarif+0x1ef0>)
 8024360:	5cd3      	ldrb	r3, [r2, r3]
 8024362:	3b30      	subs	r3, #48	; 0x30
 8024364:	b29b      	uxth	r3, r3
 8024366:	461a      	mov	r2, r3
 8024368:	0092      	lsls	r2, r2, #2
 802436a:	4413      	add	r3, r2
 802436c:	461a      	mov	r2, r3
 802436e:	0091      	lsls	r1, r2, #2
 8024370:	461a      	mov	r2, r3
 8024372:	460b      	mov	r3, r1
 8024374:	4413      	add	r3, r2
 8024376:	009b      	lsls	r3, r3, #2
 8024378:	82fb      	strh	r3, [r7, #22]
 802437a:	e070      	b.n	802445e <ce303_tarif+0x1d92>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 802437c:	8a3b      	ldrh	r3, [r7, #16]
 802437e:	3307      	adds	r3, #7
 8024380:	4a8e      	ldr	r2, [pc, #568]	; (80245bc <ce303_tarif+0x1ef0>)
 8024382:	5cd3      	ldrb	r3, [r2, r3]
 8024384:	2b29      	cmp	r3, #41	; 0x29
 8024386:	d117      	bne.n	80243b8 <ce303_tarif+0x1cec>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8024388:	8a3b      	ldrh	r3, [r7, #16]
 802438a:	3305      	adds	r3, #5
 802438c:	4a8b      	ldr	r2, [pc, #556]	; (80245bc <ce303_tarif+0x1ef0>)
 802438e:	5cd3      	ldrb	r3, [r2, r3]
 8024390:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024394:	4613      	mov	r3, r2
 8024396:	009b      	lsls	r3, r3, #2
 8024398:	4413      	add	r3, r2
 802439a:	005b      	lsls	r3, r3, #1
 802439c:	4619      	mov	r1, r3
 802439e:	8a3b      	ldrh	r3, [r7, #16]
 80243a0:	3306      	adds	r3, #6
 80243a2:	4a86      	ldr	r2, [pc, #536]	; (80245bc <ce303_tarif+0x1ef0>)
 80243a4:	5cd3      	ldrb	r3, [r2, r3]
 80243a6:	3b30      	subs	r3, #48	; 0x30
 80243a8:	440b      	add	r3, r1
 80243aa:	b29b      	uxth	r3, r3
 80243ac:	461a      	mov	r2, r3
 80243ae:	0092      	lsls	r2, r2, #2
 80243b0:	4413      	add	r3, r2
 80243b2:	005b      	lsls	r3, r3, #1
 80243b4:	82fb      	strh	r3, [r7, #22]
 80243b6:	e052      	b.n	802445e <ce303_tarif+0x1d92>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80243b8:	8a3b      	ldrh	r3, [r7, #16]
 80243ba:	3308      	adds	r3, #8
 80243bc:	4a7f      	ldr	r2, [pc, #508]	; (80245bc <ce303_tarif+0x1ef0>)
 80243be:	5cd3      	ldrb	r3, [r2, r3]
 80243c0:	2b29      	cmp	r3, #41	; 0x29
 80243c2:	d126      	bne.n	8024412 <ce303_tarif+0x1d46>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80243c4:	8a3b      	ldrh	r3, [r7, #16]
 80243c6:	3305      	adds	r3, #5
 80243c8:	4a7c      	ldr	r2, [pc, #496]	; (80245bc <ce303_tarif+0x1ef0>)
 80243ca:	5cd3      	ldrb	r3, [r2, r3]
 80243cc:	3b30      	subs	r3, #48	; 0x30
 80243ce:	b29b      	uxth	r3, r3
 80243d0:	461a      	mov	r2, r3
 80243d2:	0092      	lsls	r2, r2, #2
 80243d4:	4413      	add	r3, r2
 80243d6:	461a      	mov	r2, r3
 80243d8:	0091      	lsls	r1, r2, #2
 80243da:	461a      	mov	r2, r3
 80243dc:	460b      	mov	r3, r1
 80243de:	4413      	add	r3, r2
 80243e0:	009b      	lsls	r3, r3, #2
 80243e2:	b29a      	uxth	r2, r3
 80243e4:	8a3b      	ldrh	r3, [r7, #16]
 80243e6:	3306      	adds	r3, #6
 80243e8:	4974      	ldr	r1, [pc, #464]	; (80245bc <ce303_tarif+0x1ef0>)
 80243ea:	5ccb      	ldrb	r3, [r1, r3]
 80243ec:	3b30      	subs	r3, #48	; 0x30
 80243ee:	b29b      	uxth	r3, r3
 80243f0:	4619      	mov	r1, r3
 80243f2:	0089      	lsls	r1, r1, #2
 80243f4:	440b      	add	r3, r1
 80243f6:	005b      	lsls	r3, r3, #1
 80243f8:	b29b      	uxth	r3, r3
 80243fa:	4413      	add	r3, r2
 80243fc:	b29a      	uxth	r2, r3
 80243fe:	8a3b      	ldrh	r3, [r7, #16]
 8024400:	3307      	adds	r3, #7
 8024402:	496e      	ldr	r1, [pc, #440]	; (80245bc <ce303_tarif+0x1ef0>)
 8024404:	5ccb      	ldrb	r3, [r1, r3]
 8024406:	b29b      	uxth	r3, r3
 8024408:	4413      	add	r3, r2
 802440a:	b29b      	uxth	r3, r3
 802440c:	3b30      	subs	r3, #48	; 0x30
 802440e:	82fb      	strh	r3, [r7, #22]
 8024410:	e025      	b.n	802445e <ce303_tarif+0x1d92>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8024412:	8a3b      	ldrh	r3, [r7, #16]
 8024414:	3305      	adds	r3, #5
 8024416:	4a69      	ldr	r2, [pc, #420]	; (80245bc <ce303_tarif+0x1ef0>)
 8024418:	5cd3      	ldrb	r3, [r2, r3]
 802441a:	3b30      	subs	r3, #48	; 0x30
 802441c:	b29b      	uxth	r3, r3
 802441e:	461a      	mov	r2, r3
 8024420:	0092      	lsls	r2, r2, #2
 8024422:	4413      	add	r3, r2
 8024424:	461a      	mov	r2, r3
 8024426:	0091      	lsls	r1, r2, #2
 8024428:	461a      	mov	r2, r3
 802442a:	460b      	mov	r3, r1
 802442c:	4413      	add	r3, r2
 802442e:	009b      	lsls	r3, r3, #2
 8024430:	b29a      	uxth	r2, r3
 8024432:	8a3b      	ldrh	r3, [r7, #16]
 8024434:	3306      	adds	r3, #6
 8024436:	4961      	ldr	r1, [pc, #388]	; (80245bc <ce303_tarif+0x1ef0>)
 8024438:	5ccb      	ldrb	r3, [r1, r3]
 802443a:	3b30      	subs	r3, #48	; 0x30
 802443c:	b29b      	uxth	r3, r3
 802443e:	4619      	mov	r1, r3
 8024440:	0089      	lsls	r1, r1, #2
 8024442:	440b      	add	r3, r1
 8024444:	005b      	lsls	r3, r3, #1
 8024446:	b29b      	uxth	r3, r3
 8024448:	4413      	add	r3, r2
 802444a:	b29a      	uxth	r2, r3
 802444c:	8a3b      	ldrh	r3, [r7, #16]
 802444e:	3307      	adds	r3, #7
 8024450:	495a      	ldr	r1, [pc, #360]	; (80245bc <ce303_tarif+0x1ef0>)
 8024452:	5ccb      	ldrb	r3, [r1, r3]
 8024454:	b29b      	uxth	r3, r3
 8024456:	4413      	add	r3, r2
 8024458:	b29b      	uxth	r3, r3
 802445a:	3b30      	subs	r3, #48	; 0x30
 802445c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802445e:	4b58      	ldr	r3, [pc, #352]	; (80245c0 <ce303_tarif+0x1ef4>)
 8024460:	681b      	ldr	r3, [r3, #0]
 8024462:	f04f 31ff 	mov.w	r1, #4294967295
 8024466:	4618      	mov	r0, r3
 8024468:	f7f2 fc1a 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 802446c:	68bb      	ldr	r3, [r7, #8]
 802446e:	0e1b      	lsrs	r3, r3, #24
 8024470:	b2db      	uxtb	r3, r3
 8024472:	4619      	mov	r1, r3
 8024474:	f242 008e 	movw	r0, #8334	; 0x208e
 8024478:	f000 ffe4 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 802447c:	68bb      	ldr	r3, [r7, #8]
 802447e:	0c1b      	lsrs	r3, r3, #16
 8024480:	b2db      	uxtb	r3, r3
 8024482:	4619      	mov	r1, r3
 8024484:	f242 008f 	movw	r0, #8335	; 0x208f
 8024488:	f000 ffdc 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 802448c:	68bb      	ldr	r3, [r7, #8]
 802448e:	0a1b      	lsrs	r3, r3, #8
 8024490:	b2db      	uxtb	r3, r3
 8024492:	4619      	mov	r1, r3
 8024494:	f242 0090 	movw	r0, #8336	; 0x2090
 8024498:	f000 ffd4 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 802449c:	68bb      	ldr	r3, [r7, #8]
 802449e:	b2db      	uxtb	r3, r3
 80244a0:	4619      	mov	r1, r3
 80244a2:	f242 0091 	movw	r0, #8337	; 0x2091
 80244a6:	f000 ffcd 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80244aa:	8afb      	ldrh	r3, [r7, #22]
 80244ac:	0a1b      	lsrs	r3, r3, #8
 80244ae:	b29b      	uxth	r3, r3
 80244b0:	b2db      	uxtb	r3, r3
 80244b2:	4619      	mov	r1, r3
 80244b4:	f242 0092 	movw	r0, #8338	; 0x2092
 80244b8:	f000 ffc4 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80244bc:	8afb      	ldrh	r3, [r7, #22]
 80244be:	b2db      	uxtb	r3, r3
 80244c0:	4619      	mov	r1, r3
 80244c2:	f242 0093 	movw	r0, #8339	; 0x2093
 80244c6:	f000 ffbd 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80244ca:	4b3d      	ldr	r3, [pc, #244]	; (80245c0 <ce303_tarif+0x1ef4>)
 80244cc:	681b      	ldr	r3, [r3, #0]
 80244ce:	4618      	mov	r0, r3
 80244d0:	f7f2 fc34 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 80244d4:	68bb      	ldr	r3, [r7, #8]
 80244d6:	0c1b      	lsrs	r3, r3, #16
 80244d8:	b29a      	uxth	r2, r3
 80244da:	4b3a      	ldr	r3, [pc, #232]	; (80245c4 <ce303_tarif+0x1ef8>)
 80244dc:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 80244e0:	68bb      	ldr	r3, [r7, #8]
 80244e2:	b29a      	uxth	r2, r3
 80244e4:	4b37      	ldr	r3, [pc, #220]	; (80245c4 <ce303_tarif+0x1ef8>)
 80244e6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 80244ea:	4a36      	ldr	r2, [pc, #216]	; (80245c4 <ce303_tarif+0x1ef8>)
 80244ec:	8afb      	ldrh	r3, [r7, #22]
 80244ee:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 80244f2:	2301      	movs	r3, #1
 80244f4:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80244f6:	f000 bf3d 	b.w	8025374 <ce303_tarif+0x2ca8>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 80244fa:	8a3b      	ldrh	r3, [r7, #16]
 80244fc:	3305      	adds	r3, #5
 80244fe:	4a2f      	ldr	r2, [pc, #188]	; (80245bc <ce303_tarif+0x1ef0>)
 8024500:	5cd3      	ldrb	r3, [r2, r3]
 8024502:	2b2e      	cmp	r3, #46	; 0x2e
 8024504:	f040 8101 	bne.w	802470a <ce303_tarif+0x203e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8024508:	8a3b      	ldrh	r3, [r7, #16]
 802450a:	3301      	adds	r3, #1
 802450c:	4a2b      	ldr	r2, [pc, #172]	; (80245bc <ce303_tarif+0x1ef0>)
 802450e:	5cd3      	ldrb	r3, [r2, r3]
 8024510:	3b30      	subs	r3, #48	; 0x30
 8024512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8024516:	fb02 f203 	mul.w	r2, r2, r3
 802451a:	8a3b      	ldrh	r3, [r7, #16]
 802451c:	3302      	adds	r3, #2
 802451e:	4927      	ldr	r1, [pc, #156]	; (80245bc <ce303_tarif+0x1ef0>)
 8024520:	5ccb      	ldrb	r3, [r1, r3]
 8024522:	3b30      	subs	r3, #48	; 0x30
 8024524:	2164      	movs	r1, #100	; 0x64
 8024526:	fb01 f303 	mul.w	r3, r1, r3
 802452a:	18d1      	adds	r1, r2, r3
 802452c:	8a3b      	ldrh	r3, [r7, #16]
 802452e:	3303      	adds	r3, #3
 8024530:	4a22      	ldr	r2, [pc, #136]	; (80245bc <ce303_tarif+0x1ef0>)
 8024532:	5cd3      	ldrb	r3, [r2, r3]
 8024534:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024538:	4613      	mov	r3, r2
 802453a:	009b      	lsls	r3, r3, #2
 802453c:	4413      	add	r3, r2
 802453e:	005b      	lsls	r3, r3, #1
 8024540:	18ca      	adds	r2, r1, r3
 8024542:	8a3b      	ldrh	r3, [r7, #16]
 8024544:	3304      	adds	r3, #4
 8024546:	491d      	ldr	r1, [pc, #116]	; (80245bc <ce303_tarif+0x1ef0>)
 8024548:	5ccb      	ldrb	r3, [r1, r3]
 802454a:	3b30      	subs	r3, #48	; 0x30
 802454c:	4413      	add	r3, r2
 802454e:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 8024550:	8a3b      	ldrh	r3, [r7, #16]
 8024552:	3307      	adds	r3, #7
 8024554:	4a19      	ldr	r2, [pc, #100]	; (80245bc <ce303_tarif+0x1ef0>)
 8024556:	5cd3      	ldrb	r3, [r2, r3]
 8024558:	2b29      	cmp	r3, #41	; 0x29
 802455a:	d110      	bne.n	802457e <ce303_tarif+0x1eb2>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 802455c:	8a3b      	ldrh	r3, [r7, #16]
 802455e:	3306      	adds	r3, #6
 8024560:	4a16      	ldr	r2, [pc, #88]	; (80245bc <ce303_tarif+0x1ef0>)
 8024562:	5cd3      	ldrb	r3, [r2, r3]
 8024564:	3b30      	subs	r3, #48	; 0x30
 8024566:	b29b      	uxth	r3, r3
 8024568:	461a      	mov	r2, r3
 802456a:	0092      	lsls	r2, r2, #2
 802456c:	4413      	add	r3, r2
 802456e:	461a      	mov	r2, r3
 8024570:	0091      	lsls	r1, r2, #2
 8024572:	461a      	mov	r2, r3
 8024574:	460b      	mov	r3, r1
 8024576:	4413      	add	r3, r2
 8024578:	009b      	lsls	r3, r3, #2
 802457a:	82fb      	strh	r3, [r7, #22]
 802457c:	e077      	b.n	802466e <ce303_tarif+0x1fa2>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 802457e:	8a3b      	ldrh	r3, [r7, #16]
 8024580:	3308      	adds	r3, #8
 8024582:	4a0e      	ldr	r2, [pc, #56]	; (80245bc <ce303_tarif+0x1ef0>)
 8024584:	5cd3      	ldrb	r3, [r2, r3]
 8024586:	2b29      	cmp	r3, #41	; 0x29
 8024588:	d11e      	bne.n	80245c8 <ce303_tarif+0x1efc>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 802458a:	8a3b      	ldrh	r3, [r7, #16]
 802458c:	3306      	adds	r3, #6
 802458e:	4a0b      	ldr	r2, [pc, #44]	; (80245bc <ce303_tarif+0x1ef0>)
 8024590:	5cd3      	ldrb	r3, [r2, r3]
 8024592:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024596:	4613      	mov	r3, r2
 8024598:	009b      	lsls	r3, r3, #2
 802459a:	4413      	add	r3, r2
 802459c:	005b      	lsls	r3, r3, #1
 802459e:	4619      	mov	r1, r3
 80245a0:	8a3b      	ldrh	r3, [r7, #16]
 80245a2:	3307      	adds	r3, #7
 80245a4:	4a05      	ldr	r2, [pc, #20]	; (80245bc <ce303_tarif+0x1ef0>)
 80245a6:	5cd3      	ldrb	r3, [r2, r3]
 80245a8:	3b30      	subs	r3, #48	; 0x30
 80245aa:	440b      	add	r3, r1
 80245ac:	b29b      	uxth	r3, r3
 80245ae:	461a      	mov	r2, r3
 80245b0:	0092      	lsls	r2, r2, #2
 80245b2:	4413      	add	r3, r2
 80245b4:	005b      	lsls	r3, r3, #1
 80245b6:	82fb      	strh	r3, [r7, #22]
 80245b8:	e059      	b.n	802466e <ce303_tarif+0x1fa2>
 80245ba:	bf00      	nop
 80245bc:	200098e4 	.word	0x200098e4
 80245c0:	20009a6c 	.word	0x20009a6c
 80245c4:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 80245c8:	8a3b      	ldrh	r3, [r7, #16]
 80245ca:	3309      	adds	r3, #9
 80245cc:	4a9a      	ldr	r2, [pc, #616]	; (8024838 <ce303_tarif+0x216c>)
 80245ce:	5cd3      	ldrb	r3, [r2, r3]
 80245d0:	2b29      	cmp	r3, #41	; 0x29
 80245d2:	d126      	bne.n	8024622 <ce303_tarif+0x1f56>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 80245d4:	8a3b      	ldrh	r3, [r7, #16]
 80245d6:	3306      	adds	r3, #6
 80245d8:	4a97      	ldr	r2, [pc, #604]	; (8024838 <ce303_tarif+0x216c>)
 80245da:	5cd3      	ldrb	r3, [r2, r3]
 80245dc:	3b30      	subs	r3, #48	; 0x30
 80245de:	b29b      	uxth	r3, r3
 80245e0:	461a      	mov	r2, r3
 80245e2:	0092      	lsls	r2, r2, #2
 80245e4:	4413      	add	r3, r2
 80245e6:	461a      	mov	r2, r3
 80245e8:	0091      	lsls	r1, r2, #2
 80245ea:	461a      	mov	r2, r3
 80245ec:	460b      	mov	r3, r1
 80245ee:	4413      	add	r3, r2
 80245f0:	009b      	lsls	r3, r3, #2
 80245f2:	b29a      	uxth	r2, r3
 80245f4:	8a3b      	ldrh	r3, [r7, #16]
 80245f6:	3307      	adds	r3, #7
 80245f8:	498f      	ldr	r1, [pc, #572]	; (8024838 <ce303_tarif+0x216c>)
 80245fa:	5ccb      	ldrb	r3, [r1, r3]
 80245fc:	3b30      	subs	r3, #48	; 0x30
 80245fe:	b29b      	uxth	r3, r3
 8024600:	4619      	mov	r1, r3
 8024602:	0089      	lsls	r1, r1, #2
 8024604:	440b      	add	r3, r1
 8024606:	005b      	lsls	r3, r3, #1
 8024608:	b29b      	uxth	r3, r3
 802460a:	4413      	add	r3, r2
 802460c:	b29a      	uxth	r2, r3
 802460e:	8a3b      	ldrh	r3, [r7, #16]
 8024610:	3308      	adds	r3, #8
 8024612:	4989      	ldr	r1, [pc, #548]	; (8024838 <ce303_tarif+0x216c>)
 8024614:	5ccb      	ldrb	r3, [r1, r3]
 8024616:	b29b      	uxth	r3, r3
 8024618:	4413      	add	r3, r2
 802461a:	b29b      	uxth	r3, r3
 802461c:	3b30      	subs	r3, #48	; 0x30
 802461e:	82fb      	strh	r3, [r7, #22]
 8024620:	e025      	b.n	802466e <ce303_tarif+0x1fa2>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8024622:	8a3b      	ldrh	r3, [r7, #16]
 8024624:	3306      	adds	r3, #6
 8024626:	4a84      	ldr	r2, [pc, #528]	; (8024838 <ce303_tarif+0x216c>)
 8024628:	5cd3      	ldrb	r3, [r2, r3]
 802462a:	3b30      	subs	r3, #48	; 0x30
 802462c:	b29b      	uxth	r3, r3
 802462e:	461a      	mov	r2, r3
 8024630:	0092      	lsls	r2, r2, #2
 8024632:	4413      	add	r3, r2
 8024634:	461a      	mov	r2, r3
 8024636:	0091      	lsls	r1, r2, #2
 8024638:	461a      	mov	r2, r3
 802463a:	460b      	mov	r3, r1
 802463c:	4413      	add	r3, r2
 802463e:	009b      	lsls	r3, r3, #2
 8024640:	b29a      	uxth	r2, r3
 8024642:	8a3b      	ldrh	r3, [r7, #16]
 8024644:	3307      	adds	r3, #7
 8024646:	497c      	ldr	r1, [pc, #496]	; (8024838 <ce303_tarif+0x216c>)
 8024648:	5ccb      	ldrb	r3, [r1, r3]
 802464a:	3b30      	subs	r3, #48	; 0x30
 802464c:	b29b      	uxth	r3, r3
 802464e:	4619      	mov	r1, r3
 8024650:	0089      	lsls	r1, r1, #2
 8024652:	440b      	add	r3, r1
 8024654:	005b      	lsls	r3, r3, #1
 8024656:	b29b      	uxth	r3, r3
 8024658:	4413      	add	r3, r2
 802465a:	b29a      	uxth	r2, r3
 802465c:	8a3b      	ldrh	r3, [r7, #16]
 802465e:	3308      	adds	r3, #8
 8024660:	4975      	ldr	r1, [pc, #468]	; (8024838 <ce303_tarif+0x216c>)
 8024662:	5ccb      	ldrb	r3, [r1, r3]
 8024664:	b29b      	uxth	r3, r3
 8024666:	4413      	add	r3, r2
 8024668:	b29b      	uxth	r3, r3
 802466a:	3b30      	subs	r3, #48	; 0x30
 802466c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802466e:	4b73      	ldr	r3, [pc, #460]	; (802483c <ce303_tarif+0x2170>)
 8024670:	681b      	ldr	r3, [r3, #0]
 8024672:	f04f 31ff 	mov.w	r1, #4294967295
 8024676:	4618      	mov	r0, r3
 8024678:	f7f2 fb12 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 802467c:	68bb      	ldr	r3, [r7, #8]
 802467e:	0e1b      	lsrs	r3, r3, #24
 8024680:	b2db      	uxtb	r3, r3
 8024682:	4619      	mov	r1, r3
 8024684:	f242 008e 	movw	r0, #8334	; 0x208e
 8024688:	f000 fedc 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 802468c:	68bb      	ldr	r3, [r7, #8]
 802468e:	0c1b      	lsrs	r3, r3, #16
 8024690:	b2db      	uxtb	r3, r3
 8024692:	4619      	mov	r1, r3
 8024694:	f242 008f 	movw	r0, #8335	; 0x208f
 8024698:	f000 fed4 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 802469c:	68bb      	ldr	r3, [r7, #8]
 802469e:	0a1b      	lsrs	r3, r3, #8
 80246a0:	b2db      	uxtb	r3, r3
 80246a2:	4619      	mov	r1, r3
 80246a4:	f242 0090 	movw	r0, #8336	; 0x2090
 80246a8:	f000 fecc 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 80246ac:	68bb      	ldr	r3, [r7, #8]
 80246ae:	b2db      	uxtb	r3, r3
 80246b0:	4619      	mov	r1, r3
 80246b2:	f242 0091 	movw	r0, #8337	; 0x2091
 80246b6:	f000 fec5 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80246ba:	8afb      	ldrh	r3, [r7, #22]
 80246bc:	0a1b      	lsrs	r3, r3, #8
 80246be:	b29b      	uxth	r3, r3
 80246c0:	b2db      	uxtb	r3, r3
 80246c2:	4619      	mov	r1, r3
 80246c4:	f242 0092 	movw	r0, #8338	; 0x2092
 80246c8:	f000 febc 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80246cc:	8afb      	ldrh	r3, [r7, #22]
 80246ce:	b2db      	uxtb	r3, r3
 80246d0:	4619      	mov	r1, r3
 80246d2:	f242 0093 	movw	r0, #8339	; 0x2093
 80246d6:	f000 feb5 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80246da:	4b58      	ldr	r3, [pc, #352]	; (802483c <ce303_tarif+0x2170>)
 80246dc:	681b      	ldr	r3, [r3, #0]
 80246de:	4618      	mov	r0, r3
 80246e0:	f7f2 fb2c 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 80246e4:	68bb      	ldr	r3, [r7, #8]
 80246e6:	0c1b      	lsrs	r3, r3, #16
 80246e8:	b29a      	uxth	r2, r3
 80246ea:	4b55      	ldr	r3, [pc, #340]	; (8024840 <ce303_tarif+0x2174>)
 80246ec:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 80246f0:	68bb      	ldr	r3, [r7, #8]
 80246f2:	b29a      	uxth	r2, r3
 80246f4:	4b52      	ldr	r3, [pc, #328]	; (8024840 <ce303_tarif+0x2174>)
 80246f6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 80246fa:	4a51      	ldr	r2, [pc, #324]	; (8024840 <ce303_tarif+0x2174>)
 80246fc:	8afb      	ldrh	r3, [r7, #22]
 80246fe:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8024702:	2301      	movs	r3, #1
 8024704:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8024706:	f000 be35 	b.w	8025374 <ce303_tarif+0x2ca8>

			}

			else if( meter_rx_buffer[i+6] == 0x2E) // пять цифр перед запятой
 802470a:	8a3b      	ldrh	r3, [r7, #16]
 802470c:	3306      	adds	r3, #6
 802470e:	4a4a      	ldr	r2, [pc, #296]	; (8024838 <ce303_tarif+0x216c>)
 8024710:	5cd3      	ldrb	r3, [r2, r3]
 8024712:	2b2e      	cmp	r3, #46	; 0x2e
 8024714:	f040 862e 	bne.w	8025374 <ce303_tarif+0x2ca8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8024718:	8a3b      	ldrh	r3, [r7, #16]
 802471a:	3301      	adds	r3, #1
 802471c:	4a46      	ldr	r2, [pc, #280]	; (8024838 <ce303_tarif+0x216c>)
 802471e:	5cd3      	ldrb	r3, [r2, r3]
 8024720:	3b30      	subs	r3, #48	; 0x30
 8024722:	f242 7210 	movw	r2, #10000	; 0x2710
 8024726:	fb02 f203 	mul.w	r2, r2, r3
 802472a:	8a3b      	ldrh	r3, [r7, #16]
 802472c:	3302      	adds	r3, #2
 802472e:	4942      	ldr	r1, [pc, #264]	; (8024838 <ce303_tarif+0x216c>)
 8024730:	5ccb      	ldrb	r3, [r1, r3]
 8024732:	3b30      	subs	r3, #48	; 0x30
 8024734:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8024738:	fb01 f303 	mul.w	r3, r1, r3
 802473c:	441a      	add	r2, r3
 802473e:	8a3b      	ldrh	r3, [r7, #16]
 8024740:	3303      	adds	r3, #3
 8024742:	493d      	ldr	r1, [pc, #244]	; (8024838 <ce303_tarif+0x216c>)
 8024744:	5ccb      	ldrb	r3, [r1, r3]
 8024746:	3b30      	subs	r3, #48	; 0x30
 8024748:	2164      	movs	r1, #100	; 0x64
 802474a:	fb01 f303 	mul.w	r3, r1, r3
 802474e:	18d1      	adds	r1, r2, r3
 8024750:	8a3b      	ldrh	r3, [r7, #16]
 8024752:	3304      	adds	r3, #4
 8024754:	4a38      	ldr	r2, [pc, #224]	; (8024838 <ce303_tarif+0x216c>)
 8024756:	5cd3      	ldrb	r3, [r2, r3]
 8024758:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802475c:	4613      	mov	r3, r2
 802475e:	009b      	lsls	r3, r3, #2
 8024760:	4413      	add	r3, r2
 8024762:	005b      	lsls	r3, r3, #1
 8024764:	18ca      	adds	r2, r1, r3
 8024766:	8a3b      	ldrh	r3, [r7, #16]
 8024768:	3305      	adds	r3, #5
 802476a:	4933      	ldr	r1, [pc, #204]	; (8024838 <ce303_tarif+0x216c>)
 802476c:	5ccb      	ldrb	r3, [r1, r3]
 802476e:	3b30      	subs	r3, #48	; 0x30
 8024770:	4413      	add	r3, r2
 8024772:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+8] == 0x29 ) // если 1 разряд после запятой
 8024774:	8a3b      	ldrh	r3, [r7, #16]
 8024776:	3308      	adds	r3, #8
 8024778:	4a2f      	ldr	r2, [pc, #188]	; (8024838 <ce303_tarif+0x216c>)
 802477a:	5cd3      	ldrb	r3, [r2, r3]
 802477c:	2b29      	cmp	r3, #41	; 0x29
 802477e:	d110      	bne.n	80247a2 <ce303_tarif+0x20d6>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+7])-0x30)*100;
 8024780:	8a3b      	ldrh	r3, [r7, #16]
 8024782:	3307      	adds	r3, #7
 8024784:	4a2c      	ldr	r2, [pc, #176]	; (8024838 <ce303_tarif+0x216c>)
 8024786:	5cd3      	ldrb	r3, [r2, r3]
 8024788:	3b30      	subs	r3, #48	; 0x30
 802478a:	b29b      	uxth	r3, r3
 802478c:	461a      	mov	r2, r3
 802478e:	0092      	lsls	r2, r2, #2
 8024790:	4413      	add	r3, r2
 8024792:	461a      	mov	r2, r3
 8024794:	0091      	lsls	r1, r2, #2
 8024796:	461a      	mov	r2, r3
 8024798:	460b      	mov	r3, r1
 802479a:	4413      	add	r3, r2
 802479c:	009b      	lsls	r3, r3, #2
 802479e:	82fb      	strh	r3, [r7, #22]
 80247a0:	e076      	b.n	8024890 <ce303_tarif+0x21c4>
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 2 разряда после запятой
 80247a2:	8a3b      	ldrh	r3, [r7, #16]
 80247a4:	3309      	adds	r3, #9
 80247a6:	4a24      	ldr	r2, [pc, #144]	; (8024838 <ce303_tarif+0x216c>)
 80247a8:	5cd3      	ldrb	r3, [r2, r3]
 80247aa:	2b29      	cmp	r3, #41	; 0x29
 80247ac:	d117      	bne.n	80247de <ce303_tarif+0x2112>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30))*10;
 80247ae:	8a3b      	ldrh	r3, [r7, #16]
 80247b0:	3307      	adds	r3, #7
 80247b2:	4a21      	ldr	r2, [pc, #132]	; (8024838 <ce303_tarif+0x216c>)
 80247b4:	5cd3      	ldrb	r3, [r2, r3]
 80247b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80247ba:	4613      	mov	r3, r2
 80247bc:	009b      	lsls	r3, r3, #2
 80247be:	4413      	add	r3, r2
 80247c0:	005b      	lsls	r3, r3, #1
 80247c2:	4619      	mov	r1, r3
 80247c4:	8a3b      	ldrh	r3, [r7, #16]
 80247c6:	3308      	adds	r3, #8
 80247c8:	4a1b      	ldr	r2, [pc, #108]	; (8024838 <ce303_tarif+0x216c>)
 80247ca:	5cd3      	ldrb	r3, [r2, r3]
 80247cc:	3b30      	subs	r3, #48	; 0x30
 80247ce:	440b      	add	r3, r1
 80247d0:	b29b      	uxth	r3, r3
 80247d2:	461a      	mov	r2, r3
 80247d4:	0092      	lsls	r2, r2, #2
 80247d6:	4413      	add	r3, r2
 80247d8:	005b      	lsls	r3, r3, #1
 80247da:	82fb      	strh	r3, [r7, #22]
 80247dc:	e058      	b.n	8024890 <ce303_tarif+0x21c4>
				}
				else if( meter_rx_buffer[i+10] == 0x29 ) // если 3 разряда после запятой
 80247de:	8a3b      	ldrh	r3, [r7, #16]
 80247e0:	330a      	adds	r3, #10
 80247e2:	4a15      	ldr	r2, [pc, #84]	; (8024838 <ce303_tarif+0x216c>)
 80247e4:	5cd3      	ldrb	r3, [r2, r3]
 80247e6:	2b29      	cmp	r3, #41	; 0x29
 80247e8:	d12c      	bne.n	8024844 <ce303_tarif+0x2178>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+7])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+8])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+9])-0x30);
 80247ea:	8a3b      	ldrh	r3, [r7, #16]
 80247ec:	3307      	adds	r3, #7
 80247ee:	4a12      	ldr	r2, [pc, #72]	; (8024838 <ce303_tarif+0x216c>)
 80247f0:	5cd3      	ldrb	r3, [r2, r3]
 80247f2:	3b30      	subs	r3, #48	; 0x30
 80247f4:	b29b      	uxth	r3, r3
 80247f6:	461a      	mov	r2, r3
 80247f8:	0092      	lsls	r2, r2, #2
 80247fa:	4413      	add	r3, r2
 80247fc:	461a      	mov	r2, r3
 80247fe:	0091      	lsls	r1, r2, #2
 8024800:	461a      	mov	r2, r3
 8024802:	460b      	mov	r3, r1
 8024804:	4413      	add	r3, r2
 8024806:	009b      	lsls	r3, r3, #2
 8024808:	b29a      	uxth	r2, r3
 802480a:	8a3b      	ldrh	r3, [r7, #16]
 802480c:	3308      	adds	r3, #8
 802480e:	490a      	ldr	r1, [pc, #40]	; (8024838 <ce303_tarif+0x216c>)
 8024810:	5ccb      	ldrb	r3, [r1, r3]
 8024812:	3b30      	subs	r3, #48	; 0x30
 8024814:	b29b      	uxth	r3, r3
 8024816:	4619      	mov	r1, r3
 8024818:	0089      	lsls	r1, r1, #2
 802481a:	440b      	add	r3, r1
 802481c:	005b      	lsls	r3, r3, #1
 802481e:	b29b      	uxth	r3, r3
 8024820:	4413      	add	r3, r2
 8024822:	b29a      	uxth	r2, r3
 8024824:	8a3b      	ldrh	r3, [r7, #16]
 8024826:	3309      	adds	r3, #9
 8024828:	4903      	ldr	r1, [pc, #12]	; (8024838 <ce303_tarif+0x216c>)
 802482a:	5ccb      	ldrb	r3, [r1, r3]
 802482c:	b29b      	uxth	r3, r3
 802482e:	4413      	add	r3, r2
 8024830:	b29b      	uxth	r3, r3
 8024832:	3b30      	subs	r3, #48	; 0x30
 8024834:	82fb      	strh	r3, [r7, #22]
 8024836:	e02b      	b.n	8024890 <ce303_tarif+0x21c4>
 8024838:	200098e4 	.word	0x200098e4
 802483c:	20009a6c 	.word	0x20009a6c
 8024840:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+7])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+8])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+9])-0x30);
 8024844:	8a3b      	ldrh	r3, [r7, #16]
 8024846:	3307      	adds	r3, #7
 8024848:	4a7f      	ldr	r2, [pc, #508]	; (8024a48 <ce303_tarif+0x237c>)
 802484a:	5cd3      	ldrb	r3, [r2, r3]
 802484c:	3b30      	subs	r3, #48	; 0x30
 802484e:	b29b      	uxth	r3, r3
 8024850:	461a      	mov	r2, r3
 8024852:	0092      	lsls	r2, r2, #2
 8024854:	4413      	add	r3, r2
 8024856:	461a      	mov	r2, r3
 8024858:	0091      	lsls	r1, r2, #2
 802485a:	461a      	mov	r2, r3
 802485c:	460b      	mov	r3, r1
 802485e:	4413      	add	r3, r2
 8024860:	009b      	lsls	r3, r3, #2
 8024862:	b29a      	uxth	r2, r3
 8024864:	8a3b      	ldrh	r3, [r7, #16]
 8024866:	3308      	adds	r3, #8
 8024868:	4977      	ldr	r1, [pc, #476]	; (8024a48 <ce303_tarif+0x237c>)
 802486a:	5ccb      	ldrb	r3, [r1, r3]
 802486c:	3b30      	subs	r3, #48	; 0x30
 802486e:	b29b      	uxth	r3, r3
 8024870:	4619      	mov	r1, r3
 8024872:	0089      	lsls	r1, r1, #2
 8024874:	440b      	add	r3, r1
 8024876:	005b      	lsls	r3, r3, #1
 8024878:	b29b      	uxth	r3, r3
 802487a:	4413      	add	r3, r2
 802487c:	b29a      	uxth	r2, r3
 802487e:	8a3b      	ldrh	r3, [r7, #16]
 8024880:	3309      	adds	r3, #9
 8024882:	4971      	ldr	r1, [pc, #452]	; (8024a48 <ce303_tarif+0x237c>)
 8024884:	5ccb      	ldrb	r3, [r1, r3]
 8024886:	b29b      	uxth	r3, r3
 8024888:	4413      	add	r3, r2
 802488a:	b29b      	uxth	r3, r3
 802488c:	3b30      	subs	r3, #48	; 0x30
 802488e:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024890:	4b6e      	ldr	r3, [pc, #440]	; (8024a4c <ce303_tarif+0x2380>)
 8024892:	681b      	ldr	r3, [r3, #0]
 8024894:	f04f 31ff 	mov.w	r1, #4294967295
 8024898:	4618      	mov	r0, r3
 802489a:	f7f2 fa01 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 802489e:	68bb      	ldr	r3, [r7, #8]
 80248a0:	0e1b      	lsrs	r3, r3, #24
 80248a2:	b2db      	uxtb	r3, r3
 80248a4:	4619      	mov	r1, r3
 80248a6:	f242 008e 	movw	r0, #8334	; 0x208e
 80248aa:	f000 fdcb 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 80248ae:	68bb      	ldr	r3, [r7, #8]
 80248b0:	0c1b      	lsrs	r3, r3, #16
 80248b2:	b2db      	uxtb	r3, r3
 80248b4:	4619      	mov	r1, r3
 80248b6:	f242 008f 	movw	r0, #8335	; 0x208f
 80248ba:	f000 fdc3 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 80248be:	68bb      	ldr	r3, [r7, #8]
 80248c0:	0a1b      	lsrs	r3, r3, #8
 80248c2:	b2db      	uxtb	r3, r3
 80248c4:	4619      	mov	r1, r3
 80248c6:	f242 0090 	movw	r0, #8336	; 0x2090
 80248ca:	f000 fdbb 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 80248ce:	68bb      	ldr	r3, [r7, #8]
 80248d0:	b2db      	uxtb	r3, r3
 80248d2:	4619      	mov	r1, r3
 80248d4:	f242 0091 	movw	r0, #8337	; 0x2091
 80248d8:	f000 fdb4 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80248dc:	8afb      	ldrh	r3, [r7, #22]
 80248de:	0a1b      	lsrs	r3, r3, #8
 80248e0:	b29b      	uxth	r3, r3
 80248e2:	b2db      	uxtb	r3, r3
 80248e4:	4619      	mov	r1, r3
 80248e6:	f242 0092 	movw	r0, #8338	; 0x2092
 80248ea:	f000 fdab 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80248ee:	8afb      	ldrh	r3, [r7, #22]
 80248f0:	b2db      	uxtb	r3, r3
 80248f2:	4619      	mov	r1, r3
 80248f4:	f242 0093 	movw	r0, #8339	; 0x2093
 80248f8:	f000 fda4 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80248fc:	4b53      	ldr	r3, [pc, #332]	; (8024a4c <ce303_tarif+0x2380>)
 80248fe:	681b      	ldr	r3, [r3, #0]
 8024900:	4618      	mov	r0, r3
 8024902:	f7f2 fa1b 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 8024906:	68bb      	ldr	r3, [r7, #8]
 8024908:	0c1b      	lsrs	r3, r3, #16
 802490a:	b29a      	uxth	r2, r3
 802490c:	4b50      	ldr	r3, [pc, #320]	; (8024a50 <ce303_tarif+0x2384>)
 802490e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8024912:	68bb      	ldr	r3, [r7, #8]
 8024914:	b29a      	uxth	r2, r3
 8024916:	4b4e      	ldr	r3, [pc, #312]	; (8024a50 <ce303_tarif+0x2384>)
 8024918:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 802491c:	4a4c      	ldr	r2, [pc, #304]	; (8024a50 <ce303_tarif+0x2384>)
 802491e:	8afb      	ldrh	r3, [r7, #22]
 8024920:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8024924:	2301      	movs	r3, #1
 8024926:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8024928:	f000 bd24 	b.w	8025374 <ce303_tarif+0x2ca8>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==1) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 802492c:	8a3b      	ldrh	r3, [r7, #16]
 802492e:	4a46      	ldr	r2, [pc, #280]	; (8024a48 <ce303_tarif+0x237c>)
 8024930:	5cd3      	ldrb	r3, [r2, r3]
 8024932:	2b28      	cmp	r3, #40	; 0x28
 8024934:	f040 851f 	bne.w	8025376 <ce303_tarif+0x2caa>
 8024938:	7d7b      	ldrb	r3, [r7, #21]
 802493a:	2b01      	cmp	r3, #1
 802493c:	f040 851b 	bne.w	8025376 <ce303_tarif+0x2caa>
 8024940:	7d3b      	ldrb	r3, [r7, #20]
 8024942:	2b01      	cmp	r3, #1
 8024944:	f040 8517 	bne.w	8025376 <ce303_tarif+0x2caa>
 8024948:	7cfb      	ldrb	r3, [r7, #19]
 802494a:	2b01      	cmp	r3, #1
 802494c:	f040 8513 	bne.w	8025376 <ce303_tarif+0x2caa>
 8024950:	7cbb      	ldrb	r3, [r7, #18]
 8024952:	2b00      	cmp	r3, #0
 8024954:	f040 850f 	bne.w	8025376 <ce303_tarif+0x2caa>
 8024958:	7bfb      	ldrb	r3, [r7, #15]
 802495a:	2b00      	cmp	r3, #0
 802495c:	f040 850b 	bne.w	8025376 <ce303_tarif+0x2caa>
 8024960:	7bbb      	ldrb	r3, [r7, #14]
 8024962:	2b00      	cmp	r3, #0
 8024964:	f040 84eb 	bne.w	802533e <ce303_tarif+0x2c72>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8024968:	8a3b      	ldrh	r3, [r7, #16]
 802496a:	3302      	adds	r3, #2
 802496c:	4a36      	ldr	r2, [pc, #216]	; (8024a48 <ce303_tarif+0x237c>)
 802496e:	5cd3      	ldrb	r3, [r2, r3]
 8024970:	2b2e      	cmp	r3, #46	; 0x2e
 8024972:	f040 80e3 	bne.w	8024b3c <ce303_tarif+0x2470>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8024976:	8a3b      	ldrh	r3, [r7, #16]
 8024978:	3301      	adds	r3, #1
 802497a:	4a33      	ldr	r2, [pc, #204]	; (8024a48 <ce303_tarif+0x237c>)
 802497c:	5cd3      	ldrb	r3, [r2, r3]
 802497e:	3b30      	subs	r3, #48	; 0x30
 8024980:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8024982:	8a3b      	ldrh	r3, [r7, #16]
 8024984:	3304      	adds	r3, #4
 8024986:	4a30      	ldr	r2, [pc, #192]	; (8024a48 <ce303_tarif+0x237c>)
 8024988:	5cd3      	ldrb	r3, [r2, r3]
 802498a:	2b29      	cmp	r3, #41	; 0x29
 802498c:	d110      	bne.n	80249b0 <ce303_tarif+0x22e4>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 802498e:	8a3b      	ldrh	r3, [r7, #16]
 8024990:	3303      	adds	r3, #3
 8024992:	4a2d      	ldr	r2, [pc, #180]	; (8024a48 <ce303_tarif+0x237c>)
 8024994:	5cd3      	ldrb	r3, [r2, r3]
 8024996:	3b30      	subs	r3, #48	; 0x30
 8024998:	b29b      	uxth	r3, r3
 802499a:	461a      	mov	r2, r3
 802499c:	0092      	lsls	r2, r2, #2
 802499e:	4413      	add	r3, r2
 80249a0:	461a      	mov	r2, r3
 80249a2:	0091      	lsls	r1, r2, #2
 80249a4:	461a      	mov	r2, r3
 80249a6:	460b      	mov	r3, r1
 80249a8:	4413      	add	r3, r2
 80249aa:	009b      	lsls	r3, r3, #2
 80249ac:	82fb      	strh	r3, [r7, #22]
 80249ae:	e077      	b.n	8024aa0 <ce303_tarif+0x23d4>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 80249b0:	8a3b      	ldrh	r3, [r7, #16]
 80249b2:	3305      	adds	r3, #5
 80249b4:	4a24      	ldr	r2, [pc, #144]	; (8024a48 <ce303_tarif+0x237c>)
 80249b6:	5cd3      	ldrb	r3, [r2, r3]
 80249b8:	2b29      	cmp	r3, #41	; 0x29
 80249ba:	d117      	bne.n	80249ec <ce303_tarif+0x2320>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 80249bc:	8a3b      	ldrh	r3, [r7, #16]
 80249be:	3303      	adds	r3, #3
 80249c0:	4a21      	ldr	r2, [pc, #132]	; (8024a48 <ce303_tarif+0x237c>)
 80249c2:	5cd3      	ldrb	r3, [r2, r3]
 80249c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80249c8:	4613      	mov	r3, r2
 80249ca:	009b      	lsls	r3, r3, #2
 80249cc:	4413      	add	r3, r2
 80249ce:	005b      	lsls	r3, r3, #1
 80249d0:	4619      	mov	r1, r3
 80249d2:	8a3b      	ldrh	r3, [r7, #16]
 80249d4:	3304      	adds	r3, #4
 80249d6:	4a1c      	ldr	r2, [pc, #112]	; (8024a48 <ce303_tarif+0x237c>)
 80249d8:	5cd3      	ldrb	r3, [r2, r3]
 80249da:	3b30      	subs	r3, #48	; 0x30
 80249dc:	440b      	add	r3, r1
 80249de:	b29b      	uxth	r3, r3
 80249e0:	461a      	mov	r2, r3
 80249e2:	0092      	lsls	r2, r2, #2
 80249e4:	4413      	add	r3, r2
 80249e6:	005b      	lsls	r3, r3, #1
 80249e8:	82fb      	strh	r3, [r7, #22]
 80249ea:	e059      	b.n	8024aa0 <ce303_tarif+0x23d4>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80249ec:	8a3b      	ldrh	r3, [r7, #16]
 80249ee:	3306      	adds	r3, #6
 80249f0:	4a15      	ldr	r2, [pc, #84]	; (8024a48 <ce303_tarif+0x237c>)
 80249f2:	5cd3      	ldrb	r3, [r2, r3]
 80249f4:	2b29      	cmp	r3, #41	; 0x29
 80249f6:	d12d      	bne.n	8024a54 <ce303_tarif+0x2388>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80249f8:	8a3b      	ldrh	r3, [r7, #16]
 80249fa:	3303      	adds	r3, #3
 80249fc:	4a12      	ldr	r2, [pc, #72]	; (8024a48 <ce303_tarif+0x237c>)
 80249fe:	5cd3      	ldrb	r3, [r2, r3]
 8024a00:	3b30      	subs	r3, #48	; 0x30
 8024a02:	b29b      	uxth	r3, r3
 8024a04:	461a      	mov	r2, r3
 8024a06:	0092      	lsls	r2, r2, #2
 8024a08:	4413      	add	r3, r2
 8024a0a:	461a      	mov	r2, r3
 8024a0c:	0091      	lsls	r1, r2, #2
 8024a0e:	461a      	mov	r2, r3
 8024a10:	460b      	mov	r3, r1
 8024a12:	4413      	add	r3, r2
 8024a14:	009b      	lsls	r3, r3, #2
 8024a16:	b29a      	uxth	r2, r3
 8024a18:	8a3b      	ldrh	r3, [r7, #16]
 8024a1a:	3304      	adds	r3, #4
 8024a1c:	490a      	ldr	r1, [pc, #40]	; (8024a48 <ce303_tarif+0x237c>)
 8024a1e:	5ccb      	ldrb	r3, [r1, r3]
 8024a20:	3b30      	subs	r3, #48	; 0x30
 8024a22:	b29b      	uxth	r3, r3
 8024a24:	4619      	mov	r1, r3
 8024a26:	0089      	lsls	r1, r1, #2
 8024a28:	440b      	add	r3, r1
 8024a2a:	005b      	lsls	r3, r3, #1
 8024a2c:	b29b      	uxth	r3, r3
 8024a2e:	4413      	add	r3, r2
 8024a30:	b29a      	uxth	r2, r3
 8024a32:	8a3b      	ldrh	r3, [r7, #16]
 8024a34:	3305      	adds	r3, #5
 8024a36:	4904      	ldr	r1, [pc, #16]	; (8024a48 <ce303_tarif+0x237c>)
 8024a38:	5ccb      	ldrb	r3, [r1, r3]
 8024a3a:	b29b      	uxth	r3, r3
 8024a3c:	4413      	add	r3, r2
 8024a3e:	b29b      	uxth	r3, r3
 8024a40:	3b30      	subs	r3, #48	; 0x30
 8024a42:	82fb      	strh	r3, [r7, #22]
 8024a44:	e02c      	b.n	8024aa0 <ce303_tarif+0x23d4>
 8024a46:	bf00      	nop
 8024a48:	200098e4 	.word	0x200098e4
 8024a4c:	20009a6c 	.word	0x20009a6c
 8024a50:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8024a54:	8a3b      	ldrh	r3, [r7, #16]
 8024a56:	3303      	adds	r3, #3
 8024a58:	4aaf      	ldr	r2, [pc, #700]	; (8024d18 <ce303_tarif+0x264c>)
 8024a5a:	5cd3      	ldrb	r3, [r2, r3]
 8024a5c:	3b30      	subs	r3, #48	; 0x30
 8024a5e:	b29b      	uxth	r3, r3
 8024a60:	461a      	mov	r2, r3
 8024a62:	0092      	lsls	r2, r2, #2
 8024a64:	4413      	add	r3, r2
 8024a66:	461a      	mov	r2, r3
 8024a68:	0091      	lsls	r1, r2, #2
 8024a6a:	461a      	mov	r2, r3
 8024a6c:	460b      	mov	r3, r1
 8024a6e:	4413      	add	r3, r2
 8024a70:	009b      	lsls	r3, r3, #2
 8024a72:	b29a      	uxth	r2, r3
 8024a74:	8a3b      	ldrh	r3, [r7, #16]
 8024a76:	3304      	adds	r3, #4
 8024a78:	49a7      	ldr	r1, [pc, #668]	; (8024d18 <ce303_tarif+0x264c>)
 8024a7a:	5ccb      	ldrb	r3, [r1, r3]
 8024a7c:	3b30      	subs	r3, #48	; 0x30
 8024a7e:	b29b      	uxth	r3, r3
 8024a80:	4619      	mov	r1, r3
 8024a82:	0089      	lsls	r1, r1, #2
 8024a84:	440b      	add	r3, r1
 8024a86:	005b      	lsls	r3, r3, #1
 8024a88:	b29b      	uxth	r3, r3
 8024a8a:	4413      	add	r3, r2
 8024a8c:	b29a      	uxth	r2, r3
 8024a8e:	8a3b      	ldrh	r3, [r7, #16]
 8024a90:	3305      	adds	r3, #5
 8024a92:	49a1      	ldr	r1, [pc, #644]	; (8024d18 <ce303_tarif+0x264c>)
 8024a94:	5ccb      	ldrb	r3, [r1, r3]
 8024a96:	b29b      	uxth	r3, r3
 8024a98:	4413      	add	r3, r2
 8024a9a:	b29b      	uxth	r3, r3
 8024a9c:	3b30      	subs	r3, #48	; 0x30
 8024a9e:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024aa0:	4b9e      	ldr	r3, [pc, #632]	; (8024d1c <ce303_tarif+0x2650>)
 8024aa2:	681b      	ldr	r3, [r3, #0]
 8024aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8024aa8:	4618      	mov	r0, r3
 8024aaa:	f7f2 f8f9 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8024aae:	68bb      	ldr	r3, [r7, #8]
 8024ab0:	0e1b      	lsrs	r3, r3, #24
 8024ab2:	b2db      	uxtb	r3, r3
 8024ab4:	4619      	mov	r1, r3
 8024ab6:	f242 0094 	movw	r0, #8340	; 0x2094
 8024aba:	f000 fcc3 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8024abe:	68bb      	ldr	r3, [r7, #8]
 8024ac0:	0c1b      	lsrs	r3, r3, #16
 8024ac2:	b2db      	uxtb	r3, r3
 8024ac4:	4619      	mov	r1, r3
 8024ac6:	f242 0095 	movw	r0, #8341	; 0x2095
 8024aca:	f000 fcbb 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8024ace:	68bb      	ldr	r3, [r7, #8]
 8024ad0:	0a1b      	lsrs	r3, r3, #8
 8024ad2:	b2db      	uxtb	r3, r3
 8024ad4:	4619      	mov	r1, r3
 8024ad6:	f242 0096 	movw	r0, #8342	; 0x2096
 8024ada:	f000 fcb3 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8024ade:	68bb      	ldr	r3, [r7, #8]
 8024ae0:	b2db      	uxtb	r3, r3
 8024ae2:	4619      	mov	r1, r3
 8024ae4:	f242 0097 	movw	r0, #8343	; 0x2097
 8024ae8:	f000 fcac 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8024aec:	8afb      	ldrh	r3, [r7, #22]
 8024aee:	0a1b      	lsrs	r3, r3, #8
 8024af0:	b29b      	uxth	r3, r3
 8024af2:	b2db      	uxtb	r3, r3
 8024af4:	4619      	mov	r1, r3
 8024af6:	f242 0098 	movw	r0, #8344	; 0x2098
 8024afa:	f000 fca3 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8024afe:	8afb      	ldrh	r3, [r7, #22]
 8024b00:	b2db      	uxtb	r3, r3
 8024b02:	4619      	mov	r1, r3
 8024b04:	f242 0099 	movw	r0, #8345	; 0x2099
 8024b08:	f000 fc9c 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8024b0c:	4b83      	ldr	r3, [pc, #524]	; (8024d1c <ce303_tarif+0x2650>)
 8024b0e:	681b      	ldr	r3, [r3, #0]
 8024b10:	4618      	mov	r0, r3
 8024b12:	f7f2 f913 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8024b16:	68bb      	ldr	r3, [r7, #8]
 8024b18:	0c1b      	lsrs	r3, r3, #16
 8024b1a:	b29a      	uxth	r2, r3
 8024b1c:	4b80      	ldr	r3, [pc, #512]	; (8024d20 <ce303_tarif+0x2654>)
 8024b1e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8024b22:	68bb      	ldr	r3, [r7, #8]
 8024b24:	b29a      	uxth	r2, r3
 8024b26:	4b7e      	ldr	r3, [pc, #504]	; (8024d20 <ce303_tarif+0x2654>)
 8024b28:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8024b2c:	4a7c      	ldr	r2, [pc, #496]	; (8024d20 <ce303_tarif+0x2654>)
 8024b2e:	8afb      	ldrh	r3, [r7, #22]
 8024b30:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8024b34:	2301      	movs	r3, #1
 8024b36:	74bb      	strb	r3, [r7, #18]
 8024b38:	f000 bc1d 	b.w	8025376 <ce303_tarif+0x2caa>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8024b3c:	8a3b      	ldrh	r3, [r7, #16]
 8024b3e:	3303      	adds	r3, #3
 8024b40:	4a75      	ldr	r2, [pc, #468]	; (8024d18 <ce303_tarif+0x264c>)
 8024b42:	5cd3      	ldrb	r3, [r2, r3]
 8024b44:	2b2e      	cmp	r3, #46	; 0x2e
 8024b46:	f040 80ed 	bne.w	8024d24 <ce303_tarif+0x2658>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8024b4a:	8a3b      	ldrh	r3, [r7, #16]
 8024b4c:	3301      	adds	r3, #1
 8024b4e:	4a72      	ldr	r2, [pc, #456]	; (8024d18 <ce303_tarif+0x264c>)
 8024b50:	5cd3      	ldrb	r3, [r2, r3]
 8024b52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024b56:	4613      	mov	r3, r2
 8024b58:	009b      	lsls	r3, r3, #2
 8024b5a:	4413      	add	r3, r2
 8024b5c:	005b      	lsls	r3, r3, #1
 8024b5e:	4619      	mov	r1, r3
 8024b60:	8a3b      	ldrh	r3, [r7, #16]
 8024b62:	3302      	adds	r3, #2
 8024b64:	4a6c      	ldr	r2, [pc, #432]	; (8024d18 <ce303_tarif+0x264c>)
 8024b66:	5cd3      	ldrb	r3, [r2, r3]
 8024b68:	3b30      	subs	r3, #48	; 0x30
 8024b6a:	440b      	add	r3, r1
 8024b6c:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8024b6e:	8a3b      	ldrh	r3, [r7, #16]
 8024b70:	3305      	adds	r3, #5
 8024b72:	4a69      	ldr	r2, [pc, #420]	; (8024d18 <ce303_tarif+0x264c>)
 8024b74:	5cd3      	ldrb	r3, [r2, r3]
 8024b76:	2b29      	cmp	r3, #41	; 0x29
 8024b78:	d110      	bne.n	8024b9c <ce303_tarif+0x24d0>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8024b7a:	8a3b      	ldrh	r3, [r7, #16]
 8024b7c:	3304      	adds	r3, #4
 8024b7e:	4a66      	ldr	r2, [pc, #408]	; (8024d18 <ce303_tarif+0x264c>)
 8024b80:	5cd3      	ldrb	r3, [r2, r3]
 8024b82:	3b30      	subs	r3, #48	; 0x30
 8024b84:	b29b      	uxth	r3, r3
 8024b86:	461a      	mov	r2, r3
 8024b88:	0092      	lsls	r2, r2, #2
 8024b8a:	4413      	add	r3, r2
 8024b8c:	461a      	mov	r2, r3
 8024b8e:	0091      	lsls	r1, r2, #2
 8024b90:	461a      	mov	r2, r3
 8024b92:	460b      	mov	r3, r1
 8024b94:	4413      	add	r3, r2
 8024b96:	009b      	lsls	r3, r3, #2
 8024b98:	82fb      	strh	r3, [r7, #22]
 8024b9a:	e070      	b.n	8024c7e <ce303_tarif+0x25b2>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8024b9c:	8a3b      	ldrh	r3, [r7, #16]
 8024b9e:	3306      	adds	r3, #6
 8024ba0:	4a5d      	ldr	r2, [pc, #372]	; (8024d18 <ce303_tarif+0x264c>)
 8024ba2:	5cd3      	ldrb	r3, [r2, r3]
 8024ba4:	2b29      	cmp	r3, #41	; 0x29
 8024ba6:	d117      	bne.n	8024bd8 <ce303_tarif+0x250c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8024ba8:	8a3b      	ldrh	r3, [r7, #16]
 8024baa:	3304      	adds	r3, #4
 8024bac:	4a5a      	ldr	r2, [pc, #360]	; (8024d18 <ce303_tarif+0x264c>)
 8024bae:	5cd3      	ldrb	r3, [r2, r3]
 8024bb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024bb4:	4613      	mov	r3, r2
 8024bb6:	009b      	lsls	r3, r3, #2
 8024bb8:	4413      	add	r3, r2
 8024bba:	005b      	lsls	r3, r3, #1
 8024bbc:	4619      	mov	r1, r3
 8024bbe:	8a3b      	ldrh	r3, [r7, #16]
 8024bc0:	3305      	adds	r3, #5
 8024bc2:	4a55      	ldr	r2, [pc, #340]	; (8024d18 <ce303_tarif+0x264c>)
 8024bc4:	5cd3      	ldrb	r3, [r2, r3]
 8024bc6:	3b30      	subs	r3, #48	; 0x30
 8024bc8:	440b      	add	r3, r1
 8024bca:	b29b      	uxth	r3, r3
 8024bcc:	461a      	mov	r2, r3
 8024bce:	0092      	lsls	r2, r2, #2
 8024bd0:	4413      	add	r3, r2
 8024bd2:	005b      	lsls	r3, r3, #1
 8024bd4:	82fb      	strh	r3, [r7, #22]
 8024bd6:	e052      	b.n	8024c7e <ce303_tarif+0x25b2>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8024bd8:	8a3b      	ldrh	r3, [r7, #16]
 8024bda:	3307      	adds	r3, #7
 8024bdc:	4a4e      	ldr	r2, [pc, #312]	; (8024d18 <ce303_tarif+0x264c>)
 8024bde:	5cd3      	ldrb	r3, [r2, r3]
 8024be0:	2b29      	cmp	r3, #41	; 0x29
 8024be2:	d126      	bne.n	8024c32 <ce303_tarif+0x2566>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8024be4:	8a3b      	ldrh	r3, [r7, #16]
 8024be6:	3304      	adds	r3, #4
 8024be8:	4a4b      	ldr	r2, [pc, #300]	; (8024d18 <ce303_tarif+0x264c>)
 8024bea:	5cd3      	ldrb	r3, [r2, r3]
 8024bec:	3b30      	subs	r3, #48	; 0x30
 8024bee:	b29b      	uxth	r3, r3
 8024bf0:	461a      	mov	r2, r3
 8024bf2:	0092      	lsls	r2, r2, #2
 8024bf4:	4413      	add	r3, r2
 8024bf6:	461a      	mov	r2, r3
 8024bf8:	0091      	lsls	r1, r2, #2
 8024bfa:	461a      	mov	r2, r3
 8024bfc:	460b      	mov	r3, r1
 8024bfe:	4413      	add	r3, r2
 8024c00:	009b      	lsls	r3, r3, #2
 8024c02:	b29a      	uxth	r2, r3
 8024c04:	8a3b      	ldrh	r3, [r7, #16]
 8024c06:	3305      	adds	r3, #5
 8024c08:	4943      	ldr	r1, [pc, #268]	; (8024d18 <ce303_tarif+0x264c>)
 8024c0a:	5ccb      	ldrb	r3, [r1, r3]
 8024c0c:	3b30      	subs	r3, #48	; 0x30
 8024c0e:	b29b      	uxth	r3, r3
 8024c10:	4619      	mov	r1, r3
 8024c12:	0089      	lsls	r1, r1, #2
 8024c14:	440b      	add	r3, r1
 8024c16:	005b      	lsls	r3, r3, #1
 8024c18:	b29b      	uxth	r3, r3
 8024c1a:	4413      	add	r3, r2
 8024c1c:	b29a      	uxth	r2, r3
 8024c1e:	8a3b      	ldrh	r3, [r7, #16]
 8024c20:	3306      	adds	r3, #6
 8024c22:	493d      	ldr	r1, [pc, #244]	; (8024d18 <ce303_tarif+0x264c>)
 8024c24:	5ccb      	ldrb	r3, [r1, r3]
 8024c26:	b29b      	uxth	r3, r3
 8024c28:	4413      	add	r3, r2
 8024c2a:	b29b      	uxth	r3, r3
 8024c2c:	3b30      	subs	r3, #48	; 0x30
 8024c2e:	82fb      	strh	r3, [r7, #22]
 8024c30:	e025      	b.n	8024c7e <ce303_tarif+0x25b2>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8024c32:	8a3b      	ldrh	r3, [r7, #16]
 8024c34:	3304      	adds	r3, #4
 8024c36:	4a38      	ldr	r2, [pc, #224]	; (8024d18 <ce303_tarif+0x264c>)
 8024c38:	5cd3      	ldrb	r3, [r2, r3]
 8024c3a:	3b30      	subs	r3, #48	; 0x30
 8024c3c:	b29b      	uxth	r3, r3
 8024c3e:	461a      	mov	r2, r3
 8024c40:	0092      	lsls	r2, r2, #2
 8024c42:	4413      	add	r3, r2
 8024c44:	461a      	mov	r2, r3
 8024c46:	0091      	lsls	r1, r2, #2
 8024c48:	461a      	mov	r2, r3
 8024c4a:	460b      	mov	r3, r1
 8024c4c:	4413      	add	r3, r2
 8024c4e:	009b      	lsls	r3, r3, #2
 8024c50:	b29a      	uxth	r2, r3
 8024c52:	8a3b      	ldrh	r3, [r7, #16]
 8024c54:	3305      	adds	r3, #5
 8024c56:	4930      	ldr	r1, [pc, #192]	; (8024d18 <ce303_tarif+0x264c>)
 8024c58:	5ccb      	ldrb	r3, [r1, r3]
 8024c5a:	3b30      	subs	r3, #48	; 0x30
 8024c5c:	b29b      	uxth	r3, r3
 8024c5e:	4619      	mov	r1, r3
 8024c60:	0089      	lsls	r1, r1, #2
 8024c62:	440b      	add	r3, r1
 8024c64:	005b      	lsls	r3, r3, #1
 8024c66:	b29b      	uxth	r3, r3
 8024c68:	4413      	add	r3, r2
 8024c6a:	b29a      	uxth	r2, r3
 8024c6c:	8a3b      	ldrh	r3, [r7, #16]
 8024c6e:	3306      	adds	r3, #6
 8024c70:	4929      	ldr	r1, [pc, #164]	; (8024d18 <ce303_tarif+0x264c>)
 8024c72:	5ccb      	ldrb	r3, [r1, r3]
 8024c74:	b29b      	uxth	r3, r3
 8024c76:	4413      	add	r3, r2
 8024c78:	b29b      	uxth	r3, r3
 8024c7a:	3b30      	subs	r3, #48	; 0x30
 8024c7c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024c7e:	4b27      	ldr	r3, [pc, #156]	; (8024d1c <ce303_tarif+0x2650>)
 8024c80:	681b      	ldr	r3, [r3, #0]
 8024c82:	f04f 31ff 	mov.w	r1, #4294967295
 8024c86:	4618      	mov	r0, r3
 8024c88:	f7f2 f80a 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8024c8c:	68bb      	ldr	r3, [r7, #8]
 8024c8e:	0e1b      	lsrs	r3, r3, #24
 8024c90:	b2db      	uxtb	r3, r3
 8024c92:	4619      	mov	r1, r3
 8024c94:	f242 0094 	movw	r0, #8340	; 0x2094
 8024c98:	f000 fbd4 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8024c9c:	68bb      	ldr	r3, [r7, #8]
 8024c9e:	0c1b      	lsrs	r3, r3, #16
 8024ca0:	b2db      	uxtb	r3, r3
 8024ca2:	4619      	mov	r1, r3
 8024ca4:	f242 0095 	movw	r0, #8341	; 0x2095
 8024ca8:	f000 fbcc 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8024cac:	68bb      	ldr	r3, [r7, #8]
 8024cae:	0a1b      	lsrs	r3, r3, #8
 8024cb0:	b2db      	uxtb	r3, r3
 8024cb2:	4619      	mov	r1, r3
 8024cb4:	f242 0096 	movw	r0, #8342	; 0x2096
 8024cb8:	f000 fbc4 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8024cbc:	68bb      	ldr	r3, [r7, #8]
 8024cbe:	b2db      	uxtb	r3, r3
 8024cc0:	4619      	mov	r1, r3
 8024cc2:	f242 0097 	movw	r0, #8343	; 0x2097
 8024cc6:	f000 fbbd 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8024cca:	8afb      	ldrh	r3, [r7, #22]
 8024ccc:	0a1b      	lsrs	r3, r3, #8
 8024cce:	b29b      	uxth	r3, r3
 8024cd0:	b2db      	uxtb	r3, r3
 8024cd2:	4619      	mov	r1, r3
 8024cd4:	f242 0098 	movw	r0, #8344	; 0x2098
 8024cd8:	f000 fbb4 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8024cdc:	8afb      	ldrh	r3, [r7, #22]
 8024cde:	b2db      	uxtb	r3, r3
 8024ce0:	4619      	mov	r1, r3
 8024ce2:	f242 0099 	movw	r0, #8345	; 0x2099
 8024ce6:	f000 fbad 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8024cea:	4b0c      	ldr	r3, [pc, #48]	; (8024d1c <ce303_tarif+0x2650>)
 8024cec:	681b      	ldr	r3, [r3, #0]
 8024cee:	4618      	mov	r0, r3
 8024cf0:	f7f2 f824 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8024cf4:	68bb      	ldr	r3, [r7, #8]
 8024cf6:	0c1b      	lsrs	r3, r3, #16
 8024cf8:	b29a      	uxth	r2, r3
 8024cfa:	4b09      	ldr	r3, [pc, #36]	; (8024d20 <ce303_tarif+0x2654>)
 8024cfc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8024d00:	68bb      	ldr	r3, [r7, #8]
 8024d02:	b29a      	uxth	r2, r3
 8024d04:	4b06      	ldr	r3, [pc, #24]	; (8024d20 <ce303_tarif+0x2654>)
 8024d06:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8024d0a:	4a05      	ldr	r2, [pc, #20]	; (8024d20 <ce303_tarif+0x2654>)
 8024d0c:	8afb      	ldrh	r3, [r7, #22]
 8024d0e:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8024d12:	2301      	movs	r3, #1
 8024d14:	74bb      	strb	r3, [r7, #18]
 8024d16:	e32e      	b.n	8025376 <ce303_tarif+0x2caa>
 8024d18:	200098e4 	.word	0x200098e4
 8024d1c:	20009a6c 	.word	0x20009a6c
 8024d20:	2000a10c 	.word	0x2000a10c

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 8024d24:	8a3b      	ldrh	r3, [r7, #16]
 8024d26:	3304      	adds	r3, #4
 8024d28:	4aa9      	ldr	r2, [pc, #676]	; (8024fd0 <ce303_tarif+0x2904>)
 8024d2a:	5cd3      	ldrb	r3, [r2, r3]
 8024d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8024d2e:	f040 80ef 	bne.w	8024f10 <ce303_tarif+0x2844>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8024d32:	8a3b      	ldrh	r3, [r7, #16]
 8024d34:	3301      	adds	r3, #1
 8024d36:	4aa6      	ldr	r2, [pc, #664]	; (8024fd0 <ce303_tarif+0x2904>)
 8024d38:	5cd3      	ldrb	r3, [r2, r3]
 8024d3a:	3b30      	subs	r3, #48	; 0x30
 8024d3c:	2264      	movs	r2, #100	; 0x64
 8024d3e:	fb02 f103 	mul.w	r1, r2, r3
 8024d42:	8a3b      	ldrh	r3, [r7, #16]
 8024d44:	3302      	adds	r3, #2
 8024d46:	4aa2      	ldr	r2, [pc, #648]	; (8024fd0 <ce303_tarif+0x2904>)
 8024d48:	5cd3      	ldrb	r3, [r2, r3]
 8024d4a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024d4e:	4613      	mov	r3, r2
 8024d50:	009b      	lsls	r3, r3, #2
 8024d52:	4413      	add	r3, r2
 8024d54:	005b      	lsls	r3, r3, #1
 8024d56:	18ca      	adds	r2, r1, r3
 8024d58:	8a3b      	ldrh	r3, [r7, #16]
 8024d5a:	3303      	adds	r3, #3
 8024d5c:	499c      	ldr	r1, [pc, #624]	; (8024fd0 <ce303_tarif+0x2904>)
 8024d5e:	5ccb      	ldrb	r3, [r1, r3]
 8024d60:	3b30      	subs	r3, #48	; 0x30
 8024d62:	4413      	add	r3, r2
 8024d64:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8024d66:	8a3b      	ldrh	r3, [r7, #16]
 8024d68:	3306      	adds	r3, #6
 8024d6a:	4a99      	ldr	r2, [pc, #612]	; (8024fd0 <ce303_tarif+0x2904>)
 8024d6c:	5cd3      	ldrb	r3, [r2, r3]
 8024d6e:	2b29      	cmp	r3, #41	; 0x29
 8024d70:	d110      	bne.n	8024d94 <ce303_tarif+0x26c8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8024d72:	8a3b      	ldrh	r3, [r7, #16]
 8024d74:	3305      	adds	r3, #5
 8024d76:	4a96      	ldr	r2, [pc, #600]	; (8024fd0 <ce303_tarif+0x2904>)
 8024d78:	5cd3      	ldrb	r3, [r2, r3]
 8024d7a:	3b30      	subs	r3, #48	; 0x30
 8024d7c:	b29b      	uxth	r3, r3
 8024d7e:	461a      	mov	r2, r3
 8024d80:	0092      	lsls	r2, r2, #2
 8024d82:	4413      	add	r3, r2
 8024d84:	461a      	mov	r2, r3
 8024d86:	0091      	lsls	r1, r2, #2
 8024d88:	461a      	mov	r2, r3
 8024d8a:	460b      	mov	r3, r1
 8024d8c:	4413      	add	r3, r2
 8024d8e:	009b      	lsls	r3, r3, #2
 8024d90:	82fb      	strh	r3, [r7, #22]
 8024d92:	e070      	b.n	8024e76 <ce303_tarif+0x27aa>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8024d94:	8a3b      	ldrh	r3, [r7, #16]
 8024d96:	3307      	adds	r3, #7
 8024d98:	4a8d      	ldr	r2, [pc, #564]	; (8024fd0 <ce303_tarif+0x2904>)
 8024d9a:	5cd3      	ldrb	r3, [r2, r3]
 8024d9c:	2b29      	cmp	r3, #41	; 0x29
 8024d9e:	d117      	bne.n	8024dd0 <ce303_tarif+0x2704>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8024da0:	8a3b      	ldrh	r3, [r7, #16]
 8024da2:	3305      	adds	r3, #5
 8024da4:	4a8a      	ldr	r2, [pc, #552]	; (8024fd0 <ce303_tarif+0x2904>)
 8024da6:	5cd3      	ldrb	r3, [r2, r3]
 8024da8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024dac:	4613      	mov	r3, r2
 8024dae:	009b      	lsls	r3, r3, #2
 8024db0:	4413      	add	r3, r2
 8024db2:	005b      	lsls	r3, r3, #1
 8024db4:	4619      	mov	r1, r3
 8024db6:	8a3b      	ldrh	r3, [r7, #16]
 8024db8:	3306      	adds	r3, #6
 8024dba:	4a85      	ldr	r2, [pc, #532]	; (8024fd0 <ce303_tarif+0x2904>)
 8024dbc:	5cd3      	ldrb	r3, [r2, r3]
 8024dbe:	3b30      	subs	r3, #48	; 0x30
 8024dc0:	440b      	add	r3, r1
 8024dc2:	b29b      	uxth	r3, r3
 8024dc4:	461a      	mov	r2, r3
 8024dc6:	0092      	lsls	r2, r2, #2
 8024dc8:	4413      	add	r3, r2
 8024dca:	005b      	lsls	r3, r3, #1
 8024dcc:	82fb      	strh	r3, [r7, #22]
 8024dce:	e052      	b.n	8024e76 <ce303_tarif+0x27aa>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8024dd0:	8a3b      	ldrh	r3, [r7, #16]
 8024dd2:	3308      	adds	r3, #8
 8024dd4:	4a7e      	ldr	r2, [pc, #504]	; (8024fd0 <ce303_tarif+0x2904>)
 8024dd6:	5cd3      	ldrb	r3, [r2, r3]
 8024dd8:	2b29      	cmp	r3, #41	; 0x29
 8024dda:	d126      	bne.n	8024e2a <ce303_tarif+0x275e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8024ddc:	8a3b      	ldrh	r3, [r7, #16]
 8024dde:	3305      	adds	r3, #5
 8024de0:	4a7b      	ldr	r2, [pc, #492]	; (8024fd0 <ce303_tarif+0x2904>)
 8024de2:	5cd3      	ldrb	r3, [r2, r3]
 8024de4:	3b30      	subs	r3, #48	; 0x30
 8024de6:	b29b      	uxth	r3, r3
 8024de8:	461a      	mov	r2, r3
 8024dea:	0092      	lsls	r2, r2, #2
 8024dec:	4413      	add	r3, r2
 8024dee:	461a      	mov	r2, r3
 8024df0:	0091      	lsls	r1, r2, #2
 8024df2:	461a      	mov	r2, r3
 8024df4:	460b      	mov	r3, r1
 8024df6:	4413      	add	r3, r2
 8024df8:	009b      	lsls	r3, r3, #2
 8024dfa:	b29a      	uxth	r2, r3
 8024dfc:	8a3b      	ldrh	r3, [r7, #16]
 8024dfe:	3306      	adds	r3, #6
 8024e00:	4973      	ldr	r1, [pc, #460]	; (8024fd0 <ce303_tarif+0x2904>)
 8024e02:	5ccb      	ldrb	r3, [r1, r3]
 8024e04:	3b30      	subs	r3, #48	; 0x30
 8024e06:	b29b      	uxth	r3, r3
 8024e08:	4619      	mov	r1, r3
 8024e0a:	0089      	lsls	r1, r1, #2
 8024e0c:	440b      	add	r3, r1
 8024e0e:	005b      	lsls	r3, r3, #1
 8024e10:	b29b      	uxth	r3, r3
 8024e12:	4413      	add	r3, r2
 8024e14:	b29a      	uxth	r2, r3
 8024e16:	8a3b      	ldrh	r3, [r7, #16]
 8024e18:	3307      	adds	r3, #7
 8024e1a:	496d      	ldr	r1, [pc, #436]	; (8024fd0 <ce303_tarif+0x2904>)
 8024e1c:	5ccb      	ldrb	r3, [r1, r3]
 8024e1e:	b29b      	uxth	r3, r3
 8024e20:	4413      	add	r3, r2
 8024e22:	b29b      	uxth	r3, r3
 8024e24:	3b30      	subs	r3, #48	; 0x30
 8024e26:	82fb      	strh	r3, [r7, #22]
 8024e28:	e025      	b.n	8024e76 <ce303_tarif+0x27aa>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8024e2a:	8a3b      	ldrh	r3, [r7, #16]
 8024e2c:	3305      	adds	r3, #5
 8024e2e:	4a68      	ldr	r2, [pc, #416]	; (8024fd0 <ce303_tarif+0x2904>)
 8024e30:	5cd3      	ldrb	r3, [r2, r3]
 8024e32:	3b30      	subs	r3, #48	; 0x30
 8024e34:	b29b      	uxth	r3, r3
 8024e36:	461a      	mov	r2, r3
 8024e38:	0092      	lsls	r2, r2, #2
 8024e3a:	4413      	add	r3, r2
 8024e3c:	461a      	mov	r2, r3
 8024e3e:	0091      	lsls	r1, r2, #2
 8024e40:	461a      	mov	r2, r3
 8024e42:	460b      	mov	r3, r1
 8024e44:	4413      	add	r3, r2
 8024e46:	009b      	lsls	r3, r3, #2
 8024e48:	b29a      	uxth	r2, r3
 8024e4a:	8a3b      	ldrh	r3, [r7, #16]
 8024e4c:	3306      	adds	r3, #6
 8024e4e:	4960      	ldr	r1, [pc, #384]	; (8024fd0 <ce303_tarif+0x2904>)
 8024e50:	5ccb      	ldrb	r3, [r1, r3]
 8024e52:	3b30      	subs	r3, #48	; 0x30
 8024e54:	b29b      	uxth	r3, r3
 8024e56:	4619      	mov	r1, r3
 8024e58:	0089      	lsls	r1, r1, #2
 8024e5a:	440b      	add	r3, r1
 8024e5c:	005b      	lsls	r3, r3, #1
 8024e5e:	b29b      	uxth	r3, r3
 8024e60:	4413      	add	r3, r2
 8024e62:	b29a      	uxth	r2, r3
 8024e64:	8a3b      	ldrh	r3, [r7, #16]
 8024e66:	3307      	adds	r3, #7
 8024e68:	4959      	ldr	r1, [pc, #356]	; (8024fd0 <ce303_tarif+0x2904>)
 8024e6a:	5ccb      	ldrb	r3, [r1, r3]
 8024e6c:	b29b      	uxth	r3, r3
 8024e6e:	4413      	add	r3, r2
 8024e70:	b29b      	uxth	r3, r3
 8024e72:	3b30      	subs	r3, #48	; 0x30
 8024e74:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024e76:	4b57      	ldr	r3, [pc, #348]	; (8024fd4 <ce303_tarif+0x2908>)
 8024e78:	681b      	ldr	r3, [r3, #0]
 8024e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8024e7e:	4618      	mov	r0, r3
 8024e80:	f7f1 ff0e 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8024e84:	68bb      	ldr	r3, [r7, #8]
 8024e86:	0e1b      	lsrs	r3, r3, #24
 8024e88:	b2db      	uxtb	r3, r3
 8024e8a:	4619      	mov	r1, r3
 8024e8c:	f242 0094 	movw	r0, #8340	; 0x2094
 8024e90:	f000 fad8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8024e94:	68bb      	ldr	r3, [r7, #8]
 8024e96:	0c1b      	lsrs	r3, r3, #16
 8024e98:	b2db      	uxtb	r3, r3
 8024e9a:	4619      	mov	r1, r3
 8024e9c:	f242 0095 	movw	r0, #8341	; 0x2095
 8024ea0:	f000 fad0 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8024ea4:	68bb      	ldr	r3, [r7, #8]
 8024ea6:	0a1b      	lsrs	r3, r3, #8
 8024ea8:	b2db      	uxtb	r3, r3
 8024eaa:	4619      	mov	r1, r3
 8024eac:	f242 0096 	movw	r0, #8342	; 0x2096
 8024eb0:	f000 fac8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8024eb4:	68bb      	ldr	r3, [r7, #8]
 8024eb6:	b2db      	uxtb	r3, r3
 8024eb8:	4619      	mov	r1, r3
 8024eba:	f242 0097 	movw	r0, #8343	; 0x2097
 8024ebe:	f000 fac1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8024ec2:	8afb      	ldrh	r3, [r7, #22]
 8024ec4:	0a1b      	lsrs	r3, r3, #8
 8024ec6:	b29b      	uxth	r3, r3
 8024ec8:	b2db      	uxtb	r3, r3
 8024eca:	4619      	mov	r1, r3
 8024ecc:	f242 0098 	movw	r0, #8344	; 0x2098
 8024ed0:	f000 fab8 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8024ed4:	8afb      	ldrh	r3, [r7, #22]
 8024ed6:	b2db      	uxtb	r3, r3
 8024ed8:	4619      	mov	r1, r3
 8024eda:	f242 0099 	movw	r0, #8345	; 0x2099
 8024ede:	f000 fab1 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8024ee2:	4b3c      	ldr	r3, [pc, #240]	; (8024fd4 <ce303_tarif+0x2908>)
 8024ee4:	681b      	ldr	r3, [r3, #0]
 8024ee6:	4618      	mov	r0, r3
 8024ee8:	f7f1 ff28 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8024eec:	68bb      	ldr	r3, [r7, #8]
 8024eee:	0c1b      	lsrs	r3, r3, #16
 8024ef0:	b29a      	uxth	r2, r3
 8024ef2:	4b39      	ldr	r3, [pc, #228]	; (8024fd8 <ce303_tarif+0x290c>)
 8024ef4:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8024ef8:	68bb      	ldr	r3, [r7, #8]
 8024efa:	b29a      	uxth	r2, r3
 8024efc:	4b36      	ldr	r3, [pc, #216]	; (8024fd8 <ce303_tarif+0x290c>)
 8024efe:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8024f02:	4a35      	ldr	r2, [pc, #212]	; (8024fd8 <ce303_tarif+0x290c>)
 8024f04:	8afb      	ldrh	r3, [r7, #22]
 8024f06:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8024f0a:	2301      	movs	r3, #1
 8024f0c:	74bb      	strb	r3, [r7, #18]
 8024f0e:	e232      	b.n	8025376 <ce303_tarif+0x2caa>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 8024f10:	8a3b      	ldrh	r3, [r7, #16]
 8024f12:	3305      	adds	r3, #5
 8024f14:	4a2e      	ldr	r2, [pc, #184]	; (8024fd0 <ce303_tarif+0x2904>)
 8024f16:	5cd3      	ldrb	r3, [r2, r3]
 8024f18:	2b2e      	cmp	r3, #46	; 0x2e
 8024f1a:	f040 80ff 	bne.w	802511c <ce303_tarif+0x2a50>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8024f1e:	8a3b      	ldrh	r3, [r7, #16]
 8024f20:	3301      	adds	r3, #1
 8024f22:	4a2b      	ldr	r2, [pc, #172]	; (8024fd0 <ce303_tarif+0x2904>)
 8024f24:	5cd3      	ldrb	r3, [r2, r3]
 8024f26:	3b30      	subs	r3, #48	; 0x30
 8024f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8024f2c:	fb02 f203 	mul.w	r2, r2, r3
 8024f30:	8a3b      	ldrh	r3, [r7, #16]
 8024f32:	3302      	adds	r3, #2
 8024f34:	4926      	ldr	r1, [pc, #152]	; (8024fd0 <ce303_tarif+0x2904>)
 8024f36:	5ccb      	ldrb	r3, [r1, r3]
 8024f38:	3b30      	subs	r3, #48	; 0x30
 8024f3a:	2164      	movs	r1, #100	; 0x64
 8024f3c:	fb01 f303 	mul.w	r3, r1, r3
 8024f40:	18d1      	adds	r1, r2, r3
 8024f42:	8a3b      	ldrh	r3, [r7, #16]
 8024f44:	3303      	adds	r3, #3
 8024f46:	4a22      	ldr	r2, [pc, #136]	; (8024fd0 <ce303_tarif+0x2904>)
 8024f48:	5cd3      	ldrb	r3, [r2, r3]
 8024f4a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024f4e:	4613      	mov	r3, r2
 8024f50:	009b      	lsls	r3, r3, #2
 8024f52:	4413      	add	r3, r2
 8024f54:	005b      	lsls	r3, r3, #1
 8024f56:	18ca      	adds	r2, r1, r3
 8024f58:	8a3b      	ldrh	r3, [r7, #16]
 8024f5a:	3304      	adds	r3, #4
 8024f5c:	491c      	ldr	r1, [pc, #112]	; (8024fd0 <ce303_tarif+0x2904>)
 8024f5e:	5ccb      	ldrb	r3, [r1, r3]
 8024f60:	3b30      	subs	r3, #48	; 0x30
 8024f62:	4413      	add	r3, r2
 8024f64:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 8024f66:	8a3b      	ldrh	r3, [r7, #16]
 8024f68:	3307      	adds	r3, #7
 8024f6a:	4a19      	ldr	r2, [pc, #100]	; (8024fd0 <ce303_tarif+0x2904>)
 8024f6c:	5cd3      	ldrb	r3, [r2, r3]
 8024f6e:	2b29      	cmp	r3, #41	; 0x29
 8024f70:	d110      	bne.n	8024f94 <ce303_tarif+0x28c8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8024f72:	8a3b      	ldrh	r3, [r7, #16]
 8024f74:	3306      	adds	r3, #6
 8024f76:	4a16      	ldr	r2, [pc, #88]	; (8024fd0 <ce303_tarif+0x2904>)
 8024f78:	5cd3      	ldrb	r3, [r2, r3]
 8024f7a:	3b30      	subs	r3, #48	; 0x30
 8024f7c:	b29b      	uxth	r3, r3
 8024f7e:	461a      	mov	r2, r3
 8024f80:	0092      	lsls	r2, r2, #2
 8024f82:	4413      	add	r3, r2
 8024f84:	461a      	mov	r2, r3
 8024f86:	0091      	lsls	r1, r2, #2
 8024f88:	461a      	mov	r2, r3
 8024f8a:	460b      	mov	r3, r1
 8024f8c:	4413      	add	r3, r2
 8024f8e:	009b      	lsls	r3, r3, #2
 8024f90:	82fb      	strh	r3, [r7, #22]
 8024f92:	e076      	b.n	8025082 <ce303_tarif+0x29b6>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 8024f94:	8a3b      	ldrh	r3, [r7, #16]
 8024f96:	3308      	adds	r3, #8
 8024f98:	4a0d      	ldr	r2, [pc, #52]	; (8024fd0 <ce303_tarif+0x2904>)
 8024f9a:	5cd3      	ldrb	r3, [r2, r3]
 8024f9c:	2b29      	cmp	r3, #41	; 0x29
 8024f9e:	d11d      	bne.n	8024fdc <ce303_tarif+0x2910>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8024fa0:	8a3b      	ldrh	r3, [r7, #16]
 8024fa2:	3306      	adds	r3, #6
 8024fa4:	4a0a      	ldr	r2, [pc, #40]	; (8024fd0 <ce303_tarif+0x2904>)
 8024fa6:	5cd3      	ldrb	r3, [r2, r3]
 8024fa8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024fac:	4613      	mov	r3, r2
 8024fae:	009b      	lsls	r3, r3, #2
 8024fb0:	4413      	add	r3, r2
 8024fb2:	005b      	lsls	r3, r3, #1
 8024fb4:	4619      	mov	r1, r3
 8024fb6:	8a3b      	ldrh	r3, [r7, #16]
 8024fb8:	3307      	adds	r3, #7
 8024fba:	4a05      	ldr	r2, [pc, #20]	; (8024fd0 <ce303_tarif+0x2904>)
 8024fbc:	5cd3      	ldrb	r3, [r2, r3]
 8024fbe:	3b30      	subs	r3, #48	; 0x30
 8024fc0:	440b      	add	r3, r1
 8024fc2:	b29b      	uxth	r3, r3
 8024fc4:	461a      	mov	r2, r3
 8024fc6:	0092      	lsls	r2, r2, #2
 8024fc8:	4413      	add	r3, r2
 8024fca:	005b      	lsls	r3, r3, #1
 8024fcc:	82fb      	strh	r3, [r7, #22]
 8024fce:	e058      	b.n	8025082 <ce303_tarif+0x29b6>
 8024fd0:	200098e4 	.word	0x200098e4
 8024fd4:	20009a6c 	.word	0x20009a6c
 8024fd8:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8024fdc:	8a3b      	ldrh	r3, [r7, #16]
 8024fde:	3309      	adds	r3, #9
 8024fe0:	4a9a      	ldr	r2, [pc, #616]	; (802524c <ce303_tarif+0x2b80>)
 8024fe2:	5cd3      	ldrb	r3, [r2, r3]
 8024fe4:	2b29      	cmp	r3, #41	; 0x29
 8024fe6:	d126      	bne.n	8025036 <ce303_tarif+0x296a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8024fe8:	8a3b      	ldrh	r3, [r7, #16]
 8024fea:	3306      	adds	r3, #6
 8024fec:	4a97      	ldr	r2, [pc, #604]	; (802524c <ce303_tarif+0x2b80>)
 8024fee:	5cd3      	ldrb	r3, [r2, r3]
 8024ff0:	3b30      	subs	r3, #48	; 0x30
 8024ff2:	b29b      	uxth	r3, r3
 8024ff4:	461a      	mov	r2, r3
 8024ff6:	0092      	lsls	r2, r2, #2
 8024ff8:	4413      	add	r3, r2
 8024ffa:	461a      	mov	r2, r3
 8024ffc:	0091      	lsls	r1, r2, #2
 8024ffe:	461a      	mov	r2, r3
 8025000:	460b      	mov	r3, r1
 8025002:	4413      	add	r3, r2
 8025004:	009b      	lsls	r3, r3, #2
 8025006:	b29a      	uxth	r2, r3
 8025008:	8a3b      	ldrh	r3, [r7, #16]
 802500a:	3307      	adds	r3, #7
 802500c:	498f      	ldr	r1, [pc, #572]	; (802524c <ce303_tarif+0x2b80>)
 802500e:	5ccb      	ldrb	r3, [r1, r3]
 8025010:	3b30      	subs	r3, #48	; 0x30
 8025012:	b29b      	uxth	r3, r3
 8025014:	4619      	mov	r1, r3
 8025016:	0089      	lsls	r1, r1, #2
 8025018:	440b      	add	r3, r1
 802501a:	005b      	lsls	r3, r3, #1
 802501c:	b29b      	uxth	r3, r3
 802501e:	4413      	add	r3, r2
 8025020:	b29a      	uxth	r2, r3
 8025022:	8a3b      	ldrh	r3, [r7, #16]
 8025024:	3308      	adds	r3, #8
 8025026:	4989      	ldr	r1, [pc, #548]	; (802524c <ce303_tarif+0x2b80>)
 8025028:	5ccb      	ldrb	r3, [r1, r3]
 802502a:	b29b      	uxth	r3, r3
 802502c:	4413      	add	r3, r2
 802502e:	b29b      	uxth	r3, r3
 8025030:	3b30      	subs	r3, #48	; 0x30
 8025032:	82fb      	strh	r3, [r7, #22]
 8025034:	e025      	b.n	8025082 <ce303_tarif+0x29b6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8025036:	8a3b      	ldrh	r3, [r7, #16]
 8025038:	3306      	adds	r3, #6
 802503a:	4a84      	ldr	r2, [pc, #528]	; (802524c <ce303_tarif+0x2b80>)
 802503c:	5cd3      	ldrb	r3, [r2, r3]
 802503e:	3b30      	subs	r3, #48	; 0x30
 8025040:	b29b      	uxth	r3, r3
 8025042:	461a      	mov	r2, r3
 8025044:	0092      	lsls	r2, r2, #2
 8025046:	4413      	add	r3, r2
 8025048:	461a      	mov	r2, r3
 802504a:	0091      	lsls	r1, r2, #2
 802504c:	461a      	mov	r2, r3
 802504e:	460b      	mov	r3, r1
 8025050:	4413      	add	r3, r2
 8025052:	009b      	lsls	r3, r3, #2
 8025054:	b29a      	uxth	r2, r3
 8025056:	8a3b      	ldrh	r3, [r7, #16]
 8025058:	3307      	adds	r3, #7
 802505a:	497c      	ldr	r1, [pc, #496]	; (802524c <ce303_tarif+0x2b80>)
 802505c:	5ccb      	ldrb	r3, [r1, r3]
 802505e:	3b30      	subs	r3, #48	; 0x30
 8025060:	b29b      	uxth	r3, r3
 8025062:	4619      	mov	r1, r3
 8025064:	0089      	lsls	r1, r1, #2
 8025066:	440b      	add	r3, r1
 8025068:	005b      	lsls	r3, r3, #1
 802506a:	b29b      	uxth	r3, r3
 802506c:	4413      	add	r3, r2
 802506e:	b29a      	uxth	r2, r3
 8025070:	8a3b      	ldrh	r3, [r7, #16]
 8025072:	3308      	adds	r3, #8
 8025074:	4975      	ldr	r1, [pc, #468]	; (802524c <ce303_tarif+0x2b80>)
 8025076:	5ccb      	ldrb	r3, [r1, r3]
 8025078:	b29b      	uxth	r3, r3
 802507a:	4413      	add	r3, r2
 802507c:	b29b      	uxth	r3, r3
 802507e:	3b30      	subs	r3, #48	; 0x30
 8025080:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8025082:	4b73      	ldr	r3, [pc, #460]	; (8025250 <ce303_tarif+0x2b84>)
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	f04f 31ff 	mov.w	r1, #4294967295
 802508a:	4618      	mov	r0, r3
 802508c:	f7f1 fe08 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8025090:	68bb      	ldr	r3, [r7, #8]
 8025092:	0e1b      	lsrs	r3, r3, #24
 8025094:	b2db      	uxtb	r3, r3
 8025096:	4619      	mov	r1, r3
 8025098:	f242 0094 	movw	r0, #8340	; 0x2094
 802509c:	f000 f9d2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 80250a0:	68bb      	ldr	r3, [r7, #8]
 80250a2:	0c1b      	lsrs	r3, r3, #16
 80250a4:	b2db      	uxtb	r3, r3
 80250a6:	4619      	mov	r1, r3
 80250a8:	f242 0095 	movw	r0, #8341	; 0x2095
 80250ac:	f000 f9ca 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 80250b0:	68bb      	ldr	r3, [r7, #8]
 80250b2:	0a1b      	lsrs	r3, r3, #8
 80250b4:	b2db      	uxtb	r3, r3
 80250b6:	4619      	mov	r1, r3
 80250b8:	f242 0096 	movw	r0, #8342	; 0x2096
 80250bc:	f000 f9c2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 80250c0:	68bb      	ldr	r3, [r7, #8]
 80250c2:	b2db      	uxtb	r3, r3
 80250c4:	4619      	mov	r1, r3
 80250c6:	f242 0097 	movw	r0, #8343	; 0x2097
 80250ca:	f000 f9bb 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80250ce:	8afb      	ldrh	r3, [r7, #22]
 80250d0:	0a1b      	lsrs	r3, r3, #8
 80250d2:	b29b      	uxth	r3, r3
 80250d4:	b2db      	uxtb	r3, r3
 80250d6:	4619      	mov	r1, r3
 80250d8:	f242 0098 	movw	r0, #8344	; 0x2098
 80250dc:	f000 f9b2 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80250e0:	8afb      	ldrh	r3, [r7, #22]
 80250e2:	b2db      	uxtb	r3, r3
 80250e4:	4619      	mov	r1, r3
 80250e6:	f242 0099 	movw	r0, #8345	; 0x2099
 80250ea:	f000 f9ab 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80250ee:	4b58      	ldr	r3, [pc, #352]	; (8025250 <ce303_tarif+0x2b84>)
 80250f0:	681b      	ldr	r3, [r3, #0]
 80250f2:	4618      	mov	r0, r3
 80250f4:	f7f1 fe22 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 80250f8:	68bb      	ldr	r3, [r7, #8]
 80250fa:	0c1b      	lsrs	r3, r3, #16
 80250fc:	b29a      	uxth	r2, r3
 80250fe:	4b55      	ldr	r3, [pc, #340]	; (8025254 <ce303_tarif+0x2b88>)
 8025100:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8025104:	68bb      	ldr	r3, [r7, #8]
 8025106:	b29a      	uxth	r2, r3
 8025108:	4b52      	ldr	r3, [pc, #328]	; (8025254 <ce303_tarif+0x2b88>)
 802510a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 802510e:	4a51      	ldr	r2, [pc, #324]	; (8025254 <ce303_tarif+0x2b88>)
 8025110:	8afb      	ldrh	r3, [r7, #22]
 8025112:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8025116:	2301      	movs	r3, #1
 8025118:	74bb      	strb	r3, [r7, #18]
 802511a:	e12c      	b.n	8025376 <ce303_tarif+0x2caa>

			}

			else if( meter_rx_buffer[i+6] == 0x2E) // четыре цифры перед запятой
 802511c:	8a3b      	ldrh	r3, [r7, #16]
 802511e:	3306      	adds	r3, #6
 8025120:	4a4a      	ldr	r2, [pc, #296]	; (802524c <ce303_tarif+0x2b80>)
 8025122:	5cd3      	ldrb	r3, [r2, r3]
 8025124:	2b2e      	cmp	r3, #46	; 0x2e
 8025126:	f040 8126 	bne.w	8025376 <ce303_tarif+0x2caa>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 802512a:	8a3b      	ldrh	r3, [r7, #16]
 802512c:	3301      	adds	r3, #1
 802512e:	4a47      	ldr	r2, [pc, #284]	; (802524c <ce303_tarif+0x2b80>)
 8025130:	5cd3      	ldrb	r3, [r2, r3]
 8025132:	3b30      	subs	r3, #48	; 0x30
 8025134:	f242 7210 	movw	r2, #10000	; 0x2710
 8025138:	fb02 f203 	mul.w	r2, r2, r3
 802513c:	8a3b      	ldrh	r3, [r7, #16]
 802513e:	3302      	adds	r3, #2
 8025140:	4942      	ldr	r1, [pc, #264]	; (802524c <ce303_tarif+0x2b80>)
 8025142:	5ccb      	ldrb	r3, [r1, r3]
 8025144:	3b30      	subs	r3, #48	; 0x30
 8025146:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 802514a:	fb01 f303 	mul.w	r3, r1, r3
 802514e:	441a      	add	r2, r3
 8025150:	8a3b      	ldrh	r3, [r7, #16]
 8025152:	3303      	adds	r3, #3
 8025154:	493d      	ldr	r1, [pc, #244]	; (802524c <ce303_tarif+0x2b80>)
 8025156:	5ccb      	ldrb	r3, [r1, r3]
 8025158:	3b30      	subs	r3, #48	; 0x30
 802515a:	2164      	movs	r1, #100	; 0x64
 802515c:	fb01 f303 	mul.w	r3, r1, r3
 8025160:	18d1      	adds	r1, r2, r3
 8025162:	8a3b      	ldrh	r3, [r7, #16]
 8025164:	3304      	adds	r3, #4
 8025166:	4a39      	ldr	r2, [pc, #228]	; (802524c <ce303_tarif+0x2b80>)
 8025168:	5cd3      	ldrb	r3, [r2, r3]
 802516a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802516e:	4613      	mov	r3, r2
 8025170:	009b      	lsls	r3, r3, #2
 8025172:	4413      	add	r3, r2
 8025174:	005b      	lsls	r3, r3, #1
 8025176:	18ca      	adds	r2, r1, r3
 8025178:	8a3b      	ldrh	r3, [r7, #16]
 802517a:	3305      	adds	r3, #5
 802517c:	4933      	ldr	r1, [pc, #204]	; (802524c <ce303_tarif+0x2b80>)
 802517e:	5ccb      	ldrb	r3, [r1, r3]
 8025180:	3b30      	subs	r3, #48	; 0x30
 8025182:	4413      	add	r3, r2
 8025184:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+8] == 0x29 ) // если 1 разряд после запятой
 8025186:	8a3b      	ldrh	r3, [r7, #16]
 8025188:	3308      	adds	r3, #8
 802518a:	4a30      	ldr	r2, [pc, #192]	; (802524c <ce303_tarif+0x2b80>)
 802518c:	5cd3      	ldrb	r3, [r2, r3]
 802518e:	2b29      	cmp	r3, #41	; 0x29
 8025190:	d110      	bne.n	80251b4 <ce303_tarif+0x2ae8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+7])-0x30)*100;
 8025192:	8a3b      	ldrh	r3, [r7, #16]
 8025194:	3307      	adds	r3, #7
 8025196:	4a2d      	ldr	r2, [pc, #180]	; (802524c <ce303_tarif+0x2b80>)
 8025198:	5cd3      	ldrb	r3, [r2, r3]
 802519a:	3b30      	subs	r3, #48	; 0x30
 802519c:	b29b      	uxth	r3, r3
 802519e:	461a      	mov	r2, r3
 80251a0:	0092      	lsls	r2, r2, #2
 80251a2:	4413      	add	r3, r2
 80251a4:	461a      	mov	r2, r3
 80251a6:	0091      	lsls	r1, r2, #2
 80251a8:	461a      	mov	r2, r3
 80251aa:	460b      	mov	r3, r1
 80251ac:	4413      	add	r3, r2
 80251ae:	009b      	lsls	r3, r3, #2
 80251b0:	82fb      	strh	r3, [r7, #22]
 80251b2:	e077      	b.n	80252a4 <ce303_tarif+0x2bd8>
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 2 разряда после запятой
 80251b4:	8a3b      	ldrh	r3, [r7, #16]
 80251b6:	3309      	adds	r3, #9
 80251b8:	4a24      	ldr	r2, [pc, #144]	; (802524c <ce303_tarif+0x2b80>)
 80251ba:	5cd3      	ldrb	r3, [r2, r3]
 80251bc:	2b29      	cmp	r3, #41	; 0x29
 80251be:	d117      	bne.n	80251f0 <ce303_tarif+0x2b24>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30))*10;
 80251c0:	8a3b      	ldrh	r3, [r7, #16]
 80251c2:	3307      	adds	r3, #7
 80251c4:	4a21      	ldr	r2, [pc, #132]	; (802524c <ce303_tarif+0x2b80>)
 80251c6:	5cd3      	ldrb	r3, [r2, r3]
 80251c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80251cc:	4613      	mov	r3, r2
 80251ce:	009b      	lsls	r3, r3, #2
 80251d0:	4413      	add	r3, r2
 80251d2:	005b      	lsls	r3, r3, #1
 80251d4:	4619      	mov	r1, r3
 80251d6:	8a3b      	ldrh	r3, [r7, #16]
 80251d8:	3308      	adds	r3, #8
 80251da:	4a1c      	ldr	r2, [pc, #112]	; (802524c <ce303_tarif+0x2b80>)
 80251dc:	5cd3      	ldrb	r3, [r2, r3]
 80251de:	3b30      	subs	r3, #48	; 0x30
 80251e0:	440b      	add	r3, r1
 80251e2:	b29b      	uxth	r3, r3
 80251e4:	461a      	mov	r2, r3
 80251e6:	0092      	lsls	r2, r2, #2
 80251e8:	4413      	add	r3, r2
 80251ea:	005b      	lsls	r3, r3, #1
 80251ec:	82fb      	strh	r3, [r7, #22]
 80251ee:	e059      	b.n	80252a4 <ce303_tarif+0x2bd8>
				}
				else if( meter_rx_buffer[i+10] == 0x29 ) // если 3 разряда после запятой
 80251f0:	8a3b      	ldrh	r3, [r7, #16]
 80251f2:	330a      	adds	r3, #10
 80251f4:	4a15      	ldr	r2, [pc, #84]	; (802524c <ce303_tarif+0x2b80>)
 80251f6:	5cd3      	ldrb	r3, [r2, r3]
 80251f8:	2b29      	cmp	r3, #41	; 0x29
 80251fa:	d12d      	bne.n	8025258 <ce303_tarif+0x2b8c>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+7])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+8])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+9])-0x30);
 80251fc:	8a3b      	ldrh	r3, [r7, #16]
 80251fe:	3307      	adds	r3, #7
 8025200:	4a12      	ldr	r2, [pc, #72]	; (802524c <ce303_tarif+0x2b80>)
 8025202:	5cd3      	ldrb	r3, [r2, r3]
 8025204:	3b30      	subs	r3, #48	; 0x30
 8025206:	b29b      	uxth	r3, r3
 8025208:	461a      	mov	r2, r3
 802520a:	0092      	lsls	r2, r2, #2
 802520c:	4413      	add	r3, r2
 802520e:	461a      	mov	r2, r3
 8025210:	0091      	lsls	r1, r2, #2
 8025212:	461a      	mov	r2, r3
 8025214:	460b      	mov	r3, r1
 8025216:	4413      	add	r3, r2
 8025218:	009b      	lsls	r3, r3, #2
 802521a:	b29a      	uxth	r2, r3
 802521c:	8a3b      	ldrh	r3, [r7, #16]
 802521e:	3308      	adds	r3, #8
 8025220:	490a      	ldr	r1, [pc, #40]	; (802524c <ce303_tarif+0x2b80>)
 8025222:	5ccb      	ldrb	r3, [r1, r3]
 8025224:	3b30      	subs	r3, #48	; 0x30
 8025226:	b29b      	uxth	r3, r3
 8025228:	4619      	mov	r1, r3
 802522a:	0089      	lsls	r1, r1, #2
 802522c:	440b      	add	r3, r1
 802522e:	005b      	lsls	r3, r3, #1
 8025230:	b29b      	uxth	r3, r3
 8025232:	4413      	add	r3, r2
 8025234:	b29a      	uxth	r2, r3
 8025236:	8a3b      	ldrh	r3, [r7, #16]
 8025238:	3309      	adds	r3, #9
 802523a:	4904      	ldr	r1, [pc, #16]	; (802524c <ce303_tarif+0x2b80>)
 802523c:	5ccb      	ldrb	r3, [r1, r3]
 802523e:	b29b      	uxth	r3, r3
 8025240:	4413      	add	r3, r2
 8025242:	b29b      	uxth	r3, r3
 8025244:	3b30      	subs	r3, #48	; 0x30
 8025246:	82fb      	strh	r3, [r7, #22]
 8025248:	e02c      	b.n	80252a4 <ce303_tarif+0x2bd8>
 802524a:	bf00      	nop
 802524c:	200098e4 	.word	0x200098e4
 8025250:	20009a6c 	.word	0x20009a6c
 8025254:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+7])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+8])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+9])-0x30);
 8025258:	8a3b      	ldrh	r3, [r7, #16]
 802525a:	3307      	adds	r3, #7
 802525c:	4a55      	ldr	r2, [pc, #340]	; (80253b4 <ce303_tarif+0x2ce8>)
 802525e:	5cd3      	ldrb	r3, [r2, r3]
 8025260:	3b30      	subs	r3, #48	; 0x30
 8025262:	b29b      	uxth	r3, r3
 8025264:	461a      	mov	r2, r3
 8025266:	0092      	lsls	r2, r2, #2
 8025268:	4413      	add	r3, r2
 802526a:	461a      	mov	r2, r3
 802526c:	0091      	lsls	r1, r2, #2
 802526e:	461a      	mov	r2, r3
 8025270:	460b      	mov	r3, r1
 8025272:	4413      	add	r3, r2
 8025274:	009b      	lsls	r3, r3, #2
 8025276:	b29a      	uxth	r2, r3
 8025278:	8a3b      	ldrh	r3, [r7, #16]
 802527a:	3308      	adds	r3, #8
 802527c:	494d      	ldr	r1, [pc, #308]	; (80253b4 <ce303_tarif+0x2ce8>)
 802527e:	5ccb      	ldrb	r3, [r1, r3]
 8025280:	3b30      	subs	r3, #48	; 0x30
 8025282:	b29b      	uxth	r3, r3
 8025284:	4619      	mov	r1, r3
 8025286:	0089      	lsls	r1, r1, #2
 8025288:	440b      	add	r3, r1
 802528a:	005b      	lsls	r3, r3, #1
 802528c:	b29b      	uxth	r3, r3
 802528e:	4413      	add	r3, r2
 8025290:	b29a      	uxth	r2, r3
 8025292:	8a3b      	ldrh	r3, [r7, #16]
 8025294:	3309      	adds	r3, #9
 8025296:	4947      	ldr	r1, [pc, #284]	; (80253b4 <ce303_tarif+0x2ce8>)
 8025298:	5ccb      	ldrb	r3, [r1, r3]
 802529a:	b29b      	uxth	r3, r3
 802529c:	4413      	add	r3, r2
 802529e:	b29b      	uxth	r3, r3
 80252a0:	3b30      	subs	r3, #48	; 0x30
 80252a2:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80252a4:	4b44      	ldr	r3, [pc, #272]	; (80253b8 <ce303_tarif+0x2cec>)
 80252a6:	681b      	ldr	r3, [r3, #0]
 80252a8:	f04f 31ff 	mov.w	r1, #4294967295
 80252ac:	4618      	mov	r0, r3
 80252ae:	f7f1 fcf7 	bl	8016ca0 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 80252b2:	68bb      	ldr	r3, [r7, #8]
 80252b4:	0e1b      	lsrs	r3, r3, #24
 80252b6:	b2db      	uxtb	r3, r3
 80252b8:	4619      	mov	r1, r3
 80252ba:	f242 0094 	movw	r0, #8340	; 0x2094
 80252be:	f000 f8c1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 80252c2:	68bb      	ldr	r3, [r7, #8]
 80252c4:	0c1b      	lsrs	r3, r3, #16
 80252c6:	b2db      	uxtb	r3, r3
 80252c8:	4619      	mov	r1, r3
 80252ca:	f242 0095 	movw	r0, #8341	; 0x2095
 80252ce:	f000 f8b9 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 80252d2:	68bb      	ldr	r3, [r7, #8]
 80252d4:	0a1b      	lsrs	r3, r3, #8
 80252d6:	b2db      	uxtb	r3, r3
 80252d8:	4619      	mov	r1, r3
 80252da:	f242 0096 	movw	r0, #8342	; 0x2096
 80252de:	f000 f8b1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 80252e2:	68bb      	ldr	r3, [r7, #8]
 80252e4:	b2db      	uxtb	r3, r3
 80252e6:	4619      	mov	r1, r3
 80252e8:	f242 0097 	movw	r0, #8343	; 0x2097
 80252ec:	f000 f8aa 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80252f0:	8afb      	ldrh	r3, [r7, #22]
 80252f2:	0a1b      	lsrs	r3, r3, #8
 80252f4:	b29b      	uxth	r3, r3
 80252f6:	b2db      	uxtb	r3, r3
 80252f8:	4619      	mov	r1, r3
 80252fa:	f242 0098 	movw	r0, #8344	; 0x2098
 80252fe:	f000 f8a1 	bl	8025444 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8025302:	8afb      	ldrh	r3, [r7, #22]
 8025304:	b2db      	uxtb	r3, r3
 8025306:	4619      	mov	r1, r3
 8025308:	f242 0099 	movw	r0, #8345	; 0x2099
 802530c:	f000 f89a 	bl	8025444 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8025310:	4b29      	ldr	r3, [pc, #164]	; (80253b8 <ce303_tarif+0x2cec>)
 8025312:	681b      	ldr	r3, [r3, #0]
 8025314:	4618      	mov	r0, r3
 8025316:	f7f1 fd11 	bl	8016d3c <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 802531a:	68bb      	ldr	r3, [r7, #8]
 802531c:	0c1b      	lsrs	r3, r3, #16
 802531e:	b29a      	uxth	r2, r3
 8025320:	4b26      	ldr	r3, [pc, #152]	; (80253bc <ce303_tarif+0x2cf0>)
 8025322:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8025326:	68bb      	ldr	r3, [r7, #8]
 8025328:	b29a      	uxth	r2, r3
 802532a:	4b24      	ldr	r3, [pc, #144]	; (80253bc <ce303_tarif+0x2cf0>)
 802532c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8025330:	4a22      	ldr	r2, [pc, #136]	; (80253bc <ce303_tarif+0x2cf0>)
 8025332:	8afb      	ldrh	r3, [r7, #22]
 8025334:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8025338:	2301      	movs	r3, #1
 802533a:	74bb      	strb	r3, [r7, #18]
 802533c:	e01b      	b.n	8025376 <ce303_tarif+0x2caa>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==1) && (tarif_3_state==1) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 802533e:	8a3b      	ldrh	r3, [r7, #16]
 8025340:	4a1c      	ldr	r2, [pc, #112]	; (80253b4 <ce303_tarif+0x2ce8>)
 8025342:	5cd3      	ldrb	r3, [r2, r3]
 8025344:	2b28      	cmp	r3, #40	; 0x28
 8025346:	d116      	bne.n	8025376 <ce303_tarif+0x2caa>
 8025348:	7d7b      	ldrb	r3, [r7, #21]
 802534a:	2b01      	cmp	r3, #1
 802534c:	d113      	bne.n	8025376 <ce303_tarif+0x2caa>
 802534e:	7d3b      	ldrb	r3, [r7, #20]
 8025350:	2b01      	cmp	r3, #1
 8025352:	d110      	bne.n	8025376 <ce303_tarif+0x2caa>
 8025354:	7cfb      	ldrb	r3, [r7, #19]
 8025356:	2b01      	cmp	r3, #1
 8025358:	d10d      	bne.n	8025376 <ce303_tarif+0x2caa>
 802535a:	7cbb      	ldrb	r3, [r7, #18]
 802535c:	2b01      	cmp	r3, #1
 802535e:	d10a      	bne.n	8025376 <ce303_tarif+0x2caa>
 8025360:	7bfb      	ldrb	r3, [r7, #15]
 8025362:	2b00      	cmp	r3, #0
 8025364:	d107      	bne.n	8025376 <ce303_tarif+0x2caa>
 8025366:	7bbb      	ldrb	r3, [r7, #14]
 8025368:	2b00      	cmp	r3, #0
 802536a:	e004      	b.n	8025376 <ce303_tarif+0x2caa>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 802536c:	bf00      	nop
 802536e:	e002      	b.n	8025376 <ce303_tarif+0x2caa>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8025370:	bf00      	nop
 8025372:	e000      	b.n	8025376 <ce303_tarif+0x2caa>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8025374:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 8025376:	8a3b      	ldrh	r3, [r7, #16]
 8025378:	3301      	adds	r3, #1
 802537a:	823b      	strh	r3, [r7, #16]
 802537c:	8a3b      	ldrh	r3, [r7, #16]
 802537e:	2bff      	cmp	r3, #255	; 0xff
 8025380:	f67d aba1 	bls.w	8022ac6 <ce303_tarif+0x3fa>

		}

	}

	meter_rx_number = 0;
 8025384:	4b0e      	ldr	r3, [pc, #56]	; (80253c0 <ce303_tarif+0x2cf4>)
 8025386:	2200      	movs	r2, #0
 8025388:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802538a:	f7f9 faa3 	bl	801e8d4 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802538e:	2201      	movs	r2, #1
 8025390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025394:	480b      	ldr	r0, [pc, #44]	; (80253c4 <ce303_tarif+0x2cf8>)
 8025396:	f7ed ff1d 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 802539a:	2205      	movs	r2, #5
 802539c:	490a      	ldr	r1, [pc, #40]	; (80253c8 <ce303_tarif+0x2cfc>)
 802539e:	480b      	ldr	r0, [pc, #44]	; (80253cc <ce303_tarif+0x2d00>)
 80253a0:	f7f0 f9d0 	bl	8015744 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80253a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80253a8:	f7ec fc60 	bl	8011c6c <HAL_Delay>

}
 80253ac:	bf00      	nop
 80253ae:	3718      	adds	r7, #24
 80253b0:	46bd      	mov	sp, r7
 80253b2:	bd80      	pop	{r7, pc}
 80253b4:	200098e4 	.word	0x200098e4
 80253b8:	20009a6c 	.word	0x20009a6c
 80253bc:	2000a10c 	.word	0x2000a10c
 80253c0:	2000085d 	.word	0x2000085d
 80253c4:	40021800 	.word	0x40021800
 80253c8:	20000030 	.word	0x20000030
 80253cc:	20009c70 	.word	0x20009c70

080253d0 <fm25v02_read>:
	}
	return temp_id;
}

void fm25v02_read (uint16_t address, uint8_t* data)
{
 80253d0:	b580      	push	{r7, lr}
 80253d2:	b084      	sub	sp, #16
 80253d4:	af00      	add	r7, sp, #0
 80253d6:	4603      	mov	r3, r0
 80253d8:	6039      	str	r1, [r7, #0]
 80253da:	80fb      	strh	r3, [r7, #6]
	uint8_t data_out[3];
	data_out[0]= READ;
 80253dc:	2303      	movs	r3, #3
 80253de:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 80253e0:	88fb      	ldrh	r3, [r7, #6]
 80253e2:	0a1b      	lsrs	r3, r3, #8
 80253e4:	b29b      	uxth	r3, r3
 80253e6:	b2db      	uxtb	r3, r3
 80253e8:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 80253ea:	88fb      	ldrh	r3, [r7, #6]
 80253ec:	b2db      	uxtb	r3, r3
 80253ee:	73bb      	strb	r3, [r7, #14]
	FM25V02_CS_ON();
 80253f0:	2200      	movs	r2, #0
 80253f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80253f6:	4811      	ldr	r0, [pc, #68]	; (802543c <fm25v02_read+0x6c>)
 80253f8:	f7ed feec 	bl	80131d4 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 3, 10) != HAL_OK ) {}
 80253fc:	bf00      	nop
 80253fe:	f107 010c 	add.w	r1, r7, #12
 8025402:	230a      	movs	r3, #10
 8025404:	2203      	movs	r2, #3
 8025406:	480e      	ldr	r0, [pc, #56]	; (8025440 <fm25v02_read+0x70>)
 8025408:	f7ef f84d 	bl	80144a6 <HAL_SPI_Transmit>
 802540c:	4603      	mov	r3, r0
 802540e:	2b00      	cmp	r3, #0
 8025410:	d1f5      	bne.n	80253fe <fm25v02_read+0x2e>
	while( HAL_SPI_Receive(&hspi2, data, 1, 10) != HAL_OK ) {}
 8025412:	bf00      	nop
 8025414:	230a      	movs	r3, #10
 8025416:	2201      	movs	r2, #1
 8025418:	6839      	ldr	r1, [r7, #0]
 802541a:	4809      	ldr	r0, [pc, #36]	; (8025440 <fm25v02_read+0x70>)
 802541c:	f7ef f97f 	bl	801471e <HAL_SPI_Receive>
 8025420:	4603      	mov	r3, r0
 8025422:	2b00      	cmp	r3, #0
 8025424:	d1f6      	bne.n	8025414 <fm25v02_read+0x44>
	FM25V02_CS_OFF();
 8025426:	2201      	movs	r2, #1
 8025428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802542c:	4803      	ldr	r0, [pc, #12]	; (802543c <fm25v02_read+0x6c>)
 802542e:	f7ed fed1 	bl	80131d4 <HAL_GPIO_WritePin>
}
 8025432:	bf00      	nop
 8025434:	3710      	adds	r7, #16
 8025436:	46bd      	mov	sp, r7
 8025438:	bd80      	pop	{r7, pc}
 802543a:	bf00      	nop
 802543c:	40021c00 	.word	0x40021c00
 8025440:	2000817c 	.word	0x2000817c

08025444 <fm25v02_write>:

void fm25v02_write (uint16_t address, uint8_t data)
{
 8025444:	b580      	push	{r7, lr}
 8025446:	b084      	sub	sp, #16
 8025448:	af00      	add	r7, sp, #0
 802544a:	4603      	mov	r3, r0
 802544c:	460a      	mov	r2, r1
 802544e:	80fb      	strh	r3, [r7, #6]
 8025450:	4613      	mov	r3, r2
 8025452:	717b      	strb	r3, [r7, #5]
	uint8_t data_out[4];
	data_out[0]= WREN;
 8025454:	2306      	movs	r3, #6
 8025456:	733b      	strb	r3, [r7, #12]
	FM25V02_CS_ON();
 8025458:	2200      	movs	r2, #0
 802545a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802545e:	481d      	ldr	r0, [pc, #116]	; (80254d4 <fm25v02_write+0x90>)
 8025460:	f7ed feb8 	bl	80131d4 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 1, 10) != HAL_OK ) {}
 8025464:	bf00      	nop
 8025466:	f107 010c 	add.w	r1, r7, #12
 802546a:	230a      	movs	r3, #10
 802546c:	2201      	movs	r2, #1
 802546e:	481a      	ldr	r0, [pc, #104]	; (80254d8 <fm25v02_write+0x94>)
 8025470:	f7ef f819 	bl	80144a6 <HAL_SPI_Transmit>
 8025474:	4603      	mov	r3, r0
 8025476:	2b00      	cmp	r3, #0
 8025478:	d1f5      	bne.n	8025466 <fm25v02_write+0x22>
	FM25V02_CS_OFF();
 802547a:	2201      	movs	r2, #1
 802547c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025480:	4814      	ldr	r0, [pc, #80]	; (80254d4 <fm25v02_write+0x90>)
 8025482:	f7ed fea7 	bl	80131d4 <HAL_GPIO_WritePin>
	data_out[0]= WRITE;
 8025486:	2302      	movs	r3, #2
 8025488:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 802548a:	88fb      	ldrh	r3, [r7, #6]
 802548c:	0a1b      	lsrs	r3, r3, #8
 802548e:	b29b      	uxth	r3, r3
 8025490:	b2db      	uxtb	r3, r3
 8025492:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 8025494:	88fb      	ldrh	r3, [r7, #6]
 8025496:	b2db      	uxtb	r3, r3
 8025498:	73bb      	strb	r3, [r7, #14]
	data_out[3]= data;
 802549a:	797b      	ldrb	r3, [r7, #5]
 802549c:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 802549e:	2200      	movs	r2, #0
 80254a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80254a4:	480b      	ldr	r0, [pc, #44]	; (80254d4 <fm25v02_write+0x90>)
 80254a6:	f7ed fe95 	bl	80131d4 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 80254aa:	bf00      	nop
 80254ac:	f107 010c 	add.w	r1, r7, #12
 80254b0:	230a      	movs	r3, #10
 80254b2:	2204      	movs	r2, #4
 80254b4:	4808      	ldr	r0, [pc, #32]	; (80254d8 <fm25v02_write+0x94>)
 80254b6:	f7ee fff6 	bl	80144a6 <HAL_SPI_Transmit>
 80254ba:	4603      	mov	r3, r0
 80254bc:	2b00      	cmp	r3, #0
 80254be:	d1f5      	bne.n	80254ac <fm25v02_write+0x68>
	FM25V02_CS_OFF();
 80254c0:	2201      	movs	r2, #1
 80254c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80254c6:	4803      	ldr	r0, [pc, #12]	; (80254d4 <fm25v02_write+0x90>)
 80254c8:	f7ed fe84 	bl	80131d4 <HAL_GPIO_WritePin>
}
 80254cc:	bf00      	nop
 80254ce:	3710      	adds	r7, #16
 80254d0:	46bd      	mov	sp, r7
 80254d2:	bd80      	pop	{r7, pc}
 80254d4:	40021c00 	.word	0x40021c00
 80254d8:	2000817c 	.word	0x2000817c

080254dc <fm25v02_fast_write>:

uint8_t fm25v02_fast_write (uint16_t address, uint8_t* data, uint16_t Size)
{
 80254dc:	b580      	push	{r7, lr}
 80254de:	b084      	sub	sp, #16
 80254e0:	af00      	add	r7, sp, #0
 80254e2:	4603      	mov	r3, r0
 80254e4:	6039      	str	r1, [r7, #0]
 80254e6:	80fb      	strh	r3, [r7, #6]
 80254e8:	4613      	mov	r3, r2
 80254ea:	80bb      	strh	r3, [r7, #4]
	for(uint8_t i=0; i<Size; i++)
 80254ec:	2300      	movs	r3, #0
 80254ee:	73fb      	strb	r3, [r7, #15]
 80254f0:	e00e      	b.n	8025510 <fm25v02_fast_write+0x34>
	{
		fm25v02_write(address+i, *(data+i));
 80254f2:	7bfb      	ldrb	r3, [r7, #15]
 80254f4:	b29a      	uxth	r2, r3
 80254f6:	88fb      	ldrh	r3, [r7, #6]
 80254f8:	4413      	add	r3, r2
 80254fa:	b298      	uxth	r0, r3
 80254fc:	7bfb      	ldrb	r3, [r7, #15]
 80254fe:	683a      	ldr	r2, [r7, #0]
 8025500:	4413      	add	r3, r2
 8025502:	781b      	ldrb	r3, [r3, #0]
 8025504:	4619      	mov	r1, r3
 8025506:	f7ff ff9d 	bl	8025444 <fm25v02_write>
	for(uint8_t i=0; i<Size; i++)
 802550a:	7bfb      	ldrb	r3, [r7, #15]
 802550c:	3301      	adds	r3, #1
 802550e:	73fb      	strb	r3, [r7, #15]
 8025510:	7bfb      	ldrb	r3, [r7, #15]
 8025512:	b29b      	uxth	r3, r3
 8025514:	88ba      	ldrh	r2, [r7, #4]
 8025516:	429a      	cmp	r2, r3
 8025518:	d8eb      	bhi.n	80254f2 <fm25v02_fast_write+0x16>
	}
	return 0;
 802551a:	2300      	movs	r3, #0
}
 802551c:	4618      	mov	r0, r3
 802551e:	3710      	adds	r7, #16
 8025520:	46bd      	mov	sp, r7
 8025522:	bd80      	pop	{r7, pc}

08025524 <fm25v02_fast_read>:

HAL_StatusTypeDef fm25v02_fast_read (uint16_t address, uint8_t* data, uint16_t Size)
{
 8025524:	b580      	push	{r7, lr}
 8025526:	b084      	sub	sp, #16
 8025528:	af00      	add	r7, sp, #0
 802552a:	4603      	mov	r3, r0
 802552c:	6039      	str	r1, [r7, #0]
 802552e:	80fb      	strh	r3, [r7, #6]
 8025530:	4613      	mov	r3, r2
 8025532:	80bb      	strh	r3, [r7, #4]
	uint8_t data_out[4];
	data_out[0]= FSTRD;
 8025534:	230b      	movs	r3, #11
 8025536:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 8025538:	88fb      	ldrh	r3, [r7, #6]
 802553a:	0a1b      	lsrs	r3, r3, #8
 802553c:	b29b      	uxth	r3, r3
 802553e:	b2db      	uxtb	r3, r3
 8025540:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 8025542:	88fb      	ldrh	r3, [r7, #6]
 8025544:	b2db      	uxtb	r3, r3
 8025546:	73bb      	strb	r3, [r7, #14]
	data_out[3]= 0xFF;
 8025548:	23ff      	movs	r3, #255	; 0xff
 802554a:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 802554c:	2200      	movs	r2, #0
 802554e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025552:	4811      	ldr	r0, [pc, #68]	; (8025598 <fm25v02_fast_read+0x74>)
 8025554:	f7ed fe3e 	bl	80131d4 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 8025558:	bf00      	nop
 802555a:	f107 010c 	add.w	r1, r7, #12
 802555e:	230a      	movs	r3, #10
 8025560:	2204      	movs	r2, #4
 8025562:	480e      	ldr	r0, [pc, #56]	; (802559c <fm25v02_fast_read+0x78>)
 8025564:	f7ee ff9f 	bl	80144a6 <HAL_SPI_Transmit>
 8025568:	4603      	mov	r3, r0
 802556a:	2b00      	cmp	r3, #0
 802556c:	d1f5      	bne.n	802555a <fm25v02_fast_read+0x36>
	while( HAL_SPI_Receive(&hspi2, data, Size, 10) != HAL_OK ) {}
 802556e:	bf00      	nop
 8025570:	88ba      	ldrh	r2, [r7, #4]
 8025572:	230a      	movs	r3, #10
 8025574:	6839      	ldr	r1, [r7, #0]
 8025576:	4809      	ldr	r0, [pc, #36]	; (802559c <fm25v02_fast_read+0x78>)
 8025578:	f7ef f8d1 	bl	801471e <HAL_SPI_Receive>
 802557c:	4603      	mov	r3, r0
 802557e:	2b00      	cmp	r3, #0
 8025580:	d1f6      	bne.n	8025570 <fm25v02_fast_read+0x4c>
	FM25V02_CS_OFF();
 8025582:	2201      	movs	r2, #1
 8025584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025588:	4803      	ldr	r0, [pc, #12]	; (8025598 <fm25v02_fast_read+0x74>)
 802558a:	f7ed fe23 	bl	80131d4 <HAL_GPIO_WritePin>
	return HAL_OK;
 802558e:	2300      	movs	r3, #0
}
 8025590:	4618      	mov	r0, r3
 8025592:	3710      	adds	r7, #16
 8025594:	46bd      	mov	sp, r7
 8025596:	bd80      	pop	{r7, pc}
 8025598:	40021c00 	.word	0x40021c00
 802559c:	2000817c 	.word	0x2000817c

080255a0 <BUZ_ON>:


//---функции включения и отключения светодиодов, зуммера и транзистора охранного светодиода-----------------

void BUZ_ON(void) // включение зуммера
{
 80255a0:	b580      	push	{r7, lr}
 80255a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80255a4:	2201      	movs	r2, #1
 80255a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80255aa:	4802      	ldr	r0, [pc, #8]	; (80255b4 <BUZ_ON+0x14>)
 80255ac:	f7ed fe12 	bl	80131d4 <HAL_GPIO_WritePin>
}
 80255b0:	bf00      	nop
 80255b2:	bd80      	pop	{r7, pc}
 80255b4:	40020c00 	.word	0x40020c00

080255b8 <BUZ_OFF>:

void BUZ_OFF(void) // выключение зуммера
{
 80255b8:	b580      	push	{r7, lr}
 80255ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80255bc:	2200      	movs	r2, #0
 80255be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80255c2:	4802      	ldr	r0, [pc, #8]	; (80255cc <BUZ_OFF+0x14>)
 80255c4:	f7ed fe06 	bl	80131d4 <HAL_GPIO_WritePin>
}
 80255c8:	bf00      	nop
 80255ca:	bd80      	pop	{r7, pc}
 80255cc:	40020c00 	.word	0x40020c00

080255d0 <LED_OUT_ON>:

void LED_OUT_ON(void) // включение охранного светодиода
{
 80255d0:	b580      	push	{r7, lr}
 80255d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80255d4:	2201      	movs	r2, #1
 80255d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80255da:	4802      	ldr	r0, [pc, #8]	; (80255e4 <LED_OUT_ON+0x14>)
 80255dc:	f7ed fdfa 	bl	80131d4 <HAL_GPIO_WritePin>
}
 80255e0:	bf00      	nop
 80255e2:	bd80      	pop	{r7, pc}
 80255e4:	40020c00 	.word	0x40020c00

080255e8 <LED_OUT_OFF>:

void LED_OUT_OFF(void) // выключение охранного светодиода
{
 80255e8:	b580      	push	{r7, lr}
 80255ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80255ec:	2200      	movs	r2, #0
 80255ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80255f2:	4802      	ldr	r0, [pc, #8]	; (80255fc <LED_OUT_OFF+0x14>)
 80255f4:	f7ed fdee 	bl	80131d4 <HAL_GPIO_WritePin>
}
 80255f8:	bf00      	nop
 80255fa:	bd80      	pop	{r7, pc}
 80255fc:	40020c00 	.word	0x40020c00

08025600 <LED_OUT_TOGGLE>:

void LED_OUT_TOGGLE(void) // переключение охранного светодиода
{
 8025600:	b580      	push	{r7, lr}
 8025602:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8025604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8025608:	4802      	ldr	r0, [pc, #8]	; (8025614 <LED_OUT_TOGGLE+0x14>)
 802560a:	f7ed fdfc 	bl	8013206 <HAL_GPIO_TogglePin>
}
 802560e:	bf00      	nop
 8025610:	bd80      	pop	{r7, pc}
 8025612:	bf00      	nop
 8025614:	40020c00 	.word	0x40020c00

08025618 <LED_VD3_TOGGLE>:
{
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
}

void LED_VD3_TOGGLE(void) // переключение светодиода VD3
{
 8025618:	b580      	push	{r7, lr}
 802561a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 802561c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8025620:	4802      	ldr	r0, [pc, #8]	; (802562c <LED_VD3_TOGGLE+0x14>)
 8025622:	f7ed fdf0 	bl	8013206 <HAL_GPIO_TogglePin>
}
 8025626:	bf00      	nop
 8025628:	bd80      	pop	{r7, pc}
 802562a:	bf00      	nop
 802562c:	40020800 	.word	0x40020800

08025630 <LED1_OFF>:
{
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
}

void LED1_OFF(void) // выключение светодиода LED1
{
 8025630:	b580      	push	{r7, lr}
 8025632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_SET);
 8025634:	2201      	movs	r2, #1
 8025636:	2104      	movs	r1, #4
 8025638:	4802      	ldr	r0, [pc, #8]	; (8025644 <LED1_OFF+0x14>)
 802563a:	f7ed fdcb 	bl	80131d4 <HAL_GPIO_WritePin>
}
 802563e:	bf00      	nop
 8025640:	bd80      	pop	{r7, pc}
 8025642:	bf00      	nop
 8025644:	40021c00 	.word	0x40021c00

08025648 <LED1_ON>:

void LED1_ON(void) // включение светодиода LED1
{
 8025648:	b580      	push	{r7, lr}
 802564a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_RESET);
 802564c:	2200      	movs	r2, #0
 802564e:	2104      	movs	r1, #4
 8025650:	4802      	ldr	r0, [pc, #8]	; (802565c <LED1_ON+0x14>)
 8025652:	f7ed fdbf 	bl	80131d4 <HAL_GPIO_WritePin>
}
 8025656:	bf00      	nop
 8025658:	bd80      	pop	{r7, pc}
 802565a:	bf00      	nop
 802565c:	40021c00 	.word	0x40021c00

08025660 <LED2_OFF>:

void LED2_OFF(void) // выключение светодиода LED2
{
 8025660:	b580      	push	{r7, lr}
 8025662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_SET);
 8025664:	2201      	movs	r2, #1
 8025666:	2108      	movs	r1, #8
 8025668:	4802      	ldr	r0, [pc, #8]	; (8025674 <LED2_OFF+0x14>)
 802566a:	f7ed fdb3 	bl	80131d4 <HAL_GPIO_WritePin>
}
 802566e:	bf00      	nop
 8025670:	bd80      	pop	{r7, pc}
 8025672:	bf00      	nop
 8025674:	40021c00 	.word	0x40021c00

08025678 <LED2_ON>:

void LED2_ON(void) // включение светодиода LED2
{
 8025678:	b580      	push	{r7, lr}
 802567a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 802567c:	2200      	movs	r2, #0
 802567e:	2108      	movs	r1, #8
 8025680:	4802      	ldr	r0, [pc, #8]	; (802568c <LED2_ON+0x14>)
 8025682:	f7ed fda7 	bl	80131d4 <HAL_GPIO_WritePin>
}
 8025686:	bf00      	nop
 8025688:	bd80      	pop	{r7, pc}
 802568a:	bf00      	nop
 802568c:	40021c00 	.word	0x40021c00

08025690 <LED2_TOGGLE>:
{
	HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_2);
}

void LED2_TOGGLE(void) // переключение светодиода LED2
{
 8025690:	b580      	push	{r7, lr}
 8025692:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_3);
 8025694:	2108      	movs	r1, #8
 8025696:	4802      	ldr	r0, [pc, #8]	; (80256a0 <LED2_TOGGLE+0x10>)
 8025698:	f7ed fdb5 	bl	8013206 <HAL_GPIO_TogglePin>
}
 802569c:	bf00      	nop
 802569e:	bd80      	pop	{r7, pc}
 80256a0:	40021c00 	.word	0x40021c00

080256a4 <calc_crc>:
//0x1d000001, 0x86075f01,
//0x92000a04, 0x5ad95901
//};

unsigned char calc_crc( unsigned char *mas, unsigned char Len )
{
 80256a4:	b480      	push	{r7}
 80256a6:	b085      	sub	sp, #20
 80256a8:	af00      	add	r7, sp, #0
 80256aa:	6078      	str	r0, [r7, #4]
 80256ac:	460b      	mov	r3, r1
 80256ae:	70fb      	strb	r3, [r7, #3]
  unsigned char i,dat,crc,fb,st_byt;
  st_byt=0; crc=0;
 80256b0:	2300      	movs	r3, #0
 80256b2:	733b      	strb	r3, [r7, #12]
 80256b4:	2300      	movs	r3, #0
 80256b6:	737b      	strb	r3, [r7, #13]
  do{
    dat=mas[st_byt];
 80256b8:	7b3b      	ldrb	r3, [r7, #12]
 80256ba:	687a      	ldr	r2, [r7, #4]
 80256bc:	4413      	add	r3, r2
 80256be:	781b      	ldrb	r3, [r3, #0]
 80256c0:	73bb      	strb	r3, [r7, #14]
    for( i=0; i<8; i++) {  // счетчик битов в байте
 80256c2:	2300      	movs	r3, #0
 80256c4:	73fb      	strb	r3, [r7, #15]
 80256c6:	e018      	b.n	80256fa <calc_crc+0x56>
      fb = crc ^ dat;
 80256c8:	7b7a      	ldrb	r2, [r7, #13]
 80256ca:	7bbb      	ldrb	r3, [r7, #14]
 80256cc:	4053      	eors	r3, r2
 80256ce:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 80256d0:	7afb      	ldrb	r3, [r7, #11]
 80256d2:	f003 0301 	and.w	r3, r3, #1
 80256d6:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 80256d8:	7b7b      	ldrb	r3, [r7, #13]
 80256da:	085b      	lsrs	r3, r3, #1
 80256dc:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80256de:	7bbb      	ldrb	r3, [r7, #14]
 80256e0:	085b      	lsrs	r3, r3, #1
 80256e2:	73bb      	strb	r3, [r7, #14]
      if( fb == 1 ) crc ^= 0x8c; // полином
 80256e4:	7afb      	ldrb	r3, [r7, #11]
 80256e6:	2b01      	cmp	r3, #1
 80256e8:	d104      	bne.n	80256f4 <calc_crc+0x50>
 80256ea:	7b7b      	ldrb	r3, [r7, #13]
 80256ec:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80256f0:	43db      	mvns	r3, r3
 80256f2:	737b      	strb	r3, [r7, #13]
    for( i=0; i<8; i++) {  // счетчик битов в байте
 80256f4:	7bfb      	ldrb	r3, [r7, #15]
 80256f6:	3301      	adds	r3, #1
 80256f8:	73fb      	strb	r3, [r7, #15]
 80256fa:	7bfb      	ldrb	r3, [r7, #15]
 80256fc:	2b07      	cmp	r3, #7
 80256fe:	d9e3      	bls.n	80256c8 <calc_crc+0x24>
    }
    st_byt++;
 8025700:	7b3b      	ldrb	r3, [r7, #12]
 8025702:	3301      	adds	r3, #1
 8025704:	733b      	strb	r3, [r7, #12]
  } while( st_byt < Len ); // счетчик байтов в массиве
 8025706:	7b3a      	ldrb	r2, [r7, #12]
 8025708:	78fb      	ldrb	r3, [r7, #3]
 802570a:	429a      	cmp	r2, r3
 802570c:	d3d4      	bcc.n	80256b8 <calc_crc+0x14>
  return crc;
 802570e:	7b7b      	ldrb	r3, [r7, #13]
}
 8025710:	4618      	mov	r0, r3
 8025712:	3714      	adds	r7, #20
 8025714:	46bd      	mov	sp, r7
 8025716:	f85d 7b04 	ldr.w	r7, [sp], #4
 802571a:	4770      	bx	lr

0802571c <ibutton_reset>:
		return 0;
	}
}
//Функция инициализации ibutton таблетки на шине 1-wire
HAL_StatusTypeDef ibutton_reset (void)
{
 802571c:	b580      	push	{r7, lr}
 802571e:	b082      	sub	sp, #8
 8025720:	af00      	add	r7, sp, #0
	uint8_t bufT[1];
	uint8_t bufR[1];
	bufT[0]=OW_RESET;
 8025722:	23f0      	movs	r3, #240	; 0xf0
 8025724:	713b      	strb	r3, [r7, #4]
	huart1.Init.BaudRate = 9600;
 8025726:	4b12      	ldr	r3, [pc, #72]	; (8025770 <ibutton_reset+0x54>)
 8025728:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 802572c:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(huartx);
 802572e:	4810      	ldr	r0, [pc, #64]	; (8025770 <ibutton_reset+0x54>)
 8025730:	f7ef fe86 	bl	8015440 <HAL_UART_Init>
	if( HAL_UART_Transmit(huartx, bufT, 1, 1) != HAL_OK ) {}
 8025734:	1d39      	adds	r1, r7, #4
 8025736:	2301      	movs	r3, #1
 8025738:	2201      	movs	r2, #1
 802573a:	480d      	ldr	r0, [pc, #52]	; (8025770 <ibutton_reset+0x54>)
 802573c:	f7ef fecd 	bl	80154da <HAL_UART_Transmit>
	if( HAL_UART_Receive(huartx, bufR, 1, 1) != HAL_OK ) {}
 8025740:	4639      	mov	r1, r7
 8025742:	2301      	movs	r3, #1
 8025744:	2201      	movs	r2, #1
 8025746:	480a      	ldr	r0, [pc, #40]	; (8025770 <ibutton_reset+0x54>)
 8025748:	f7ef ff59 	bl	80155fe <HAL_UART_Receive>
	huart1.Init.BaudRate = 115200;
 802574c:	4b08      	ldr	r3, [pc, #32]	; (8025770 <ibutton_reset+0x54>)
 802574e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8025752:	605a      	str	r2, [r3, #4]
	if ( HAL_UART_Init(huartx) != HAL_OK ) {}
 8025754:	4806      	ldr	r0, [pc, #24]	; (8025770 <ibutton_reset+0x54>)
 8025756:	f7ef fe73 	bl	8015440 <HAL_UART_Init>
	//HAL_Delay(1);// Добавил задержку для нормальной инициализации скорости UART
	if(bufR[0]==OW_RESET)
 802575a:	783b      	ldrb	r3, [r7, #0]
 802575c:	2bf0      	cmp	r3, #240	; 0xf0
 802575e:	d101      	bne.n	8025764 <ibutton_reset+0x48>
	{
		return HAL_ERROR;
 8025760:	2301      	movs	r3, #1
 8025762:	e000      	b.n	8025766 <ibutton_reset+0x4a>
	}
	else
	{
		return HAL_OK;
 8025764:	2300      	movs	r3, #0
	}
}
 8025766:	4618      	mov	r0, r3
 8025768:	3708      	adds	r7, #8
 802576a:	46bd      	mov	sp, r7
 802576c:	bd80      	pop	{r7, pc}
 802576e:	bf00      	nop
 8025770:	200099e4 	.word	0x200099e4

08025774 <ibutton_read_rom>:
// Функция чтения ID ROM устройства ibutton таблетки
// Возвращает значение типа IbuttonROM_Struct структуры
HAL_StatusTypeDef ibutton_read_rom (IbuttonROM_Struct* id)
{
 8025774:	b580      	push	{r7, lr}
 8025776:	b08a      	sub	sp, #40	; 0x28
 8025778:	af00      	add	r7, sp, #0
 802577a:	6078      	str	r0, [r7, #4]
	uint8_t family= 0x00;// Семейство микроконтроллера
 802577c:	2300      	movs	r3, #0
 802577e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t id1= 0x00;//1-й байт данных
 8025782:	2300      	movs	r3, #0
 8025784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t id2= 0x00;//2-й байт данных
 8025788:	2300      	movs	r3, #0
 802578a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t id3= 0x00;//3-й байт данных
 802578e:	2300      	movs	r3, #0
 8025790:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t id4= 0x00;//4-й байт данных
 8025794:	2300      	movs	r3, #0
 8025796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t id5= 0x00;//5-й байт данных
 802579a:	2300      	movs	r3, #0
 802579c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t id6= 0x00;//6-й байт данных
 80257a0:	2300      	movs	r3, #0
 80257a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t crc_ow= 0x00; // Принятая контрольная сумма
 80257a6:	2300      	movs	r3, #0
 80257a8:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t bufft = 0xFF;// байт для отправки
 80257ac:	23ff      	movs	r3, #255	; 0xff
 80257ae:	77bb      	strb	r3, [r7, #30]
	uint8_t buffr=0x00;// байт для приема
 80257b0:	2300      	movs	r3, #0
 80257b2:	777b      	strb	r3, [r7, #29]
	uint8_t i;
	unsigned char buffer_crc[7];// буффер для рассчета контрольной суммы
	uint8_t buf[8]={0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00};// буффер со значением 0х33
 80257b4:	4ac1      	ldr	r2, [pc, #772]	; (8025abc <ibutton_read_rom+0x348>)
 80257b6:	f107 030c 	add.w	r3, r7, #12
 80257ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80257be:	e883 0003 	stmia.w	r3, {r0, r1}
	if( HAL_UART_Transmit(huartx, buf, 8, 1) != HAL_OK ) {printf("error reset\n");}// отправляем команду чтения "0х33"
 80257c2:	f107 010c 	add.w	r1, r7, #12
 80257c6:	2301      	movs	r3, #1
 80257c8:	2208      	movs	r2, #8
 80257ca:	48bd      	ldr	r0, [pc, #756]	; (8025ac0 <ibutton_read_rom+0x34c>)
 80257cc:	f7ef fe85 	bl	80154da <HAL_UART_Transmit>
 80257d0:	4603      	mov	r3, r0
 80257d2:	2b00      	cmp	r3, #0
 80257d4:	d002      	beq.n	80257dc <ibutton_read_rom+0x68>
 80257d6:	48bb      	ldr	r0, [pc, #748]	; (8025ac4 <ibutton_read_rom+0x350>)
 80257d8:	f003 fe1a 	bl	8029410 <puts>
	//if( HAL_UART_Receive(huartx, buf, 8, 1) != HAL_OK ) {printf("error reset\n");}
	for(i=0; i<8; i++) //Принимаем данные устройства по 1-wire
 80257dc:	2300      	movs	r3, #0
 80257de:	77fb      	strb	r3, [r7, #31]
 80257e0:	e01e      	b.n	8025820 <ibutton_read_rom+0xac>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 80257e2:	f107 011e 	add.w	r1, r7, #30
 80257e6:	2301      	movs	r3, #1
 80257e8:	2201      	movs	r2, #1
 80257ea:	48b5      	ldr	r0, [pc, #724]	; (8025ac0 <ibutton_read_rom+0x34c>)
 80257ec:	f7ef fe75 	bl	80154da <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 80257f0:	f107 011d 	add.w	r1, r7, #29
 80257f4:	2301      	movs	r3, #1
 80257f6:	2201      	movs	r2, #1
 80257f8:	48b1      	ldr	r0, [pc, #708]	; (8025ac0 <ibutton_read_rom+0x34c>)
 80257fa:	f7ef ff00 	bl	80155fe <HAL_UART_Receive>
		if(buffr == 0xFF)
 80257fe:	7f7b      	ldrb	r3, [r7, #29]
 8025800:	2bff      	cmp	r3, #255	; 0xff
 8025802:	d10a      	bne.n	802581a <ibutton_read_rom+0xa6>
		{
			family = family|(0x01<<i);
 8025804:	7ffb      	ldrb	r3, [r7, #31]
 8025806:	2201      	movs	r2, #1
 8025808:	fa02 f303 	lsl.w	r3, r2, r3
 802580c:	b25a      	sxtb	r2, r3
 802580e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8025812:	4313      	orrs	r3, r2
 8025814:	b25b      	sxtb	r3, r3
 8025816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(i=0; i<8; i++) //Принимаем данные устройства по 1-wire
 802581a:	7ffb      	ldrb	r3, [r7, #31]
 802581c:	3301      	adds	r3, #1
 802581e:	77fb      	strb	r3, [r7, #31]
 8025820:	7ffb      	ldrb	r3, [r7, #31]
 8025822:	2b07      	cmp	r3, #7
 8025824:	d9dd      	bls.n	80257e2 <ibutton_read_rom+0x6e>
		}
	}
	for(i=0; i<8; i++)
 8025826:	2300      	movs	r3, #0
 8025828:	77fb      	strb	r3, [r7, #31]
 802582a:	e01e      	b.n	802586a <ibutton_read_rom+0xf6>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 802582c:	f107 011e 	add.w	r1, r7, #30
 8025830:	2301      	movs	r3, #1
 8025832:	2201      	movs	r2, #1
 8025834:	48a2      	ldr	r0, [pc, #648]	; (8025ac0 <ibutton_read_rom+0x34c>)
 8025836:	f7ef fe50 	bl	80154da <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 802583a:	f107 011d 	add.w	r1, r7, #29
 802583e:	2301      	movs	r3, #1
 8025840:	2201      	movs	r2, #1
 8025842:	489f      	ldr	r0, [pc, #636]	; (8025ac0 <ibutton_read_rom+0x34c>)
 8025844:	f7ef fedb 	bl	80155fe <HAL_UART_Receive>
		if(buffr == 0xFF)
 8025848:	7f7b      	ldrb	r3, [r7, #29]
 802584a:	2bff      	cmp	r3, #255	; 0xff
 802584c:	d10a      	bne.n	8025864 <ibutton_read_rom+0xf0>
		{
			id1 = id1|(0x01<<i);
 802584e:	7ffb      	ldrb	r3, [r7, #31]
 8025850:	2201      	movs	r2, #1
 8025852:	fa02 f303 	lsl.w	r3, r2, r3
 8025856:	b25a      	sxtb	r2, r3
 8025858:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 802585c:	4313      	orrs	r3, r2
 802585e:	b25b      	sxtb	r3, r3
 8025860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(i=0; i<8; i++)
 8025864:	7ffb      	ldrb	r3, [r7, #31]
 8025866:	3301      	adds	r3, #1
 8025868:	77fb      	strb	r3, [r7, #31]
 802586a:	7ffb      	ldrb	r3, [r7, #31]
 802586c:	2b07      	cmp	r3, #7
 802586e:	d9dd      	bls.n	802582c <ibutton_read_rom+0xb8>
		}
	}
	for(i=0; i<8; i++)
 8025870:	2300      	movs	r3, #0
 8025872:	77fb      	strb	r3, [r7, #31]
 8025874:	e01e      	b.n	80258b4 <ibutton_read_rom+0x140>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8025876:	f107 011e 	add.w	r1, r7, #30
 802587a:	2301      	movs	r3, #1
 802587c:	2201      	movs	r2, #1
 802587e:	4890      	ldr	r0, [pc, #576]	; (8025ac0 <ibutton_read_rom+0x34c>)
 8025880:	f7ef fe2b 	bl	80154da <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 8025884:	f107 011d 	add.w	r1, r7, #29
 8025888:	2301      	movs	r3, #1
 802588a:	2201      	movs	r2, #1
 802588c:	488c      	ldr	r0, [pc, #560]	; (8025ac0 <ibutton_read_rom+0x34c>)
 802588e:	f7ef feb6 	bl	80155fe <HAL_UART_Receive>
		if(buffr == 0xFF)
 8025892:	7f7b      	ldrb	r3, [r7, #29]
 8025894:	2bff      	cmp	r3, #255	; 0xff
 8025896:	d10a      	bne.n	80258ae <ibutton_read_rom+0x13a>
		{
			id2 = id2|(0x01<<i);
 8025898:	7ffb      	ldrb	r3, [r7, #31]
 802589a:	2201      	movs	r2, #1
 802589c:	fa02 f303 	lsl.w	r3, r2, r3
 80258a0:	b25a      	sxtb	r2, r3
 80258a2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80258a6:	4313      	orrs	r3, r2
 80258a8:	b25b      	sxtb	r3, r3
 80258aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	for(i=0; i<8; i++)
 80258ae:	7ffb      	ldrb	r3, [r7, #31]
 80258b0:	3301      	adds	r3, #1
 80258b2:	77fb      	strb	r3, [r7, #31]
 80258b4:	7ffb      	ldrb	r3, [r7, #31]
 80258b6:	2b07      	cmp	r3, #7
 80258b8:	d9dd      	bls.n	8025876 <ibutton_read_rom+0x102>
		}
	}
	for(i=0; i<8; i++)
 80258ba:	2300      	movs	r3, #0
 80258bc:	77fb      	strb	r3, [r7, #31]
 80258be:	e01e      	b.n	80258fe <ibutton_read_rom+0x18a>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 80258c0:	f107 011e 	add.w	r1, r7, #30
 80258c4:	2301      	movs	r3, #1
 80258c6:	2201      	movs	r2, #1
 80258c8:	487d      	ldr	r0, [pc, #500]	; (8025ac0 <ibutton_read_rom+0x34c>)
 80258ca:	f7ef fe06 	bl	80154da <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 80258ce:	f107 011d 	add.w	r1, r7, #29
 80258d2:	2301      	movs	r3, #1
 80258d4:	2201      	movs	r2, #1
 80258d6:	487a      	ldr	r0, [pc, #488]	; (8025ac0 <ibutton_read_rom+0x34c>)
 80258d8:	f7ef fe91 	bl	80155fe <HAL_UART_Receive>
		if(buffr == 0xFF)
 80258dc:	7f7b      	ldrb	r3, [r7, #29]
 80258de:	2bff      	cmp	r3, #255	; 0xff
 80258e0:	d10a      	bne.n	80258f8 <ibutton_read_rom+0x184>
		{
			id3 = id3|(0x01<<i);
 80258e2:	7ffb      	ldrb	r3, [r7, #31]
 80258e4:	2201      	movs	r2, #1
 80258e6:	fa02 f303 	lsl.w	r3, r2, r3
 80258ea:	b25a      	sxtb	r2, r3
 80258ec:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80258f0:	4313      	orrs	r3, r2
 80258f2:	b25b      	sxtb	r3, r3
 80258f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(i=0; i<8; i++)
 80258f8:	7ffb      	ldrb	r3, [r7, #31]
 80258fa:	3301      	adds	r3, #1
 80258fc:	77fb      	strb	r3, [r7, #31]
 80258fe:	7ffb      	ldrb	r3, [r7, #31]
 8025900:	2b07      	cmp	r3, #7
 8025902:	d9dd      	bls.n	80258c0 <ibutton_read_rom+0x14c>
		}
	}
	for(i=0; i<8; i++)
 8025904:	2300      	movs	r3, #0
 8025906:	77fb      	strb	r3, [r7, #31]
 8025908:	e01e      	b.n	8025948 <ibutton_read_rom+0x1d4>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 802590a:	f107 011e 	add.w	r1, r7, #30
 802590e:	2301      	movs	r3, #1
 8025910:	2201      	movs	r2, #1
 8025912:	486b      	ldr	r0, [pc, #428]	; (8025ac0 <ibutton_read_rom+0x34c>)
 8025914:	f7ef fde1 	bl	80154da <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) !=HAL_OK ) {}
 8025918:	f107 011d 	add.w	r1, r7, #29
 802591c:	2301      	movs	r3, #1
 802591e:	2201      	movs	r2, #1
 8025920:	4867      	ldr	r0, [pc, #412]	; (8025ac0 <ibutton_read_rom+0x34c>)
 8025922:	f7ef fe6c 	bl	80155fe <HAL_UART_Receive>
		if(buffr == 0xFF)
 8025926:	7f7b      	ldrb	r3, [r7, #29]
 8025928:	2bff      	cmp	r3, #255	; 0xff
 802592a:	d10a      	bne.n	8025942 <ibutton_read_rom+0x1ce>
		{
			id4 = id4|(0x01<<i);
 802592c:	7ffb      	ldrb	r3, [r7, #31]
 802592e:	2201      	movs	r2, #1
 8025930:	fa02 f303 	lsl.w	r3, r2, r3
 8025934:	b25a      	sxtb	r2, r3
 8025936:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 802593a:	4313      	orrs	r3, r2
 802593c:	b25b      	sxtb	r3, r3
 802593e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for(i=0; i<8; i++)
 8025942:	7ffb      	ldrb	r3, [r7, #31]
 8025944:	3301      	adds	r3, #1
 8025946:	77fb      	strb	r3, [r7, #31]
 8025948:	7ffb      	ldrb	r3, [r7, #31]
 802594a:	2b07      	cmp	r3, #7
 802594c:	d9dd      	bls.n	802590a <ibutton_read_rom+0x196>
		}
	}
	for(i=0; i<8; i++)
 802594e:	2300      	movs	r3, #0
 8025950:	77fb      	strb	r3, [r7, #31]
 8025952:	e01e      	b.n	8025992 <ibutton_read_rom+0x21e>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8025954:	f107 011e 	add.w	r1, r7, #30
 8025958:	2301      	movs	r3, #1
 802595a:	2201      	movs	r2, #1
 802595c:	4858      	ldr	r0, [pc, #352]	; (8025ac0 <ibutton_read_rom+0x34c>)
 802595e:	f7ef fdbc 	bl	80154da <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 8025962:	f107 011d 	add.w	r1, r7, #29
 8025966:	2301      	movs	r3, #1
 8025968:	2201      	movs	r2, #1
 802596a:	4855      	ldr	r0, [pc, #340]	; (8025ac0 <ibutton_read_rom+0x34c>)
 802596c:	f7ef fe47 	bl	80155fe <HAL_UART_Receive>
		if(buffr == 0xFF)
 8025970:	7f7b      	ldrb	r3, [r7, #29]
 8025972:	2bff      	cmp	r3, #255	; 0xff
 8025974:	d10a      	bne.n	802598c <ibutton_read_rom+0x218>
		{
			id5 = id5|(0x01<<i);
 8025976:	7ffb      	ldrb	r3, [r7, #31]
 8025978:	2201      	movs	r2, #1
 802597a:	fa02 f303 	lsl.w	r3, r2, r3
 802597e:	b25a      	sxtb	r2, r3
 8025980:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8025984:	4313      	orrs	r3, r2
 8025986:	b25b      	sxtb	r3, r3
 8025988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	for(i=0; i<8; i++)
 802598c:	7ffb      	ldrb	r3, [r7, #31]
 802598e:	3301      	adds	r3, #1
 8025990:	77fb      	strb	r3, [r7, #31]
 8025992:	7ffb      	ldrb	r3, [r7, #31]
 8025994:	2b07      	cmp	r3, #7
 8025996:	d9dd      	bls.n	8025954 <ibutton_read_rom+0x1e0>
		}
	}
	for(i=0; i<8; i++)
 8025998:	2300      	movs	r3, #0
 802599a:	77fb      	strb	r3, [r7, #31]
 802599c:	e01e      	b.n	80259dc <ibutton_read_rom+0x268>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 802599e:	f107 011e 	add.w	r1, r7, #30
 80259a2:	2301      	movs	r3, #1
 80259a4:	2201      	movs	r2, #1
 80259a6:	4846      	ldr	r0, [pc, #280]	; (8025ac0 <ibutton_read_rom+0x34c>)
 80259a8:	f7ef fd97 	bl	80154da <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 80259ac:	f107 011d 	add.w	r1, r7, #29
 80259b0:	2301      	movs	r3, #1
 80259b2:	2201      	movs	r2, #1
 80259b4:	4842      	ldr	r0, [pc, #264]	; (8025ac0 <ibutton_read_rom+0x34c>)
 80259b6:	f7ef fe22 	bl	80155fe <HAL_UART_Receive>
		if(buffr == 0xFF)
 80259ba:	7f7b      	ldrb	r3, [r7, #29]
 80259bc:	2bff      	cmp	r3, #255	; 0xff
 80259be:	d10a      	bne.n	80259d6 <ibutton_read_rom+0x262>
		{
			id6 = id6|(0x01<<i);
 80259c0:	7ffb      	ldrb	r3, [r7, #31]
 80259c2:	2201      	movs	r2, #1
 80259c4:	fa02 f303 	lsl.w	r3, r2, r3
 80259c8:	b25a      	sxtb	r2, r3
 80259ca:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80259ce:	4313      	orrs	r3, r2
 80259d0:	b25b      	sxtb	r3, r3
 80259d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	for(i=0; i<8; i++)
 80259d6:	7ffb      	ldrb	r3, [r7, #31]
 80259d8:	3301      	adds	r3, #1
 80259da:	77fb      	strb	r3, [r7, #31]
 80259dc:	7ffb      	ldrb	r3, [r7, #31]
 80259de:	2b07      	cmp	r3, #7
 80259e0:	d9dd      	bls.n	802599e <ibutton_read_rom+0x22a>
		}
	}
	for(i=0; i<8; i++)
 80259e2:	2300      	movs	r3, #0
 80259e4:	77fb      	strb	r3, [r7, #31]
 80259e6:	e01e      	b.n	8025a26 <ibutton_read_rom+0x2b2>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 80259e8:	f107 011e 	add.w	r1, r7, #30
 80259ec:	2301      	movs	r3, #1
 80259ee:	2201      	movs	r2, #1
 80259f0:	4833      	ldr	r0, [pc, #204]	; (8025ac0 <ibutton_read_rom+0x34c>)
 80259f2:	f7ef fd72 	bl	80154da <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 80259f6:	f107 011d 	add.w	r1, r7, #29
 80259fa:	2301      	movs	r3, #1
 80259fc:	2201      	movs	r2, #1
 80259fe:	4830      	ldr	r0, [pc, #192]	; (8025ac0 <ibutton_read_rom+0x34c>)
 8025a00:	f7ef fdfd 	bl	80155fe <HAL_UART_Receive>
		if(buffr == 0xFF)
 8025a04:	7f7b      	ldrb	r3, [r7, #29]
 8025a06:	2bff      	cmp	r3, #255	; 0xff
 8025a08:	d10a      	bne.n	8025a20 <ibutton_read_rom+0x2ac>
		{
			crc_ow = crc_ow|(0x01<<i);
 8025a0a:	7ffb      	ldrb	r3, [r7, #31]
 8025a0c:	2201      	movs	r2, #1
 8025a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8025a12:	b25a      	sxtb	r2, r3
 8025a14:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8025a18:	4313      	orrs	r3, r2
 8025a1a:	b25b      	sxtb	r3, r3
 8025a1c:	f887 3020 	strb.w	r3, [r7, #32]
	for(i=0; i<8; i++)
 8025a20:	7ffb      	ldrb	r3, [r7, #31]
 8025a22:	3301      	adds	r3, #1
 8025a24:	77fb      	strb	r3, [r7, #31]
 8025a26:	7ffb      	ldrb	r3, [r7, #31]
 8025a28:	2b07      	cmp	r3, #7
 8025a2a:	d9dd      	bls.n	80259e8 <ibutton_read_rom+0x274>
		}
	}

	buffer_crc[0] = family; // заполняем буффер принятыми данными
 8025a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025a30:	753b      	strb	r3, [r7, #20]
	buffer_crc[1] = id1;
 8025a32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8025a36:	757b      	strb	r3, [r7, #21]
	buffer_crc[2] = id2;
 8025a38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8025a3c:	75bb      	strb	r3, [r7, #22]
	buffer_crc[3] = id3;
 8025a3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025a42:	75fb      	strb	r3, [r7, #23]
	buffer_crc[4] = id4;
 8025a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025a48:	763b      	strb	r3, [r7, #24]
	buffer_crc[5] = id5;
 8025a4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8025a4e:	767b      	strb	r3, [r7, #25]
	buffer_crc[6] = id6;
 8025a50:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025a54:	76bb      	strb	r3, [r7, #26]

	if( calc_crc(&buffer_crc[0], 7) == crc_ow)// Рассчитывавем контрольную сумму принятых данных и проверяем ее на соответствие с принятой "crc_ow"
 8025a56:	f107 0314 	add.w	r3, r7, #20
 8025a5a:	2107      	movs	r1, #7
 8025a5c:	4618      	mov	r0, r3
 8025a5e:	f7ff fe21 	bl	80256a4 <calc_crc>
 8025a62:	4603      	mov	r3, r0
 8025a64:	461a      	mov	r2, r3
 8025a66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025a6a:	4293      	cmp	r3, r2
 8025a6c:	d121      	bne.n	8025ab2 <ibutton_read_rom+0x33e>
		{
			id->IbuttonROM_High= ((uint32_t)id4)|(((uint32_t)id5)<<8)|(((uint32_t)id6)<<16)|(((uint32_t)crc_ow)<<24);// Заполняем указанную в параметре структуру
 8025a6e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8025a72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8025a76:	021b      	lsls	r3, r3, #8
 8025a78:	431a      	orrs	r2, r3
 8025a7a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025a7e:	041b      	lsls	r3, r3, #16
 8025a80:	431a      	orrs	r2, r3
 8025a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025a86:	061b      	lsls	r3, r3, #24
 8025a88:	431a      	orrs	r2, r3
 8025a8a:	687b      	ldr	r3, [r7, #4]
 8025a8c:	601a      	str	r2, [r3, #0]
			id->IbuttonROM_Low= ((uint32_t)family)|(((uint32_t)id1)<<8)|(((uint32_t)id2)<<16)|(((uint32_t)id3)<<24);
 8025a8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8025a92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8025a96:	021b      	lsls	r3, r3, #8
 8025a98:	431a      	orrs	r2, r3
 8025a9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8025a9e:	041b      	lsls	r3, r3, #16
 8025aa0:	431a      	orrs	r2, r3
 8025aa2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025aa6:	061b      	lsls	r3, r3, #24
 8025aa8:	431a      	orrs	r2, r3
 8025aaa:	687b      	ldr	r3, [r7, #4]
 8025aac:	605a      	str	r2, [r3, #4]
			return HAL_OK;
 8025aae:	2300      	movs	r3, #0
 8025ab0:	e000      	b.n	8025ab4 <ibutton_read_rom+0x340>
		}
	else
		{
			return HAL_ERROR;
 8025ab2:	2301      	movs	r3, #1
		}
}
 8025ab4:	4618      	mov	r0, r3
 8025ab6:	3728      	adds	r7, #40	; 0x28
 8025ab8:	46bd      	mov	sp, r7
 8025aba:	bd80      	pop	{r7, pc}
 8025abc:	0802a454 	.word	0x0802a454
 8025ac0:	200099e4 	.word	0x200099e4
 8025ac4:	0802a448 	.word	0x0802a448

08025ac8 <ibutton_search_rom>:
// параметр id это указатель к IbuttonROM_Struct структуре, которая содержит прочитанный ROM таблетки
// возращает значение типа HAL_StatusTypeDef. Может принимать значения: HAL_OK; HAL_ERROR
// HAL_OK - ROM найден в памяти FRAM
// HAL_ERROR - ROM не найден в памяти FRAM
HAL_StatusTypeDef ibutton_search_rom(IbuttonROM_Struct* id)
{
 8025ac8:	b580      	push	{r7, lr}
 8025aca:	b08a      	sub	sp, #40	; 0x28
 8025acc:	af00      	add	r7, sp, #0
 8025ace:	6078      	str	r0, [r7, #4]
	//uint8_t temp_ibutton_state;
	uint8_t id_fram[16];
	uint32_t id_temp_rom_high=0;
 8025ad0:	2300      	movs	r3, #0
 8025ad2:	623b      	str	r3, [r7, #32]
	uint32_t id_temp_rom_low=0;
 8025ad4:	2300      	movs	r3, #0
 8025ad6:	61fb      	str	r3, [r7, #28]

	for(uint16_t add=0x1310; add<=0x1F80; add=add+16)
 8025ad8:	f241 3310 	movw	r3, #4880	; 0x1310
 8025adc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025ade:	e039      	b.n	8025b54 <ibutton_search_rom+0x8c>
	{
		//fm25v02_read(add, &temp_ibutton_state);
		//if(temp_ibutton_state == 0x01) // Проверяем есть ли запись в памяти
		//{
			osMutexWait(Fm25v02MutexHandle, osWaitForever); // берем мьютекс для работы с чтением/записью FRAM памяти.
 8025ae0:	4b21      	ldr	r3, [pc, #132]	; (8025b68 <ibutton_search_rom+0xa0>)
 8025ae2:	681b      	ldr	r3, [r3, #0]
 8025ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8025ae8:	4618      	mov	r0, r3
 8025aea:	f7f1 f8d9 	bl	8016ca0 <osMutexWait>
			fm25v02_fast_read(2*add, &id_fram[0], 16);
 8025aee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025af0:	005b      	lsls	r3, r3, #1
 8025af2:	b29b      	uxth	r3, r3
 8025af4:	f107 010c 	add.w	r1, r7, #12
 8025af8:	2210      	movs	r2, #16
 8025afa:	4618      	mov	r0, r3
 8025afc:	f7ff fd12 	bl	8025524 <fm25v02_fast_read>
			osMutexRelease(Fm25v02MutexHandle); // отдаем мьютекс для работы с чтением/записью FRAM памяти.
 8025b00:	4b19      	ldr	r3, [pc, #100]	; (8025b68 <ibutton_search_rom+0xa0>)
 8025b02:	681b      	ldr	r3, [r3, #0]
 8025b04:	4618      	mov	r0, r3
 8025b06:	f7f1 f919 	bl	8016d3c <osMutexRelease>
			id_temp_rom_high = (((uint32_t)id_fram[15])<<24)|(((uint32_t)id_fram[13])<<16)|(((uint32_t)id_fram[11])<<8)|((uint32_t)id_fram[9]);
 8025b0a:	7efb      	ldrb	r3, [r7, #27]
 8025b0c:	061a      	lsls	r2, r3, #24
 8025b0e:	7e7b      	ldrb	r3, [r7, #25]
 8025b10:	041b      	lsls	r3, r3, #16
 8025b12:	431a      	orrs	r2, r3
 8025b14:	7dfb      	ldrb	r3, [r7, #23]
 8025b16:	021b      	lsls	r3, r3, #8
 8025b18:	4313      	orrs	r3, r2
 8025b1a:	7d7a      	ldrb	r2, [r7, #21]
 8025b1c:	4313      	orrs	r3, r2
 8025b1e:	623b      	str	r3, [r7, #32]
			id_temp_rom_low = (((uint32_t)id_fram[7])<<24)|(((uint32_t)id_fram[5])<<16)|(((uint32_t)id_fram[3])<<8)|((uint32_t)id_fram[1]);
 8025b20:	7cfb      	ldrb	r3, [r7, #19]
 8025b22:	061a      	lsls	r2, r3, #24
 8025b24:	7c7b      	ldrb	r3, [r7, #17]
 8025b26:	041b      	lsls	r3, r3, #16
 8025b28:	431a      	orrs	r2, r3
 8025b2a:	7bfb      	ldrb	r3, [r7, #15]
 8025b2c:	021b      	lsls	r3, r3, #8
 8025b2e:	4313      	orrs	r3, r2
 8025b30:	7b7a      	ldrb	r2, [r7, #13]
 8025b32:	4313      	orrs	r3, r2
 8025b34:	61fb      	str	r3, [r7, #28]
			//id_temp_rom_high = (((uint32_t)id_fram[0])<<24)|(((uint32_t)id_fram[1])<<16)|(((uint32_t)id_fram[2])<<8)|((uint32_t)id_fram[3]);
			//id_temp_rom_low = (((uint32_t)id_fram[4])<<24)|(((uint32_t)id_fram[5])<<16)|(((uint32_t)id_fram[6])<<8)|((uint32_t)id_fram[7]);
			if( (id_temp_rom_high == id->IbuttonROM_High) && (id_temp_rom_low == id->IbuttonROM_Low) )
 8025b36:	687b      	ldr	r3, [r7, #4]
 8025b38:	681b      	ldr	r3, [r3, #0]
 8025b3a:	6a3a      	ldr	r2, [r7, #32]
 8025b3c:	429a      	cmp	r2, r3
 8025b3e:	d106      	bne.n	8025b4e <ibutton_search_rom+0x86>
 8025b40:	687b      	ldr	r3, [r7, #4]
 8025b42:	685b      	ldr	r3, [r3, #4]
 8025b44:	69fa      	ldr	r2, [r7, #28]
 8025b46:	429a      	cmp	r2, r3
 8025b48:	d101      	bne.n	8025b4e <ibutton_search_rom+0x86>
			{
				return HAL_OK;
 8025b4a:	2300      	movs	r3, #0
 8025b4c:	e007      	b.n	8025b5e <ibutton_search_rom+0x96>
	for(uint16_t add=0x1310; add<=0x1F80; add=add+16)
 8025b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025b50:	3310      	adds	r3, #16
 8025b52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025b56:	f5b3 5ffc 	cmp.w	r3, #8064	; 0x1f80
 8025b5a:	d9c1      	bls.n	8025ae0 <ibutton_search_rom+0x18>
			//{
				//return HAL_ERROR;
			//}
		//}
	}
	return HAL_ERROR;
 8025b5c:	2301      	movs	r3, #1
			}
		}
	}
	return HAL_ERROR;
	*/
}
 8025b5e:	4618      	mov	r0, r3
 8025b60:	3728      	adds	r7, #40	; 0x28
 8025b62:	46bd      	mov	sp, r7
 8025b64:	bd80      	pop	{r7, pc}
 8025b66:	bf00      	nop
 8025b68:	20009a6c 	.word	0x20009a6c

08025b6c <find_str>:

//uint8_t send_ok[] = "SEND OK\r\n";
uint8_t send_ok[] = "SEND OK";

uint8_t find_str(uint8_t* buf_in, uint16_t buf_in_len, uint8_t* buf_search, uint16_t buf_search_len)
{
 8025b6c:	b480      	push	{r7}
 8025b6e:	b087      	sub	sp, #28
 8025b70:	af00      	add	r7, sp, #0
 8025b72:	60f8      	str	r0, [r7, #12]
 8025b74:	607a      	str	r2, [r7, #4]
 8025b76:	461a      	mov	r2, r3
 8025b78:	460b      	mov	r3, r1
 8025b7a:	817b      	strh	r3, [r7, #10]
 8025b7c:	4613      	mov	r3, r2
 8025b7e:	813b      	strh	r3, [r7, #8]
	uint8_t j=0;
 8025b80:	2300      	movs	r3, #0
 8025b82:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i=0; i<buf_in_len; i++)
 8025b84:	2300      	movs	r3, #0
 8025b86:	75bb      	strb	r3, [r7, #22]
 8025b88:	e018      	b.n	8025bbc <find_str+0x50>
	{
		if( *( buf_in+i ) == *(buf_search+j) )
 8025b8a:	7dbb      	ldrb	r3, [r7, #22]
 8025b8c:	68fa      	ldr	r2, [r7, #12]
 8025b8e:	4413      	add	r3, r2
 8025b90:	781a      	ldrb	r2, [r3, #0]
 8025b92:	7dfb      	ldrb	r3, [r7, #23]
 8025b94:	6879      	ldr	r1, [r7, #4]
 8025b96:	440b      	add	r3, r1
 8025b98:	781b      	ldrb	r3, [r3, #0]
 8025b9a:	429a      	cmp	r2, r3
 8025b9c:	d109      	bne.n	8025bb2 <find_str+0x46>
		{
			j++;
 8025b9e:	7dfb      	ldrb	r3, [r7, #23]
 8025ba0:	3301      	adds	r3, #1
 8025ba2:	75fb      	strb	r3, [r7, #23]
			if(j>=buf_search_len)
 8025ba4:	7dfb      	ldrb	r3, [r7, #23]
 8025ba6:	b29b      	uxth	r3, r3
 8025ba8:	893a      	ldrh	r2, [r7, #8]
 8025baa:	429a      	cmp	r2, r3
 8025bac:	d803      	bhi.n	8025bb6 <find_str+0x4a>
			{
				return 1;
 8025bae:	2301      	movs	r3, #1
 8025bb0:	e00a      	b.n	8025bc8 <find_str+0x5c>
			}
		}
		else
		{
			j=0;
 8025bb2:	2300      	movs	r3, #0
 8025bb4:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<buf_in_len; i++)
 8025bb6:	7dbb      	ldrb	r3, [r7, #22]
 8025bb8:	3301      	adds	r3, #1
 8025bba:	75bb      	strb	r3, [r7, #22]
 8025bbc:	7dbb      	ldrb	r3, [r7, #22]
 8025bbe:	b29b      	uxth	r3, r3
 8025bc0:	897a      	ldrh	r2, [r7, #10]
 8025bc2:	429a      	cmp	r2, r3
 8025bc4:	d8e1      	bhi.n	8025b8a <find_str+0x1e>
		}
	}

	return 0;
 8025bc6:	2300      	movs	r3, #0
}
 8025bc8:	4618      	mov	r0, r3
 8025bca:	371c      	adds	r7, #28
 8025bcc:	46bd      	mov	sp, r7
 8025bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bd2:	4770      	bx	lr

08025bd4 <m95_power_on>:

void m95_power_on(void) // функция включения питания
{
 8025bd4:	b580      	push	{r7, lr}
 8025bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8025bd8:	2200      	movs	r2, #0
 8025bda:	2140      	movs	r1, #64	; 0x40
 8025bdc:	480a      	ldr	r0, [pc, #40]	; (8025c08 <m95_power_on+0x34>)
 8025bde:	f7ed faf9 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8025be2:	2064      	movs	r0, #100	; 0x64
 8025be4:	f7ec f842 	bl	8011c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8025be8:	2201      	movs	r2, #1
 8025bea:	2140      	movs	r1, #64	; 0x40
 8025bec:	4806      	ldr	r0, [pc, #24]	; (8025c08 <m95_power_on+0x34>)
 8025bee:	f7ed faf1 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8025bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8025bf6:	f7ec f839 	bl	8011c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8025bfa:	2200      	movs	r2, #0
 8025bfc:	2140      	movs	r1, #64	; 0x40
 8025bfe:	4802      	ldr	r0, [pc, #8]	; (8025c08 <m95_power_on+0x34>)
 8025c00:	f7ed fae8 	bl	80131d4 <HAL_GPIO_WritePin>
}
 8025c04:	bf00      	nop
 8025c06:	bd80      	pop	{r7, pc}
 8025c08:	40021c00 	.word	0x40021c00

08025c0c <m95_power_off>:

void m95_power_off(void)
{
 8025c0c:	b580      	push	{r7, lr}
 8025c0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8025c10:	2200      	movs	r2, #0
 8025c12:	2140      	movs	r1, #64	; 0x40
 8025c14:	480a      	ldr	r0, [pc, #40]	; (8025c40 <m95_power_off+0x34>)
 8025c16:	f7ed fadd 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8025c1a:	2064      	movs	r0, #100	; 0x64
 8025c1c:	f7ec f826 	bl	8011c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8025c20:	2201      	movs	r2, #1
 8025c22:	2140      	movs	r1, #64	; 0x40
 8025c24:	4806      	ldr	r0, [pc, #24]	; (8025c40 <m95_power_off+0x34>)
 8025c26:	f7ed fad5 	bl	80131d4 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 8025c2a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8025c2e:	f7ec f81d 	bl	8011c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8025c32:	2200      	movs	r2, #0
 8025c34:	2140      	movs	r1, #64	; 0x40
 8025c36:	4802      	ldr	r0, [pc, #8]	; (8025c40 <m95_power_off+0x34>)
 8025c38:	f7ed facc 	bl	80131d4 <HAL_GPIO_WritePin>
}
 8025c3c:	bf00      	nop
 8025c3e:	bd80      	pop	{r7, pc}
 8025c40:	40021c00 	.word	0x40021c00

08025c44 <modem_rx_buffer_clear>:



void modem_rx_buffer_clear (void)
{
 8025c44:	b480      	push	{r7}
 8025c46:	b083      	sub	sp, #12
 8025c48:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 8025c4a:	2300      	movs	r3, #0
 8025c4c:	80fb      	strh	r3, [r7, #6]
 8025c4e:	e006      	b.n	8025c5e <modem_rx_buffer_clear+0x1a>
	{
		modem_rx_buffer[i] = 0;
 8025c50:	88fb      	ldrh	r3, [r7, #6]
 8025c52:	4a08      	ldr	r2, [pc, #32]	; (8025c74 <modem_rx_buffer_clear+0x30>)
 8025c54:	2100      	movs	r1, #0
 8025c56:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 8025c58:	88fb      	ldrh	r3, [r7, #6]
 8025c5a:	3301      	adds	r3, #1
 8025c5c:	80fb      	strh	r3, [r7, #6]
 8025c5e:	88fb      	ldrh	r3, [r7, #6]
 8025c60:	2bff      	cmp	r3, #255	; 0xff
 8025c62:	d9f5      	bls.n	8025c50 <modem_rx_buffer_clear+0xc>
	}
}
 8025c64:	bf00      	nop
 8025c66:	bf00      	nop
 8025c68:	370c      	adds	r7, #12
 8025c6a:	46bd      	mov	sp, r7
 8025c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c70:	4770      	bx	lr
 8025c72:	bf00      	nop
 8025c74:	20009b70 	.word	0x20009b70

08025c78 <ATE0>:

uint8_t ATE0 (void)
{
 8025c78:	b580      	push	{r7, lr}
 8025c7a:	b082      	sub	sp, #8
 8025c7c:	af00      	add	r7, sp, #0
	char str_out[5];
	sprintf(str_out, "ATE0\n");
 8025c7e:	463b      	mov	r3, r7
 8025c80:	491f      	ldr	r1, [pc, #124]	; (8025d00 <ATE0+0x88>)
 8025c82:	4618      	mov	r0, r3
 8025c84:	f003 fc46 	bl	8029514 <siprintf>

	read_rx_state = ACTIVE;
 8025c88:	4b1e      	ldr	r3, [pc, #120]	; (8025d04 <ATE0+0x8c>)
 8025c8a:	2201      	movs	r2, #1
 8025c8c:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8025c8e:	4b1e      	ldr	r3, [pc, #120]	; (8025d08 <ATE0+0x90>)
 8025c90:	2200      	movs	r2, #0
 8025c92:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8025c94:	f7ff ffd6 	bl	8025c44 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8025c98:	2201      	movs	r2, #1
 8025c9a:	491c      	ldr	r1, [pc, #112]	; (8025d0c <ATE0+0x94>)
 8025c9c:	481c      	ldr	r0, [pc, #112]	; (8025d10 <ATE0+0x98>)
 8025c9e:	f7ef fdcf 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 5);
 8025ca2:	463b      	mov	r3, r7
 8025ca4:	2205      	movs	r2, #5
 8025ca6:	4619      	mov	r1, r3
 8025ca8:	4819      	ldr	r0, [pc, #100]	; (8025d10 <ATE0+0x98>)
 8025caa:	f7ef fd4b 	bl	8015744 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8025cae:	4b19      	ldr	r3, [pc, #100]	; (8025d14 <ATE0+0x9c>)
 8025cb0:	681b      	ldr	r3, [r3, #0]
 8025cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8025cb6:	4618      	mov	r0, r3
 8025cb8:	f7f1 f8b6 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8025cbc:	4b16      	ldr	r3, [pc, #88]	; (8025d18 <ATE0+0xa0>)
 8025cbe:	681b      	ldr	r3, [r3, #0]
 8025cc0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8025cc4:	4618      	mov	r0, r3
 8025cc6:	f7f0 ff53 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8025cca:	e010      	b.n	8025cee <ATE0+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8025ccc:	4913      	ldr	r1, [pc, #76]	; (8025d1c <ATE0+0xa4>)
 8025cce:	4814      	ldr	r0, [pc, #80]	; (8025d20 <ATE0+0xa8>)
 8025cd0:	f003 fc83 	bl	80295da <strstr>
 8025cd4:	4603      	mov	r3, r0
 8025cd6:	2b00      	cmp	r3, #0
 8025cd8:	d009      	beq.n	8025cee <ATE0+0x76>
		{
			osTimerStop(AT_TimerHandle);
 8025cda:	4b0f      	ldr	r3, [pc, #60]	; (8025d18 <ATE0+0xa0>)
 8025cdc:	681b      	ldr	r3, [r3, #0]
 8025cde:	4618      	mov	r0, r3
 8025ce0:	f7f0 ff8a 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8025ce4:	4b07      	ldr	r3, [pc, #28]	; (8025d04 <ATE0+0x8c>)
 8025ce6:	2200      	movs	r2, #0
 8025ce8:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8025cea:	2300      	movs	r3, #0
 8025cec:	e004      	b.n	8025cf8 <ATE0+0x80>
	while(read_rx_state == ACTIVE)
 8025cee:	4b05      	ldr	r3, [pc, #20]	; (8025d04 <ATE0+0x8c>)
 8025cf0:	781b      	ldrb	r3, [r3, #0]
 8025cf2:	2b01      	cmp	r3, #1
 8025cf4:	d0ea      	beq.n	8025ccc <ATE0+0x54>
		}
	}
	return AT_ERROR;
 8025cf6:	2301      	movs	r3, #1
}
 8025cf8:	4618      	mov	r0, r3
 8025cfa:	3708      	adds	r7, #8
 8025cfc:	46bd      	mov	sp, r7
 8025cfe:	bd80      	pop	{r7, pc}
 8025d00:	0802a45c 	.word	0x0802a45c
 8025d04:	20009a2c 	.word	0x20009a2c
 8025d08:	2000085c 	.word	0x2000085c
 8025d0c:	20009a70 	.word	0x20009a70
 8025d10:	20008238 	.word	0x20008238
 8025d14:	20009cb8 	.word	0x20009cb8
 8025d18:	20009698 	.word	0x20009698
 8025d1c:	0802a464 	.word	0x0802a464
 8025d20:	20009b70 	.word	0x20009b70

08025d24 <AT>:




uint8_t AT (void)
{
 8025d24:	b580      	push	{r7, lr}
 8025d26:	b082      	sub	sp, #8
 8025d28:	af00      	add	r7, sp, #0
	char str_out[3];
	sprintf(str_out, "AT\n");
 8025d2a:	1d3b      	adds	r3, r7, #4
 8025d2c:	491f      	ldr	r1, [pc, #124]	; (8025dac <AT+0x88>)
 8025d2e:	4618      	mov	r0, r3
 8025d30:	f003 fbf0 	bl	8029514 <siprintf>

	read_rx_state = ACTIVE;
 8025d34:	4b1e      	ldr	r3, [pc, #120]	; (8025db0 <AT+0x8c>)
 8025d36:	2201      	movs	r2, #1
 8025d38:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8025d3a:	4b1e      	ldr	r3, [pc, #120]	; (8025db4 <AT+0x90>)
 8025d3c:	2200      	movs	r2, #0
 8025d3e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8025d40:	f7ff ff80 	bl	8025c44 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8025d44:	2201      	movs	r2, #1
 8025d46:	491c      	ldr	r1, [pc, #112]	; (8025db8 <AT+0x94>)
 8025d48:	481c      	ldr	r0, [pc, #112]	; (8025dbc <AT+0x98>)
 8025d4a:	f7ef fd79 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 3);
 8025d4e:	1d3b      	adds	r3, r7, #4
 8025d50:	2203      	movs	r2, #3
 8025d52:	4619      	mov	r1, r3
 8025d54:	4819      	ldr	r0, [pc, #100]	; (8025dbc <AT+0x98>)
 8025d56:	f7ef fcf5 	bl	8015744 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8025d5a:	4b19      	ldr	r3, [pc, #100]	; (8025dc0 <AT+0x9c>)
 8025d5c:	681b      	ldr	r3, [r3, #0]
 8025d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8025d62:	4618      	mov	r0, r3
 8025d64:	f7f1 f860 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8025d68:	4b16      	ldr	r3, [pc, #88]	; (8025dc4 <AT+0xa0>)
 8025d6a:	681b      	ldr	r3, [r3, #0]
 8025d6c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8025d70:	4618      	mov	r0, r3
 8025d72:	f7f0 fefd 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8025d76:	e010      	b.n	8025d9a <AT+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8025d78:	4913      	ldr	r1, [pc, #76]	; (8025dc8 <AT+0xa4>)
 8025d7a:	4814      	ldr	r0, [pc, #80]	; (8025dcc <AT+0xa8>)
 8025d7c:	f003 fc2d 	bl	80295da <strstr>
 8025d80:	4603      	mov	r3, r0
 8025d82:	2b00      	cmp	r3, #0
 8025d84:	d009      	beq.n	8025d9a <AT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 8025d86:	4b0f      	ldr	r3, [pc, #60]	; (8025dc4 <AT+0xa0>)
 8025d88:	681b      	ldr	r3, [r3, #0]
 8025d8a:	4618      	mov	r0, r3
 8025d8c:	f7f0 ff34 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8025d90:	4b07      	ldr	r3, [pc, #28]	; (8025db0 <AT+0x8c>)
 8025d92:	2200      	movs	r2, #0
 8025d94:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8025d96:	2300      	movs	r3, #0
 8025d98:	e004      	b.n	8025da4 <AT+0x80>
	while(read_rx_state == ACTIVE)
 8025d9a:	4b05      	ldr	r3, [pc, #20]	; (8025db0 <AT+0x8c>)
 8025d9c:	781b      	ldrb	r3, [r3, #0]
 8025d9e:	2b01      	cmp	r3, #1
 8025da0:	d0ea      	beq.n	8025d78 <AT+0x54>
		}
	}
	return AT_ERROR;
 8025da2:	2301      	movs	r3, #1
}
 8025da4:	4618      	mov	r0, r3
 8025da6:	3708      	adds	r7, #8
 8025da8:	46bd      	mov	sp, r7
 8025daa:	bd80      	pop	{r7, pc}
 8025dac:	0802a46c 	.word	0x0802a46c
 8025db0:	20009a2c 	.word	0x20009a2c
 8025db4:	2000085c 	.word	0x2000085c
 8025db8:	20009a70 	.word	0x20009a70
 8025dbc:	20008238 	.word	0x20008238
 8025dc0:	20009cb8 	.word	0x20009cb8
 8025dc4:	20009698 	.word	0x20009698
 8025dc8:	0802a464 	.word	0x0802a464
 8025dcc:	20009b70 	.word	0x20009b70

08025dd0 <AT_CSQ>:

uint8_t AT_CSQ (uint8_t* signal_level)
{
 8025dd0:	b580      	push	{r7, lr}
 8025dd2:	b084      	sub	sp, #16
 8025dd4:	af00      	add	r7, sp, #0
 8025dd6:	6078      	str	r0, [r7, #4]
	char str_out[7];
	sprintf(str_out, "AT+CSQ\n");
 8025dd8:	f107 0308 	add.w	r3, r7, #8
 8025ddc:	4931      	ldr	r1, [pc, #196]	; (8025ea4 <AT_CSQ+0xd4>)
 8025dde:	4618      	mov	r0, r3
 8025de0:	f003 fb98 	bl	8029514 <siprintf>

	read_rx_state = ACTIVE;
 8025de4:	4b30      	ldr	r3, [pc, #192]	; (8025ea8 <AT_CSQ+0xd8>)
 8025de6:	2201      	movs	r2, #1
 8025de8:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8025dea:	4b30      	ldr	r3, [pc, #192]	; (8025eac <AT_CSQ+0xdc>)
 8025dec:	2200      	movs	r2, #0
 8025dee:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8025df0:	f7ff ff28 	bl	8025c44 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8025df4:	2201      	movs	r2, #1
 8025df6:	492e      	ldr	r1, [pc, #184]	; (8025eb0 <AT_CSQ+0xe0>)
 8025df8:	482e      	ldr	r0, [pc, #184]	; (8025eb4 <AT_CSQ+0xe4>)
 8025dfa:	f7ef fd21 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 7);
 8025dfe:	f107 0308 	add.w	r3, r7, #8
 8025e02:	2207      	movs	r2, #7
 8025e04:	4619      	mov	r1, r3
 8025e06:	482b      	ldr	r0, [pc, #172]	; (8025eb4 <AT_CSQ+0xe4>)
 8025e08:	f7ef fc9c 	bl	8015744 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_csq, 7);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8025e0c:	4b2a      	ldr	r3, [pc, #168]	; (8025eb8 <AT_CSQ+0xe8>)
 8025e0e:	681b      	ldr	r3, [r3, #0]
 8025e10:	f04f 31ff 	mov.w	r1, #4294967295
 8025e14:	4618      	mov	r0, r3
 8025e16:	f7f1 f807 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8025e1a:	4b28      	ldr	r3, [pc, #160]	; (8025ebc <AT_CSQ+0xec>)
 8025e1c:	681b      	ldr	r3, [r3, #0]
 8025e1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8025e22:	4618      	mov	r0, r3
 8025e24:	f7f0 fea4 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8025e28:	e033      	b.n	8025e92 <AT_CSQ+0xc2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "+CSQ:") != NULL )
 8025e2a:	4925      	ldr	r1, [pc, #148]	; (8025ec0 <AT_CSQ+0xf0>)
 8025e2c:	4825      	ldr	r0, [pc, #148]	; (8025ec4 <AT_CSQ+0xf4>)
 8025e2e:	f003 fbd4 	bl	80295da <strstr>
 8025e32:	4603      	mov	r3, r0
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	d01b      	beq.n	8025e70 <AT_CSQ+0xa0>
		{
			if(modem_rx_buffer[9]==',') // в случае, если ATE0 (эхо выключено)
 8025e38:	4b22      	ldr	r3, [pc, #136]	; (8025ec4 <AT_CSQ+0xf4>)
 8025e3a:	7a5b      	ldrb	r3, [r3, #9]
 8025e3c:	2b2c      	cmp	r3, #44	; 0x2c
 8025e3e:	d106      	bne.n	8025e4e <AT_CSQ+0x7e>
			{
				*signal_level = modem_rx_buffer[8]-0x30;
 8025e40:	4b20      	ldr	r3, [pc, #128]	; (8025ec4 <AT_CSQ+0xf4>)
 8025e42:	7a1b      	ldrb	r3, [r3, #8]
 8025e44:	3b30      	subs	r3, #48	; 0x30
 8025e46:	b2da      	uxtb	r2, r3
 8025e48:	687b      	ldr	r3, [r7, #4]
 8025e4a:	701a      	strb	r2, [r3, #0]
 8025e4c:	e010      	b.n	8025e70 <AT_CSQ+0xa0>
			}
			else
			{
				*signal_level = (modem_rx_buffer[8]-0x30)*10 + (modem_rx_buffer[9]-0x30);
 8025e4e:	4b1d      	ldr	r3, [pc, #116]	; (8025ec4 <AT_CSQ+0xf4>)
 8025e50:	7a1b      	ldrb	r3, [r3, #8]
 8025e52:	3b30      	subs	r3, #48	; 0x30
 8025e54:	b2db      	uxtb	r3, r3
 8025e56:	461a      	mov	r2, r3
 8025e58:	0092      	lsls	r2, r2, #2
 8025e5a:	4413      	add	r3, r2
 8025e5c:	005b      	lsls	r3, r3, #1
 8025e5e:	b2da      	uxtb	r2, r3
 8025e60:	4b18      	ldr	r3, [pc, #96]	; (8025ec4 <AT_CSQ+0xf4>)
 8025e62:	7a5b      	ldrb	r3, [r3, #9]
 8025e64:	4413      	add	r3, r2
 8025e66:	b2db      	uxtb	r3, r3
 8025e68:	3b30      	subs	r3, #48	; 0x30
 8025e6a:	b2da      	uxtb	r2, r3
 8025e6c:	687b      	ldr	r3, [r7, #4]
 8025e6e:	701a      	strb	r2, [r3, #0]
			{
				*signal_level = (modem_rx_buffer[14]-0x30)*10 + (modem_rx_buffer[15]-0x30);
			}
			*/
		}
		if(strstr(modem_rx_buffer, "OK") != NULL )
 8025e70:	4915      	ldr	r1, [pc, #84]	; (8025ec8 <AT_CSQ+0xf8>)
 8025e72:	4814      	ldr	r0, [pc, #80]	; (8025ec4 <AT_CSQ+0xf4>)
 8025e74:	f003 fbb1 	bl	80295da <strstr>
 8025e78:	4603      	mov	r3, r0
 8025e7a:	2b00      	cmp	r3, #0
 8025e7c:	d009      	beq.n	8025e92 <AT_CSQ+0xc2>
		{
			osTimerStop(AT_TimerHandle);
 8025e7e:	4b0f      	ldr	r3, [pc, #60]	; (8025ebc <AT_CSQ+0xec>)
 8025e80:	681b      	ldr	r3, [r3, #0]
 8025e82:	4618      	mov	r0, r3
 8025e84:	f7f0 feb8 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8025e88:	4b07      	ldr	r3, [pc, #28]	; (8025ea8 <AT_CSQ+0xd8>)
 8025e8a:	2200      	movs	r2, #0
 8025e8c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8025e8e:	2300      	movs	r3, #0
 8025e90:	e004      	b.n	8025e9c <AT_CSQ+0xcc>
	while(read_rx_state == ACTIVE)
 8025e92:	4b05      	ldr	r3, [pc, #20]	; (8025ea8 <AT_CSQ+0xd8>)
 8025e94:	781b      	ldrb	r3, [r3, #0]
 8025e96:	2b01      	cmp	r3, #1
 8025e98:	d0c7      	beq.n	8025e2a <AT_CSQ+0x5a>
		}
	}
	return AT_ERROR;
 8025e9a:	2301      	movs	r3, #1
}
 8025e9c:	4618      	mov	r0, r3
 8025e9e:	3710      	adds	r7, #16
 8025ea0:	46bd      	mov	sp, r7
 8025ea2:	bd80      	pop	{r7, pc}
 8025ea4:	0802a470 	.word	0x0802a470
 8025ea8:	20009a2c 	.word	0x20009a2c
 8025eac:	2000085c 	.word	0x2000085c
 8025eb0:	20009a70 	.word	0x20009a70
 8025eb4:	20008238 	.word	0x20008238
 8025eb8:	20009cb8 	.word	0x20009cb8
 8025ebc:	20009698 	.word	0x20009698
 8025ec0:	0802a478 	.word	0x0802a478
 8025ec4:	20009b70 	.word	0x20009b70
 8025ec8:	0802a480 	.word	0x0802a480

08025ecc <AT_QCCID>:

uint8_t AT_QCCID ( uint8_t* id, uint64_t* temp_id) // Команда для для чтения CCID сим карты. id - указатель к массиву в которую будет сохраняться CCID симкарты (должен быть 8 байт), temp_id - указатель к временному массиву для расчета (должен быть 20 байт)
{
 8025ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8025ed0:	b0ae      	sub	sp, #184	; 0xb8
 8025ed2:	af00      	add	r7, sp, #0
 8025ed4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8025ed8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
	//uint64_t id1[20];
	char str_out[9];
	sprintf(str_out, "AT+QCCID\n");
 8025edc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8025ee0:	491d      	ldr	r1, [pc, #116]	; (8025f58 <AT_QCCID+0x8c>)
 8025ee2:	4618      	mov	r0, r3
 8025ee4:	f003 fb16 	bl	8029514 <siprintf>
	read_rx_state = ACTIVE;
 8025ee8:	4a1c      	ldr	r2, [pc, #112]	; (8025f5c <AT_QCCID+0x90>)
 8025eea:	2301      	movs	r3, #1
 8025eec:	7013      	strb	r3, [r2, #0]
	modem_rx_number = 0;
 8025eee:	4a1c      	ldr	r2, [pc, #112]	; (8025f60 <AT_QCCID+0x94>)
 8025ef0:	2300      	movs	r3, #0
 8025ef2:	7013      	strb	r3, [r2, #0]
	modem_rx_buffer_clear();
 8025ef4:	f7ff fea6 	bl	8025c44 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8025ef8:	2201      	movs	r2, #1
 8025efa:	491a      	ldr	r1, [pc, #104]	; (8025f64 <AT_QCCID+0x98>)
 8025efc:	481a      	ldr	r0, [pc, #104]	; (8025f68 <AT_QCCID+0x9c>)
 8025efe:	f7ef fc9f 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 8025f02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8025f06:	2209      	movs	r2, #9
 8025f08:	4619      	mov	r1, r3
 8025f0a:	4817      	ldr	r0, [pc, #92]	; (8025f68 <AT_QCCID+0x9c>)
 8025f0c:	f7ef fc1a 	bl	8015744 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8025f10:	4b16      	ldr	r3, [pc, #88]	; (8025f6c <AT_QCCID+0xa0>)
 8025f12:	681b      	ldr	r3, [r3, #0]
 8025f14:	f04f 31ff 	mov.w	r1, #4294967295
 8025f18:	4618      	mov	r0, r3
 8025f1a:	f7f0 ff85 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8025f1e:	4b14      	ldr	r3, [pc, #80]	; (8025f70 <AT_QCCID+0xa4>)
 8025f20:	681b      	ldr	r3, [r3, #0]
 8025f22:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8025f26:	4618      	mov	r0, r3
 8025f28:	f7f0 fe22 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8025f2c:	e34b      	b.n	80265c6 <AT_QCCID+0x6fa>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8025f2e:	4911      	ldr	r1, [pc, #68]	; (8025f74 <AT_QCCID+0xa8>)
 8025f30:	4811      	ldr	r0, [pc, #68]	; (8025f78 <AT_QCCID+0xac>)
 8025f32:	f003 fb52 	bl	80295da <strstr>
 8025f36:	4603      	mov	r3, r0
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	f000 8344 	beq.w	80265c6 <AT_QCCID+0x6fa>
		{
			osTimerStop(AT_TimerHandle);
 8025f3e:	4b0c      	ldr	r3, [pc, #48]	; (8025f70 <AT_QCCID+0xa4>)
 8025f40:	681b      	ldr	r3, [r3, #0]
 8025f42:	4618      	mov	r0, r3
 8025f44:	f7f0 fe58 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8025f48:	4a04      	ldr	r2, [pc, #16]	; (8025f5c <AT_QCCID+0x90>)
 8025f4a:	2300      	movs	r3, #0
 8025f4c:	7013      	strb	r3, [r2, #0]

			// В случае, когда ATE0, эхо выключено
			for(uint8_t i=0; i<19; i++)
 8025f4e:	2300      	movs	r3, #0
 8025f50:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8025f54:	e029      	b.n	8025faa <AT_QCCID+0xde>
 8025f56:	bf00      	nop
 8025f58:	0802a484 	.word	0x0802a484
 8025f5c:	20009a2c 	.word	0x20009a2c
 8025f60:	2000085c 	.word	0x2000085c
 8025f64:	20009a70 	.word	0x20009a70
 8025f68:	20008238 	.word	0x20008238
 8025f6c:	20009cb8 	.word	0x20009cb8
 8025f70:	20009698 	.word	0x20009698
 8025f74:	0802a464 	.word	0x0802a464
 8025f78:	20009b70 	.word	0x20009b70
			{
				*(temp_id+i) = (uint8_t)modem_rx_buffer[2+i] - 48;
 8025f7c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8025f80:	1c9a      	adds	r2, r3, #2
 8025f82:	4bde      	ldr	r3, [pc, #888]	; (80262fc <AT_QCCID+0x430>)
 8025f84:	5c9b      	ldrb	r3, [r3, r2]
 8025f86:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8025f8a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8025f8e:	00da      	lsls	r2, r3, #3
 8025f90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025f94:	1899      	adds	r1, r3, r2
 8025f96:	4602      	mov	r2, r0
 8025f98:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8025f9c:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t i=0; i<19; i++)
 8025fa0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8025fa4:	3301      	adds	r3, #1
 8025fa6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8025faa:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8025fae:	2b12      	cmp	r3, #18
 8025fb0:	d9e4      	bls.n	8025f7c <AT_QCCID+0xb0>
				*(temp_id+i) = (uint8_t)modem_rx_buffer[10+i] - 48;
				//temp_id[i] = (uint8_t)modem_rx_buffer[10+i] - 48;
			}
			*/

			*(temp_id+19) = *temp_id*1000000000000000000 + *(temp_id+1)*100000000000000000 + *(temp_id+2)*10000000000000000 + *(temp_id+3)*1000000000000000 + *(temp_id+4)*100000000000000 + *(temp_id+5)*10000000000000 + *(temp_id+6)*1000000000000 + *(temp_id+7)*100000000000 + *(temp_id+8)*10000000000 + *(temp_id+9)*1000000000 + *(temp_id+10)*100000000 + *(temp_id+11)*10000000 + *(temp_id+12)*1000000 + *(temp_id+13)*100000 + *(temp_id+14)*10000 + *(temp_id+15)*1000 + *(temp_id+16)*100 + *(temp_id+17)*10 + *(temp_id+18);
 8025fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fba:	49d1      	ldr	r1, [pc, #836]	; (8026300 <AT_QCCID+0x434>)
 8025fbc:	fb01 f003 	mul.w	r0, r1, r3
 8025fc0:	49d0      	ldr	r1, [pc, #832]	; (8026304 <AT_QCCID+0x438>)
 8025fc2:	fb01 f102 	mul.w	r1, r1, r2
 8025fc6:	4408      	add	r0, r1
 8025fc8:	49cd      	ldr	r1, [pc, #820]	; (8026300 <AT_QCCID+0x434>)
 8025fca:	fba2 4501 	umull	r4, r5, r2, r1
 8025fce:	1943      	adds	r3, r0, r5
 8025fd0:	461d      	mov	r5, r3
 8025fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025fd6:	3308      	adds	r3, #8
 8025fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fdc:	49ca      	ldr	r1, [pc, #808]	; (8026308 <AT_QCCID+0x43c>)
 8025fde:	fb01 f003 	mul.w	r0, r1, r3
 8025fe2:	49ca      	ldr	r1, [pc, #808]	; (802630c <AT_QCCID+0x440>)
 8025fe4:	fb01 f102 	mul.w	r1, r1, r2
 8025fe8:	4408      	add	r0, r1
 8025fea:	49c7      	ldr	r1, [pc, #796]	; (8026308 <AT_QCCID+0x43c>)
 8025fec:	fba2 2301 	umull	r2, r3, r2, r1
 8025ff0:	18c1      	adds	r1, r0, r3
 8025ff2:	460b      	mov	r3, r1
 8025ff4:	eb14 0a02 	adds.w	sl, r4, r2
 8025ff8:	eb45 0b03 	adc.w	fp, r5, r3
 8025ffc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026000:	3318      	adds	r3, #24
 8026002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026006:	49c2      	ldr	r1, [pc, #776]	; (8026310 <AT_QCCID+0x444>)
 8026008:	fb01 f003 	mul.w	r0, r1, r3
 802600c:	49c1      	ldr	r1, [pc, #772]	; (8026314 <AT_QCCID+0x448>)
 802600e:	fb01 f102 	mul.w	r1, r1, r2
 8026012:	4408      	add	r0, r1
 8026014:	49be      	ldr	r1, [pc, #760]	; (8026310 <AT_QCCID+0x444>)
 8026016:	fba2 4501 	umull	r4, r5, r2, r1
 802601a:	1943      	adds	r3, r0, r5
 802601c:	461d      	mov	r5, r3
 802601e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026022:	3310      	adds	r3, #16
 8026024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026028:	49bb      	ldr	r1, [pc, #748]	; (8026318 <AT_QCCID+0x44c>)
 802602a:	fb01 f003 	mul.w	r0, r1, r3
 802602e:	49bb      	ldr	r1, [pc, #748]	; (802631c <AT_QCCID+0x450>)
 8026030:	fb01 f102 	mul.w	r1, r1, r2
 8026034:	4408      	add	r0, r1
 8026036:	49b8      	ldr	r1, [pc, #736]	; (8026318 <AT_QCCID+0x44c>)
 8026038:	fba2 2301 	umull	r2, r3, r2, r1
 802603c:	18c1      	adds	r1, r0, r3
 802603e:	460b      	mov	r3, r1
 8026040:	eb14 0802 	adds.w	r8, r4, r2
 8026044:	eb45 0903 	adc.w	r9, r5, r3
 8026048:	eb1a 0308 	adds.w	r3, sl, r8
 802604c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8026050:	eb4b 0309 	adc.w	r3, fp, r9
 8026054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8026058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802605c:	3328      	adds	r3, #40	; 0x28
 802605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026062:	49af      	ldr	r1, [pc, #700]	; (8026320 <AT_QCCID+0x454>)
 8026064:	fb01 f003 	mul.w	r0, r1, r3
 8026068:	f640 1118 	movw	r1, #2328	; 0x918
 802606c:	fb01 f102 	mul.w	r1, r1, r2
 8026070:	4408      	add	r0, r1
 8026072:	49ab      	ldr	r1, [pc, #684]	; (8026320 <AT_QCCID+0x454>)
 8026074:	fba2 4501 	umull	r4, r5, r2, r1
 8026078:	1943      	adds	r3, r0, r5
 802607a:	461d      	mov	r5, r3
 802607c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026080:	3320      	adds	r3, #32
 8026082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026086:	49a7      	ldr	r1, [pc, #668]	; (8026324 <AT_QCCID+0x458>)
 8026088:	fb01 f003 	mul.w	r0, r1, r3
 802608c:	f645 21f3 	movw	r1, #23283	; 0x5af3
 8026090:	fb01 f102 	mul.w	r1, r1, r2
 8026094:	4408      	add	r0, r1
 8026096:	49a3      	ldr	r1, [pc, #652]	; (8026324 <AT_QCCID+0x458>)
 8026098:	fba2 2301 	umull	r2, r3, r2, r1
 802609c:	18c1      	adds	r1, r0, r3
 802609e:	460b      	mov	r3, r1
 80260a0:	18a1      	adds	r1, r4, r2
 80260a2:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80260a6:	eb45 0303 	adc.w	r3, r5, r3
 80260aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80260ae:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80260b2:	4623      	mov	r3, r4
 80260b4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80260b8:	4602      	mov	r2, r0
 80260ba:	189b      	adds	r3, r3, r2
 80260bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80260c0:	460b      	mov	r3, r1
 80260c2:	462a      	mov	r2, r5
 80260c4:	eb42 0303 	adc.w	r3, r2, r3
 80260c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80260cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80260d0:	3338      	adds	r3, #56	; 0x38
 80260d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260d6:	4994      	ldr	r1, [pc, #592]	; (8026328 <AT_QCCID+0x45c>)
 80260d8:	fb01 f003 	mul.w	r0, r1, r3
 80260dc:	2117      	movs	r1, #23
 80260de:	fb01 f102 	mul.w	r1, r1, r2
 80260e2:	4408      	add	r0, r1
 80260e4:	4990      	ldr	r1, [pc, #576]	; (8026328 <AT_QCCID+0x45c>)
 80260e6:	fba2 4501 	umull	r4, r5, r2, r1
 80260ea:	1943      	adds	r3, r0, r5
 80260ec:	461d      	mov	r5, r3
 80260ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80260f2:	3330      	adds	r3, #48	; 0x30
 80260f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260f8:	498c      	ldr	r1, [pc, #560]	; (802632c <AT_QCCID+0x460>)
 80260fa:	fb01 f003 	mul.w	r0, r1, r3
 80260fe:	21e8      	movs	r1, #232	; 0xe8
 8026100:	fb01 f102 	mul.w	r1, r1, r2
 8026104:	4408      	add	r0, r1
 8026106:	4989      	ldr	r1, [pc, #548]	; (802632c <AT_QCCID+0x460>)
 8026108:	fba2 2301 	umull	r2, r3, r2, r1
 802610c:	18c1      	adds	r1, r0, r3
 802610e:	460b      	mov	r3, r1
 8026110:	18a1      	adds	r1, r4, r2
 8026112:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8026116:	eb45 0303 	adc.w	r3, r5, r3
 802611a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802611e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8026122:	4623      	mov	r3, r4
 8026124:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8026128:	4602      	mov	r2, r0
 802612a:	189b      	adds	r3, r3, r2
 802612c:	67bb      	str	r3, [r7, #120]	; 0x78
 802612e:	460b      	mov	r3, r1
 8026130:	462a      	mov	r2, r5
 8026132:	eb42 0303 	adc.w	r3, r2, r3
 8026136:	67fb      	str	r3, [r7, #124]	; 0x7c
 8026138:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802613c:	3348      	adds	r3, #72	; 0x48
 802613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026142:	497b      	ldr	r1, [pc, #492]	; (8026330 <AT_QCCID+0x464>)
 8026144:	fb01 f003 	mul.w	r0, r1, r3
 8026148:	2100      	movs	r1, #0
 802614a:	fb01 f102 	mul.w	r1, r1, r2
 802614e:	4408      	add	r0, r1
 8026150:	4977      	ldr	r1, [pc, #476]	; (8026330 <AT_QCCID+0x464>)
 8026152:	fba2 4501 	umull	r4, r5, r2, r1
 8026156:	1943      	adds	r3, r0, r5
 8026158:	461d      	mov	r5, r3
 802615a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802615e:	3340      	adds	r3, #64	; 0x40
 8026160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026164:	4973      	ldr	r1, [pc, #460]	; (8026334 <AT_QCCID+0x468>)
 8026166:	fb01 f003 	mul.w	r0, r1, r3
 802616a:	2102      	movs	r1, #2
 802616c:	fb01 f102 	mul.w	r1, r1, r2
 8026170:	4408      	add	r0, r1
 8026172:	4970      	ldr	r1, [pc, #448]	; (8026334 <AT_QCCID+0x468>)
 8026174:	fba2 2301 	umull	r2, r3, r2, r1
 8026178:	18c1      	adds	r1, r0, r3
 802617a:	460b      	mov	r3, r1
 802617c:	18a1      	adds	r1, r4, r2
 802617e:	6739      	str	r1, [r7, #112]	; 0x70
 8026180:	eb45 0303 	adc.w	r3, r5, r3
 8026184:	677b      	str	r3, [r7, #116]	; 0x74
 8026186:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 802618a:	4623      	mov	r3, r4
 802618c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8026190:	4602      	mov	r2, r0
 8026192:	189b      	adds	r3, r3, r2
 8026194:	66bb      	str	r3, [r7, #104]	; 0x68
 8026196:	460b      	mov	r3, r1
 8026198:	462a      	mov	r2, r5
 802619a:	eb42 0303 	adc.w	r3, r2, r3
 802619e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80261a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80261a4:	3358      	adds	r3, #88	; 0x58
 80261a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261aa:	4963      	ldr	r1, [pc, #396]	; (8026338 <AT_QCCID+0x46c>)
 80261ac:	fb01 f003 	mul.w	r0, r1, r3
 80261b0:	2100      	movs	r1, #0
 80261b2:	fb01 f102 	mul.w	r1, r1, r2
 80261b6:	4408      	add	r0, r1
 80261b8:	495f      	ldr	r1, [pc, #380]	; (8026338 <AT_QCCID+0x46c>)
 80261ba:	fba2 4501 	umull	r4, r5, r2, r1
 80261be:	1943      	adds	r3, r0, r5
 80261c0:	461d      	mov	r5, r3
 80261c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80261c6:	3350      	adds	r3, #80	; 0x50
 80261c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261cc:	495b      	ldr	r1, [pc, #364]	; (802633c <AT_QCCID+0x470>)
 80261ce:	fb01 f003 	mul.w	r0, r1, r3
 80261d2:	2100      	movs	r1, #0
 80261d4:	fb01 f102 	mul.w	r1, r1, r2
 80261d8:	4408      	add	r0, r1
 80261da:	4958      	ldr	r1, [pc, #352]	; (802633c <AT_QCCID+0x470>)
 80261dc:	fba2 2301 	umull	r2, r3, r2, r1
 80261e0:	18c1      	adds	r1, r0, r3
 80261e2:	460b      	mov	r3, r1
 80261e4:	18a1      	adds	r1, r4, r2
 80261e6:	6639      	str	r1, [r7, #96]	; 0x60
 80261e8:	eb45 0303 	adc.w	r3, r5, r3
 80261ec:	667b      	str	r3, [r7, #100]	; 0x64
 80261ee:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80261f2:	4623      	mov	r3, r4
 80261f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80261f8:	4602      	mov	r2, r0
 80261fa:	189b      	adds	r3, r3, r2
 80261fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80261fe:	460b      	mov	r3, r1
 8026200:	462a      	mov	r2, r5
 8026202:	eb42 0303 	adc.w	r3, r2, r3
 8026206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802620c:	3368      	adds	r3, #104	; 0x68
 802620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026212:	494b      	ldr	r1, [pc, #300]	; (8026340 <AT_QCCID+0x474>)
 8026214:	fb01 f003 	mul.w	r0, r1, r3
 8026218:	2100      	movs	r1, #0
 802621a:	fb01 f102 	mul.w	r1, r1, r2
 802621e:	4408      	add	r0, r1
 8026220:	4947      	ldr	r1, [pc, #284]	; (8026340 <AT_QCCID+0x474>)
 8026222:	fba2 8901 	umull	r8, r9, r2, r1
 8026226:	eb00 0309 	add.w	r3, r0, r9
 802622a:	4699      	mov	r9, r3
 802622c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026230:	3360      	adds	r3, #96	; 0x60
 8026232:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026236:	4622      	mov	r2, r4
 8026238:	462b      	mov	r3, r5
 802623a:	f04f 0000 	mov.w	r0, #0
 802623e:	f04f 0100 	mov.w	r1, #0
 8026242:	0159      	lsls	r1, r3, #5
 8026244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8026248:	0150      	lsls	r0, r2, #5
 802624a:	4602      	mov	r2, r0
 802624c:	460b      	mov	r3, r1
 802624e:	1b12      	subs	r2, r2, r4
 8026250:	eb63 0305 	sbc.w	r3, r3, r5
 8026254:	f04f 0000 	mov.w	r0, #0
 8026258:	f04f 0100 	mov.w	r1, #0
 802625c:	0259      	lsls	r1, r3, #9
 802625e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8026262:	0250      	lsls	r0, r2, #9
 8026264:	4602      	mov	r2, r0
 8026266:	460b      	mov	r3, r1
 8026268:	1912      	adds	r2, r2, r4
 802626a:	eb45 0303 	adc.w	r3, r5, r3
 802626e:	f04f 0000 	mov.w	r0, #0
 8026272:	f04f 0100 	mov.w	r1, #0
 8026276:	0199      	lsls	r1, r3, #6
 8026278:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 802627c:	0190      	lsls	r0, r2, #6
 802627e:	1a80      	subs	r0, r0, r2
 8026280:	eb61 0103 	sbc.w	r1, r1, r3
 8026284:	1903      	adds	r3, r0, r4
 8026286:	653b      	str	r3, [r7, #80]	; 0x50
 8026288:	eb41 0305 	adc.w	r3, r1, r5
 802628c:	657b      	str	r3, [r7, #84]	; 0x54
 802628e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8026292:	460b      	mov	r3, r1
 8026294:	eb18 0303 	adds.w	r3, r8, r3
 8026298:	64bb      	str	r3, [r7, #72]	; 0x48
 802629a:	4613      	mov	r3, r2
 802629c:	eb49 0303 	adc.w	r3, r9, r3
 80262a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80262a2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80262a6:	4623      	mov	r3, r4
 80262a8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80262ac:	4602      	mov	r2, r0
 80262ae:	189b      	adds	r3, r3, r2
 80262b0:	643b      	str	r3, [r7, #64]	; 0x40
 80262b2:	460b      	mov	r3, r1
 80262b4:	462a      	mov	r2, r5
 80262b6:	eb42 0303 	adc.w	r3, r2, r3
 80262ba:	647b      	str	r3, [r7, #68]	; 0x44
 80262bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80262c0:	3378      	adds	r3, #120	; 0x78
 80262c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80262c6:	4622      	mov	r2, r4
 80262c8:	462b      	mov	r3, r5
 80262ca:	f04f 0000 	mov.w	r0, #0
 80262ce:	f04f 0100 	mov.w	r1, #0
 80262d2:	0159      	lsls	r1, r3, #5
 80262d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80262d8:	0150      	lsls	r0, r2, #5
 80262da:	4602      	mov	r2, r0
 80262dc:	460b      	mov	r3, r1
 80262de:	1b12      	subs	r2, r2, r4
 80262e0:	eb63 0305 	sbc.w	r3, r3, r5
 80262e4:	f04f 0000 	mov.w	r0, #0
 80262e8:	f04f 0100 	mov.w	r1, #0
 80262ec:	0099      	lsls	r1, r3, #2
 80262ee:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80262f2:	0090      	lsls	r0, r2, #2
 80262f4:	4602      	mov	r2, r0
 80262f6:	460b      	mov	r3, r1
 80262f8:	1912      	adds	r2, r2, r4
 80262fa:	e023      	b.n	8026344 <AT_QCCID+0x478>
 80262fc:	20009b70 	.word	0x20009b70
 8026300:	a7640000 	.word	0xa7640000
 8026304:	0de0b6b3 	.word	0x0de0b6b3
 8026308:	5d8a0000 	.word	0x5d8a0000
 802630c:	01634578 	.word	0x01634578
 8026310:	a4c68000 	.word	0xa4c68000
 8026314:	00038d7e 	.word	0x00038d7e
 8026318:	6fc10000 	.word	0x6fc10000
 802631c:	002386f2 	.word	0x002386f2
 8026320:	4e72a000 	.word	0x4e72a000
 8026324:	107a4000 	.word	0x107a4000
 8026328:	4876e800 	.word	0x4876e800
 802632c:	d4a51000 	.word	0xd4a51000
 8026330:	3b9aca00 	.word	0x3b9aca00
 8026334:	540be400 	.word	0x540be400
 8026338:	00989680 	.word	0x00989680
 802633c:	05f5e100 	.word	0x05f5e100
 8026340:	000186a0 	.word	0x000186a0
 8026344:	eb45 0303 	adc.w	r3, r5, r3
 8026348:	f04f 0000 	mov.w	r0, #0
 802634c:	f04f 0100 	mov.w	r1, #0
 8026350:	00d9      	lsls	r1, r3, #3
 8026352:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8026356:	00d0      	lsls	r0, r2, #3
 8026358:	4602      	mov	r2, r0
 802635a:	460b      	mov	r3, r1
 802635c:	4690      	mov	r8, r2
 802635e:	4699      	mov	r9, r3
 8026360:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026364:	3370      	adds	r3, #112	; 0x70
 8026366:	e9d3 4500 	ldrd	r4, r5, [r3]
 802636a:	4622      	mov	r2, r4
 802636c:	462b      	mov	r3, r5
 802636e:	f04f 0000 	mov.w	r0, #0
 8026372:	f04f 0100 	mov.w	r1, #0
 8026376:	0099      	lsls	r1, r3, #2
 8026378:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 802637c:	0090      	lsls	r0, r2, #2
 802637e:	4602      	mov	r2, r0
 8026380:	460b      	mov	r3, r1
 8026382:	1912      	adds	r2, r2, r4
 8026384:	eb45 0303 	adc.w	r3, r5, r3
 8026388:	f04f 0000 	mov.w	r0, #0
 802638c:	f04f 0100 	mov.w	r1, #0
 8026390:	00d9      	lsls	r1, r3, #3
 8026392:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8026396:	00d0      	lsls	r0, r2, #3
 8026398:	4602      	mov	r2, r0
 802639a:	460b      	mov	r3, r1
 802639c:	1b12      	subs	r2, r2, r4
 802639e:	eb63 0305 	sbc.w	r3, r3, r5
 80263a2:	f04f 0000 	mov.w	r0, #0
 80263a6:	f04f 0100 	mov.w	r1, #0
 80263aa:	0119      	lsls	r1, r3, #4
 80263ac:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80263b0:	0110      	lsls	r0, r2, #4
 80263b2:	4602      	mov	r2, r0
 80263b4:	460b      	mov	r3, r1
 80263b6:	1912      	adds	r2, r2, r4
 80263b8:	eb45 0303 	adc.w	r3, r5, r3
 80263bc:	f04f 0000 	mov.w	r0, #0
 80263c0:	f04f 0100 	mov.w	r1, #0
 80263c4:	0119      	lsls	r1, r3, #4
 80263c6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80263ca:	0110      	lsls	r0, r2, #4
 80263cc:	4602      	mov	r2, r0
 80263ce:	460b      	mov	r3, r1
 80263d0:	eb18 0102 	adds.w	r1, r8, r2
 80263d4:	63b9      	str	r1, [r7, #56]	; 0x38
 80263d6:	eb49 0303 	adc.w	r3, r9, r3
 80263da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80263dc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80263e0:	4623      	mov	r3, r4
 80263e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80263e6:	4602      	mov	r2, r0
 80263e8:	189b      	adds	r3, r3, r2
 80263ea:	633b      	str	r3, [r7, #48]	; 0x30
 80263ec:	460b      	mov	r3, r1
 80263ee:	462a      	mov	r2, r5
 80263f0:	eb42 0303 	adc.w	r3, r2, r3
 80263f4:	637b      	str	r3, [r7, #52]	; 0x34
 80263f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80263fa:	3388      	adds	r3, #136	; 0x88
 80263fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026400:	4622      	mov	r2, r4
 8026402:	462b      	mov	r3, r5
 8026404:	f04f 0000 	mov.w	r0, #0
 8026408:	f04f 0100 	mov.w	r1, #0
 802640c:	0099      	lsls	r1, r3, #2
 802640e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8026412:	0090      	lsls	r0, r2, #2
 8026414:	4602      	mov	r2, r0
 8026416:	460b      	mov	r3, r1
 8026418:	1912      	adds	r2, r2, r4
 802641a:	eb45 0303 	adc.w	r3, r5, r3
 802641e:	1891      	adds	r1, r2, r2
 8026420:	60b9      	str	r1, [r7, #8]
 8026422:	415b      	adcs	r3, r3
 8026424:	60fb      	str	r3, [r7, #12]
 8026426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802642a:	4690      	mov	r8, r2
 802642c:	4699      	mov	r9, r3
 802642e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026432:	3380      	adds	r3, #128	; 0x80
 8026434:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026438:	4622      	mov	r2, r4
 802643a:	462b      	mov	r3, r5
 802643c:	1891      	adds	r1, r2, r2
 802643e:	6039      	str	r1, [r7, #0]
 8026440:	415b      	adcs	r3, r3
 8026442:	607b      	str	r3, [r7, #4]
 8026444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026448:	1912      	adds	r2, r2, r4
 802644a:	eb45 0303 	adc.w	r3, r5, r3
 802644e:	f04f 0000 	mov.w	r0, #0
 8026452:	f04f 0100 	mov.w	r1, #0
 8026456:	0159      	lsls	r1, r3, #5
 8026458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802645c:	0150      	lsls	r0, r2, #5
 802645e:	1812      	adds	r2, r2, r0
 8026460:	eb41 0303 	adc.w	r3, r1, r3
 8026464:	1911      	adds	r1, r2, r4
 8026466:	62b9      	str	r1, [r7, #40]	; 0x28
 8026468:	416b      	adcs	r3, r5
 802646a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802646c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8026470:	460b      	mov	r3, r1
 8026472:	eb18 0303 	adds.w	r3, r8, r3
 8026476:	623b      	str	r3, [r7, #32]
 8026478:	4613      	mov	r3, r2
 802647a:	eb49 0303 	adc.w	r3, r9, r3
 802647e:	627b      	str	r3, [r7, #36]	; 0x24
 8026480:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8026484:	4623      	mov	r3, r4
 8026486:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802648a:	4602      	mov	r2, r0
 802648c:	189b      	adds	r3, r3, r2
 802648e:	61bb      	str	r3, [r7, #24]
 8026490:	460b      	mov	r3, r1
 8026492:	462a      	mov	r2, r5
 8026494:	eb42 0303 	adc.w	r3, r2, r3
 8026498:	61fb      	str	r3, [r7, #28]
 802649a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802649e:	3390      	adds	r3, #144	; 0x90
 80264a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80264a4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80264a8:	3198      	adds	r1, #152	; 0x98
 80264aa:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80264ae:	4620      	mov	r0, r4
 80264b0:	1880      	adds	r0, r0, r2
 80264b2:	6138      	str	r0, [r7, #16]
 80264b4:	4628      	mov	r0, r5
 80264b6:	eb43 0000 	adc.w	r0, r3, r0
 80264ba:	6178      	str	r0, [r7, #20]
 80264bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80264c0:	e9c1 3400 	strd	r3, r4, [r1]
			//temp_id[19] = temp_id[0]*1000000000000000000 + temp_id[1]*100000000000000000 + temp_id[2]*10000000000000000 + temp_id[3]*1000000000000000 + temp_id[4]*100000000000000 + temp_id[5]*10000000000000 + temp_id[6]*1000000000000 + temp_id[7]*100000000000 + temp_id[8]*10000000000 + temp_id[9]*1000000000 + temp_id[10]*100000000 + temp_id[11]*10000000 + temp_id[12]*1000000 + temp_id[13]*100000 + temp_id[14]*10000 + temp_id[15]*1000 + temp_id[16]*100 + temp_id[17]*10 + temp_id[18];

			*id = (uint8_t)(*(temp_id+19)>>56);
 80264c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80264c8:	3398      	adds	r3, #152	; 0x98
 80264ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80264ce:	f04f 0200 	mov.w	r2, #0
 80264d2:	f04f 0300 	mov.w	r3, #0
 80264d6:	0e0a      	lsrs	r2, r1, #24
 80264d8:	2300      	movs	r3, #0
 80264da:	b2d2      	uxtb	r2, r2
 80264dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80264e0:	701a      	strb	r2, [r3, #0]
			*(id+1) = (uint8_t)(*(temp_id+19)>>48);
 80264e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80264e6:	3398      	adds	r3, #152	; 0x98
 80264e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80264ec:	f04f 0200 	mov.w	r2, #0
 80264f0:	f04f 0300 	mov.w	r3, #0
 80264f4:	0c0a      	lsrs	r2, r1, #16
 80264f6:	2300      	movs	r3, #0
 80264f8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80264fc:	3101      	adds	r1, #1
 80264fe:	b2d3      	uxtb	r3, r2
 8026500:	700b      	strb	r3, [r1, #0]
			*(id+2) = (uint8_t)(*(temp_id+19)>>40);
 8026502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026506:	3398      	adds	r3, #152	; 0x98
 8026508:	e9d3 0100 	ldrd	r0, r1, [r3]
 802650c:	f04f 0200 	mov.w	r2, #0
 8026510:	f04f 0300 	mov.w	r3, #0
 8026514:	0a0a      	lsrs	r2, r1, #8
 8026516:	2300      	movs	r3, #0
 8026518:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802651c:	3102      	adds	r1, #2
 802651e:	b2d3      	uxtb	r3, r2
 8026520:	700b      	strb	r3, [r1, #0]
			*(id+3) = (uint8_t)(*(temp_id+19)>>32);
 8026522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026526:	3398      	adds	r3, #152	; 0x98
 8026528:	e9d3 0100 	ldrd	r0, r1, [r3]
 802652c:	f04f 0200 	mov.w	r2, #0
 8026530:	f04f 0300 	mov.w	r3, #0
 8026534:	000a      	movs	r2, r1
 8026536:	2300      	movs	r3, #0
 8026538:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802653c:	3103      	adds	r1, #3
 802653e:	b2d3      	uxtb	r3, r2
 8026540:	700b      	strb	r3, [r1, #0]
			*(id+4) = (uint8_t)(*(temp_id+19)>>24);
 8026542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026546:	3398      	adds	r3, #152	; 0x98
 8026548:	e9d3 0100 	ldrd	r0, r1, [r3]
 802654c:	f04f 0200 	mov.w	r2, #0
 8026550:	f04f 0300 	mov.w	r3, #0
 8026554:	0e02      	lsrs	r2, r0, #24
 8026556:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 802655a:	0e0b      	lsrs	r3, r1, #24
 802655c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8026560:	3104      	adds	r1, #4
 8026562:	b2d3      	uxtb	r3, r2
 8026564:	700b      	strb	r3, [r1, #0]
			*(id+5) = (uint8_t)(*(temp_id+19)>>16);
 8026566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802656a:	3398      	adds	r3, #152	; 0x98
 802656c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026570:	f04f 0200 	mov.w	r2, #0
 8026574:	f04f 0300 	mov.w	r3, #0
 8026578:	0c02      	lsrs	r2, r0, #16
 802657a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802657e:	0c0b      	lsrs	r3, r1, #16
 8026580:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8026584:	3105      	adds	r1, #5
 8026586:	b2d3      	uxtb	r3, r2
 8026588:	700b      	strb	r3, [r1, #0]
			*(id+6) = (uint8_t)(*(temp_id+19)>>8);
 802658a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802658e:	3398      	adds	r3, #152	; 0x98
 8026590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026594:	f04f 0200 	mov.w	r2, #0
 8026598:	f04f 0300 	mov.w	r3, #0
 802659c:	0a02      	lsrs	r2, r0, #8
 802659e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80265a2:	0a0b      	lsrs	r3, r1, #8
 80265a4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80265a8:	3106      	adds	r1, #6
 80265aa:	b2d3      	uxtb	r3, r2
 80265ac:	700b      	strb	r3, [r1, #0]
			*(id+7) = (uint8_t)*(temp_id+19);
 80265ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80265b2:	3398      	adds	r3, #152	; 0x98
 80265b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265b8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80265bc:	3107      	adds	r1, #7
 80265be:	b2d3      	uxtb	r3, r2
 80265c0:	700b      	strb	r3, [r1, #0]

			return AT_OK;
 80265c2:	2300      	movs	r3, #0
 80265c4:	e005      	b.n	80265d2 <AT_QCCID+0x706>
	while(read_rx_state == ACTIVE)
 80265c6:	4b05      	ldr	r3, [pc, #20]	; (80265dc <AT_QCCID+0x710>)
 80265c8:	781b      	ldrb	r3, [r3, #0]
 80265ca:	2b01      	cmp	r3, #1
 80265cc:	f43f acaf 	beq.w	8025f2e <AT_QCCID+0x62>
		}

	}
	return AT_ERROR;
 80265d0:	2301      	movs	r3, #1
}
 80265d2:	4618      	mov	r0, r3
 80265d4:	37b8      	adds	r7, #184	; 0xb8
 80265d6:	46bd      	mov	sp, r7
 80265d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80265dc:	20009a2c 	.word	0x20009a2c

080265e0 <AT_COPS>:

uint8_t AT_COPS (void)
{
 80265e0:	b580      	push	{r7, lr}
 80265e2:	b084      	sub	sp, #16
 80265e4:	af00      	add	r7, sp, #0
	char str_out[9];
	sprintf(str_out, "AT+COPS?\n");
 80265e6:	1d3b      	adds	r3, r7, #4
 80265e8:	4921      	ldr	r1, [pc, #132]	; (8026670 <AT_COPS+0x90>)
 80265ea:	4618      	mov	r0, r3
 80265ec:	f002 ff92 	bl	8029514 <siprintf>

	read_rx_state = ACTIVE;
 80265f0:	4b20      	ldr	r3, [pc, #128]	; (8026674 <AT_COPS+0x94>)
 80265f2:	2201      	movs	r2, #1
 80265f4:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 80265f6:	4b20      	ldr	r3, [pc, #128]	; (8026678 <AT_COPS+0x98>)
 80265f8:	2200      	movs	r2, #0
 80265fa:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 80265fc:	f7ff fb22 	bl	8025c44 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8026600:	2201      	movs	r2, #1
 8026602:	491e      	ldr	r1, [pc, #120]	; (802667c <AT_COPS+0x9c>)
 8026604:	481e      	ldr	r0, [pc, #120]	; (8026680 <AT_COPS+0xa0>)
 8026606:	f7ef f91b 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 802660a:	1d3b      	adds	r3, r7, #4
 802660c:	2209      	movs	r2, #9
 802660e:	4619      	mov	r1, r3
 8026610:	481b      	ldr	r0, [pc, #108]	; (8026680 <AT_COPS+0xa0>)
 8026612:	f7ef f897 	bl	8015744 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_cops, 9);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8026616:	4b1b      	ldr	r3, [pc, #108]	; (8026684 <AT_COPS+0xa4>)
 8026618:	681b      	ldr	r3, [r3, #0]
 802661a:	f04f 31ff 	mov.w	r1, #4294967295
 802661e:	4618      	mov	r0, r3
 8026620:	f7f0 fc02 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 8026624:	4b18      	ldr	r3, [pc, #96]	; (8026688 <AT_COPS+0xa8>)
 8026626:	681b      	ldr	r3, [r3, #0]
 8026628:	f241 3188 	movw	r1, #5000	; 0x1388
 802662c:	4618      	mov	r0, r3
 802662e:	f7f0 fa9f 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8026632:	e014      	b.n	802665e <AT_COPS+0x7e>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "MTS") != NULL )
 8026634:	4915      	ldr	r1, [pc, #84]	; (802668c <AT_COPS+0xac>)
 8026636:	4816      	ldr	r0, [pc, #88]	; (8026690 <AT_COPS+0xb0>)
 8026638:	f002 ffcf 	bl	80295da <strstr>
		{
			// Здесь должно быть то, что необходимо сделать, если пришло значение "МТС"
		}

		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 802663c:	4915      	ldr	r1, [pc, #84]	; (8026694 <AT_COPS+0xb4>)
 802663e:	4814      	ldr	r0, [pc, #80]	; (8026690 <AT_COPS+0xb0>)
 8026640:	f002 ffcb 	bl	80295da <strstr>
 8026644:	4603      	mov	r3, r0
 8026646:	2b00      	cmp	r3, #0
 8026648:	d009      	beq.n	802665e <AT_COPS+0x7e>
		{
			osTimerStop(AT_TimerHandle);
 802664a:	4b0f      	ldr	r3, [pc, #60]	; (8026688 <AT_COPS+0xa8>)
 802664c:	681b      	ldr	r3, [r3, #0]
 802664e:	4618      	mov	r0, r3
 8026650:	f7f0 fad2 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026654:	4b07      	ldr	r3, [pc, #28]	; (8026674 <AT_COPS+0x94>)
 8026656:	2200      	movs	r2, #0
 8026658:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802665a:	2300      	movs	r3, #0
 802665c:	e004      	b.n	8026668 <AT_COPS+0x88>
	while(read_rx_state == ACTIVE)
 802665e:	4b05      	ldr	r3, [pc, #20]	; (8026674 <AT_COPS+0x94>)
 8026660:	781b      	ldrb	r3, [r3, #0]
 8026662:	2b01      	cmp	r3, #1
 8026664:	d0e6      	beq.n	8026634 <AT_COPS+0x54>
		}


	}
	return AT_ERROR;
 8026666:	2301      	movs	r3, #1
}
 8026668:	4618      	mov	r0, r3
 802666a:	3710      	adds	r7, #16
 802666c:	46bd      	mov	sp, r7
 802666e:	bd80      	pop	{r7, pc}
 8026670:	0802a490 	.word	0x0802a490
 8026674:	20009a2c 	.word	0x20009a2c
 8026678:	2000085c 	.word	0x2000085c
 802667c:	20009a70 	.word	0x20009a70
 8026680:	20008238 	.word	0x20008238
 8026684:	20009cb8 	.word	0x20009cb8
 8026688:	20009698 	.word	0x20009698
 802668c:	0802a49c 	.word	0x0802a49c
 8026690:	20009b70 	.word	0x20009b70
 8026694:	0802a464 	.word	0x0802a464

08026698 <AT_QIOPEN>:

uint8_t AT_QIOPEN (char* type , uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4, uint16_t port)
{
 8026698:	b580      	push	{r7, lr}
 802669a:	b098      	sub	sp, #96	; 0x60
 802669c:	af04      	add	r7, sp, #16
 802669e:	6078      	str	r0, [r7, #4]
 80266a0:	4608      	mov	r0, r1
 80266a2:	4611      	mov	r1, r2
 80266a4:	461a      	mov	r2, r3
 80266a6:	4603      	mov	r3, r0
 80266a8:	70fb      	strb	r3, [r7, #3]
 80266aa:	460b      	mov	r3, r1
 80266ac:	70bb      	strb	r3, [r7, #2]
 80266ae:	4613      	mov	r3, r2
 80266b0:	707b      	strb	r3, [r7, #1]
	char str5[3];
	char str6[5];
	char str7[40];
	uint8_t n;

	sprintf(str1, "%s", type);
 80266b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80266b6:	687a      	ldr	r2, [r7, #4]
 80266b8:	4951      	ldr	r1, [pc, #324]	; (8026800 <AT_QIOPEN+0x168>)
 80266ba:	4618      	mov	r0, r3
 80266bc:	f002 ff2a 	bl	8029514 <siprintf>
	sprintf(str2, "%u", ip1);
 80266c0:	78fa      	ldrb	r2, [r7, #3]
 80266c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80266c6:	494f      	ldr	r1, [pc, #316]	; (8026804 <AT_QIOPEN+0x16c>)
 80266c8:	4618      	mov	r0, r3
 80266ca:	f002 ff23 	bl	8029514 <siprintf>
	sprintf(str3, "%u", ip2);
 80266ce:	78ba      	ldrb	r2, [r7, #2]
 80266d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80266d4:	494b      	ldr	r1, [pc, #300]	; (8026804 <AT_QIOPEN+0x16c>)
 80266d6:	4618      	mov	r0, r3
 80266d8:	f002 ff1c 	bl	8029514 <siprintf>
	sprintf(str4, "%u", ip3);
 80266dc:	787a      	ldrb	r2, [r7, #1]
 80266de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80266e2:	4948      	ldr	r1, [pc, #288]	; (8026804 <AT_QIOPEN+0x16c>)
 80266e4:	4618      	mov	r0, r3
 80266e6:	f002 ff15 	bl	8029514 <siprintf>
	sprintf(str5, "%u", ip4);
 80266ea:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80266ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80266f2:	4944      	ldr	r1, [pc, #272]	; (8026804 <AT_QIOPEN+0x16c>)
 80266f4:	4618      	mov	r0, r3
 80266f6:	f002 ff0d 	bl	8029514 <siprintf>
	sprintf(str6, "%u", port);
 80266fa:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80266fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026702:	4940      	ldr	r1, [pc, #256]	; (8026804 <AT_QIOPEN+0x16c>)
 8026704:	4618      	mov	r0, r3
 8026706:	f002 ff05 	bl	8029514 <siprintf>

	n = sprintf(str7, "AT+QIOPEN=\"%s\",\"%s.%s.%s.%s\",%s\n", str1, str2, str3, str4, str5, str6);
 802670a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 802670e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8026712:	f107 000c 	add.w	r0, r7, #12
 8026716:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802671a:	9303      	str	r3, [sp, #12]
 802671c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8026720:	9302      	str	r3, [sp, #8]
 8026722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026726:	9301      	str	r3, [sp, #4]
 8026728:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802672c:	9300      	str	r3, [sp, #0]
 802672e:	460b      	mov	r3, r1
 8026730:	4935      	ldr	r1, [pc, #212]	; (8026808 <AT_QIOPEN+0x170>)
 8026732:	f002 feef 	bl	8029514 <siprintf>
 8026736:	4603      	mov	r3, r0
 8026738:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

 	read_rx_state = ACTIVE;
 802673c:	4b33      	ldr	r3, [pc, #204]	; (802680c <AT_QIOPEN+0x174>)
 802673e:	2201      	movs	r2, #1
 8026740:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8026742:	4b33      	ldr	r3, [pc, #204]	; (8026810 <AT_QIOPEN+0x178>)
 8026744:	2200      	movs	r2, #0
 8026746:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8026748:	f7ff fa7c 	bl	8025c44 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802674c:	2201      	movs	r2, #1
 802674e:	4931      	ldr	r1, [pc, #196]	; (8026814 <AT_QIOPEN+0x17c>)
 8026750:	4831      	ldr	r0, [pc, #196]	; (8026818 <AT_QIOPEN+0x180>)
 8026752:	f7ef f875 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str7, n);
 8026756:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802675a:	b29a      	uxth	r2, r3
 802675c:	f107 030c 	add.w	r3, r7, #12
 8026760:	4619      	mov	r1, r3
 8026762:	482d      	ldr	r0, [pc, #180]	; (8026818 <AT_QIOPEN+0x180>)
 8026764:	f7ee ffee 	bl	8015744 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8026768:	4b2c      	ldr	r3, [pc, #176]	; (802681c <AT_QIOPEN+0x184>)
 802676a:	681b      	ldr	r3, [r3, #0]
 802676c:	f04f 31ff 	mov.w	r1, #4294967295
 8026770:	4618      	mov	r0, r3
 8026772:	f7f0 fb59 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 3000);
 8026776:	4b2a      	ldr	r3, [pc, #168]	; (8026820 <AT_QIOPEN+0x188>)
 8026778:	681b      	ldr	r3, [r3, #0]
 802677a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 802677e:	4618      	mov	r0, r3
 8026780:	f7f0 f9f6 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8026784:	e032      	b.n	80267ec <AT_QIOPEN+0x154>
	{
		//osThreadSuspend(M95TaskHandle);
		if( (strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL) )
 8026786:	4927      	ldr	r1, [pc, #156]	; (8026824 <AT_QIOPEN+0x18c>)
 8026788:	4827      	ldr	r0, [pc, #156]	; (8026828 <AT_QIOPEN+0x190>)
 802678a:	f002 ff26 	bl	80295da <strstr>
 802678e:	4603      	mov	r3, r0
 8026790:	2b00      	cmp	r3, #0
 8026792:	d009      	beq.n	80267a8 <AT_QIOPEN+0x110>
		{
			osTimerStop(AT_TimerHandle);
 8026794:	4b22      	ldr	r3, [pc, #136]	; (8026820 <AT_QIOPEN+0x188>)
 8026796:	681b      	ldr	r3, [r3, #0]
 8026798:	4618      	mov	r0, r3
 802679a:	f7f0 fa2d 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802679e:	4b1b      	ldr	r3, [pc, #108]	; (802680c <AT_QIOPEN+0x174>)
 80267a0:	2200      	movs	r2, #0
 80267a2:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 80267a4:	2300      	movs	r3, #0
 80267a6:	e026      	b.n	80267f6 <AT_QIOPEN+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "ALREADY CONNECT\r\n") != NULL) )
 80267a8:	4920      	ldr	r1, [pc, #128]	; (802682c <AT_QIOPEN+0x194>)
 80267aa:	481f      	ldr	r0, [pc, #124]	; (8026828 <AT_QIOPEN+0x190>)
 80267ac:	f002 ff15 	bl	80295da <strstr>
 80267b0:	4603      	mov	r3, r0
 80267b2:	2b00      	cmp	r3, #0
 80267b4:	d009      	beq.n	80267ca <AT_QIOPEN+0x132>
		{
			osTimerStop(AT_TimerHandle);
 80267b6:	4b1a      	ldr	r3, [pc, #104]	; (8026820 <AT_QIOPEN+0x188>)
 80267b8:	681b      	ldr	r3, [r3, #0]
 80267ba:	4618      	mov	r0, r3
 80267bc:	f7f0 fa1c 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80267c0:	4b12      	ldr	r3, [pc, #72]	; (802680c <AT_QIOPEN+0x174>)
 80267c2:	2200      	movs	r2, #0
 80267c4:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 80267c6:	2300      	movs	r3, #0
 80267c8:	e015      	b.n	80267f6 <AT_QIOPEN+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "CONNECT FAIL\r\n") != NULL) )
 80267ca:	4919      	ldr	r1, [pc, #100]	; (8026830 <AT_QIOPEN+0x198>)
 80267cc:	4816      	ldr	r0, [pc, #88]	; (8026828 <AT_QIOPEN+0x190>)
 80267ce:	f002 ff04 	bl	80295da <strstr>
 80267d2:	4603      	mov	r3, r0
 80267d4:	2b00      	cmp	r3, #0
 80267d6:	d009      	beq.n	80267ec <AT_QIOPEN+0x154>
		{
			osTimerStop(AT_TimerHandle);
 80267d8:	4b11      	ldr	r3, [pc, #68]	; (8026820 <AT_QIOPEN+0x188>)
 80267da:	681b      	ldr	r3, [r3, #0]
 80267dc:	4618      	mov	r0, r3
 80267de:	f7f0 fa0b 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80267e2:	4b0a      	ldr	r3, [pc, #40]	; (802680c <AT_QIOPEN+0x174>)
 80267e4:	2200      	movs	r2, #0
 80267e6:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 80267e8:	2301      	movs	r3, #1
 80267ea:	e004      	b.n	80267f6 <AT_QIOPEN+0x15e>
	while(read_rx_state == ACTIVE)
 80267ec:	4b07      	ldr	r3, [pc, #28]	; (802680c <AT_QIOPEN+0x174>)
 80267ee:	781b      	ldrb	r3, [r3, #0]
 80267f0:	2b01      	cmp	r3, #1
 80267f2:	d0c8      	beq.n	8026786 <AT_QIOPEN+0xee>
		}

	}
	return AT_ERROR;
 80267f4:	2301      	movs	r3, #1

}
 80267f6:	4618      	mov	r0, r3
 80267f8:	3750      	adds	r7, #80	; 0x50
 80267fa:	46bd      	mov	sp, r7
 80267fc:	bd80      	pop	{r7, pc}
 80267fe:	bf00      	nop
 8026800:	0802a4a0 	.word	0x0802a4a0
 8026804:	0802a4a4 	.word	0x0802a4a4
 8026808:	0802a4a8 	.word	0x0802a4a8
 802680c:	20009a2c 	.word	0x20009a2c
 8026810:	2000085c 	.word	0x2000085c
 8026814:	20009a70 	.word	0x20009a70
 8026818:	20008238 	.word	0x20008238
 802681c:	20009cb8 	.word	0x20009cb8
 8026820:	20009698 	.word	0x20009698
 8026824:	0802a4cc 	.word	0x0802a4cc
 8026828:	20009b70 	.word	0x20009b70
 802682c:	0802a4dc 	.word	0x0802a4dc
 8026830:	0802a4f0 	.word	0x0802a4f0

08026834 <AT_QISEND>:
	}
	return AT_ERROR;
}

uint8_t AT_QISEND (uint8_t* buf, uint16_t length) // maximum length = 1460
{
 8026834:	b580      	push	{r7, lr}
 8026836:	b086      	sub	sp, #24
 8026838:	af00      	add	r7, sp, #0
 802683a:	6078      	str	r0, [r7, #4]
 802683c:	460b      	mov	r3, r1
 802683e:	807b      	strh	r3, [r7, #2]
	uint8_t n1;
	char str_out[15];

	n1 = sprintf(str_out, "AT+QISEND=%u\n", length);
 8026840:	887a      	ldrh	r2, [r7, #2]
 8026842:	f107 0308 	add.w	r3, r7, #8
 8026846:	493b      	ldr	r1, [pc, #236]	; (8026934 <AT_QISEND+0x100>)
 8026848:	4618      	mov	r0, r3
 802684a:	f002 fe63 	bl	8029514 <siprintf>
 802684e:	4603      	mov	r3, r0
 8026850:	75fb      	strb	r3, [r7, #23]

 	read_rx_state = ACTIVE;
 8026852:	4b39      	ldr	r3, [pc, #228]	; (8026938 <AT_QISEND+0x104>)
 8026854:	2201      	movs	r2, #1
 8026856:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8026858:	4b38      	ldr	r3, [pc, #224]	; (802693c <AT_QISEND+0x108>)
 802685a:	2200      	movs	r2, #0
 802685c:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802685e:	f7ff f9f1 	bl	8025c44 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8026862:	2201      	movs	r2, #1
 8026864:	4936      	ldr	r1, [pc, #216]	; (8026940 <AT_QISEND+0x10c>)
 8026866:	4837      	ldr	r0, [pc, #220]	; (8026944 <AT_QISEND+0x110>)
 8026868:	f7ee ffea 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n1);
 802686c:	7dfb      	ldrb	r3, [r7, #23]
 802686e:	b29a      	uxth	r2, r3
 8026870:	f107 0308 	add.w	r3, r7, #8
 8026874:	4619      	mov	r1, r3
 8026876:	4833      	ldr	r0, [pc, #204]	; (8026944 <AT_QISEND+0x110>)
 8026878:	f7ee ff64 	bl	8015744 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802687c:	4b32      	ldr	r3, [pc, #200]	; (8026948 <AT_QISEND+0x114>)
 802687e:	681b      	ldr	r3, [r3, #0]
 8026880:	f04f 31ff 	mov.w	r1, #4294967295
 8026884:	4618      	mov	r0, r3
 8026886:	f7f0 facf 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 802688a:	4b30      	ldr	r3, [pc, #192]	; (802694c <AT_QISEND+0x118>)
 802688c:	681b      	ldr	r3, [r3, #0]
 802688e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8026892:	4618      	mov	r0, r3
 8026894:	f7f0 f96c 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8026898:	e043      	b.n	8026922 <AT_QISEND+0xee>
	{
		//osThreadSuspend(osThreadGetId());
		//osSemaphoreWait(ReceiveStateHandle, osWaitForever);
		if( strstr(modem_rx_buffer, "> ") != NULL )
 802689a:	492d      	ldr	r1, [pc, #180]	; (8026950 <AT_QISEND+0x11c>)
 802689c:	482d      	ldr	r0, [pc, #180]	; (8026954 <AT_QISEND+0x120>)
 802689e:	f002 fe9c 	bl	80295da <strstr>
 80268a2:	4603      	mov	r3, r0
 80268a4:	2b00      	cmp	r3, #0
 80268a6:	d03c      	beq.n	8026922 <AT_QISEND+0xee>
		{
			osTimerStop(AT_TimerHandle);
 80268a8:	4b28      	ldr	r3, [pc, #160]	; (802694c <AT_QISEND+0x118>)
 80268aa:	681b      	ldr	r3, [r3, #0]
 80268ac:	4618      	mov	r0, r3
 80268ae:	f7f0 f9a3 	bl	8016bf8 <osTimerStop>
			modem_rx_number = 0;
 80268b2:	4b22      	ldr	r3, [pc, #136]	; (802693c <AT_QISEND+0x108>)
 80268b4:	2200      	movs	r2, #0
 80268b6:	701a      	strb	r2, [r3, #0]
			modem_rx_buffer_clear();
 80268b8:	f7ff f9c4 	bl	8025c44 <modem_rx_buffer_clear>

			HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 80268bc:	2201      	movs	r2, #1
 80268be:	4920      	ldr	r1, [pc, #128]	; (8026940 <AT_QISEND+0x10c>)
 80268c0:	4820      	ldr	r0, [pc, #128]	; (8026944 <AT_QISEND+0x110>)
 80268c2:	f7ee ffbd 	bl	8015840 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart3, buf, length);
 80268c6:	887b      	ldrh	r3, [r7, #2]
 80268c8:	461a      	mov	r2, r3
 80268ca:	6879      	ldr	r1, [r7, #4]
 80268cc:	481d      	ldr	r0, [pc, #116]	; (8026944 <AT_QISEND+0x110>)
 80268ce:	f7ee ff39 	bl	8015744 <HAL_UART_Transmit_DMA>

			osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 80268d2:	4b1d      	ldr	r3, [pc, #116]	; (8026948 <AT_QISEND+0x114>)
 80268d4:	681b      	ldr	r3, [r3, #0]
 80268d6:	f04f 31ff 	mov.w	r1, #4294967295
 80268da:	4618      	mov	r0, r3
 80268dc:	f7f0 faa4 	bl	8016e28 <osSemaphoreWait>

			osTimerStart(AT_TimerHandle, 3000); // маленькое время!!!!!
 80268e0:	4b1a      	ldr	r3, [pc, #104]	; (802694c <AT_QISEND+0x118>)
 80268e2:	681b      	ldr	r3, [r3, #0]
 80268e4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80268e8:	4618      	mov	r0, r3
 80268ea:	f7f0 f941 	bl	8016b70 <osTimerStart>
			while(read_rx_state == ACTIVE)
 80268ee:	e012      	b.n	8026916 <AT_QISEND+0xe2>
			{
				//osThreadSuspend(osThreadGetId());
				//osSemaphoreWait(ReceiveStateHandle, osWaitForever);

				if( find_str(modem_rx_buffer, 255, send_ok, 7) == 1 )
 80268f0:	2307      	movs	r3, #7
 80268f2:	4a19      	ldr	r2, [pc, #100]	; (8026958 <AT_QISEND+0x124>)
 80268f4:	21ff      	movs	r1, #255	; 0xff
 80268f6:	4817      	ldr	r0, [pc, #92]	; (8026954 <AT_QISEND+0x120>)
 80268f8:	f7ff f938 	bl	8025b6c <find_str>
 80268fc:	4603      	mov	r3, r0
 80268fe:	2b01      	cmp	r3, #1
 8026900:	d109      	bne.n	8026916 <AT_QISEND+0xe2>
				{
					osTimerStop(AT_TimerHandle);
 8026902:	4b12      	ldr	r3, [pc, #72]	; (802694c <AT_QISEND+0x118>)
 8026904:	681b      	ldr	r3, [r3, #0]
 8026906:	4618      	mov	r0, r3
 8026908:	f7f0 f976 	bl	8016bf8 <osTimerStop>
					read_rx_state = NOT_ACTIVE;
 802690c:	4b0a      	ldr	r3, [pc, #40]	; (8026938 <AT_QISEND+0x104>)
 802690e:	2200      	movs	r2, #0
 8026910:	701a      	strb	r2, [r3, #0]
					return AT_OK;
 8026912:	2300      	movs	r3, #0
 8026914:	e00a      	b.n	802692c <AT_QISEND+0xf8>
			while(read_rx_state == ACTIVE)
 8026916:	4b08      	ldr	r3, [pc, #32]	; (8026938 <AT_QISEND+0x104>)
 8026918:	781b      	ldrb	r3, [r3, #0]
 802691a:	2b01      	cmp	r3, #1
 802691c:	d0e8      	beq.n	80268f0 <AT_QISEND+0xbc>
					read_rx_state = NOT_ACTIVE;
					return AT_ERROR;
				}
				*/
			}
			return AT_ERROR;
 802691e:	2301      	movs	r3, #1
 8026920:	e004      	b.n	802692c <AT_QISEND+0xf8>
	while(read_rx_state == ACTIVE)
 8026922:	4b05      	ldr	r3, [pc, #20]	; (8026938 <AT_QISEND+0x104>)
 8026924:	781b      	ldrb	r3, [r3, #0]
 8026926:	2b01      	cmp	r3, #1
 8026928:	d0b7      	beq.n	802689a <AT_QISEND+0x66>
			read_rx_state = NOT_ACTIVE;
			return AT_ERROR;
		}*/

	}
	return AT_ERROR;
 802692a:	2301      	movs	r3, #1

}
 802692c:	4618      	mov	r0, r3
 802692e:	3718      	adds	r7, #24
 8026930:	46bd      	mov	sp, r7
 8026932:	bd80      	pop	{r7, pc}
 8026934:	0802a518 	.word	0x0802a518
 8026938:	20009a2c 	.word	0x20009a2c
 802693c:	2000085c 	.word	0x2000085c
 8026940:	20009a70 	.word	0x20009a70
 8026944:	20008238 	.word	0x20008238
 8026948:	20009cb8 	.word	0x20009cb8
 802694c:	20009698 	.word	0x20009698
 8026950:	0802a528 	.word	0x0802a528
 8026954:	20009b70 	.word	0x20009b70
 8026958:	20000068 	.word	0x20000068

0802695c <AT_QIMUX>:
	}
	return AT_ERROR;
}

uint8_t AT_QIMUX (uint8_t mode) // Команда для включения или отключения возможности нескольких сессий TCP/IP, 1 - включено, 0 - выключено
{
 802695c:	b580      	push	{r7, lr}
 802695e:	b086      	sub	sp, #24
 8026960:	af00      	add	r7, sp, #0
 8026962:	4603      	mov	r3, r0
 8026964:	71fb      	strb	r3, [r7, #7]
	char str_out[11];
	sprintf(str_out, "AT+QIMUX=%u\n", mode);
 8026966:	79fa      	ldrb	r2, [r7, #7]
 8026968:	f107 030c 	add.w	r3, r7, #12
 802696c:	4928      	ldr	r1, [pc, #160]	; (8026a10 <AT_QIMUX+0xb4>)
 802696e:	4618      	mov	r0, r3
 8026970:	f002 fdd0 	bl	8029514 <siprintf>
	read_rx_state = ACTIVE;
 8026974:	4b27      	ldr	r3, [pc, #156]	; (8026a14 <AT_QIMUX+0xb8>)
 8026976:	2201      	movs	r2, #1
 8026978:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802697a:	4b27      	ldr	r3, [pc, #156]	; (8026a18 <AT_QIMUX+0xbc>)
 802697c:	2200      	movs	r2, #0
 802697e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8026980:	f7ff f960 	bl	8025c44 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8026984:	2201      	movs	r2, #1
 8026986:	4925      	ldr	r1, [pc, #148]	; (8026a1c <AT_QIMUX+0xc0>)
 8026988:	4825      	ldr	r0, [pc, #148]	; (8026a20 <AT_QIMUX+0xc4>)
 802698a:	f7ee ff59 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 802698e:	f107 030c 	add.w	r3, r7, #12
 8026992:	220b      	movs	r2, #11
 8026994:	4619      	mov	r1, r3
 8026996:	4822      	ldr	r0, [pc, #136]	; (8026a20 <AT_QIMUX+0xc4>)
 8026998:	f7ee fed4 	bl	8015744 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802699c:	4b21      	ldr	r3, [pc, #132]	; (8026a24 <AT_QIMUX+0xc8>)
 802699e:	681b      	ldr	r3, [r3, #0]
 80269a0:	f04f 31ff 	mov.w	r1, #4294967295
 80269a4:	4618      	mov	r0, r3
 80269a6:	f7f0 fa3f 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 80269aa:	4b1f      	ldr	r3, [pc, #124]	; (8026a28 <AT_QIMUX+0xcc>)
 80269ac:	681b      	ldr	r3, [r3, #0]
 80269ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80269b2:	4618      	mov	r0, r3
 80269b4:	f7f0 f8dc 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 80269b8:	e021      	b.n	80269fe <AT_QIMUX+0xa2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 80269ba:	491c      	ldr	r1, [pc, #112]	; (8026a2c <AT_QIMUX+0xd0>)
 80269bc:	481c      	ldr	r0, [pc, #112]	; (8026a30 <AT_QIMUX+0xd4>)
 80269be:	f002 fe0c 	bl	80295da <strstr>
 80269c2:	4603      	mov	r3, r0
 80269c4:	2b00      	cmp	r3, #0
 80269c6:	d009      	beq.n	80269dc <AT_QIMUX+0x80>
		{
			osTimerStop(AT_TimerHandle);
 80269c8:	4b17      	ldr	r3, [pc, #92]	; (8026a28 <AT_QIMUX+0xcc>)
 80269ca:	681b      	ldr	r3, [r3, #0]
 80269cc:	4618      	mov	r0, r3
 80269ce:	f7f0 f913 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80269d2:	4b10      	ldr	r3, [pc, #64]	; (8026a14 <AT_QIMUX+0xb8>)
 80269d4:	2200      	movs	r2, #0
 80269d6:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 80269d8:	2300      	movs	r3, #0
 80269da:	e015      	b.n	8026a08 <AT_QIMUX+0xac>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 80269dc:	4915      	ldr	r1, [pc, #84]	; (8026a34 <AT_QIMUX+0xd8>)
 80269de:	4814      	ldr	r0, [pc, #80]	; (8026a30 <AT_QIMUX+0xd4>)
 80269e0:	f002 fdfb 	bl	80295da <strstr>
 80269e4:	4603      	mov	r3, r0
 80269e6:	2b00      	cmp	r3, #0
 80269e8:	d009      	beq.n	80269fe <AT_QIMUX+0xa2>
		{
			osTimerStop(AT_TimerHandle);
 80269ea:	4b0f      	ldr	r3, [pc, #60]	; (8026a28 <AT_QIMUX+0xcc>)
 80269ec:	681b      	ldr	r3, [r3, #0]
 80269ee:	4618      	mov	r0, r3
 80269f0:	f7f0 f902 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80269f4:	4b07      	ldr	r3, [pc, #28]	; (8026a14 <AT_QIMUX+0xb8>)
 80269f6:	2200      	movs	r2, #0
 80269f8:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 80269fa:	2301      	movs	r3, #1
 80269fc:	e004      	b.n	8026a08 <AT_QIMUX+0xac>
	while(read_rx_state == ACTIVE)
 80269fe:	4b05      	ldr	r3, [pc, #20]	; (8026a14 <AT_QIMUX+0xb8>)
 8026a00:	781b      	ldrb	r3, [r3, #0]
 8026a02:	2b01      	cmp	r3, #1
 8026a04:	d0d9      	beq.n	80269ba <AT_QIMUX+0x5e>
		}

	}
	return AT_ERROR;
 8026a06:	2301      	movs	r3, #1
}
 8026a08:	4618      	mov	r0, r3
 8026a0a:	3718      	adds	r7, #24
 8026a0c:	46bd      	mov	sp, r7
 8026a0e:	bd80      	pop	{r7, pc}
 8026a10:	0802a544 	.word	0x0802a544
 8026a14:	20009a2c 	.word	0x20009a2c
 8026a18:	2000085c 	.word	0x2000085c
 8026a1c:	20009a70 	.word	0x20009a70
 8026a20:	20008238 	.word	0x20008238
 8026a24:	20009cb8 	.word	0x20009cb8
 8026a28:	20009698 	.word	0x20009698
 8026a2c:	0802a464 	.word	0x0802a464
 8026a30:	20009b70 	.word	0x20009b70
 8026a34:	0802a53c 	.word	0x0802a53c

08026a38 <AT_QIREGAPP>:
	}
	return AT_ERROR;
}

uint8_t AT_QIREGAPP  (char* apn, char* user, char* password)
{
 8026a38:	b580      	push	{r7, lr}
 8026a3a:	b0a0      	sub	sp, #128	; 0x80
 8026a3c:	af02      	add	r7, sp, #8
 8026a3e:	60f8      	str	r0, [r7, #12]
 8026a40:	60b9      	str	r1, [r7, #8]
 8026a42:	607a      	str	r2, [r7, #4]
	uint8_t n;
	char str_out[100];
	sprintf(str_out, "AT+QIREGAPP=\"%s\",\"%s\",\"%s\"\n", apn, user, password);
 8026a44:	f107 0010 	add.w	r0, r7, #16
 8026a48:	687b      	ldr	r3, [r7, #4]
 8026a4a:	9300      	str	r3, [sp, #0]
 8026a4c:	68bb      	ldr	r3, [r7, #8]
 8026a4e:	68fa      	ldr	r2, [r7, #12]
 8026a50:	492d      	ldr	r1, [pc, #180]	; (8026b08 <AT_QIREGAPP+0xd0>)
 8026a52:	f002 fd5f 	bl	8029514 <siprintf>
	n = strlen(str_out);
 8026a56:	f107 0310 	add.w	r3, r7, #16
 8026a5a:	4618      	mov	r0, r3
 8026a5c:	f7e9 fbb8 	bl	80101d0 <strlen>
 8026a60:	4603      	mov	r3, r0
 8026a62:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	read_rx_state = ACTIVE;
 8026a66:	4b29      	ldr	r3, [pc, #164]	; (8026b0c <AT_QIREGAPP+0xd4>)
 8026a68:	2201      	movs	r2, #1
 8026a6a:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8026a6c:	4b28      	ldr	r3, [pc, #160]	; (8026b10 <AT_QIREGAPP+0xd8>)
 8026a6e:	2200      	movs	r2, #0
 8026a70:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8026a72:	f7ff f8e7 	bl	8025c44 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8026a76:	2201      	movs	r2, #1
 8026a78:	4926      	ldr	r1, [pc, #152]	; (8026b14 <AT_QIREGAPP+0xdc>)
 8026a7a:	4827      	ldr	r0, [pc, #156]	; (8026b18 <AT_QIREGAPP+0xe0>)
 8026a7c:	f7ee fee0 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n);
 8026a80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8026a84:	b29a      	uxth	r2, r3
 8026a86:	f107 0310 	add.w	r3, r7, #16
 8026a8a:	4619      	mov	r1, r3
 8026a8c:	4822      	ldr	r0, [pc, #136]	; (8026b18 <AT_QIREGAPP+0xe0>)
 8026a8e:	f7ee fe59 	bl	8015744 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8026a92:	4b22      	ldr	r3, [pc, #136]	; (8026b1c <AT_QIREGAPP+0xe4>)
 8026a94:	681b      	ldr	r3, [r3, #0]
 8026a96:	f04f 31ff 	mov.w	r1, #4294967295
 8026a9a:	4618      	mov	r0, r3
 8026a9c:	f7f0 f9c4 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8026aa0:	4b1f      	ldr	r3, [pc, #124]	; (8026b20 <AT_QIREGAPP+0xe8>)
 8026aa2:	681b      	ldr	r3, [r3, #0]
 8026aa4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8026aa8:	4618      	mov	r0, r3
 8026aaa:	f7f0 f861 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8026aae:	e021      	b.n	8026af4 <AT_QIREGAPP+0xbc>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8026ab0:	491c      	ldr	r1, [pc, #112]	; (8026b24 <AT_QIREGAPP+0xec>)
 8026ab2:	481d      	ldr	r0, [pc, #116]	; (8026b28 <AT_QIREGAPP+0xf0>)
 8026ab4:	f002 fd91 	bl	80295da <strstr>
 8026ab8:	4603      	mov	r3, r0
 8026aba:	2b00      	cmp	r3, #0
 8026abc:	d009      	beq.n	8026ad2 <AT_QIREGAPP+0x9a>
		{
			osTimerStop(AT_TimerHandle);
 8026abe:	4b18      	ldr	r3, [pc, #96]	; (8026b20 <AT_QIREGAPP+0xe8>)
 8026ac0:	681b      	ldr	r3, [r3, #0]
 8026ac2:	4618      	mov	r0, r3
 8026ac4:	f7f0 f898 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026ac8:	4b10      	ldr	r3, [pc, #64]	; (8026b0c <AT_QIREGAPP+0xd4>)
 8026aca:	2200      	movs	r2, #0
 8026acc:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8026ace:	2300      	movs	r3, #0
 8026ad0:	e015      	b.n	8026afe <AT_QIREGAPP+0xc6>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8026ad2:	4916      	ldr	r1, [pc, #88]	; (8026b2c <AT_QIREGAPP+0xf4>)
 8026ad4:	4814      	ldr	r0, [pc, #80]	; (8026b28 <AT_QIREGAPP+0xf0>)
 8026ad6:	f002 fd80 	bl	80295da <strstr>
 8026ada:	4603      	mov	r3, r0
 8026adc:	2b00      	cmp	r3, #0
 8026ade:	d009      	beq.n	8026af4 <AT_QIREGAPP+0xbc>
		{
			osTimerStop(AT_TimerHandle);
 8026ae0:	4b0f      	ldr	r3, [pc, #60]	; (8026b20 <AT_QIREGAPP+0xe8>)
 8026ae2:	681b      	ldr	r3, [r3, #0]
 8026ae4:	4618      	mov	r0, r3
 8026ae6:	f7f0 f887 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026aea:	4b08      	ldr	r3, [pc, #32]	; (8026b0c <AT_QIREGAPP+0xd4>)
 8026aec:	2200      	movs	r2, #0
 8026aee:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8026af0:	2301      	movs	r3, #1
 8026af2:	e004      	b.n	8026afe <AT_QIREGAPP+0xc6>
	while(read_rx_state == ACTIVE)
 8026af4:	4b05      	ldr	r3, [pc, #20]	; (8026b0c <AT_QIREGAPP+0xd4>)
 8026af6:	781b      	ldrb	r3, [r3, #0]
 8026af8:	2b01      	cmp	r3, #1
 8026afa:	d0d9      	beq.n	8026ab0 <AT_QIREGAPP+0x78>
		}

	}
	return AT_ERROR;
 8026afc:	2301      	movs	r3, #1

}
 8026afe:	4618      	mov	r0, r3
 8026b00:	3778      	adds	r7, #120	; 0x78
 8026b02:	46bd      	mov	sp, r7
 8026b04:	bd80      	pop	{r7, pc}
 8026b06:	bf00      	nop
 8026b08:	0802a564 	.word	0x0802a564
 8026b0c:	20009a2c 	.word	0x20009a2c
 8026b10:	2000085c 	.word	0x2000085c
 8026b14:	20009a70 	.word	0x20009a70
 8026b18:	20008238 	.word	0x20008238
 8026b1c:	20009cb8 	.word	0x20009cb8
 8026b20:	20009698 	.word	0x20009698
 8026b24:	0802a464 	.word	0x0802a464
 8026b28:	20009b70 	.word	0x20009b70
 8026b2c:	0802a53c 	.word	0x0802a53c

08026b30 <AT_QIACT>:

uint8_t AT_QIACT (void)
{
 8026b30:	b580      	push	{r7, lr}
 8026b32:	b084      	sub	sp, #16
 8026b34:	af00      	add	r7, sp, #0
	uint8_t str_out[9];
	sprintf(str_out, "AT+QIACT\n");
 8026b36:	1d3b      	adds	r3, r7, #4
 8026b38:	4927      	ldr	r1, [pc, #156]	; (8026bd8 <AT_QIACT+0xa8>)
 8026b3a:	4618      	mov	r0, r3
 8026b3c:	f002 fcea 	bl	8029514 <siprintf>
	read_rx_state = ACTIVE;
 8026b40:	4b26      	ldr	r3, [pc, #152]	; (8026bdc <AT_QIACT+0xac>)
 8026b42:	2201      	movs	r2, #1
 8026b44:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8026b46:	4b26      	ldr	r3, [pc, #152]	; (8026be0 <AT_QIACT+0xb0>)
 8026b48:	2200      	movs	r2, #0
 8026b4a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8026b4c:	f7ff f87a 	bl	8025c44 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8026b50:	2201      	movs	r2, #1
 8026b52:	4924      	ldr	r1, [pc, #144]	; (8026be4 <AT_QIACT+0xb4>)
 8026b54:	4824      	ldr	r0, [pc, #144]	; (8026be8 <AT_QIACT+0xb8>)
 8026b56:	f7ee fe73 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 8026b5a:	1d3b      	adds	r3, r7, #4
 8026b5c:	2209      	movs	r2, #9
 8026b5e:	4619      	mov	r1, r3
 8026b60:	4821      	ldr	r0, [pc, #132]	; (8026be8 <AT_QIACT+0xb8>)
 8026b62:	f7ee fdef 	bl	8015744 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8026b66:	4b21      	ldr	r3, [pc, #132]	; (8026bec <AT_QIACT+0xbc>)
 8026b68:	681b      	ldr	r3, [r3, #0]
 8026b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8026b6e:	4618      	mov	r0, r3
 8026b70:	f7f0 f95a 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 150000);
 8026b74:	4b1e      	ldr	r3, [pc, #120]	; (8026bf0 <AT_QIACT+0xc0>)
 8026b76:	681b      	ldr	r3, [r3, #0]
 8026b78:	491e      	ldr	r1, [pc, #120]	; (8026bf4 <AT_QIACT+0xc4>)
 8026b7a:	4618      	mov	r0, r3
 8026b7c:	f7ef fff8 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8026b80:	e021      	b.n	8026bc6 <AT_QIACT+0x96>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8026b82:	491d      	ldr	r1, [pc, #116]	; (8026bf8 <AT_QIACT+0xc8>)
 8026b84:	481d      	ldr	r0, [pc, #116]	; (8026bfc <AT_QIACT+0xcc>)
 8026b86:	f002 fd28 	bl	80295da <strstr>
 8026b8a:	4603      	mov	r3, r0
 8026b8c:	2b00      	cmp	r3, #0
 8026b8e:	d009      	beq.n	8026ba4 <AT_QIACT+0x74>
		{
			osTimerStop(AT_TimerHandle);
 8026b90:	4b17      	ldr	r3, [pc, #92]	; (8026bf0 <AT_QIACT+0xc0>)
 8026b92:	681b      	ldr	r3, [r3, #0]
 8026b94:	4618      	mov	r0, r3
 8026b96:	f7f0 f82f 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026b9a:	4b10      	ldr	r3, [pc, #64]	; (8026bdc <AT_QIACT+0xac>)
 8026b9c:	2200      	movs	r2, #0
 8026b9e:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8026ba0:	2300      	movs	r3, #0
 8026ba2:	e015      	b.n	8026bd0 <AT_QIACT+0xa0>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8026ba4:	4916      	ldr	r1, [pc, #88]	; (8026c00 <AT_QIACT+0xd0>)
 8026ba6:	4815      	ldr	r0, [pc, #84]	; (8026bfc <AT_QIACT+0xcc>)
 8026ba8:	f002 fd17 	bl	80295da <strstr>
 8026bac:	4603      	mov	r3, r0
 8026bae:	2b00      	cmp	r3, #0
 8026bb0:	d009      	beq.n	8026bc6 <AT_QIACT+0x96>
		{
			osTimerStop(AT_TimerHandle);
 8026bb2:	4b0f      	ldr	r3, [pc, #60]	; (8026bf0 <AT_QIACT+0xc0>)
 8026bb4:	681b      	ldr	r3, [r3, #0]
 8026bb6:	4618      	mov	r0, r3
 8026bb8:	f7f0 f81e 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026bbc:	4b07      	ldr	r3, [pc, #28]	; (8026bdc <AT_QIACT+0xac>)
 8026bbe:	2200      	movs	r2, #0
 8026bc0:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8026bc2:	2301      	movs	r3, #1
 8026bc4:	e004      	b.n	8026bd0 <AT_QIACT+0xa0>
	while(read_rx_state == ACTIVE)
 8026bc6:	4b05      	ldr	r3, [pc, #20]	; (8026bdc <AT_QIACT+0xac>)
 8026bc8:	781b      	ldrb	r3, [r3, #0]
 8026bca:	2b01      	cmp	r3, #1
 8026bcc:	d0d9      	beq.n	8026b82 <AT_QIACT+0x52>
		}

	}
	return AT_ERROR;
 8026bce:	2301      	movs	r3, #1
}
 8026bd0:	4618      	mov	r0, r3
 8026bd2:	3710      	adds	r7, #16
 8026bd4:	46bd      	mov	sp, r7
 8026bd6:	bd80      	pop	{r7, pc}
 8026bd8:	0802a580 	.word	0x0802a580
 8026bdc:	20009a2c 	.word	0x20009a2c
 8026be0:	2000085c 	.word	0x2000085c
 8026be4:	20009a70 	.word	0x20009a70
 8026be8:	20008238 	.word	0x20008238
 8026bec:	20009cb8 	.word	0x20009cb8
 8026bf0:	20009698 	.word	0x20009698
 8026bf4:	000249f0 	.word	0x000249f0
 8026bf8:	0802a464 	.word	0x0802a464
 8026bfc:	20009b70 	.word	0x20009b70
 8026c00:	0802a53c 	.word	0x0802a53c

08026c04 <AT_QIDEACT>:

uint8_t AT_QIDEACT (void)
{
 8026c04:	b580      	push	{r7, lr}
 8026c06:	b084      	sub	sp, #16
 8026c08:	af00      	add	r7, sp, #0
	uint8_t str_out[11];
	sprintf(str_out, "AT+QIDEACT\n");
 8026c0a:	1d3b      	adds	r3, r7, #4
 8026c0c:	4928      	ldr	r1, [pc, #160]	; (8026cb0 <AT_QIDEACT+0xac>)
 8026c0e:	4618      	mov	r0, r3
 8026c10:	f002 fc80 	bl	8029514 <siprintf>
	read_rx_state = ACTIVE;
 8026c14:	4b27      	ldr	r3, [pc, #156]	; (8026cb4 <AT_QIDEACT+0xb0>)
 8026c16:	2201      	movs	r2, #1
 8026c18:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8026c1a:	4b27      	ldr	r3, [pc, #156]	; (8026cb8 <AT_QIDEACT+0xb4>)
 8026c1c:	2200      	movs	r2, #0
 8026c1e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8026c20:	f7ff f810 	bl	8025c44 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8026c24:	2201      	movs	r2, #1
 8026c26:	4925      	ldr	r1, [pc, #148]	; (8026cbc <AT_QIDEACT+0xb8>)
 8026c28:	4825      	ldr	r0, [pc, #148]	; (8026cc0 <AT_QIDEACT+0xbc>)
 8026c2a:	f7ee fe09 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 8026c2e:	1d3b      	adds	r3, r7, #4
 8026c30:	220b      	movs	r2, #11
 8026c32:	4619      	mov	r1, r3
 8026c34:	4822      	ldr	r0, [pc, #136]	; (8026cc0 <AT_QIDEACT+0xbc>)
 8026c36:	f7ee fd85 	bl	8015744 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8026c3a:	4b22      	ldr	r3, [pc, #136]	; (8026cc4 <AT_QIDEACT+0xc0>)
 8026c3c:	681b      	ldr	r3, [r3, #0]
 8026c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8026c42:	4618      	mov	r0, r3
 8026c44:	f7f0 f8f0 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 40000);
 8026c48:	4b1f      	ldr	r3, [pc, #124]	; (8026cc8 <AT_QIDEACT+0xc4>)
 8026c4a:	681b      	ldr	r3, [r3, #0]
 8026c4c:	f649 4140 	movw	r1, #40000	; 0x9c40
 8026c50:	4618      	mov	r0, r3
 8026c52:	f7ef ff8d 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8026c56:	e021      	b.n	8026c9c <AT_QIDEACT+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8026c58:	491c      	ldr	r1, [pc, #112]	; (8026ccc <AT_QIDEACT+0xc8>)
 8026c5a:	481d      	ldr	r0, [pc, #116]	; (8026cd0 <AT_QIDEACT+0xcc>)
 8026c5c:	f002 fcbd 	bl	80295da <strstr>
 8026c60:	4603      	mov	r3, r0
 8026c62:	2b00      	cmp	r3, #0
 8026c64:	d009      	beq.n	8026c7a <AT_QIDEACT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 8026c66:	4b18      	ldr	r3, [pc, #96]	; (8026cc8 <AT_QIDEACT+0xc4>)
 8026c68:	681b      	ldr	r3, [r3, #0]
 8026c6a:	4618      	mov	r0, r3
 8026c6c:	f7ef ffc4 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026c70:	4b10      	ldr	r3, [pc, #64]	; (8026cb4 <AT_QIDEACT+0xb0>)
 8026c72:	2200      	movs	r2, #0
 8026c74:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8026c76:	2300      	movs	r3, #0
 8026c78:	e015      	b.n	8026ca6 <AT_QIDEACT+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8026c7a:	4916      	ldr	r1, [pc, #88]	; (8026cd4 <AT_QIDEACT+0xd0>)
 8026c7c:	4814      	ldr	r0, [pc, #80]	; (8026cd0 <AT_QIDEACT+0xcc>)
 8026c7e:	f002 fcac 	bl	80295da <strstr>
 8026c82:	4603      	mov	r3, r0
 8026c84:	2b00      	cmp	r3, #0
 8026c86:	d009      	beq.n	8026c9c <AT_QIDEACT+0x98>
		{
			osTimerStop(AT_TimerHandle);
 8026c88:	4b0f      	ldr	r3, [pc, #60]	; (8026cc8 <AT_QIDEACT+0xc4>)
 8026c8a:	681b      	ldr	r3, [r3, #0]
 8026c8c:	4618      	mov	r0, r3
 8026c8e:	f7ef ffb3 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026c92:	4b08      	ldr	r3, [pc, #32]	; (8026cb4 <AT_QIDEACT+0xb0>)
 8026c94:	2200      	movs	r2, #0
 8026c96:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8026c98:	2301      	movs	r3, #1
 8026c9a:	e004      	b.n	8026ca6 <AT_QIDEACT+0xa2>
	while(read_rx_state == ACTIVE)
 8026c9c:	4b05      	ldr	r3, [pc, #20]	; (8026cb4 <AT_QIDEACT+0xb0>)
 8026c9e:	781b      	ldrb	r3, [r3, #0]
 8026ca0:	2b01      	cmp	r3, #1
 8026ca2:	d0d9      	beq.n	8026c58 <AT_QIDEACT+0x54>
		}

	}
	return AT_ERROR;
 8026ca4:	2301      	movs	r3, #1
}
 8026ca6:	4618      	mov	r0, r3
 8026ca8:	3710      	adds	r7, #16
 8026caa:	46bd      	mov	sp, r7
 8026cac:	bd80      	pop	{r7, pc}
 8026cae:	bf00      	nop
 8026cb0:	0802a58c 	.word	0x0802a58c
 8026cb4:	20009a2c 	.word	0x20009a2c
 8026cb8:	2000085c 	.word	0x2000085c
 8026cbc:	20009a70 	.word	0x20009a70
 8026cc0:	20008238 	.word	0x20008238
 8026cc4:	20009cb8 	.word	0x20009cb8
 8026cc8:	20009698 	.word	0x20009698
 8026ccc:	0802a464 	.word	0x0802a464
 8026cd0:	20009b70 	.word	0x20009b70
 8026cd4:	0802a53c 	.word	0x0802a53c

08026cd8 <AT_QISTATE>:

uint8_t AT_QISTATE (void)
{
 8026cd8:	b580      	push	{r7, lr}
 8026cda:	b084      	sub	sp, #16
 8026cdc:	af00      	add	r7, sp, #0
	uint8_t str_out[11];
	sprintf(str_out, "AT+QISTATE\n");
 8026cde:	1d3b      	adds	r3, r7, #4
 8026ce0:	497d      	ldr	r1, [pc, #500]	; (8026ed8 <AT_QISTATE+0x200>)
 8026ce2:	4618      	mov	r0, r3
 8026ce4:	f002 fc16 	bl	8029514 <siprintf>
	read_rx_state = ACTIVE;
 8026ce8:	4b7c      	ldr	r3, [pc, #496]	; (8026edc <AT_QISTATE+0x204>)
 8026cea:	2201      	movs	r2, #1
 8026cec:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8026cee:	4b7c      	ldr	r3, [pc, #496]	; (8026ee0 <AT_QISTATE+0x208>)
 8026cf0:	2200      	movs	r2, #0
 8026cf2:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8026cf4:	f7fe ffa6 	bl	8025c44 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8026cf8:	2201      	movs	r2, #1
 8026cfa:	497a      	ldr	r1, [pc, #488]	; (8026ee4 <AT_QISTATE+0x20c>)
 8026cfc:	487a      	ldr	r0, [pc, #488]	; (8026ee8 <AT_QISTATE+0x210>)
 8026cfe:	f7ee fd9f 	bl	8015840 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 8026d02:	1d3b      	adds	r3, r7, #4
 8026d04:	220b      	movs	r2, #11
 8026d06:	4619      	mov	r1, r3
 8026d08:	4877      	ldr	r0, [pc, #476]	; (8026ee8 <AT_QISTATE+0x210>)
 8026d0a:	f7ee fd1b 	bl	8015744 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8026d0e:	4b77      	ldr	r3, [pc, #476]	; (8026eec <AT_QISTATE+0x214>)
 8026d10:	681b      	ldr	r3, [r3, #0]
 8026d12:	f04f 31ff 	mov.w	r1, #4294967295
 8026d16:	4618      	mov	r0, r3
 8026d18:	f7f0 f886 	bl	8016e28 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 10000);
 8026d1c:	4b74      	ldr	r3, [pc, #464]	; (8026ef0 <AT_QISTATE+0x218>)
 8026d1e:	681b      	ldr	r3, [r3, #0]
 8026d20:	f242 7110 	movw	r1, #10000	; 0x2710
 8026d24:	4618      	mov	r0, r3
 8026d26:	f7ef ff23 	bl	8016b70 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8026d2a:	e0cb      	b.n	8026ec4 <AT_QISTATE+0x1ec>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "IP INITIAL\r\n") != NULL )
 8026d2c:	4971      	ldr	r1, [pc, #452]	; (8026ef4 <AT_QISTATE+0x21c>)
 8026d2e:	4872      	ldr	r0, [pc, #456]	; (8026ef8 <AT_QISTATE+0x220>)
 8026d30:	f002 fc53 	bl	80295da <strstr>
 8026d34:	4603      	mov	r3, r0
 8026d36:	2b00      	cmp	r3, #0
 8026d38:	d009      	beq.n	8026d4e <AT_QISTATE+0x76>
		{
			osTimerStop(AT_TimerHandle);
 8026d3a:	4b6d      	ldr	r3, [pc, #436]	; (8026ef0 <AT_QISTATE+0x218>)
 8026d3c:	681b      	ldr	r3, [r3, #0]
 8026d3e:	4618      	mov	r0, r3
 8026d40:	f7ef ff5a 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026d44:	4b65      	ldr	r3, [pc, #404]	; (8026edc <AT_QISTATE+0x204>)
 8026d46:	2200      	movs	r2, #0
 8026d48:	701a      	strb	r2, [r3, #0]
			return IP_INITIAL;
 8026d4a:	2302      	movs	r3, #2
 8026d4c:	e0c0      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP START\r\n") != NULL )
 8026d4e:	496b      	ldr	r1, [pc, #428]	; (8026efc <AT_QISTATE+0x224>)
 8026d50:	4869      	ldr	r0, [pc, #420]	; (8026ef8 <AT_QISTATE+0x220>)
 8026d52:	f002 fc42 	bl	80295da <strstr>
 8026d56:	4603      	mov	r3, r0
 8026d58:	2b00      	cmp	r3, #0
 8026d5a:	d009      	beq.n	8026d70 <AT_QISTATE+0x98>
		{
			osTimerStop(AT_TimerHandle);
 8026d5c:	4b64      	ldr	r3, [pc, #400]	; (8026ef0 <AT_QISTATE+0x218>)
 8026d5e:	681b      	ldr	r3, [r3, #0]
 8026d60:	4618      	mov	r0, r3
 8026d62:	f7ef ff49 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026d66:	4b5d      	ldr	r3, [pc, #372]	; (8026edc <AT_QISTATE+0x204>)
 8026d68:	2200      	movs	r2, #0
 8026d6a:	701a      	strb	r2, [r3, #0]
			return IP_START;
 8026d6c:	2303      	movs	r3, #3
 8026d6e:	e0af      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP CONFIG\r\n") != NULL )
 8026d70:	4963      	ldr	r1, [pc, #396]	; (8026f00 <AT_QISTATE+0x228>)
 8026d72:	4861      	ldr	r0, [pc, #388]	; (8026ef8 <AT_QISTATE+0x220>)
 8026d74:	f002 fc31 	bl	80295da <strstr>
 8026d78:	4603      	mov	r3, r0
 8026d7a:	2b00      	cmp	r3, #0
 8026d7c:	d009      	beq.n	8026d92 <AT_QISTATE+0xba>
		{
			osTimerStop(AT_TimerHandle);
 8026d7e:	4b5c      	ldr	r3, [pc, #368]	; (8026ef0 <AT_QISTATE+0x218>)
 8026d80:	681b      	ldr	r3, [r3, #0]
 8026d82:	4618      	mov	r0, r3
 8026d84:	f7ef ff38 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026d88:	4b54      	ldr	r3, [pc, #336]	; (8026edc <AT_QISTATE+0x204>)
 8026d8a:	2200      	movs	r2, #0
 8026d8c:	701a      	strb	r2, [r3, #0]
			return IP_CONFIG;
 8026d8e:	2304      	movs	r3, #4
 8026d90:	e09e      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP IND\r\n") != NULL )
 8026d92:	495c      	ldr	r1, [pc, #368]	; (8026f04 <AT_QISTATE+0x22c>)
 8026d94:	4858      	ldr	r0, [pc, #352]	; (8026ef8 <AT_QISTATE+0x220>)
 8026d96:	f002 fc20 	bl	80295da <strstr>
 8026d9a:	4603      	mov	r3, r0
 8026d9c:	2b00      	cmp	r3, #0
 8026d9e:	d009      	beq.n	8026db4 <AT_QISTATE+0xdc>
		{
			osTimerStop(AT_TimerHandle);
 8026da0:	4b53      	ldr	r3, [pc, #332]	; (8026ef0 <AT_QISTATE+0x218>)
 8026da2:	681b      	ldr	r3, [r3, #0]
 8026da4:	4618      	mov	r0, r3
 8026da6:	f7ef ff27 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026daa:	4b4c      	ldr	r3, [pc, #304]	; (8026edc <AT_QISTATE+0x204>)
 8026dac:	2200      	movs	r2, #0
 8026dae:	701a      	strb	r2, [r3, #0]
			return IP_IND;
 8026db0:	2305      	movs	r3, #5
 8026db2:	e08d      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP GPRSACT\r\n") != NULL )
 8026db4:	4954      	ldr	r1, [pc, #336]	; (8026f08 <AT_QISTATE+0x230>)
 8026db6:	4850      	ldr	r0, [pc, #320]	; (8026ef8 <AT_QISTATE+0x220>)
 8026db8:	f002 fc0f 	bl	80295da <strstr>
 8026dbc:	4603      	mov	r3, r0
 8026dbe:	2b00      	cmp	r3, #0
 8026dc0:	d009      	beq.n	8026dd6 <AT_QISTATE+0xfe>
		{
			osTimerStop(AT_TimerHandle);
 8026dc2:	4b4b      	ldr	r3, [pc, #300]	; (8026ef0 <AT_QISTATE+0x218>)
 8026dc4:	681b      	ldr	r3, [r3, #0]
 8026dc6:	4618      	mov	r0, r3
 8026dc8:	f7ef ff16 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026dcc:	4b43      	ldr	r3, [pc, #268]	; (8026edc <AT_QISTATE+0x204>)
 8026dce:	2200      	movs	r2, #0
 8026dd0:	701a      	strb	r2, [r3, #0]
			return IP_GPRSACT;
 8026dd2:	2306      	movs	r3, #6
 8026dd4:	e07c      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP STATUS\r\n") != NULL )
 8026dd6:	494d      	ldr	r1, [pc, #308]	; (8026f0c <AT_QISTATE+0x234>)
 8026dd8:	4847      	ldr	r0, [pc, #284]	; (8026ef8 <AT_QISTATE+0x220>)
 8026dda:	f002 fbfe 	bl	80295da <strstr>
 8026dde:	4603      	mov	r3, r0
 8026de0:	2b00      	cmp	r3, #0
 8026de2:	d009      	beq.n	8026df8 <AT_QISTATE+0x120>
		{
			osTimerStop(AT_TimerHandle);
 8026de4:	4b42      	ldr	r3, [pc, #264]	; (8026ef0 <AT_QISTATE+0x218>)
 8026de6:	681b      	ldr	r3, [r3, #0]
 8026de8:	4618      	mov	r0, r3
 8026dea:	f7ef ff05 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026dee:	4b3b      	ldr	r3, [pc, #236]	; (8026edc <AT_QISTATE+0x204>)
 8026df0:	2200      	movs	r2, #0
 8026df2:	701a      	strb	r2, [r3, #0]
			return IP_STATUS;
 8026df4:	2307      	movs	r3, #7
 8026df6:	e06b      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "TCP CONNECTING\r\n") != NULL )
 8026df8:	4945      	ldr	r1, [pc, #276]	; (8026f10 <AT_QISTATE+0x238>)
 8026dfa:	483f      	ldr	r0, [pc, #252]	; (8026ef8 <AT_QISTATE+0x220>)
 8026dfc:	f002 fbed 	bl	80295da <strstr>
 8026e00:	4603      	mov	r3, r0
 8026e02:	2b00      	cmp	r3, #0
 8026e04:	d009      	beq.n	8026e1a <AT_QISTATE+0x142>
		{
			osTimerStop(AT_TimerHandle);
 8026e06:	4b3a      	ldr	r3, [pc, #232]	; (8026ef0 <AT_QISTATE+0x218>)
 8026e08:	681b      	ldr	r3, [r3, #0]
 8026e0a:	4618      	mov	r0, r3
 8026e0c:	f7ef fef4 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026e10:	4b32      	ldr	r3, [pc, #200]	; (8026edc <AT_QISTATE+0x204>)
 8026e12:	2200      	movs	r2, #0
 8026e14:	701a      	strb	r2, [r3, #0]
			return TCP_CONNECTING;
 8026e16:	2308      	movs	r3, #8
 8026e18:	e05a      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "UDP CONNECTING\r\n") != NULL )
 8026e1a:	493e      	ldr	r1, [pc, #248]	; (8026f14 <AT_QISTATE+0x23c>)
 8026e1c:	4836      	ldr	r0, [pc, #216]	; (8026ef8 <AT_QISTATE+0x220>)
 8026e1e:	f002 fbdc 	bl	80295da <strstr>
 8026e22:	4603      	mov	r3, r0
 8026e24:	2b00      	cmp	r3, #0
 8026e26:	d009      	beq.n	8026e3c <AT_QISTATE+0x164>
		{
			osTimerStop(AT_TimerHandle);
 8026e28:	4b31      	ldr	r3, [pc, #196]	; (8026ef0 <AT_QISTATE+0x218>)
 8026e2a:	681b      	ldr	r3, [r3, #0]
 8026e2c:	4618      	mov	r0, r3
 8026e2e:	f7ef fee3 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026e32:	4b2a      	ldr	r3, [pc, #168]	; (8026edc <AT_QISTATE+0x204>)
 8026e34:	2200      	movs	r2, #0
 8026e36:	701a      	strb	r2, [r3, #0]
			return UDP_CONNECTING;
 8026e38:	2309      	movs	r3, #9
 8026e3a:	e049      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP CLOSE\r\n") != NULL )
 8026e3c:	4936      	ldr	r1, [pc, #216]	; (8026f18 <AT_QISTATE+0x240>)
 8026e3e:	482e      	ldr	r0, [pc, #184]	; (8026ef8 <AT_QISTATE+0x220>)
 8026e40:	f002 fbcb 	bl	80295da <strstr>
 8026e44:	4603      	mov	r3, r0
 8026e46:	2b00      	cmp	r3, #0
 8026e48:	d009      	beq.n	8026e5e <AT_QISTATE+0x186>
		{
			osTimerStop(AT_TimerHandle);
 8026e4a:	4b29      	ldr	r3, [pc, #164]	; (8026ef0 <AT_QISTATE+0x218>)
 8026e4c:	681b      	ldr	r3, [r3, #0]
 8026e4e:	4618      	mov	r0, r3
 8026e50:	f7ef fed2 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026e54:	4b21      	ldr	r3, [pc, #132]	; (8026edc <AT_QISTATE+0x204>)
 8026e56:	2200      	movs	r2, #0
 8026e58:	701a      	strb	r2, [r3, #0]
			return IP_CLOSE;
 8026e5a:	230a      	movs	r3, #10
 8026e5c:	e038      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL )
 8026e5e:	492f      	ldr	r1, [pc, #188]	; (8026f1c <AT_QISTATE+0x244>)
 8026e60:	4825      	ldr	r0, [pc, #148]	; (8026ef8 <AT_QISTATE+0x220>)
 8026e62:	f002 fbba 	bl	80295da <strstr>
 8026e66:	4603      	mov	r3, r0
 8026e68:	2b00      	cmp	r3, #0
 8026e6a:	d009      	beq.n	8026e80 <AT_QISTATE+0x1a8>
		{
			osTimerStop(AT_TimerHandle);
 8026e6c:	4b20      	ldr	r3, [pc, #128]	; (8026ef0 <AT_QISTATE+0x218>)
 8026e6e:	681b      	ldr	r3, [r3, #0]
 8026e70:	4618      	mov	r0, r3
 8026e72:	f7ef fec1 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026e76:	4b19      	ldr	r3, [pc, #100]	; (8026edc <AT_QISTATE+0x204>)
 8026e78:	2200      	movs	r2, #0
 8026e7a:	701a      	strb	r2, [r3, #0]
			return CONNECT_OK;
 8026e7c:	230b      	movs	r3, #11
 8026e7e:	e027      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "PDP DEACT\r\n") != NULL )
 8026e80:	4927      	ldr	r1, [pc, #156]	; (8026f20 <AT_QISTATE+0x248>)
 8026e82:	481d      	ldr	r0, [pc, #116]	; (8026ef8 <AT_QISTATE+0x220>)
 8026e84:	f002 fba9 	bl	80295da <strstr>
 8026e88:	4603      	mov	r3, r0
 8026e8a:	2b00      	cmp	r3, #0
 8026e8c:	d009      	beq.n	8026ea2 <AT_QISTATE+0x1ca>
		{
			osTimerStop(AT_TimerHandle);
 8026e8e:	4b18      	ldr	r3, [pc, #96]	; (8026ef0 <AT_QISTATE+0x218>)
 8026e90:	681b      	ldr	r3, [r3, #0]
 8026e92:	4618      	mov	r0, r3
 8026e94:	f7ef feb0 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026e98:	4b10      	ldr	r3, [pc, #64]	; (8026edc <AT_QISTATE+0x204>)
 8026e9a:	2200      	movs	r2, #0
 8026e9c:	701a      	strb	r2, [r3, #0]
			return PDP_DEACT;
 8026e9e:	230c      	movs	r3, #12
 8026ea0:	e016      	b.n	8026ed0 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8026ea2:	4920      	ldr	r1, [pc, #128]	; (8026f24 <AT_QISTATE+0x24c>)
 8026ea4:	4814      	ldr	r0, [pc, #80]	; (8026ef8 <AT_QISTATE+0x220>)
 8026ea6:	f002 fb98 	bl	80295da <strstr>
 8026eaa:	4603      	mov	r3, r0
 8026eac:	2b00      	cmp	r3, #0
 8026eae:	d009      	beq.n	8026ec4 <AT_QISTATE+0x1ec>
		{
			osTimerStop(AT_TimerHandle);
 8026eb0:	4b0f      	ldr	r3, [pc, #60]	; (8026ef0 <AT_QISTATE+0x218>)
 8026eb2:	681b      	ldr	r3, [r3, #0]
 8026eb4:	4618      	mov	r0, r3
 8026eb6:	f7ef fe9f 	bl	8016bf8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8026eba:	4b08      	ldr	r3, [pc, #32]	; (8026edc <AT_QISTATE+0x204>)
 8026ebc:	2200      	movs	r2, #0
 8026ebe:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8026ec0:	2301      	movs	r3, #1
 8026ec2:	e005      	b.n	8026ed0 <AT_QISTATE+0x1f8>
	while(read_rx_state == ACTIVE)
 8026ec4:	4b05      	ldr	r3, [pc, #20]	; (8026edc <AT_QISTATE+0x204>)
 8026ec6:	781b      	ldrb	r3, [r3, #0]
 8026ec8:	2b01      	cmp	r3, #1
 8026eca:	f43f af2f 	beq.w	8026d2c <AT_QISTATE+0x54>
		}

	}
	return AT_ERROR;
 8026ece:	2301      	movs	r3, #1
}
 8026ed0:	4618      	mov	r0, r3
 8026ed2:	3710      	adds	r7, #16
 8026ed4:	46bd      	mov	sp, r7
 8026ed6:	bd80      	pop	{r7, pc}
 8026ed8:	0802a598 	.word	0x0802a598
 8026edc:	20009a2c 	.word	0x20009a2c
 8026ee0:	2000085c 	.word	0x2000085c
 8026ee4:	20009a70 	.word	0x20009a70
 8026ee8:	20008238 	.word	0x20008238
 8026eec:	20009cb8 	.word	0x20009cb8
 8026ef0:	20009698 	.word	0x20009698
 8026ef4:	0802a5a4 	.word	0x0802a5a4
 8026ef8:	20009b70 	.word	0x20009b70
 8026efc:	0802a5b4 	.word	0x0802a5b4
 8026f00:	0802a5c0 	.word	0x0802a5c0
 8026f04:	0802a5cc 	.word	0x0802a5cc
 8026f08:	0802a5d8 	.word	0x0802a5d8
 8026f0c:	0802a5e8 	.word	0x0802a5e8
 8026f10:	0802a5f4 	.word	0x0802a5f4
 8026f14:	0802a608 	.word	0x0802a608
 8026f18:	0802a61c 	.word	0x0802a61c
 8026f1c:	0802a4cc 	.word	0x0802a4cc
 8026f20:	0802a628 	.word	0x0802a628
 8026f24:	0802a53c 	.word	0x0802a53c

08026f28 <request_to_server>:
	}
	return AT_ERROR;
}

uint8_t request_to_server() // функция запроса к серверу, чтобы тот прочитал регистры из устройства
{
 8026f28:	b580      	push	{r7, lr}
 8026f2a:	b082      	sub	sp, #8
 8026f2c:	af00      	add	r7, sp, #0
	uint8_t send_out[5] = {0x01, 0x02, 0x03, 0x04, 0x05};
 8026f2e:	4a0b      	ldr	r2, [pc, #44]	; (8026f5c <request_to_server+0x34>)
 8026f30:	463b      	mov	r3, r7
 8026f32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026f36:	6018      	str	r0, [r3, #0]
 8026f38:	3304      	adds	r3, #4
 8026f3a:	7019      	strb	r1, [r3, #0]

	if( AT_QISEND(&send_out[0], 5) == AT_OK )
 8026f3c:	463b      	mov	r3, r7
 8026f3e:	2105      	movs	r1, #5
 8026f40:	4618      	mov	r0, r3
 8026f42:	f7ff fc77 	bl	8026834 <AT_QISEND>
 8026f46:	4603      	mov	r3, r0
 8026f48:	2b00      	cmp	r3, #0
 8026f4a:	d101      	bne.n	8026f50 <request_to_server+0x28>
	{
		return AT_OK;
 8026f4c:	2300      	movs	r3, #0
 8026f4e:	e000      	b.n	8026f52 <request_to_server+0x2a>
	}

	return AT_ERROR;
 8026f50:	2301      	movs	r3, #1
}
 8026f52:	4618      	mov	r0, r3
 8026f54:	3708      	adds	r7, #8
 8026f56:	46bd      	mov	sp, r7
 8026f58:	bd80      	pop	{r7, pc}
 8026f5a:	bf00      	nop
 8026f5c:	0802a68c 	.word	0x0802a68c

08026f60 <read_status_registers>:
control_register_struct control_registers;
bootloader_register_struct bootloader_registers;

//----функция чтения из памяти регистров статуса--------------------------
void read_status_registers(void)
{
 8026f60:	b580      	push	{r7, lr}
 8026f62:	b082      	sub	sp, #8
 8026f64:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8026f66:	4bbc      	ldr	r3, [pc, #752]	; (8027258 <read_status_registers+0x2f8>)
 8026f68:	681b      	ldr	r3, [r3, #0]
 8026f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8026f6e:	4618      	mov	r0, r3
 8026f70:	f7ef fe96 	bl	8016ca0 <osMutexWait>

	fm25v02_read(2*VERSION_REG, &status_reg_temp_h);
 8026f74:	1dfb      	adds	r3, r7, #7
 8026f76:	4619      	mov	r1, r3
 8026f78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8026f7c:	f7fe fa28 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*VERSION_REG+1, &status_reg_temp_l);
 8026f80:	1dbb      	adds	r3, r7, #6
 8026f82:	4619      	mov	r1, r3
 8026f84:	f242 0001 	movw	r0, #8193	; 0x2001
 8026f88:	f7fe fa22 	bl	80253d0 <fm25v02_read>
	status_registers.version_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8026f8c:	79fb      	ldrb	r3, [r7, #7]
 8026f8e:	021b      	lsls	r3, r3, #8
 8026f90:	b21a      	sxth	r2, r3
 8026f92:	79bb      	ldrb	r3, [r7, #6]
 8026f94:	b21b      	sxth	r3, r3
 8026f96:	4313      	orrs	r3, r2
 8026f98:	b21b      	sxth	r3, r3
 8026f9a:	b29a      	uxth	r2, r3
 8026f9c:	4baf      	ldr	r3, [pc, #700]	; (802725c <read_status_registers+0x2fc>)
 8026f9e:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*SECURITY_STATUS_REG, &status_reg_temp_h);
 8026fa0:	1dfb      	adds	r3, r7, #7
 8026fa2:	4619      	mov	r1, r3
 8026fa4:	f242 0002 	movw	r0, #8194	; 0x2002
 8026fa8:	f7fe fa12 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*SECURITY_STATUS_REG+1, &status_reg_temp_l);
 8026fac:	1dbb      	adds	r3, r7, #6
 8026fae:	4619      	mov	r1, r3
 8026fb0:	f242 0003 	movw	r0, #8195	; 0x2003
 8026fb4:	f7fe fa0c 	bl	80253d0 <fm25v02_read>
	status_registers.security_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8026fb8:	79fb      	ldrb	r3, [r7, #7]
 8026fba:	021b      	lsls	r3, r3, #8
 8026fbc:	b21a      	sxth	r2, r3
 8026fbe:	79bb      	ldrb	r3, [r7, #6]
 8026fc0:	b21b      	sxth	r3, r3
 8026fc2:	4313      	orrs	r3, r2
 8026fc4:	b21b      	sxth	r3, r3
 8026fc6:	b29a      	uxth	r2, r3
 8026fc8:	4ba4      	ldr	r3, [pc, #656]	; (802725c <read_status_registers+0x2fc>)
 8026fca:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*STATUS_LOOP_REG, &status_reg_temp_h);
 8026fcc:	1dfb      	adds	r3, r7, #7
 8026fce:	4619      	mov	r1, r3
 8026fd0:	f242 0004 	movw	r0, #8196	; 0x2004
 8026fd4:	f7fe f9fc 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*STATUS_LOOP_REG+1, &status_reg_temp_l);
 8026fd8:	1dbb      	adds	r3, r7, #6
 8026fda:	4619      	mov	r1, r3
 8026fdc:	f242 0005 	movw	r0, #8197	; 0x2005
 8026fe0:	f7fe f9f6 	bl	80253d0 <fm25v02_read>
	status_registers.status_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8026fe4:	79fb      	ldrb	r3, [r7, #7]
 8026fe6:	021b      	lsls	r3, r3, #8
 8026fe8:	b21a      	sxth	r2, r3
 8026fea:	79bb      	ldrb	r3, [r7, #6]
 8026fec:	b21b      	sxth	r3, r3
 8026fee:	4313      	orrs	r3, r2
 8026ff0:	b21b      	sxth	r3, r3
 8026ff2:	b29a      	uxth	r2, r3
 8026ff4:	4b99      	ldr	r3, [pc, #612]	; (802725c <read_status_registers+0x2fc>)
 8026ff6:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*ERROR_LOOP_REG, &status_reg_temp_h);
 8026ff8:	1dfb      	adds	r3, r7, #7
 8026ffa:	4619      	mov	r1, r3
 8026ffc:	f242 0006 	movw	r0, #8198	; 0x2006
 8027000:	f7fe f9e6 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ERROR_LOOP_REG+1, &status_reg_temp_l);
 8027004:	1dbb      	adds	r3, r7, #6
 8027006:	4619      	mov	r1, r3
 8027008:	f242 0007 	movw	r0, #8199	; 0x2007
 802700c:	f7fe f9e0 	bl	80253d0 <fm25v02_read>
	status_registers.error_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027010:	79fb      	ldrb	r3, [r7, #7]
 8027012:	021b      	lsls	r3, r3, #8
 8027014:	b21a      	sxth	r2, r3
 8027016:	79bb      	ldrb	r3, [r7, #6]
 8027018:	b21b      	sxth	r3, r3
 802701a:	4313      	orrs	r3, r2
 802701c:	b21b      	sxth	r3, r3
 802701e:	b29a      	uxth	r2, r3
 8027020:	4b8e      	ldr	r3, [pc, #568]	; (802725c <read_status_registers+0x2fc>)
 8027022:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*ALARM_LOOP_REG, &status_reg_temp_h);
 8027024:	1dfb      	adds	r3, r7, #7
 8027026:	4619      	mov	r1, r3
 8027028:	f242 0008 	movw	r0, #8200	; 0x2008
 802702c:	f7fe f9d0 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_REG+1, &status_reg_temp_l);
 8027030:	1dbb      	adds	r3, r7, #6
 8027032:	4619      	mov	r1, r3
 8027034:	f242 0009 	movw	r0, #8201	; 0x2009
 8027038:	f7fe f9ca 	bl	80253d0 <fm25v02_read>
	status_registers.alarm_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802703c:	79fb      	ldrb	r3, [r7, #7]
 802703e:	021b      	lsls	r3, r3, #8
 8027040:	b21a      	sxth	r2, r3
 8027042:	79bb      	ldrb	r3, [r7, #6]
 8027044:	b21b      	sxth	r3, r3
 8027046:	4313      	orrs	r3, r2
 8027048:	b21b      	sxth	r3, r3
 802704a:	b29a      	uxth	r2, r3
 802704c:	4b83      	ldr	r3, [pc, #524]	; (802725c <read_status_registers+0x2fc>)
 802704e:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*TIME_CURRENT_YEAR_REG, &status_reg_temp_h);
 8027050:	1dfb      	adds	r3, r7, #7
 8027052:	4619      	mov	r1, r3
 8027054:	f242 000a 	movw	r0, #8202	; 0x200a
 8027058:	f7fe f9ba 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &status_reg_temp_l);
 802705c:	1dbb      	adds	r3, r7, #6
 802705e:	4619      	mov	r1, r3
 8027060:	f242 000b 	movw	r0, #8203	; 0x200b
 8027064:	f7fe f9b4 	bl	80253d0 <fm25v02_read>
	status_registers.time_current_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027068:	79fb      	ldrb	r3, [r7, #7]
 802706a:	021b      	lsls	r3, r3, #8
 802706c:	b21a      	sxth	r2, r3
 802706e:	79bb      	ldrb	r3, [r7, #6]
 8027070:	b21b      	sxth	r3, r3
 8027072:	4313      	orrs	r3, r2
 8027074:	b21b      	sxth	r3, r3
 8027076:	b29a      	uxth	r2, r3
 8027078:	4b78      	ldr	r3, [pc, #480]	; (802725c <read_status_registers+0x2fc>)
 802707a:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*TIME_CURRENT_MONTH_REG, &status_reg_temp_h);
 802707c:	1dfb      	adds	r3, r7, #7
 802707e:	4619      	mov	r1, r3
 8027080:	f242 000c 	movw	r0, #8204	; 0x200c
 8027084:	f7fe f9a4 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &status_reg_temp_l);
 8027088:	1dbb      	adds	r3, r7, #6
 802708a:	4619      	mov	r1, r3
 802708c:	f242 000d 	movw	r0, #8205	; 0x200d
 8027090:	f7fe f99e 	bl	80253d0 <fm25v02_read>
	status_registers.time_current_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027094:	79fb      	ldrb	r3, [r7, #7]
 8027096:	021b      	lsls	r3, r3, #8
 8027098:	b21a      	sxth	r2, r3
 802709a:	79bb      	ldrb	r3, [r7, #6]
 802709c:	b21b      	sxth	r3, r3
 802709e:	4313      	orrs	r3, r2
 80270a0:	b21b      	sxth	r3, r3
 80270a2:	b29a      	uxth	r2, r3
 80270a4:	4b6d      	ldr	r3, [pc, #436]	; (802725c <read_status_registers+0x2fc>)
 80270a6:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*TIME_CURRENT_DAY_REG, &status_reg_temp_h);
 80270a8:	1dfb      	adds	r3, r7, #7
 80270aa:	4619      	mov	r1, r3
 80270ac:	f242 000e 	movw	r0, #8206	; 0x200e
 80270b0:	f7fe f98e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &status_reg_temp_l);
 80270b4:	1dbb      	adds	r3, r7, #6
 80270b6:	4619      	mov	r1, r3
 80270b8:	f242 000f 	movw	r0, #8207	; 0x200f
 80270bc:	f7fe f988 	bl	80253d0 <fm25v02_read>
	status_registers.time_current_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80270c0:	79fb      	ldrb	r3, [r7, #7]
 80270c2:	021b      	lsls	r3, r3, #8
 80270c4:	b21a      	sxth	r2, r3
 80270c6:	79bb      	ldrb	r3, [r7, #6]
 80270c8:	b21b      	sxth	r3, r3
 80270ca:	4313      	orrs	r3, r2
 80270cc:	b21b      	sxth	r3, r3
 80270ce:	b29a      	uxth	r2, r3
 80270d0:	4b62      	ldr	r3, [pc, #392]	; (802725c <read_status_registers+0x2fc>)
 80270d2:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_CURRENT_HOUR_REG, &status_reg_temp_h);
 80270d4:	1dfb      	adds	r3, r7, #7
 80270d6:	4619      	mov	r1, r3
 80270d8:	f242 0010 	movw	r0, #8208	; 0x2010
 80270dc:	f7fe f978 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &status_reg_temp_l);
 80270e0:	1dbb      	adds	r3, r7, #6
 80270e2:	4619      	mov	r1, r3
 80270e4:	f242 0011 	movw	r0, #8209	; 0x2011
 80270e8:	f7fe f972 	bl	80253d0 <fm25v02_read>
	status_registers.time_current_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80270ec:	79fb      	ldrb	r3, [r7, #7]
 80270ee:	021b      	lsls	r3, r3, #8
 80270f0:	b21a      	sxth	r2, r3
 80270f2:	79bb      	ldrb	r3, [r7, #6]
 80270f4:	b21b      	sxth	r3, r3
 80270f6:	4313      	orrs	r3, r2
 80270f8:	b21b      	sxth	r3, r3
 80270fa:	b29a      	uxth	r2, r3
 80270fc:	4b57      	ldr	r3, [pc, #348]	; (802725c <read_status_registers+0x2fc>)
 80270fe:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_CURRENT_MINUTE_REG, &status_reg_temp_h);
 8027100:	1dfb      	adds	r3, r7, #7
 8027102:	4619      	mov	r1, r3
 8027104:	f242 0012 	movw	r0, #8210	; 0x2012
 8027108:	f7fe f962 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &status_reg_temp_l);
 802710c:	1dbb      	adds	r3, r7, #6
 802710e:	4619      	mov	r1, r3
 8027110:	f242 0013 	movw	r0, #8211	; 0x2013
 8027114:	f7fe f95c 	bl	80253d0 <fm25v02_read>
	status_registers.time_current_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027118:	79fb      	ldrb	r3, [r7, #7]
 802711a:	021b      	lsls	r3, r3, #8
 802711c:	b21a      	sxth	r2, r3
 802711e:	79bb      	ldrb	r3, [r7, #6]
 8027120:	b21b      	sxth	r3, r3
 8027122:	4313      	orrs	r3, r2
 8027124:	b21b      	sxth	r3, r3
 8027126:	b29a      	uxth	r2, r3
 8027128:	4b4c      	ldr	r3, [pc, #304]	; (802725c <read_status_registers+0x2fc>)
 802712a:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_CURRENT_SECOND_REG, &status_reg_temp_h);
 802712c:	1dfb      	adds	r3, r7, #7
 802712e:	4619      	mov	r1, r3
 8027130:	f242 0014 	movw	r0, #8212	; 0x2014
 8027134:	f7fe f94c 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &status_reg_temp_l);
 8027138:	1dbb      	adds	r3, r7, #6
 802713a:	4619      	mov	r1, r3
 802713c:	f242 0015 	movw	r0, #8213	; 0x2015
 8027140:	f7fe f946 	bl	80253d0 <fm25v02_read>
	status_registers.time_current_second_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027144:	79fb      	ldrb	r3, [r7, #7]
 8027146:	021b      	lsls	r3, r3, #8
 8027148:	b21a      	sxth	r2, r3
 802714a:	79bb      	ldrb	r3, [r7, #6]
 802714c:	b21b      	sxth	r3, r3
 802714e:	4313      	orrs	r3, r2
 8027150:	b21b      	sxth	r3, r3
 8027152:	b29a      	uxth	r2, r3
 8027154:	4b41      	ldr	r3, [pc, #260]	; (802725c <read_status_registers+0x2fc>)
 8027156:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG, &status_reg_temp_h);
 8027158:	1dfb      	adds	r3, r7, #7
 802715a:	4619      	mov	r1, r3
 802715c:	f242 0016 	movw	r0, #8214	; 0x2016
 8027160:	f7fe f936 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG+1, &status_reg_temp_l);
 8027164:	1dbb      	adds	r3, r7, #6
 8027166:	4619      	mov	r1, r3
 8027168:	f242 0017 	movw	r0, #8215	; 0x2017
 802716c:	f7fe f930 	bl	80253d0 <fm25v02_read>
	status_registers.time_current_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027170:	79fb      	ldrb	r3, [r7, #7]
 8027172:	021b      	lsls	r3, r3, #8
 8027174:	b21a      	sxth	r2, r3
 8027176:	79bb      	ldrb	r3, [r7, #6]
 8027178:	b21b      	sxth	r3, r3
 802717a:	4313      	orrs	r3, r2
 802717c:	b21b      	sxth	r3, r3
 802717e:	b29a      	uxth	r2, r3
 8027180:	4b36      	ldr	r3, [pc, #216]	; (802725c <read_status_registers+0x2fc>)
 8027182:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG, &status_reg_temp_h);
 8027184:	1dfb      	adds	r3, r7, #7
 8027186:	4619      	mov	r1, r3
 8027188:	f242 0018 	movw	r0, #8216	; 0x2018
 802718c:	f7fe f920 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG+1, &status_reg_temp_l);
 8027190:	1dbb      	adds	r3, r7, #6
 8027192:	4619      	mov	r1, r3
 8027194:	f242 0019 	movw	r0, #8217	; 0x2019
 8027198:	f7fe f91a 	bl	80253d0 <fm25v02_read>
	status_registers.address_processed_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802719c:	79fb      	ldrb	r3, [r7, #7]
 802719e:	021b      	lsls	r3, r3, #8
 80271a0:	b21a      	sxth	r2, r3
 80271a2:	79bb      	ldrb	r3, [r7, #6]
 80271a4:	b21b      	sxth	r3, r3
 80271a6:	4313      	orrs	r3, r2
 80271a8:	b21b      	sxth	r3, r3
 80271aa:	b29a      	uxth	r2, r3
 80271ac:	4b2b      	ldr	r3, [pc, #172]	; (802725c <read_status_registers+0x2fc>)
 80271ae:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG, &status_reg_temp_h);
 80271b0:	1dfb      	adds	r3, r7, #7
 80271b2:	4619      	mov	r1, r3
 80271b4:	f242 001a 	movw	r0, #8218	; 0x201a
 80271b8:	f7fe f90a 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG+1, &status_reg_temp_l);
 80271bc:	1dbb      	adds	r3, r7, #6
 80271be:	4619      	mov	r1, r3
 80271c0:	f242 001b 	movw	r0, #8219	; 0x201b
 80271c4:	f7fe f904 	bl	80253d0 <fm25v02_read>
	status_registers.address_processed_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80271c8:	79fb      	ldrb	r3, [r7, #7]
 80271ca:	021b      	lsls	r3, r3, #8
 80271cc:	b21a      	sxth	r2, r3
 80271ce:	79bb      	ldrb	r3, [r7, #6]
 80271d0:	b21b      	sxth	r3, r3
 80271d2:	4313      	orrs	r3, r2
 80271d4:	b21b      	sxth	r3, r3
 80271d6:	b29a      	uxth	r2, r3
 80271d8:	4b20      	ldr	r3, [pc, #128]	; (802725c <read_status_registers+0x2fc>)
 80271da:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG, &status_reg_temp_h);
 80271dc:	1dfb      	adds	r3, r7, #7
 80271de:	4619      	mov	r1, r3
 80271e0:	f242 001c 	movw	r0, #8220	; 0x201c
 80271e4:	f7fe f8f4 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &status_reg_temp_l);
 80271e8:	1dbb      	adds	r3, r7, #6
 80271ea:	4619      	mov	r1, r3
 80271ec:	f242 001d 	movw	r0, #8221	; 0x201d
 80271f0:	f7fe f8ee 	bl	80253d0 <fm25v02_read>
	status_registers.address_last_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80271f4:	79fb      	ldrb	r3, [r7, #7]
 80271f6:	021b      	lsls	r3, r3, #8
 80271f8:	b21a      	sxth	r2, r3
 80271fa:	79bb      	ldrb	r3, [r7, #6]
 80271fc:	b21b      	sxth	r3, r3
 80271fe:	4313      	orrs	r3, r2
 8027200:	b21b      	sxth	r3, r3
 8027202:	b29a      	uxth	r2, r3
 8027204:	4b15      	ldr	r3, [pc, #84]	; (802725c <read_status_registers+0x2fc>)
 8027206:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG, &status_reg_temp_h);
 8027208:	1dfb      	adds	r3, r7, #7
 802720a:	4619      	mov	r1, r3
 802720c:	f242 001e 	movw	r0, #8222	; 0x201e
 8027210:	f7fe f8de 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &status_reg_temp_l);
 8027214:	1dbb      	adds	r3, r7, #6
 8027216:	4619      	mov	r1, r3
 8027218:	f242 001f 	movw	r0, #8223	; 0x201f
 802721c:	f7fe f8d8 	bl	80253d0 <fm25v02_read>
	status_registers.address_last_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027220:	79fb      	ldrb	r3, [r7, #7]
 8027222:	021b      	lsls	r3, r3, #8
 8027224:	b21a      	sxth	r2, r3
 8027226:	79bb      	ldrb	r3, [r7, #6]
 8027228:	b21b      	sxth	r3, r3
 802722a:	4313      	orrs	r3, r2
 802722c:	b21b      	sxth	r3, r3
 802722e:	b29a      	uxth	r2, r3
 8027230:	4b0a      	ldr	r3, [pc, #40]	; (802725c <read_status_registers+0x2fc>)
 8027232:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*SYSTEM_STATUS_REG, &status_reg_temp_h);
 8027234:	1dfb      	adds	r3, r7, #7
 8027236:	4619      	mov	r1, r3
 8027238:	f242 0020 	movw	r0, #8224	; 0x2020
 802723c:	f7fe f8c8 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*SYSTEM_STATUS_REG+1, &status_reg_temp_l);
 8027240:	1dbb      	adds	r3, r7, #6
 8027242:	4619      	mov	r1, r3
 8027244:	f242 0021 	movw	r0, #8225	; 0x2021
 8027248:	f7fe f8c2 	bl	80253d0 <fm25v02_read>
	status_registers.system_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802724c:	79fb      	ldrb	r3, [r7, #7]
 802724e:	021b      	lsls	r3, r3, #8
 8027250:	b21a      	sxth	r2, r3
 8027252:	79bb      	ldrb	r3, [r7, #6]
 8027254:	e004      	b.n	8027260 <read_status_registers+0x300>
 8027256:	bf00      	nop
 8027258:	20009a6c 	.word	0x20009a6c
 802725c:	2000a10c 	.word	0x2000a10c
 8027260:	b21b      	sxth	r3, r3
 8027262:	4313      	orrs	r3, r2
 8027264:	b21b      	sxth	r3, r3
 8027266:	b29a      	uxth	r2, r3
 8027268:	4bbc      	ldr	r3, [pc, #752]	; (802755c <read_status_registers+0x5fc>)
 802726a:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*POWER_ON_REG, &status_reg_temp_h);
 802726c:	1dfb      	adds	r3, r7, #7
 802726e:	4619      	mov	r1, r3
 8027270:	f242 0022 	movw	r0, #8226	; 0x2022
 8027274:	f7fe f8ac 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*POWER_ON_REG+1, &status_reg_temp_l);
 8027278:	1dbb      	adds	r3, r7, #6
 802727a:	4619      	mov	r1, r3
 802727c:	f242 0023 	movw	r0, #8227	; 0x2023
 8027280:	f7fe f8a6 	bl	80253d0 <fm25v02_read>
	status_registers.power_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027284:	79fb      	ldrb	r3, [r7, #7]
 8027286:	021b      	lsls	r3, r3, #8
 8027288:	b21a      	sxth	r2, r3
 802728a:	79bb      	ldrb	r3, [r7, #6]
 802728c:	b21b      	sxth	r3, r3
 802728e:	4313      	orrs	r3, r2
 8027290:	b21b      	sxth	r3, r3
 8027292:	b29a      	uxth	r2, r3
 8027294:	4bb1      	ldr	r3, [pc, #708]	; (802755c <read_status_registers+0x5fc>)
 8027296:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*ERROR_RTC_REG, &status_reg_temp_h);
 8027298:	1dfb      	adds	r3, r7, #7
 802729a:	4619      	mov	r1, r3
 802729c:	f242 0024 	movw	r0, #8228	; 0x2024
 80272a0:	f7fe f896 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ERROR_RTC_REG+1, &status_reg_temp_l);
 80272a4:	1dbb      	adds	r3, r7, #6
 80272a6:	4619      	mov	r1, r3
 80272a8:	f242 0025 	movw	r0, #8229	; 0x2025
 80272ac:	f7fe f890 	bl	80253d0 <fm25v02_read>
	status_registers.error_rtc_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80272b0:	79fb      	ldrb	r3, [r7, #7]
 80272b2:	021b      	lsls	r3, r3, #8
 80272b4:	b21a      	sxth	r2, r3
 80272b6:	79bb      	ldrb	r3, [r7, #6]
 80272b8:	b21b      	sxth	r3, r3
 80272ba:	4313      	orrs	r3, r2
 80272bc:	b21b      	sxth	r3, r3
 80272be:	b29a      	uxth	r2, r3
 80272c0:	4ba6      	ldr	r3, [pc, #664]	; (802755c <read_status_registers+0x5fc>)
 80272c2:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*POWER_ON_LIGHTING_REG, &status_reg_temp_h);
 80272c4:	1dfb      	adds	r3, r7, #7
 80272c6:	4619      	mov	r1, r3
 80272c8:	f242 0026 	movw	r0, #8230	; 0x2026
 80272cc:	f7fe f880 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*POWER_ON_LIGHTING_REG+1, &status_reg_temp_l);
 80272d0:	1dbb      	adds	r3, r7, #6
 80272d2:	4619      	mov	r1, r3
 80272d4:	f242 0027 	movw	r0, #8231	; 0x2027
 80272d8:	f7fe f87a 	bl	80253d0 <fm25v02_read>
	status_registers.power_on_lighting_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80272dc:	79fb      	ldrb	r3, [r7, #7]
 80272de:	021b      	lsls	r3, r3, #8
 80272e0:	b21a      	sxth	r2, r3
 80272e2:	79bb      	ldrb	r3, [r7, #6]
 80272e4:	b21b      	sxth	r3, r3
 80272e6:	4313      	orrs	r3, r2
 80272e8:	b21b      	sxth	r3, r3
 80272ea:	b29a      	uxth	r2, r3
 80272ec:	4b9b      	ldr	r3, [pc, #620]	; (802755c <read_status_registers+0x5fc>)
 80272ee:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*IBUTTON_COMPLETE_0_REG, &status_reg_temp_h);
 80272f0:	1dfb      	adds	r3, r7, #7
 80272f2:	4619      	mov	r1, r3
 80272f4:	f242 002a 	movw	r0, #8234	; 0x202a
 80272f8:	f7fe f86a 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &status_reg_temp_l);
 80272fc:	1dbb      	adds	r3, r7, #6
 80272fe:	4619      	mov	r1, r3
 8027300:	f242 002b 	movw	r0, #8235	; 0x202b
 8027304:	f7fe f864 	bl	80253d0 <fm25v02_read>
	status_registers.ibutton_complite_0_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027308:	79fb      	ldrb	r3, [r7, #7]
 802730a:	021b      	lsls	r3, r3, #8
 802730c:	b21a      	sxth	r2, r3
 802730e:	79bb      	ldrb	r3, [r7, #6]
 8027310:	b21b      	sxth	r3, r3
 8027312:	4313      	orrs	r3, r2
 8027314:	b21b      	sxth	r3, r3
 8027316:	b29a      	uxth	r2, r3
 8027318:	4b90      	ldr	r3, [pc, #576]	; (802755c <read_status_registers+0x5fc>)
 802731a:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*IBUTTON_COMPLETE_1_REG, &status_reg_temp_h);
 802731c:	1dfb      	adds	r3, r7, #7
 802731e:	4619      	mov	r1, r3
 8027320:	f242 002c 	movw	r0, #8236	; 0x202c
 8027324:	f7fe f854 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &status_reg_temp_l);
 8027328:	1dbb      	adds	r3, r7, #6
 802732a:	4619      	mov	r1, r3
 802732c:	f242 002d 	movw	r0, #8237	; 0x202d
 8027330:	f7fe f84e 	bl	80253d0 <fm25v02_read>
	status_registers.ibutton_complite_1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027334:	79fb      	ldrb	r3, [r7, #7]
 8027336:	021b      	lsls	r3, r3, #8
 8027338:	b21a      	sxth	r2, r3
 802733a:	79bb      	ldrb	r3, [r7, #6]
 802733c:	b21b      	sxth	r3, r3
 802733e:	4313      	orrs	r3, r2
 8027340:	b21b      	sxth	r3, r3
 8027342:	b29a      	uxth	r2, r3
 8027344:	4b85      	ldr	r3, [pc, #532]	; (802755c <read_status_registers+0x5fc>)
 8027346:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*IBUTTON_COMPLETE_2_REG, &status_reg_temp_h);
 8027348:	1dfb      	adds	r3, r7, #7
 802734a:	4619      	mov	r1, r3
 802734c:	f242 002e 	movw	r0, #8238	; 0x202e
 8027350:	f7fe f83e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &status_reg_temp_l);
 8027354:	1dbb      	adds	r3, r7, #6
 8027356:	4619      	mov	r1, r3
 8027358:	f242 002f 	movw	r0, #8239	; 0x202f
 802735c:	f7fe f838 	bl	80253d0 <fm25v02_read>
	status_registers.ibutton_complite_2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027360:	79fb      	ldrb	r3, [r7, #7]
 8027362:	021b      	lsls	r3, r3, #8
 8027364:	b21a      	sxth	r2, r3
 8027366:	79bb      	ldrb	r3, [r7, #6]
 8027368:	b21b      	sxth	r3, r3
 802736a:	4313      	orrs	r3, r2
 802736c:	b21b      	sxth	r3, r3
 802736e:	b29a      	uxth	r2, r3
 8027370:	4b7a      	ldr	r3, [pc, #488]	; (802755c <read_status_registers+0x5fc>)
 8027372:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*IBUTTON_COMPLETE_3_REG, &status_reg_temp_h);
 8027374:	1dfb      	adds	r3, r7, #7
 8027376:	4619      	mov	r1, r3
 8027378:	f242 0030 	movw	r0, #8240	; 0x2030
 802737c:	f7fe f828 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &status_reg_temp_l);
 8027380:	1dbb      	adds	r3, r7, #6
 8027382:	4619      	mov	r1, r3
 8027384:	f242 0031 	movw	r0, #8241	; 0x2031
 8027388:	f7fe f822 	bl	80253d0 <fm25v02_read>
	status_registers.ibutton_complite_3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802738c:	79fb      	ldrb	r3, [r7, #7]
 802738e:	021b      	lsls	r3, r3, #8
 8027390:	b21a      	sxth	r2, r3
 8027392:	79bb      	ldrb	r3, [r7, #6]
 8027394:	b21b      	sxth	r3, r3
 8027396:	4313      	orrs	r3, r2
 8027398:	b21b      	sxth	r3, r3
 802739a:	b29a      	uxth	r2, r3
 802739c:	4b6f      	ldr	r3, [pc, #444]	; (802755c <read_status_registers+0x5fc>)
 802739e:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*IBUTTON_COMPLETE_4_REG, &status_reg_temp_h);
 80273a0:	1dfb      	adds	r3, r7, #7
 80273a2:	4619      	mov	r1, r3
 80273a4:	f242 0032 	movw	r0, #8242	; 0x2032
 80273a8:	f7fe f812 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &status_reg_temp_l);
 80273ac:	1dbb      	adds	r3, r7, #6
 80273ae:	4619      	mov	r1, r3
 80273b0:	f242 0033 	movw	r0, #8243	; 0x2033
 80273b4:	f7fe f80c 	bl	80253d0 <fm25v02_read>
	status_registers.ibutton_complite_4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80273b8:	79fb      	ldrb	r3, [r7, #7]
 80273ba:	021b      	lsls	r3, r3, #8
 80273bc:	b21a      	sxth	r2, r3
 80273be:	79bb      	ldrb	r3, [r7, #6]
 80273c0:	b21b      	sxth	r3, r3
 80273c2:	4313      	orrs	r3, r2
 80273c4:	b21b      	sxth	r3, r3
 80273c6:	b29a      	uxth	r2, r3
 80273c8:	4b64      	ldr	r3, [pc, #400]	; (802755c <read_status_registers+0x5fc>)
 80273ca:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*IBUTTON_COMPLETE_5_REG, &status_reg_temp_h);
 80273cc:	1dfb      	adds	r3, r7, #7
 80273ce:	4619      	mov	r1, r3
 80273d0:	f242 0034 	movw	r0, #8244	; 0x2034
 80273d4:	f7fd fffc 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &status_reg_temp_l);
 80273d8:	1dbb      	adds	r3, r7, #6
 80273da:	4619      	mov	r1, r3
 80273dc:	f242 0035 	movw	r0, #8245	; 0x2035
 80273e0:	f7fd fff6 	bl	80253d0 <fm25v02_read>
	status_registers.ibutton_complite_5_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80273e4:	79fb      	ldrb	r3, [r7, #7]
 80273e6:	021b      	lsls	r3, r3, #8
 80273e8:	b21a      	sxth	r2, r3
 80273ea:	79bb      	ldrb	r3, [r7, #6]
 80273ec:	b21b      	sxth	r3, r3
 80273ee:	4313      	orrs	r3, r2
 80273f0:	b21b      	sxth	r3, r3
 80273f2:	b29a      	uxth	r2, r3
 80273f4:	4b59      	ldr	r3, [pc, #356]	; (802755c <read_status_registers+0x5fc>)
 80273f6:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*IBUTTON_COMPLETE_6_REG, &status_reg_temp_h);
 80273f8:	1dfb      	adds	r3, r7, #7
 80273fa:	4619      	mov	r1, r3
 80273fc:	f242 0036 	movw	r0, #8246	; 0x2036
 8027400:	f7fd ffe6 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &status_reg_temp_l);
 8027404:	1dbb      	adds	r3, r7, #6
 8027406:	4619      	mov	r1, r3
 8027408:	f242 0037 	movw	r0, #8247	; 0x2037
 802740c:	f7fd ffe0 	bl	80253d0 <fm25v02_read>
	status_registers.ibutton_complite_6_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027410:	79fb      	ldrb	r3, [r7, #7]
 8027412:	021b      	lsls	r3, r3, #8
 8027414:	b21a      	sxth	r2, r3
 8027416:	79bb      	ldrb	r3, [r7, #6]
 8027418:	b21b      	sxth	r3, r3
 802741a:	4313      	orrs	r3, r2
 802741c:	b21b      	sxth	r3, r3
 802741e:	b29a      	uxth	r2, r3
 8027420:	4b4e      	ldr	r3, [pc, #312]	; (802755c <read_status_registers+0x5fc>)
 8027422:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*IBUTTON_COMPLETE_7_REG, &status_reg_temp_h);
 8027424:	1dfb      	adds	r3, r7, #7
 8027426:	4619      	mov	r1, r3
 8027428:	f242 0038 	movw	r0, #8248	; 0x2038
 802742c:	f7fd ffd0 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &status_reg_temp_l);
 8027430:	1dbb      	adds	r3, r7, #6
 8027432:	4619      	mov	r1, r3
 8027434:	f242 0039 	movw	r0, #8249	; 0x2039
 8027438:	f7fd ffca 	bl	80253d0 <fm25v02_read>
	status_registers.ibutton_complite_7_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802743c:	79fb      	ldrb	r3, [r7, #7]
 802743e:	021b      	lsls	r3, r3, #8
 8027440:	b21a      	sxth	r2, r3
 8027442:	79bb      	ldrb	r3, [r7, #6]
 8027444:	b21b      	sxth	r3, r3
 8027446:	4313      	orrs	r3, r2
 8027448:	b21b      	sxth	r3, r3
 802744a:	b29a      	uxth	r2, r3
 802744c:	4b43      	ldr	r3, [pc, #268]	; (802755c <read_status_registers+0x5fc>)
 802744e:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*CE_303_ERROR_REG, &status_reg_temp_h);
 8027450:	1dfb      	adds	r3, r7, #7
 8027452:	4619      	mov	r1, r3
 8027454:	f242 003c 	movw	r0, #8252	; 0x203c
 8027458:	f7fd ffba 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_ERROR_REG+1, &status_reg_temp_l);
 802745c:	1dbb      	adds	r3, r7, #6
 802745e:	4619      	mov	r1, r3
 8027460:	f242 003d 	movw	r0, #8253	; 0x203d
 8027464:	f7fd ffb4 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_error_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027468:	79fb      	ldrb	r3, [r7, #7]
 802746a:	021b      	lsls	r3, r3, #8
 802746c:	b21a      	sxth	r2, r3
 802746e:	79bb      	ldrb	r3, [r7, #6]
 8027470:	b21b      	sxth	r3, r3
 8027472:	4313      	orrs	r3, r2
 8027474:	b21b      	sxth	r3, r3
 8027476:	b29a      	uxth	r2, r3
 8027478:	4b38      	ldr	r3, [pc, #224]	; (802755c <read_status_registers+0x5fc>)
 802747a:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*CE_303_CURRENT_A_REG, &status_reg_temp_h);
 802747c:	1dfb      	adds	r3, r7, #7
 802747e:	4619      	mov	r1, r3
 8027480:	f242 003e 	movw	r0, #8254	; 0x203e
 8027484:	f7fd ffa4 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_A_REG+1, &status_reg_temp_l);
 8027488:	1dbb      	adds	r3, r7, #6
 802748a:	4619      	mov	r1, r3
 802748c:	f242 003f 	movw	r0, #8255	; 0x203f
 8027490:	f7fd ff9e 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_current_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027494:	79fb      	ldrb	r3, [r7, #7]
 8027496:	021b      	lsls	r3, r3, #8
 8027498:	b21a      	sxth	r2, r3
 802749a:	79bb      	ldrb	r3, [r7, #6]
 802749c:	b21b      	sxth	r3, r3
 802749e:	4313      	orrs	r3, r2
 80274a0:	b21b      	sxth	r3, r3
 80274a2:	b29a      	uxth	r2, r3
 80274a4:	4b2d      	ldr	r3, [pc, #180]	; (802755c <read_status_registers+0x5fc>)
 80274a6:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*CE_303_CURRENT_B_REG, &status_reg_temp_h);
 80274a8:	1dfb      	adds	r3, r7, #7
 80274aa:	4619      	mov	r1, r3
 80274ac:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 80274b0:	f7fd ff8e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_B_REG+1, &status_reg_temp_l);
 80274b4:	1dbb      	adds	r3, r7, #6
 80274b6:	4619      	mov	r1, r3
 80274b8:	f242 0041 	movw	r0, #8257	; 0x2041
 80274bc:	f7fd ff88 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_current_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80274c0:	79fb      	ldrb	r3, [r7, #7]
 80274c2:	021b      	lsls	r3, r3, #8
 80274c4:	b21a      	sxth	r2, r3
 80274c6:	79bb      	ldrb	r3, [r7, #6]
 80274c8:	b21b      	sxth	r3, r3
 80274ca:	4313      	orrs	r3, r2
 80274cc:	b21b      	sxth	r3, r3
 80274ce:	b29a      	uxth	r2, r3
 80274d0:	4b22      	ldr	r3, [pc, #136]	; (802755c <read_status_registers+0x5fc>)
 80274d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*CE_303_CURRENT_C_REG, &status_reg_temp_h);
 80274d6:	1dfb      	adds	r3, r7, #7
 80274d8:	4619      	mov	r1, r3
 80274da:	f242 0042 	movw	r0, #8258	; 0x2042
 80274de:	f7fd ff77 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_C_REG+1, &status_reg_temp_l);
 80274e2:	1dbb      	adds	r3, r7, #6
 80274e4:	4619      	mov	r1, r3
 80274e6:	f242 0043 	movw	r0, #8259	; 0x2043
 80274ea:	f7fd ff71 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_current_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80274ee:	79fb      	ldrb	r3, [r7, #7]
 80274f0:	021b      	lsls	r3, r3, #8
 80274f2:	b21a      	sxth	r2, r3
 80274f4:	79bb      	ldrb	r3, [r7, #6]
 80274f6:	b21b      	sxth	r3, r3
 80274f8:	4313      	orrs	r3, r2
 80274fa:	b21b      	sxth	r3, r3
 80274fc:	b29a      	uxth	r2, r3
 80274fe:	4b17      	ldr	r3, [pc, #92]	; (802755c <read_status_registers+0x5fc>)
 8027500:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*CE_303_CURRENT_MIL_A_REG, &status_reg_temp_h);
 8027504:	1dfb      	adds	r3, r7, #7
 8027506:	4619      	mov	r1, r3
 8027508:	f242 0044 	movw	r0, #8260	; 0x2044
 802750c:	f7fd ff60 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_A_REG+1, &status_reg_temp_l);
 8027510:	1dbb      	adds	r3, r7, #6
 8027512:	4619      	mov	r1, r3
 8027514:	f242 0045 	movw	r0, #8261	; 0x2045
 8027518:	f7fd ff5a 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_current_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802751c:	79fb      	ldrb	r3, [r7, #7]
 802751e:	021b      	lsls	r3, r3, #8
 8027520:	b21a      	sxth	r2, r3
 8027522:	79bb      	ldrb	r3, [r7, #6]
 8027524:	b21b      	sxth	r3, r3
 8027526:	4313      	orrs	r3, r2
 8027528:	b21b      	sxth	r3, r3
 802752a:	b29a      	uxth	r2, r3
 802752c:	4b0b      	ldr	r3, [pc, #44]	; (802755c <read_status_registers+0x5fc>)
 802752e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*CE_303_CURRENT_MIL_B_REG, &status_reg_temp_h);
 8027532:	1dfb      	adds	r3, r7, #7
 8027534:	4619      	mov	r1, r3
 8027536:	f242 0046 	movw	r0, #8262	; 0x2046
 802753a:	f7fd ff49 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_B_REG+1, &status_reg_temp_l);
 802753e:	1dbb      	adds	r3, r7, #6
 8027540:	4619      	mov	r1, r3
 8027542:	f242 0047 	movw	r0, #8263	; 0x2047
 8027546:	f7fd ff43 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_current_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802754a:	79fb      	ldrb	r3, [r7, #7]
 802754c:	021b      	lsls	r3, r3, #8
 802754e:	b21a      	sxth	r2, r3
 8027550:	79bb      	ldrb	r3, [r7, #6]
 8027552:	b21b      	sxth	r3, r3
 8027554:	4313      	orrs	r3, r2
 8027556:	b21b      	sxth	r3, r3
 8027558:	e002      	b.n	8027560 <read_status_registers+0x600>
 802755a:	bf00      	nop
 802755c:	2000a10c 	.word	0x2000a10c
 8027560:	b29a      	uxth	r2, r3
 8027562:	4bc3      	ldr	r3, [pc, #780]	; (8027870 <read_status_registers+0x910>)
 8027564:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*CE_303_CURRENT_MIL_C_REG, &status_reg_temp_h);
 8027568:	1dfb      	adds	r3, r7, #7
 802756a:	4619      	mov	r1, r3
 802756c:	f242 0048 	movw	r0, #8264	; 0x2048
 8027570:	f7fd ff2e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_C_REG+1, &status_reg_temp_l);
 8027574:	1dbb      	adds	r3, r7, #6
 8027576:	4619      	mov	r1, r3
 8027578:	f242 0049 	movw	r0, #8265	; 0x2049
 802757c:	f7fd ff28 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_current_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027580:	79fb      	ldrb	r3, [r7, #7]
 8027582:	021b      	lsls	r3, r3, #8
 8027584:	b21a      	sxth	r2, r3
 8027586:	79bb      	ldrb	r3, [r7, #6]
 8027588:	b21b      	sxth	r3, r3
 802758a:	4313      	orrs	r3, r2
 802758c:	b21b      	sxth	r3, r3
 802758e:	b29a      	uxth	r2, r3
 8027590:	4bb7      	ldr	r3, [pc, #732]	; (8027870 <read_status_registers+0x910>)
 8027592:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*CE_303_VOLT_A_REG, &status_reg_temp_h);
 8027596:	1dfb      	adds	r3, r7, #7
 8027598:	4619      	mov	r1, r3
 802759a:	f242 004a 	movw	r0, #8266	; 0x204a
 802759e:	f7fd ff17 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_A_REG+1, &status_reg_temp_l);
 80275a2:	1dbb      	adds	r3, r7, #6
 80275a4:	4619      	mov	r1, r3
 80275a6:	f242 004b 	movw	r0, #8267	; 0x204b
 80275aa:	f7fd ff11 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_volt_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80275ae:	79fb      	ldrb	r3, [r7, #7]
 80275b0:	021b      	lsls	r3, r3, #8
 80275b2:	b21a      	sxth	r2, r3
 80275b4:	79bb      	ldrb	r3, [r7, #6]
 80275b6:	b21b      	sxth	r3, r3
 80275b8:	4313      	orrs	r3, r2
 80275ba:	b21b      	sxth	r3, r3
 80275bc:	b29a      	uxth	r2, r3
 80275be:	4bac      	ldr	r3, [pc, #688]	; (8027870 <read_status_registers+0x910>)
 80275c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*CE_303_VOLT_B_REG, &status_reg_temp_h);
 80275c4:	1dfb      	adds	r3, r7, #7
 80275c6:	4619      	mov	r1, r3
 80275c8:	f242 004c 	movw	r0, #8268	; 0x204c
 80275cc:	f7fd ff00 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_B_REG+1, &status_reg_temp_l);
 80275d0:	1dbb      	adds	r3, r7, #6
 80275d2:	4619      	mov	r1, r3
 80275d4:	f242 004d 	movw	r0, #8269	; 0x204d
 80275d8:	f7fd fefa 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_volt_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80275dc:	79fb      	ldrb	r3, [r7, #7]
 80275de:	021b      	lsls	r3, r3, #8
 80275e0:	b21a      	sxth	r2, r3
 80275e2:	79bb      	ldrb	r3, [r7, #6]
 80275e4:	b21b      	sxth	r3, r3
 80275e6:	4313      	orrs	r3, r2
 80275e8:	b21b      	sxth	r3, r3
 80275ea:	b29a      	uxth	r2, r3
 80275ec:	4ba0      	ldr	r3, [pc, #640]	; (8027870 <read_status_registers+0x910>)
 80275ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	fm25v02_read(2*CE_303_VOLT_C_REG, &status_reg_temp_h);
 80275f2:	1dfb      	adds	r3, r7, #7
 80275f4:	4619      	mov	r1, r3
 80275f6:	f242 004e 	movw	r0, #8270	; 0x204e
 80275fa:	f7fd fee9 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_C_REG+1, &status_reg_temp_l);
 80275fe:	1dbb      	adds	r3, r7, #6
 8027600:	4619      	mov	r1, r3
 8027602:	f242 004f 	movw	r0, #8271	; 0x204f
 8027606:	f7fd fee3 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_volt_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802760a:	79fb      	ldrb	r3, [r7, #7]
 802760c:	021b      	lsls	r3, r3, #8
 802760e:	b21a      	sxth	r2, r3
 8027610:	79bb      	ldrb	r3, [r7, #6]
 8027612:	b21b      	sxth	r3, r3
 8027614:	4313      	orrs	r3, r2
 8027616:	b21b      	sxth	r3, r3
 8027618:	b29a      	uxth	r2, r3
 802761a:	4b95      	ldr	r3, [pc, #596]	; (8027870 <read_status_registers+0x910>)
 802761c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	fm25v02_read(2*CE_303_VOLT_MIL_A_REG, &status_reg_temp_h);
 8027620:	1dfb      	adds	r3, r7, #7
 8027622:	4619      	mov	r1, r3
 8027624:	f242 0050 	movw	r0, #8272	; 0x2050
 8027628:	f7fd fed2 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_A_REG+1, &status_reg_temp_l);
 802762c:	1dbb      	adds	r3, r7, #6
 802762e:	4619      	mov	r1, r3
 8027630:	f242 0051 	movw	r0, #8273	; 0x2051
 8027634:	f7fd fecc 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_volt_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027638:	79fb      	ldrb	r3, [r7, #7]
 802763a:	021b      	lsls	r3, r3, #8
 802763c:	b21a      	sxth	r2, r3
 802763e:	79bb      	ldrb	r3, [r7, #6]
 8027640:	b21b      	sxth	r3, r3
 8027642:	4313      	orrs	r3, r2
 8027644:	b21b      	sxth	r3, r3
 8027646:	b29a      	uxth	r2, r3
 8027648:	4b89      	ldr	r3, [pc, #548]	; (8027870 <read_status_registers+0x910>)
 802764a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	fm25v02_read(2*CE_303_VOLT_MIL_B_REG, &status_reg_temp_h);
 802764e:	1dfb      	adds	r3, r7, #7
 8027650:	4619      	mov	r1, r3
 8027652:	f242 0052 	movw	r0, #8274	; 0x2052
 8027656:	f7fd febb 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_B_REG+1, &status_reg_temp_l);
 802765a:	1dbb      	adds	r3, r7, #6
 802765c:	4619      	mov	r1, r3
 802765e:	f242 0053 	movw	r0, #8275	; 0x2053
 8027662:	f7fd feb5 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_volt_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027666:	79fb      	ldrb	r3, [r7, #7]
 8027668:	021b      	lsls	r3, r3, #8
 802766a:	b21a      	sxth	r2, r3
 802766c:	79bb      	ldrb	r3, [r7, #6]
 802766e:	b21b      	sxth	r3, r3
 8027670:	4313      	orrs	r3, r2
 8027672:	b21b      	sxth	r3, r3
 8027674:	b29a      	uxth	r2, r3
 8027676:	4b7e      	ldr	r3, [pc, #504]	; (8027870 <read_status_registers+0x910>)
 8027678:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	fm25v02_read(2*CE_303_VOLT_MIL_C_REG, &status_reg_temp_h);
 802767c:	1dfb      	adds	r3, r7, #7
 802767e:	4619      	mov	r1, r3
 8027680:	f242 0054 	movw	r0, #8276	; 0x2054
 8027684:	f7fd fea4 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_C_REG+1, &status_reg_temp_l);
 8027688:	1dbb      	adds	r3, r7, #6
 802768a:	4619      	mov	r1, r3
 802768c:	f242 0055 	movw	r0, #8277	; 0x2055
 8027690:	f7fd fe9e 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_volt_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027694:	79fb      	ldrb	r3, [r7, #7]
 8027696:	021b      	lsls	r3, r3, #8
 8027698:	b21a      	sxth	r2, r3
 802769a:	79bb      	ldrb	r3, [r7, #6]
 802769c:	b21b      	sxth	r3, r3
 802769e:	4313      	orrs	r3, r2
 80276a0:	b21b      	sxth	r3, r3
 80276a2:	b29a      	uxth	r2, r3
 80276a4:	4b72      	ldr	r3, [pc, #456]	; (8027870 <read_status_registers+0x910>)
 80276a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	fm25v02_read(2*CE_303_POWER_A_REG, &status_reg_temp_h);
 80276aa:	1dfb      	adds	r3, r7, #7
 80276ac:	4619      	mov	r1, r3
 80276ae:	f242 0056 	movw	r0, #8278	; 0x2056
 80276b2:	f7fd fe8d 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_A_REG+1, &status_reg_temp_l);
 80276b6:	1dbb      	adds	r3, r7, #6
 80276b8:	4619      	mov	r1, r3
 80276ba:	f242 0057 	movw	r0, #8279	; 0x2057
 80276be:	f7fd fe87 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_power_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80276c2:	79fb      	ldrb	r3, [r7, #7]
 80276c4:	021b      	lsls	r3, r3, #8
 80276c6:	b21a      	sxth	r2, r3
 80276c8:	79bb      	ldrb	r3, [r7, #6]
 80276ca:	b21b      	sxth	r3, r3
 80276cc:	4313      	orrs	r3, r2
 80276ce:	b21b      	sxth	r3, r3
 80276d0:	b29a      	uxth	r2, r3
 80276d2:	4b67      	ldr	r3, [pc, #412]	; (8027870 <read_status_registers+0x910>)
 80276d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	fm25v02_read(2*CE_303_POWER_B_REG, &status_reg_temp_h);
 80276d8:	1dfb      	adds	r3, r7, #7
 80276da:	4619      	mov	r1, r3
 80276dc:	f242 0058 	movw	r0, #8280	; 0x2058
 80276e0:	f7fd fe76 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_B_REG+1, &status_reg_temp_l);
 80276e4:	1dbb      	adds	r3, r7, #6
 80276e6:	4619      	mov	r1, r3
 80276e8:	f242 0059 	movw	r0, #8281	; 0x2059
 80276ec:	f7fd fe70 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_power_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80276f0:	79fb      	ldrb	r3, [r7, #7]
 80276f2:	021b      	lsls	r3, r3, #8
 80276f4:	b21a      	sxth	r2, r3
 80276f6:	79bb      	ldrb	r3, [r7, #6]
 80276f8:	b21b      	sxth	r3, r3
 80276fa:	4313      	orrs	r3, r2
 80276fc:	b21b      	sxth	r3, r3
 80276fe:	b29a      	uxth	r2, r3
 8027700:	4b5b      	ldr	r3, [pc, #364]	; (8027870 <read_status_registers+0x910>)
 8027702:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	fm25v02_read(2*CE_303_POWER_C_REG, &status_reg_temp_h);
 8027706:	1dfb      	adds	r3, r7, #7
 8027708:	4619      	mov	r1, r3
 802770a:	f242 005a 	movw	r0, #8282	; 0x205a
 802770e:	f7fd fe5f 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_C_REG+1, &status_reg_temp_l);
 8027712:	1dbb      	adds	r3, r7, #6
 8027714:	4619      	mov	r1, r3
 8027716:	f242 005b 	movw	r0, #8283	; 0x205b
 802771a:	f7fd fe59 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_power_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802771e:	79fb      	ldrb	r3, [r7, #7]
 8027720:	021b      	lsls	r3, r3, #8
 8027722:	b21a      	sxth	r2, r3
 8027724:	79bb      	ldrb	r3, [r7, #6]
 8027726:	b21b      	sxth	r3, r3
 8027728:	4313      	orrs	r3, r2
 802772a:	b21b      	sxth	r3, r3
 802772c:	b29a      	uxth	r2, r3
 802772e:	4b50      	ldr	r3, [pc, #320]	; (8027870 <read_status_registers+0x910>)
 8027730:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	fm25v02_read(2*CE_303_POWER_MIL_A_REG, &status_reg_temp_h);
 8027734:	1dfb      	adds	r3, r7, #7
 8027736:	4619      	mov	r1, r3
 8027738:	f242 005c 	movw	r0, #8284	; 0x205c
 802773c:	f7fd fe48 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_A_REG+1, &status_reg_temp_l);
 8027740:	1dbb      	adds	r3, r7, #6
 8027742:	4619      	mov	r1, r3
 8027744:	f242 005d 	movw	r0, #8285	; 0x205d
 8027748:	f7fd fe42 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_power_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802774c:	79fb      	ldrb	r3, [r7, #7]
 802774e:	021b      	lsls	r3, r3, #8
 8027750:	b21a      	sxth	r2, r3
 8027752:	79bb      	ldrb	r3, [r7, #6]
 8027754:	b21b      	sxth	r3, r3
 8027756:	4313      	orrs	r3, r2
 8027758:	b21b      	sxth	r3, r3
 802775a:	b29a      	uxth	r2, r3
 802775c:	4b44      	ldr	r3, [pc, #272]	; (8027870 <read_status_registers+0x910>)
 802775e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	fm25v02_read(2*CE_303_POWER_MIL_B_REG, &status_reg_temp_h);
 8027762:	1dfb      	adds	r3, r7, #7
 8027764:	4619      	mov	r1, r3
 8027766:	f242 005e 	movw	r0, #8286	; 0x205e
 802776a:	f7fd fe31 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_B_REG+1, &status_reg_temp_l);
 802776e:	1dbb      	adds	r3, r7, #6
 8027770:	4619      	mov	r1, r3
 8027772:	f242 005f 	movw	r0, #8287	; 0x205f
 8027776:	f7fd fe2b 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_power_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802777a:	79fb      	ldrb	r3, [r7, #7]
 802777c:	021b      	lsls	r3, r3, #8
 802777e:	b21a      	sxth	r2, r3
 8027780:	79bb      	ldrb	r3, [r7, #6]
 8027782:	b21b      	sxth	r3, r3
 8027784:	4313      	orrs	r3, r2
 8027786:	b21b      	sxth	r3, r3
 8027788:	b29a      	uxth	r2, r3
 802778a:	4b39      	ldr	r3, [pc, #228]	; (8027870 <read_status_registers+0x910>)
 802778c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	fm25v02_read(2*CE_303_POWER_MIL_C_REG, &status_reg_temp_h);
 8027790:	1dfb      	adds	r3, r7, #7
 8027792:	4619      	mov	r1, r3
 8027794:	f242 0060 	movw	r0, #8288	; 0x2060
 8027798:	f7fd fe1a 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_C_REG+1, &status_reg_temp_l);
 802779c:	1dbb      	adds	r3, r7, #6
 802779e:	4619      	mov	r1, r3
 80277a0:	f242 0061 	movw	r0, #8289	; 0x2061
 80277a4:	f7fd fe14 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_power_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80277a8:	79fb      	ldrb	r3, [r7, #7]
 80277aa:	021b      	lsls	r3, r3, #8
 80277ac:	b21a      	sxth	r2, r3
 80277ae:	79bb      	ldrb	r3, [r7, #6]
 80277b0:	b21b      	sxth	r3, r3
 80277b2:	4313      	orrs	r3, r2
 80277b4:	b21b      	sxth	r3, r3
 80277b6:	b29a      	uxth	r2, r3
 80277b8:	4b2d      	ldr	r3, [pc, #180]	; (8027870 <read_status_registers+0x910>)
 80277ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	fm25v02_read(2*LIGHTING_STATUS_REG, &status_reg_temp_h);
 80277be:	1dfb      	adds	r3, r7, #7
 80277c0:	4619      	mov	r1, r3
 80277c2:	f242 0062 	movw	r0, #8290	; 0x2062
 80277c6:	f7fd fe03 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*LIGHTING_STATUS_REG+1, &status_reg_temp_l);
 80277ca:	1dbb      	adds	r3, r7, #6
 80277cc:	4619      	mov	r1, r3
 80277ce:	f242 0063 	movw	r0, #8291	; 0x2063
 80277d2:	f7fd fdfd 	bl	80253d0 <fm25v02_read>
	status_registers.lighting_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80277d6:	79fb      	ldrb	r3, [r7, #7]
 80277d8:	021b      	lsls	r3, r3, #8
 80277da:	b21a      	sxth	r2, r3
 80277dc:	79bb      	ldrb	r3, [r7, #6]
 80277de:	b21b      	sxth	r3, r3
 80277e0:	4313      	orrs	r3, r2
 80277e2:	b21b      	sxth	r3, r3
 80277e4:	b29a      	uxth	r2, r3
 80277e6:	4b22      	ldr	r3, [pc, #136]	; (8027870 <read_status_registers+0x910>)
 80277e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	fm25v02_read(2*LIGHTING_ALARM_REG, &status_reg_temp_h);
 80277ec:	1dfb      	adds	r3, r7, #7
 80277ee:	4619      	mov	r1, r3
 80277f0:	f242 0064 	movw	r0, #8292	; 0x2064
 80277f4:	f7fd fdec 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*LIGHTING_ALARM_REG+1, &status_reg_temp_l);
 80277f8:	1dbb      	adds	r3, r7, #6
 80277fa:	4619      	mov	r1, r3
 80277fc:	f242 0065 	movw	r0, #8293	; 0x2065
 8027800:	f7fd fde6 	bl	80253d0 <fm25v02_read>
	status_registers.lighting_alarm_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027804:	79fb      	ldrb	r3, [r7, #7]
 8027806:	021b      	lsls	r3, r3, #8
 8027808:	b21a      	sxth	r2, r3
 802780a:	79bb      	ldrb	r3, [r7, #6]
 802780c:	b21b      	sxth	r3, r3
 802780e:	4313      	orrs	r3, r2
 8027810:	b21b      	sxth	r3, r3
 8027812:	b29a      	uxth	r2, r3
 8027814:	4b16      	ldr	r3, [pc, #88]	; (8027870 <read_status_registers+0x910>)
 8027816:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	fm25v02_read(2*MONTH_LIGHTING_OFF_REG, &status_reg_temp_h);
 802781a:	1dfb      	adds	r3, r7, #7
 802781c:	4619      	mov	r1, r3
 802781e:	f242 0066 	movw	r0, #8294	; 0x2066
 8027822:	f7fd fdd5 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MONTH_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8027826:	1dbb      	adds	r3, r7, #6
 8027828:	4619      	mov	r1, r3
 802782a:	f242 0067 	movw	r0, #8295	; 0x2067
 802782e:	f7fd fdcf 	bl	80253d0 <fm25v02_read>
	status_registers.month_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027832:	79fb      	ldrb	r3, [r7, #7]
 8027834:	021b      	lsls	r3, r3, #8
 8027836:	b21a      	sxth	r2, r3
 8027838:	79bb      	ldrb	r3, [r7, #6]
 802783a:	b21b      	sxth	r3, r3
 802783c:	4313      	orrs	r3, r2
 802783e:	b21b      	sxth	r3, r3
 8027840:	b29a      	uxth	r2, r3
 8027842:	4b0b      	ldr	r3, [pc, #44]	; (8027870 <read_status_registers+0x910>)
 8027844:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	fm25v02_read(2*DAY_LIGHTING_OFF_REG, &status_reg_temp_h);
 8027848:	1dfb      	adds	r3, r7, #7
 802784a:	4619      	mov	r1, r3
 802784c:	f242 0068 	movw	r0, #8296	; 0x2068
 8027850:	f7fd fdbe 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*DAY_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8027854:	1dbb      	adds	r3, r7, #6
 8027856:	4619      	mov	r1, r3
 8027858:	f242 0069 	movw	r0, #8297	; 0x2069
 802785c:	f7fd fdb8 	bl	80253d0 <fm25v02_read>
	status_registers.day_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027860:	79fb      	ldrb	r3, [r7, #7]
 8027862:	021b      	lsls	r3, r3, #8
 8027864:	b21a      	sxth	r2, r3
 8027866:	79bb      	ldrb	r3, [r7, #6]
 8027868:	b21b      	sxth	r3, r3
 802786a:	4313      	orrs	r3, r2
 802786c:	b21b      	sxth	r3, r3
 802786e:	e001      	b.n	8027874 <read_status_registers+0x914>
 8027870:	2000a10c 	.word	0x2000a10c
 8027874:	b29a      	uxth	r2, r3
 8027876:	4bc3      	ldr	r3, [pc, #780]	; (8027b84 <read_status_registers+0xc24>)
 8027878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	fm25v02_read(2*HOUR_LIGHTING_OFF_REG, &status_reg_temp_h);
 802787c:	1dfb      	adds	r3, r7, #7
 802787e:	4619      	mov	r1, r3
 8027880:	f242 006a 	movw	r0, #8298	; 0x206a
 8027884:	f7fd fda4 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*HOUR_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8027888:	1dbb      	adds	r3, r7, #6
 802788a:	4619      	mov	r1, r3
 802788c:	f242 006b 	movw	r0, #8299	; 0x206b
 8027890:	f7fd fd9e 	bl	80253d0 <fm25v02_read>
	status_registers.hour_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027894:	79fb      	ldrb	r3, [r7, #7]
 8027896:	021b      	lsls	r3, r3, #8
 8027898:	b21a      	sxth	r2, r3
 802789a:	79bb      	ldrb	r3, [r7, #6]
 802789c:	b21b      	sxth	r3, r3
 802789e:	4313      	orrs	r3, r2
 80278a0:	b21b      	sxth	r3, r3
 80278a2:	b29a      	uxth	r2, r3
 80278a4:	4bb7      	ldr	r3, [pc, #732]	; (8027b84 <read_status_registers+0xc24>)
 80278a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	fm25v02_read(2*MINUTE_LIGHTING_OFF_REG, &status_reg_temp_h);
 80278aa:	1dfb      	adds	r3, r7, #7
 80278ac:	4619      	mov	r1, r3
 80278ae:	f242 006c 	movw	r0, #8300	; 0x206c
 80278b2:	f7fd fd8d 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MINUTE_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 80278b6:	1dbb      	adds	r3, r7, #6
 80278b8:	4619      	mov	r1, r3
 80278ba:	f242 006d 	movw	r0, #8301	; 0x206d
 80278be:	f7fd fd87 	bl	80253d0 <fm25v02_read>
	status_registers.minute_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80278c2:	79fb      	ldrb	r3, [r7, #7]
 80278c4:	021b      	lsls	r3, r3, #8
 80278c6:	b21a      	sxth	r2, r3
 80278c8:	79bb      	ldrb	r3, [r7, #6]
 80278ca:	b21b      	sxth	r3, r3
 80278cc:	4313      	orrs	r3, r2
 80278ce:	b21b      	sxth	r3, r3
 80278d0:	b29a      	uxth	r2, r3
 80278d2:	4bac      	ldr	r3, [pc, #688]	; (8027b84 <read_status_registers+0xc24>)
 80278d4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	fm25v02_read(2*MONTH_LIGHTING_ON_REG, &status_reg_temp_h);
 80278d8:	1dfb      	adds	r3, r7, #7
 80278da:	4619      	mov	r1, r3
 80278dc:	f242 006e 	movw	r0, #8302	; 0x206e
 80278e0:	f7fd fd76 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MONTH_LIGHTING_ON_REG+1, &status_reg_temp_l);
 80278e4:	1dbb      	adds	r3, r7, #6
 80278e6:	4619      	mov	r1, r3
 80278e8:	f242 006f 	movw	r0, #8303	; 0x206f
 80278ec:	f7fd fd70 	bl	80253d0 <fm25v02_read>
	status_registers.month_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80278f0:	79fb      	ldrb	r3, [r7, #7]
 80278f2:	021b      	lsls	r3, r3, #8
 80278f4:	b21a      	sxth	r2, r3
 80278f6:	79bb      	ldrb	r3, [r7, #6]
 80278f8:	b21b      	sxth	r3, r3
 80278fa:	4313      	orrs	r3, r2
 80278fc:	b21b      	sxth	r3, r3
 80278fe:	b29a      	uxth	r2, r3
 8027900:	4ba0      	ldr	r3, [pc, #640]	; (8027b84 <read_status_registers+0xc24>)
 8027902:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	fm25v02_read(2*DAY_LIGHTING_ON_REG, &status_reg_temp_h);
 8027906:	1dfb      	adds	r3, r7, #7
 8027908:	4619      	mov	r1, r3
 802790a:	f242 0070 	movw	r0, #8304	; 0x2070
 802790e:	f7fd fd5f 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*DAY_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8027912:	1dbb      	adds	r3, r7, #6
 8027914:	4619      	mov	r1, r3
 8027916:	f242 0071 	movw	r0, #8305	; 0x2071
 802791a:	f7fd fd59 	bl	80253d0 <fm25v02_read>
	status_registers.day_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802791e:	79fb      	ldrb	r3, [r7, #7]
 8027920:	021b      	lsls	r3, r3, #8
 8027922:	b21a      	sxth	r2, r3
 8027924:	79bb      	ldrb	r3, [r7, #6]
 8027926:	b21b      	sxth	r3, r3
 8027928:	4313      	orrs	r3, r2
 802792a:	b21b      	sxth	r3, r3
 802792c:	b29a      	uxth	r2, r3
 802792e:	4b95      	ldr	r3, [pc, #596]	; (8027b84 <read_status_registers+0xc24>)
 8027930:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	fm25v02_read(2*HOUR_LIGHTING_ON_REG, &status_reg_temp_h);
 8027934:	1dfb      	adds	r3, r7, #7
 8027936:	4619      	mov	r1, r3
 8027938:	f242 0072 	movw	r0, #8306	; 0x2072
 802793c:	f7fd fd48 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*HOUR_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8027940:	1dbb      	adds	r3, r7, #6
 8027942:	4619      	mov	r1, r3
 8027944:	f242 0073 	movw	r0, #8307	; 0x2073
 8027948:	f7fd fd42 	bl	80253d0 <fm25v02_read>
	status_registers.hour_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802794c:	79fb      	ldrb	r3, [r7, #7]
 802794e:	021b      	lsls	r3, r3, #8
 8027950:	b21a      	sxth	r2, r3
 8027952:	79bb      	ldrb	r3, [r7, #6]
 8027954:	b21b      	sxth	r3, r3
 8027956:	4313      	orrs	r3, r2
 8027958:	b21b      	sxth	r3, r3
 802795a:	b29a      	uxth	r2, r3
 802795c:	4b89      	ldr	r3, [pc, #548]	; (8027b84 <read_status_registers+0xc24>)
 802795e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

	fm25v02_read(2*MINUTE_LIGHTING_ON_REG, &status_reg_temp_h);
 8027962:	1dfb      	adds	r3, r7, #7
 8027964:	4619      	mov	r1, r3
 8027966:	f242 0074 	movw	r0, #8308	; 0x2074
 802796a:	f7fd fd31 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MINUTE_LIGHTING_ON_REG+1, &status_reg_temp_l);
 802796e:	1dbb      	adds	r3, r7, #6
 8027970:	4619      	mov	r1, r3
 8027972:	f242 0075 	movw	r0, #8309	; 0x2075
 8027976:	f7fd fd2b 	bl	80253d0 <fm25v02_read>
	status_registers.minute_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802797a:	79fb      	ldrb	r3, [r7, #7]
 802797c:	021b      	lsls	r3, r3, #8
 802797e:	b21a      	sxth	r2, r3
 8027980:	79bb      	ldrb	r3, [r7, #6]
 8027982:	b21b      	sxth	r3, r3
 8027984:	4313      	orrs	r3, r2
 8027986:	b21b      	sxth	r3, r3
 8027988:	b29a      	uxth	r2, r3
 802798a:	4b7e      	ldr	r3, [pc, #504]	; (8027b84 <read_status_registers+0xc24>)
 802798c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	fm25v02_read(2*CURRENT_PHASE_A_REG, &status_reg_temp_h);
 8027990:	1dfb      	adds	r3, r7, #7
 8027992:	4619      	mov	r1, r3
 8027994:	f242 0076 	movw	r0, #8310	; 0x2076
 8027998:	f7fd fd1a 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_A_REG+1, &status_reg_temp_l);
 802799c:	1dbb      	adds	r3, r7, #6
 802799e:	4619      	mov	r1, r3
 80279a0:	f242 0077 	movw	r0, #8311	; 0x2077
 80279a4:	f7fd fd14 	bl	80253d0 <fm25v02_read>
	status_registers.current_phase_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80279a8:	79fb      	ldrb	r3, [r7, #7]
 80279aa:	021b      	lsls	r3, r3, #8
 80279ac:	b21a      	sxth	r2, r3
 80279ae:	79bb      	ldrb	r3, [r7, #6]
 80279b0:	b21b      	sxth	r3, r3
 80279b2:	4313      	orrs	r3, r2
 80279b4:	b21b      	sxth	r3, r3
 80279b6:	b29a      	uxth	r2, r3
 80279b8:	4b72      	ldr	r3, [pc, #456]	; (8027b84 <read_status_registers+0xc24>)
 80279ba:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	fm25v02_read(2*CURRENT_PHASE_B_REG, &status_reg_temp_h);
 80279be:	1dfb      	adds	r3, r7, #7
 80279c0:	4619      	mov	r1, r3
 80279c2:	f242 0078 	movw	r0, #8312	; 0x2078
 80279c6:	f7fd fd03 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_B_REG+1, &status_reg_temp_l);
 80279ca:	1dbb      	adds	r3, r7, #6
 80279cc:	4619      	mov	r1, r3
 80279ce:	f242 0079 	movw	r0, #8313	; 0x2079
 80279d2:	f7fd fcfd 	bl	80253d0 <fm25v02_read>
	status_registers.current_phase_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80279d6:	79fb      	ldrb	r3, [r7, #7]
 80279d8:	021b      	lsls	r3, r3, #8
 80279da:	b21a      	sxth	r2, r3
 80279dc:	79bb      	ldrb	r3, [r7, #6]
 80279de:	b21b      	sxth	r3, r3
 80279e0:	4313      	orrs	r3, r2
 80279e2:	b21b      	sxth	r3, r3
 80279e4:	b29a      	uxth	r2, r3
 80279e6:	4b67      	ldr	r3, [pc, #412]	; (8027b84 <read_status_registers+0xc24>)
 80279e8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

	fm25v02_read(2*CURRENT_PHASE_C_REG, &status_reg_temp_h);
 80279ec:	1dfb      	adds	r3, r7, #7
 80279ee:	4619      	mov	r1, r3
 80279f0:	f242 007a 	movw	r0, #8314	; 0x207a
 80279f4:	f7fd fcec 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_C_REG+1, &status_reg_temp_l);
 80279f8:	1dbb      	adds	r3, r7, #6
 80279fa:	4619      	mov	r1, r3
 80279fc:	f242 007b 	movw	r0, #8315	; 0x207b
 8027a00:	f7fd fce6 	bl	80253d0 <fm25v02_read>
	status_registers.current_phase_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027a04:	79fb      	ldrb	r3, [r7, #7]
 8027a06:	021b      	lsls	r3, r3, #8
 8027a08:	b21a      	sxth	r2, r3
 8027a0a:	79bb      	ldrb	r3, [r7, #6]
 8027a0c:	b21b      	sxth	r3, r3
 8027a0e:	4313      	orrs	r3, r2
 8027a10:	b21b      	sxth	r3, r3
 8027a12:	b29a      	uxth	r2, r3
 8027a14:	4b5b      	ldr	r3, [pc, #364]	; (8027b84 <read_status_registers+0xc24>)
 8027a16:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

	fm25v02_read(2*CURRENT_VOLTAGE_A_REG, &status_reg_temp_h);
 8027a1a:	1dfb      	adds	r3, r7, #7
 8027a1c:	4619      	mov	r1, r3
 8027a1e:	f242 007c 	movw	r0, #8316	; 0x207c
 8027a22:	f7fd fcd5 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_A_REG+1, &status_reg_temp_l);
 8027a26:	1dbb      	adds	r3, r7, #6
 8027a28:	4619      	mov	r1, r3
 8027a2a:	f242 007d 	movw	r0, #8317	; 0x207d
 8027a2e:	f7fd fccf 	bl	80253d0 <fm25v02_read>
	status_registers.current_voltage_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027a32:	79fb      	ldrb	r3, [r7, #7]
 8027a34:	021b      	lsls	r3, r3, #8
 8027a36:	b21a      	sxth	r2, r3
 8027a38:	79bb      	ldrb	r3, [r7, #6]
 8027a3a:	b21b      	sxth	r3, r3
 8027a3c:	4313      	orrs	r3, r2
 8027a3e:	b21b      	sxth	r3, r3
 8027a40:	b29a      	uxth	r2, r3
 8027a42:	4b50      	ldr	r3, [pc, #320]	; (8027b84 <read_status_registers+0xc24>)
 8027a44:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

	fm25v02_read(2*CURRENT_VOLTAGE_B_REG, &status_reg_temp_h);
 8027a48:	1dfb      	adds	r3, r7, #7
 8027a4a:	4619      	mov	r1, r3
 8027a4c:	f242 007e 	movw	r0, #8318	; 0x207e
 8027a50:	f7fd fcbe 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_B_REG+1, &status_reg_temp_l);
 8027a54:	1dbb      	adds	r3, r7, #6
 8027a56:	4619      	mov	r1, r3
 8027a58:	f242 007f 	movw	r0, #8319	; 0x207f
 8027a5c:	f7fd fcb8 	bl	80253d0 <fm25v02_read>
	status_registers.current_voltage_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027a60:	79fb      	ldrb	r3, [r7, #7]
 8027a62:	021b      	lsls	r3, r3, #8
 8027a64:	b21a      	sxth	r2, r3
 8027a66:	79bb      	ldrb	r3, [r7, #6]
 8027a68:	b21b      	sxth	r3, r3
 8027a6a:	4313      	orrs	r3, r2
 8027a6c:	b21b      	sxth	r3, r3
 8027a6e:	b29a      	uxth	r2, r3
 8027a70:	4b44      	ldr	r3, [pc, #272]	; (8027b84 <read_status_registers+0xc24>)
 8027a72:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	fm25v02_read(2*CURRENT_VOLTAGE_C_REG, &status_reg_temp_h);
 8027a76:	1dfb      	adds	r3, r7, #7
 8027a78:	4619      	mov	r1, r3
 8027a7a:	f44f 5002 	mov.w	r0, #8320	; 0x2080
 8027a7e:	f7fd fca7 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_C_REG+1, &status_reg_temp_l);
 8027a82:	1dbb      	adds	r3, r7, #6
 8027a84:	4619      	mov	r1, r3
 8027a86:	f242 0081 	movw	r0, #8321	; 0x2081
 8027a8a:	f7fd fca1 	bl	80253d0 <fm25v02_read>
	status_registers.current_voltage_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027a8e:	79fb      	ldrb	r3, [r7, #7]
 8027a90:	021b      	lsls	r3, r3, #8
 8027a92:	b21a      	sxth	r2, r3
 8027a94:	79bb      	ldrb	r3, [r7, #6]
 8027a96:	b21b      	sxth	r3, r3
 8027a98:	4313      	orrs	r3, r2
 8027a9a:	b21b      	sxth	r3, r3
 8027a9c:	b29a      	uxth	r2, r3
 8027a9e:	4b39      	ldr	r3, [pc, #228]	; (8027b84 <read_status_registers+0xc24>)
 8027aa0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	fm25v02_read(2*CE_303_TOTAL_POWER_H_REG, &status_reg_temp_h);
 8027aa4:	1dfb      	adds	r3, r7, #7
 8027aa6:	4619      	mov	r1, r3
 8027aa8:	f242 0082 	movw	r0, #8322	; 0x2082
 8027aac:	f7fd fc90 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_H_REG+1, &status_reg_temp_l);
 8027ab0:	1dbb      	adds	r3, r7, #6
 8027ab2:	4619      	mov	r1, r3
 8027ab4:	f242 0083 	movw	r0, #8323	; 0x2083
 8027ab8:	f7fd fc8a 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_total_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027abc:	79fb      	ldrb	r3, [r7, #7]
 8027abe:	021b      	lsls	r3, r3, #8
 8027ac0:	b21a      	sxth	r2, r3
 8027ac2:	79bb      	ldrb	r3, [r7, #6]
 8027ac4:	b21b      	sxth	r3, r3
 8027ac6:	4313      	orrs	r3, r2
 8027ac8:	b21b      	sxth	r3, r3
 8027aca:	b29a      	uxth	r2, r3
 8027acc:	4b2d      	ldr	r3, [pc, #180]	; (8027b84 <read_status_registers+0xc24>)
 8027ace:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	fm25v02_read(2*CE_303_TOTAL_POWER_L_REG, &status_reg_temp_h);
 8027ad2:	1dfb      	adds	r3, r7, #7
 8027ad4:	4619      	mov	r1, r3
 8027ad6:	f242 0084 	movw	r0, #8324	; 0x2084
 8027ada:	f7fd fc79 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_L_REG+1, &status_reg_temp_l);
 8027ade:	1dbb      	adds	r3, r7, #6
 8027ae0:	4619      	mov	r1, r3
 8027ae2:	f242 0085 	movw	r0, #8325	; 0x2085
 8027ae6:	f7fd fc73 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_total_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027aea:	79fb      	ldrb	r3, [r7, #7]
 8027aec:	021b      	lsls	r3, r3, #8
 8027aee:	b21a      	sxth	r2, r3
 8027af0:	79bb      	ldrb	r3, [r7, #6]
 8027af2:	b21b      	sxth	r3, r3
 8027af4:	4313      	orrs	r3, r2
 8027af6:	b21b      	sxth	r3, r3
 8027af8:	b29a      	uxth	r2, r3
 8027afa:	4b22      	ldr	r3, [pc, #136]	; (8027b84 <read_status_registers+0xc24>)
 8027afc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

	fm25v02_read(2*CE_303_TOTAL_POWER_M_REG, &status_reg_temp_h);
 8027b00:	1dfb      	adds	r3, r7, #7
 8027b02:	4619      	mov	r1, r3
 8027b04:	f242 0086 	movw	r0, #8326	; 0x2086
 8027b08:	f7fd fc62 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_M_REG+1, &status_reg_temp_l);
 8027b0c:	1dbb      	adds	r3, r7, #6
 8027b0e:	4619      	mov	r1, r3
 8027b10:	f242 0087 	movw	r0, #8327	; 0x2087
 8027b14:	f7fd fc5c 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_total_power_m_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027b18:	79fb      	ldrb	r3, [r7, #7]
 8027b1a:	021b      	lsls	r3, r3, #8
 8027b1c:	b21a      	sxth	r2, r3
 8027b1e:	79bb      	ldrb	r3, [r7, #6]
 8027b20:	b21b      	sxth	r3, r3
 8027b22:	4313      	orrs	r3, r2
 8027b24:	b21b      	sxth	r3, r3
 8027b26:	b29a      	uxth	r2, r3
 8027b28:	4b16      	ldr	r3, [pc, #88]	; (8027b84 <read_status_registers+0xc24>)
 8027b2a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	fm25v02_read(2*CE_303_TARIF1_POWER_H_REG, &status_reg_temp_h);
 8027b2e:	1dfb      	adds	r3, r7, #7
 8027b30:	4619      	mov	r1, r3
 8027b32:	f242 0088 	movw	r0, #8328	; 0x2088
 8027b36:	f7fd fc4b 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_H_REG+1, &status_reg_temp_l);
 8027b3a:	1dbb      	adds	r3, r7, #6
 8027b3c:	4619      	mov	r1, r3
 8027b3e:	f242 0089 	movw	r0, #8329	; 0x2089
 8027b42:	f7fd fc45 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif1_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027b46:	79fb      	ldrb	r3, [r7, #7]
 8027b48:	021b      	lsls	r3, r3, #8
 8027b4a:	b21a      	sxth	r2, r3
 8027b4c:	79bb      	ldrb	r3, [r7, #6]
 8027b4e:	b21b      	sxth	r3, r3
 8027b50:	4313      	orrs	r3, r2
 8027b52:	b21b      	sxth	r3, r3
 8027b54:	b29a      	uxth	r2, r3
 8027b56:	4b0b      	ldr	r3, [pc, #44]	; (8027b84 <read_status_registers+0xc24>)
 8027b58:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

	fm25v02_read(2*CE_303_TARIF1_POWER_L_REG, &status_reg_temp_h);
 8027b5c:	1dfb      	adds	r3, r7, #7
 8027b5e:	4619      	mov	r1, r3
 8027b60:	f242 008a 	movw	r0, #8330	; 0x208a
 8027b64:	f7fd fc34 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_L_REG+1, &status_reg_temp_l);
 8027b68:	1dbb      	adds	r3, r7, #6
 8027b6a:	4619      	mov	r1, r3
 8027b6c:	f242 008b 	movw	r0, #8331	; 0x208b
 8027b70:	f7fd fc2e 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif1_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027b74:	79fb      	ldrb	r3, [r7, #7]
 8027b76:	021b      	lsls	r3, r3, #8
 8027b78:	b21a      	sxth	r2, r3
 8027b7a:	79bb      	ldrb	r3, [r7, #6]
 8027b7c:	b21b      	sxth	r3, r3
 8027b7e:	4313      	orrs	r3, r2
 8027b80:	b21b      	sxth	r3, r3
 8027b82:	e001      	b.n	8027b88 <read_status_registers+0xc28>
 8027b84:	2000a10c 	.word	0x2000a10c
 8027b88:	b29a      	uxth	r2, r3
 8027b8a:	4bc3      	ldr	r3, [pc, #780]	; (8027e98 <read_status_registers+0xf38>)
 8027b8c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	fm25v02_read(2*CE_303_TARIF1_POWER_MIL_REG, &status_reg_temp_h);
 8027b90:	1dfb      	adds	r3, r7, #7
 8027b92:	4619      	mov	r1, r3
 8027b94:	f242 008c 	movw	r0, #8332	; 0x208c
 8027b98:	f7fd fc1a 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_MIL_REG+1, &status_reg_temp_l);
 8027b9c:	1dbb      	adds	r3, r7, #6
 8027b9e:	4619      	mov	r1, r3
 8027ba0:	f242 008d 	movw	r0, #8333	; 0x208d
 8027ba4:	f7fd fc14 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif1_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027ba8:	79fb      	ldrb	r3, [r7, #7]
 8027baa:	021b      	lsls	r3, r3, #8
 8027bac:	b21a      	sxth	r2, r3
 8027bae:	79bb      	ldrb	r3, [r7, #6]
 8027bb0:	b21b      	sxth	r3, r3
 8027bb2:	4313      	orrs	r3, r2
 8027bb4:	b21b      	sxth	r3, r3
 8027bb6:	b29a      	uxth	r2, r3
 8027bb8:	4bb7      	ldr	r3, [pc, #732]	; (8027e98 <read_status_registers+0xf38>)
 8027bba:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

	fm25v02_read(2*CE_303_TARIF2_POWER_H_REG, &status_reg_temp_h);
 8027bbe:	1dfb      	adds	r3, r7, #7
 8027bc0:	4619      	mov	r1, r3
 8027bc2:	f242 008e 	movw	r0, #8334	; 0x208e
 8027bc6:	f7fd fc03 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_H_REG+1, &status_reg_temp_l);
 8027bca:	1dbb      	adds	r3, r7, #6
 8027bcc:	4619      	mov	r1, r3
 8027bce:	f242 008f 	movw	r0, #8335	; 0x208f
 8027bd2:	f7fd fbfd 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif2_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027bd6:	79fb      	ldrb	r3, [r7, #7]
 8027bd8:	021b      	lsls	r3, r3, #8
 8027bda:	b21a      	sxth	r2, r3
 8027bdc:	79bb      	ldrb	r3, [r7, #6]
 8027bde:	b21b      	sxth	r3, r3
 8027be0:	4313      	orrs	r3, r2
 8027be2:	b21b      	sxth	r3, r3
 8027be4:	b29a      	uxth	r2, r3
 8027be6:	4bac      	ldr	r3, [pc, #688]	; (8027e98 <read_status_registers+0xf38>)
 8027be8:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

	fm25v02_read(2*CE_303_TARIF2_POWER_L_REG, &status_reg_temp_h);
 8027bec:	1dfb      	adds	r3, r7, #7
 8027bee:	4619      	mov	r1, r3
 8027bf0:	f242 0090 	movw	r0, #8336	; 0x2090
 8027bf4:	f7fd fbec 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_L_REG+1, &status_reg_temp_l);
 8027bf8:	1dbb      	adds	r3, r7, #6
 8027bfa:	4619      	mov	r1, r3
 8027bfc:	f242 0091 	movw	r0, #8337	; 0x2091
 8027c00:	f7fd fbe6 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif2_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027c04:	79fb      	ldrb	r3, [r7, #7]
 8027c06:	021b      	lsls	r3, r3, #8
 8027c08:	b21a      	sxth	r2, r3
 8027c0a:	79bb      	ldrb	r3, [r7, #6]
 8027c0c:	b21b      	sxth	r3, r3
 8027c0e:	4313      	orrs	r3, r2
 8027c10:	b21b      	sxth	r3, r3
 8027c12:	b29a      	uxth	r2, r3
 8027c14:	4ba0      	ldr	r3, [pc, #640]	; (8027e98 <read_status_registers+0xf38>)
 8027c16:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

	fm25v02_read(2*CE_303_TARIF2_POWER_MIL_REG, &status_reg_temp_h);
 8027c1a:	1dfb      	adds	r3, r7, #7
 8027c1c:	4619      	mov	r1, r3
 8027c1e:	f242 0092 	movw	r0, #8338	; 0x2092
 8027c22:	f7fd fbd5 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_MIL_REG+1, &status_reg_temp_l);
 8027c26:	1dbb      	adds	r3, r7, #6
 8027c28:	4619      	mov	r1, r3
 8027c2a:	f242 0093 	movw	r0, #8339	; 0x2093
 8027c2e:	f7fd fbcf 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif2_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027c32:	79fb      	ldrb	r3, [r7, #7]
 8027c34:	021b      	lsls	r3, r3, #8
 8027c36:	b21a      	sxth	r2, r3
 8027c38:	79bb      	ldrb	r3, [r7, #6]
 8027c3a:	b21b      	sxth	r3, r3
 8027c3c:	4313      	orrs	r3, r2
 8027c3e:	b21b      	sxth	r3, r3
 8027c40:	b29a      	uxth	r2, r3
 8027c42:	4b95      	ldr	r3, [pc, #596]	; (8027e98 <read_status_registers+0xf38>)
 8027c44:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

	fm25v02_read(2*CE_303_TARIF3_POWER_H_REG, &status_reg_temp_h);
 8027c48:	1dfb      	adds	r3, r7, #7
 8027c4a:	4619      	mov	r1, r3
 8027c4c:	f242 0094 	movw	r0, #8340	; 0x2094
 8027c50:	f7fd fbbe 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_H_REG+1, &status_reg_temp_l);
 8027c54:	1dbb      	adds	r3, r7, #6
 8027c56:	4619      	mov	r1, r3
 8027c58:	f242 0095 	movw	r0, #8341	; 0x2095
 8027c5c:	f7fd fbb8 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif3_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027c60:	79fb      	ldrb	r3, [r7, #7]
 8027c62:	021b      	lsls	r3, r3, #8
 8027c64:	b21a      	sxth	r2, r3
 8027c66:	79bb      	ldrb	r3, [r7, #6]
 8027c68:	b21b      	sxth	r3, r3
 8027c6a:	4313      	orrs	r3, r2
 8027c6c:	b21b      	sxth	r3, r3
 8027c6e:	b29a      	uxth	r2, r3
 8027c70:	4b89      	ldr	r3, [pc, #548]	; (8027e98 <read_status_registers+0xf38>)
 8027c72:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	fm25v02_read(2*CE_303_TARIF3_POWER_L_REG, &status_reg_temp_h);
 8027c76:	1dfb      	adds	r3, r7, #7
 8027c78:	4619      	mov	r1, r3
 8027c7a:	f242 0096 	movw	r0, #8342	; 0x2096
 8027c7e:	f7fd fba7 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_L_REG+1, &status_reg_temp_l);
 8027c82:	1dbb      	adds	r3, r7, #6
 8027c84:	4619      	mov	r1, r3
 8027c86:	f242 0097 	movw	r0, #8343	; 0x2097
 8027c8a:	f7fd fba1 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif3_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027c8e:	79fb      	ldrb	r3, [r7, #7]
 8027c90:	021b      	lsls	r3, r3, #8
 8027c92:	b21a      	sxth	r2, r3
 8027c94:	79bb      	ldrb	r3, [r7, #6]
 8027c96:	b21b      	sxth	r3, r3
 8027c98:	4313      	orrs	r3, r2
 8027c9a:	b21b      	sxth	r3, r3
 8027c9c:	b29a      	uxth	r2, r3
 8027c9e:	4b7e      	ldr	r3, [pc, #504]	; (8027e98 <read_status_registers+0xf38>)
 8027ca0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96

	fm25v02_read(2*CE_303_TARIF3_POWER_MIL_REG, &status_reg_temp_h);
 8027ca4:	1dfb      	adds	r3, r7, #7
 8027ca6:	4619      	mov	r1, r3
 8027ca8:	f242 0098 	movw	r0, #8344	; 0x2098
 8027cac:	f7fd fb90 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_MIL_REG+1, &status_reg_temp_l);
 8027cb0:	1dbb      	adds	r3, r7, #6
 8027cb2:	4619      	mov	r1, r3
 8027cb4:	f242 0099 	movw	r0, #8345	; 0x2099
 8027cb8:	f7fd fb8a 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif3_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027cbc:	79fb      	ldrb	r3, [r7, #7]
 8027cbe:	021b      	lsls	r3, r3, #8
 8027cc0:	b21a      	sxth	r2, r3
 8027cc2:	79bb      	ldrb	r3, [r7, #6]
 8027cc4:	b21b      	sxth	r3, r3
 8027cc6:	4313      	orrs	r3, r2
 8027cc8:	b21b      	sxth	r3, r3
 8027cca:	b29a      	uxth	r2, r3
 8027ccc:	4b72      	ldr	r3, [pc, #456]	; (8027e98 <read_status_registers+0xf38>)
 8027cce:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

	fm25v02_read(2*CE_303_TARIF4_POWER_H_REG, &status_reg_temp_h);
 8027cd2:	1dfb      	adds	r3, r7, #7
 8027cd4:	4619      	mov	r1, r3
 8027cd6:	f242 009a 	movw	r0, #8346	; 0x209a
 8027cda:	f7fd fb79 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_H_REG+1, &status_reg_temp_l);
 8027cde:	1dbb      	adds	r3, r7, #6
 8027ce0:	4619      	mov	r1, r3
 8027ce2:	f242 009b 	movw	r0, #8347	; 0x209b
 8027ce6:	f7fd fb73 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif4_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027cea:	79fb      	ldrb	r3, [r7, #7]
 8027cec:	021b      	lsls	r3, r3, #8
 8027cee:	b21a      	sxth	r2, r3
 8027cf0:	79bb      	ldrb	r3, [r7, #6]
 8027cf2:	b21b      	sxth	r3, r3
 8027cf4:	4313      	orrs	r3, r2
 8027cf6:	b21b      	sxth	r3, r3
 8027cf8:	b29a      	uxth	r2, r3
 8027cfa:	4b67      	ldr	r3, [pc, #412]	; (8027e98 <read_status_registers+0xf38>)
 8027cfc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

	fm25v02_read(2*CE_303_TARIF4_POWER_L_REG, &status_reg_temp_h);
 8027d00:	1dfb      	adds	r3, r7, #7
 8027d02:	4619      	mov	r1, r3
 8027d04:	f242 009c 	movw	r0, #8348	; 0x209c
 8027d08:	f7fd fb62 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_L_REG+1, &status_reg_temp_l);
 8027d0c:	1dbb      	adds	r3, r7, #6
 8027d0e:	4619      	mov	r1, r3
 8027d10:	f242 009d 	movw	r0, #8349	; 0x209d
 8027d14:	f7fd fb5c 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif4_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027d18:	79fb      	ldrb	r3, [r7, #7]
 8027d1a:	021b      	lsls	r3, r3, #8
 8027d1c:	b21a      	sxth	r2, r3
 8027d1e:	79bb      	ldrb	r3, [r7, #6]
 8027d20:	b21b      	sxth	r3, r3
 8027d22:	4313      	orrs	r3, r2
 8027d24:	b21b      	sxth	r3, r3
 8027d26:	b29a      	uxth	r2, r3
 8027d28:	4b5b      	ldr	r3, [pc, #364]	; (8027e98 <read_status_registers+0xf38>)
 8027d2a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	fm25v02_read(2*CE_303_TARIF4_POWER_MIL_REG, &status_reg_temp_h);
 8027d2e:	1dfb      	adds	r3, r7, #7
 8027d30:	4619      	mov	r1, r3
 8027d32:	f242 009e 	movw	r0, #8350	; 0x209e
 8027d36:	f7fd fb4b 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_MIL_REG+1, &status_reg_temp_l);
 8027d3a:	1dbb      	adds	r3, r7, #6
 8027d3c:	4619      	mov	r1, r3
 8027d3e:	f242 009f 	movw	r0, #8351	; 0x209f
 8027d42:	f7fd fb45 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif4_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027d46:	79fb      	ldrb	r3, [r7, #7]
 8027d48:	021b      	lsls	r3, r3, #8
 8027d4a:	b21a      	sxth	r2, r3
 8027d4c:	79bb      	ldrb	r3, [r7, #6]
 8027d4e:	b21b      	sxth	r3, r3
 8027d50:	4313      	orrs	r3, r2
 8027d52:	b21b      	sxth	r3, r3
 8027d54:	b29a      	uxth	r2, r3
 8027d56:	4b50      	ldr	r3, [pc, #320]	; (8027e98 <read_status_registers+0xf38>)
 8027d58:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	fm25v02_read(2*CE_303_TARIF5_POWER_H_REG, &status_reg_temp_h);
 8027d5c:	1dfb      	adds	r3, r7, #7
 8027d5e:	4619      	mov	r1, r3
 8027d60:	f242 00a0 	movw	r0, #8352	; 0x20a0
 8027d64:	f7fd fb34 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_H_REG+1, &status_reg_temp_l);
 8027d68:	1dbb      	adds	r3, r7, #6
 8027d6a:	4619      	mov	r1, r3
 8027d6c:	f242 00a1 	movw	r0, #8353	; 0x20a1
 8027d70:	f7fd fb2e 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif5_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027d74:	79fb      	ldrb	r3, [r7, #7]
 8027d76:	021b      	lsls	r3, r3, #8
 8027d78:	b21a      	sxth	r2, r3
 8027d7a:	79bb      	ldrb	r3, [r7, #6]
 8027d7c:	b21b      	sxth	r3, r3
 8027d7e:	4313      	orrs	r3, r2
 8027d80:	b21b      	sxth	r3, r3
 8027d82:	b29a      	uxth	r2, r3
 8027d84:	4b44      	ldr	r3, [pc, #272]	; (8027e98 <read_status_registers+0xf38>)
 8027d86:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	fm25v02_read(2*CE_303_TARIF5_POWER_L_REG, &status_reg_temp_h);
 8027d8a:	1dfb      	adds	r3, r7, #7
 8027d8c:	4619      	mov	r1, r3
 8027d8e:	f242 00a2 	movw	r0, #8354	; 0x20a2
 8027d92:	f7fd fb1d 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_L_REG+1, &status_reg_temp_l);
 8027d96:	1dbb      	adds	r3, r7, #6
 8027d98:	4619      	mov	r1, r3
 8027d9a:	f242 00a3 	movw	r0, #8355	; 0x20a3
 8027d9e:	f7fd fb17 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif5_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027da2:	79fb      	ldrb	r3, [r7, #7]
 8027da4:	021b      	lsls	r3, r3, #8
 8027da6:	b21a      	sxth	r2, r3
 8027da8:	79bb      	ldrb	r3, [r7, #6]
 8027daa:	b21b      	sxth	r3, r3
 8027dac:	4313      	orrs	r3, r2
 8027dae:	b21b      	sxth	r3, r3
 8027db0:	b29a      	uxth	r2, r3
 8027db2:	4b39      	ldr	r3, [pc, #228]	; (8027e98 <read_status_registers+0xf38>)
 8027db4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2

	fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG, &status_reg_temp_h);
 8027db8:	1dfb      	adds	r3, r7, #7
 8027dba:	4619      	mov	r1, r3
 8027dbc:	f242 00a4 	movw	r0, #8356	; 0x20a4
 8027dc0:	f7fd fb06 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG+1, &status_reg_temp_l);
 8027dc4:	1dbb      	adds	r3, r7, #6
 8027dc6:	4619      	mov	r1, r3
 8027dc8:	f242 00a5 	movw	r0, #8357	; 0x20a5
 8027dcc:	f7fd fb00 	bl	80253d0 <fm25v02_read>
	status_registers.ce303_tarif5_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027dd0:	79fb      	ldrb	r3, [r7, #7]
 8027dd2:	021b      	lsls	r3, r3, #8
 8027dd4:	b21a      	sxth	r2, r3
 8027dd6:	79bb      	ldrb	r3, [r7, #6]
 8027dd8:	b21b      	sxth	r3, r3
 8027dda:	4313      	orrs	r3, r2
 8027ddc:	b21b      	sxth	r3, r3
 8027dde:	b29a      	uxth	r2, r3
 8027de0:	4b2d      	ldr	r3, [pc, #180]	; (8027e98 <read_status_registers+0xf38>)
 8027de2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4

	fm25v02_read(2*SIGNAL_LEVEL_REG, &status_reg_temp_h);
 8027de6:	1dfb      	adds	r3, r7, #7
 8027de8:	4619      	mov	r1, r3
 8027dea:	f242 00a6 	movw	r0, #8358	; 0x20a6
 8027dee:	f7fd faef 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*SIGNAL_LEVEL_REG+1, &status_reg_temp_l);
 8027df2:	1dbb      	adds	r3, r7, #6
 8027df4:	4619      	mov	r1, r3
 8027df6:	f242 00a7 	movw	r0, #8359	; 0x20a7
 8027dfa:	f7fd fae9 	bl	80253d0 <fm25v02_read>
	status_registers.signal_level_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027dfe:	79fb      	ldrb	r3, [r7, #7]
 8027e00:	021b      	lsls	r3, r3, #8
 8027e02:	b21a      	sxth	r2, r3
 8027e04:	79bb      	ldrb	r3, [r7, #6]
 8027e06:	b21b      	sxth	r3, r3
 8027e08:	4313      	orrs	r3, r2
 8027e0a:	b21b      	sxth	r3, r3
 8027e0c:	b29a      	uxth	r2, r3
 8027e0e:	4b22      	ldr	r3, [pc, #136]	; (8027e98 <read_status_registers+0xf38>)
 8027e10:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	fm25v02_read(2*ADVANCED_LOOP_REG, &status_reg_temp_h);
 8027e14:	1dfb      	adds	r3, r7, #7
 8027e16:	4619      	mov	r1, r3
 8027e18:	f242 00aa 	movw	r0, #8362	; 0x20aa
 8027e1c:	f7fd fad8 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADVANCED_LOOP_REG+1, &status_reg_temp_l);
 8027e20:	1dbb      	adds	r3, r7, #6
 8027e22:	4619      	mov	r1, r3
 8027e24:	f242 00ab 	movw	r0, #8363	; 0x20ab
 8027e28:	f7fd fad2 	bl	80253d0 <fm25v02_read>
	status_registers.advanced_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027e2c:	79fb      	ldrb	r3, [r7, #7]
 8027e2e:	021b      	lsls	r3, r3, #8
 8027e30:	b21a      	sxth	r2, r3
 8027e32:	79bb      	ldrb	r3, [r7, #6]
 8027e34:	b21b      	sxth	r3, r3
 8027e36:	4313      	orrs	r3, r2
 8027e38:	b21b      	sxth	r3, r3
 8027e3a:	b29a      	uxth	r2, r3
 8027e3c:	4b16      	ldr	r3, [pc, #88]	; (8027e98 <read_status_registers+0xf38>)
 8027e3e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	fm25v02_read(2*ADDITIONAL_INPUT_REG1, &status_reg_temp_h);
 8027e42:	1dfb      	adds	r3, r7, #7
 8027e44:	4619      	mov	r1, r3
 8027e46:	f242 00ac 	movw	r0, #8364	; 0x20ac
 8027e4a:	f7fd fac1 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDITIONAL_INPUT_REG1+1, &status_reg_temp_l);
 8027e4e:	1dbb      	adds	r3, r7, #6
 8027e50:	4619      	mov	r1, r3
 8027e52:	f242 00ad 	movw	r0, #8365	; 0x20ad
 8027e56:	f7fd fabb 	bl	80253d0 <fm25v02_read>
	status_registers.additional_input_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027e5a:	79fb      	ldrb	r3, [r7, #7]
 8027e5c:	021b      	lsls	r3, r3, #8
 8027e5e:	b21a      	sxth	r2, r3
 8027e60:	79bb      	ldrb	r3, [r7, #6]
 8027e62:	b21b      	sxth	r3, r3
 8027e64:	4313      	orrs	r3, r2
 8027e66:	b21b      	sxth	r3, r3
 8027e68:	b29a      	uxth	r2, r3
 8027e6a:	4b0b      	ldr	r3, [pc, #44]	; (8027e98 <read_status_registers+0xf38>)
 8027e6c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

	fm25v02_read(2*ADDITIONAL_INPUT_REG2, &status_reg_temp_h);
 8027e70:	1dfb      	adds	r3, r7, #7
 8027e72:	4619      	mov	r1, r3
 8027e74:	f242 00ae 	movw	r0, #8366	; 0x20ae
 8027e78:	f7fd faaa 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDITIONAL_INPUT_REG2+1, &status_reg_temp_l);
 8027e7c:	1dbb      	adds	r3, r7, #6
 8027e7e:	4619      	mov	r1, r3
 8027e80:	f242 00af 	movw	r0, #8367	; 0x20af
 8027e84:	f7fd faa4 	bl	80253d0 <fm25v02_read>
	status_registers.additional_input_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027e88:	79fb      	ldrb	r3, [r7, #7]
 8027e8a:	021b      	lsls	r3, r3, #8
 8027e8c:	b21a      	sxth	r2, r3
 8027e8e:	79bb      	ldrb	r3, [r7, #6]
 8027e90:	b21b      	sxth	r3, r3
 8027e92:	4313      	orrs	r3, r2
 8027e94:	b21b      	sxth	r3, r3
 8027e96:	e001      	b.n	8027e9c <read_status_registers+0xf3c>
 8027e98:	2000a10c 	.word	0x2000a10c
 8027e9c:	b29a      	uxth	r2, r3
 8027e9e:	4b62      	ldr	r3, [pc, #392]	; (8028028 <read_status_registers+0x10c8>)
 8027ea0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	fm25v02_read(2*ICCID_NUMBER_REG1, &status_reg_temp_h);
 8027ea4:	1dfb      	adds	r3, r7, #7
 8027ea6:	4619      	mov	r1, r3
 8027ea8:	f242 00b0 	movw	r0, #8368	; 0x20b0
 8027eac:	f7fd fa90 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG1+1, &status_reg_temp_l);
 8027eb0:	1dbb      	adds	r3, r7, #6
 8027eb2:	4619      	mov	r1, r3
 8027eb4:	f242 00b1 	movw	r0, #8369	; 0x20b1
 8027eb8:	f7fd fa8a 	bl	80253d0 <fm25v02_read>
	status_registers.iccid_number_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027ebc:	79fb      	ldrb	r3, [r7, #7]
 8027ebe:	021b      	lsls	r3, r3, #8
 8027ec0:	b21a      	sxth	r2, r3
 8027ec2:	79bb      	ldrb	r3, [r7, #6]
 8027ec4:	b21b      	sxth	r3, r3
 8027ec6:	4313      	orrs	r3, r2
 8027ec8:	b21b      	sxth	r3, r3
 8027eca:	b29a      	uxth	r2, r3
 8027ecc:	4b56      	ldr	r3, [pc, #344]	; (8028028 <read_status_registers+0x10c8>)
 8027ece:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	fm25v02_read(2*ICCID_NUMBER_REG2, &status_reg_temp_h);
 8027ed2:	1dfb      	adds	r3, r7, #7
 8027ed4:	4619      	mov	r1, r3
 8027ed6:	f242 00b2 	movw	r0, #8370	; 0x20b2
 8027eda:	f7fd fa79 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG2+1, &status_reg_temp_l);
 8027ede:	1dbb      	adds	r3, r7, #6
 8027ee0:	4619      	mov	r1, r3
 8027ee2:	f242 00b3 	movw	r0, #8371	; 0x20b3
 8027ee6:	f7fd fa73 	bl	80253d0 <fm25v02_read>
	status_registers.iccid_number_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027eea:	79fb      	ldrb	r3, [r7, #7]
 8027eec:	021b      	lsls	r3, r3, #8
 8027eee:	b21a      	sxth	r2, r3
 8027ef0:	79bb      	ldrb	r3, [r7, #6]
 8027ef2:	b21b      	sxth	r3, r3
 8027ef4:	4313      	orrs	r3, r2
 8027ef6:	b21b      	sxth	r3, r3
 8027ef8:	b29a      	uxth	r2, r3
 8027efa:	4b4b      	ldr	r3, [pc, #300]	; (8028028 <read_status_registers+0x10c8>)
 8027efc:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	fm25v02_read(2*ICCID_NUMBER_REG3, &status_reg_temp_h);
 8027f00:	1dfb      	adds	r3, r7, #7
 8027f02:	4619      	mov	r1, r3
 8027f04:	f242 00b4 	movw	r0, #8372	; 0x20b4
 8027f08:	f7fd fa62 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG3+1, &status_reg_temp_l);
 8027f0c:	1dbb      	adds	r3, r7, #6
 8027f0e:	4619      	mov	r1, r3
 8027f10:	f242 00b5 	movw	r0, #8373	; 0x20b5
 8027f14:	f7fd fa5c 	bl	80253d0 <fm25v02_read>
	status_registers.iccid_number_reg3 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027f18:	79fb      	ldrb	r3, [r7, #7]
 8027f1a:	021b      	lsls	r3, r3, #8
 8027f1c:	b21a      	sxth	r2, r3
 8027f1e:	79bb      	ldrb	r3, [r7, #6]
 8027f20:	b21b      	sxth	r3, r3
 8027f22:	4313      	orrs	r3, r2
 8027f24:	b21b      	sxth	r3, r3
 8027f26:	b29a      	uxth	r2, r3
 8027f28:	4b3f      	ldr	r3, [pc, #252]	; (8028028 <read_status_registers+0x10c8>)
 8027f2a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	fm25v02_read(2*ICCID_NUMBER_REG4, &status_reg_temp_h);
 8027f2e:	1dfb      	adds	r3, r7, #7
 8027f30:	4619      	mov	r1, r3
 8027f32:	f242 00b6 	movw	r0, #8374	; 0x20b6
 8027f36:	f7fd fa4b 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG4+1, &status_reg_temp_l);
 8027f3a:	1dbb      	adds	r3, r7, #6
 8027f3c:	4619      	mov	r1, r3
 8027f3e:	f242 00b7 	movw	r0, #8375	; 0x20b7
 8027f42:	f7fd fa45 	bl	80253d0 <fm25v02_read>
	status_registers.iccid_number_reg4 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027f46:	79fb      	ldrb	r3, [r7, #7]
 8027f48:	021b      	lsls	r3, r3, #8
 8027f4a:	b21a      	sxth	r2, r3
 8027f4c:	79bb      	ldrb	r3, [r7, #6]
 8027f4e:	b21b      	sxth	r3, r3
 8027f50:	4313      	orrs	r3, r2
 8027f52:	b21b      	sxth	r3, r3
 8027f54:	b29a      	uxth	r2, r3
 8027f56:	4b34      	ldr	r3, [pc, #208]	; (8028028 <read_status_registers+0x10c8>)
 8027f58:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	fm25v02_read(2*ICCID_NUMBER_REG5, &status_reg_temp_h);
 8027f5c:	1dfb      	adds	r3, r7, #7
 8027f5e:	4619      	mov	r1, r3
 8027f60:	f242 00b8 	movw	r0, #8376	; 0x20b8
 8027f64:	f7fd fa34 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG5+1, &status_reg_temp_l);
 8027f68:	1dbb      	adds	r3, r7, #6
 8027f6a:	4619      	mov	r1, r3
 8027f6c:	f242 00b9 	movw	r0, #8377	; 0x20b9
 8027f70:	f7fd fa2e 	bl	80253d0 <fm25v02_read>
	status_registers.iccid_number_reg5 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027f74:	79fb      	ldrb	r3, [r7, #7]
 8027f76:	021b      	lsls	r3, r3, #8
 8027f78:	b21a      	sxth	r2, r3
 8027f7a:	79bb      	ldrb	r3, [r7, #6]
 8027f7c:	b21b      	sxth	r3, r3
 8027f7e:	4313      	orrs	r3, r2
 8027f80:	b21b      	sxth	r3, r3
 8027f82:	b29a      	uxth	r2, r3
 8027f84:	4b28      	ldr	r3, [pc, #160]	; (8028028 <read_status_registers+0x10c8>)
 8027f86:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

	fm25v02_read(2*ICCID_NUMBER_REG6, &status_reg_temp_h);
 8027f8a:	1dfb      	adds	r3, r7, #7
 8027f8c:	4619      	mov	r1, r3
 8027f8e:	f242 00ba 	movw	r0, #8378	; 0x20ba
 8027f92:	f7fd fa1d 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG6+1, &status_reg_temp_l);
 8027f96:	1dbb      	adds	r3, r7, #6
 8027f98:	4619      	mov	r1, r3
 8027f9a:	f242 00bb 	movw	r0, #8379	; 0x20bb
 8027f9e:	f7fd fa17 	bl	80253d0 <fm25v02_read>
	status_registers.iccid_number_reg6 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027fa2:	79fb      	ldrb	r3, [r7, #7]
 8027fa4:	021b      	lsls	r3, r3, #8
 8027fa6:	b21a      	sxth	r2, r3
 8027fa8:	79bb      	ldrb	r3, [r7, #6]
 8027faa:	b21b      	sxth	r3, r3
 8027fac:	4313      	orrs	r3, r2
 8027fae:	b21b      	sxth	r3, r3
 8027fb0:	b29a      	uxth	r2, r3
 8027fb2:	4b1d      	ldr	r3, [pc, #116]	; (8028028 <read_status_registers+0x10c8>)
 8027fb4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	fm25v02_read(2*ICCID_NUMBER_REG7, &status_reg_temp_h);
 8027fb8:	1dfb      	adds	r3, r7, #7
 8027fba:	4619      	mov	r1, r3
 8027fbc:	f242 00bc 	movw	r0, #8380	; 0x20bc
 8027fc0:	f7fd fa06 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG7+1, &status_reg_temp_l);
 8027fc4:	1dbb      	adds	r3, r7, #6
 8027fc6:	4619      	mov	r1, r3
 8027fc8:	f242 00bd 	movw	r0, #8381	; 0x20bd
 8027fcc:	f7fd fa00 	bl	80253d0 <fm25v02_read>
	status_registers.iccid_number_reg7 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027fd0:	79fb      	ldrb	r3, [r7, #7]
 8027fd2:	021b      	lsls	r3, r3, #8
 8027fd4:	b21a      	sxth	r2, r3
 8027fd6:	79bb      	ldrb	r3, [r7, #6]
 8027fd8:	b21b      	sxth	r3, r3
 8027fda:	4313      	orrs	r3, r2
 8027fdc:	b21b      	sxth	r3, r3
 8027fde:	b29a      	uxth	r2, r3
 8027fe0:	4b11      	ldr	r3, [pc, #68]	; (8028028 <read_status_registers+0x10c8>)
 8027fe2:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	fm25v02_read(2*ICCID_NUMBER_REG8, &status_reg_temp_h);
 8027fe6:	1dfb      	adds	r3, r7, #7
 8027fe8:	4619      	mov	r1, r3
 8027fea:	f242 00be 	movw	r0, #8382	; 0x20be
 8027fee:	f7fd f9ef 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG8+1, &status_reg_temp_l);
 8027ff2:	1dbb      	adds	r3, r7, #6
 8027ff4:	4619      	mov	r1, r3
 8027ff6:	f242 00bf 	movw	r0, #8383	; 0x20bf
 8027ffa:	f7fd f9e9 	bl	80253d0 <fm25v02_read>
	status_registers.iccid_number_reg8 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8027ffe:	79fb      	ldrb	r3, [r7, #7]
 8028000:	021b      	lsls	r3, r3, #8
 8028002:	b21a      	sxth	r2, r3
 8028004:	79bb      	ldrb	r3, [r7, #6]
 8028006:	b21b      	sxth	r3, r3
 8028008:	4313      	orrs	r3, r2
 802800a:	b21b      	sxth	r3, r3
 802800c:	b29a      	uxth	r2, r3
 802800e:	4b06      	ldr	r3, [pc, #24]	; (8028028 <read_status_registers+0x10c8>)
 8028010:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

	osMutexRelease(Fm25v02MutexHandle);
 8028014:	4b05      	ldr	r3, [pc, #20]	; (802802c <read_status_registers+0x10cc>)
 8028016:	681b      	ldr	r3, [r3, #0]
 8028018:	4618      	mov	r0, r3
 802801a:	f7ee fe8f 	bl	8016d3c <osMutexRelease>
}
 802801e:	bf00      	nop
 8028020:	3708      	adds	r7, #8
 8028022:	46bd      	mov	sp, r7
 8028024:	bd80      	pop	{r7, pc}
 8028026:	bf00      	nop
 8028028:	2000a10c 	.word	0x2000a10c
 802802c:	20009a6c 	.word	0x20009a6c

08028030 <read_control_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти управляющих регистров--------------
void read_control_registers(void)
{
 8028030:	b580      	push	{r7, lr}
 8028032:	b082      	sub	sp, #8
 8028034:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8028036:	4bbc      	ldr	r3, [pc, #752]	; (8028328 <read_control_registers+0x2f8>)
 8028038:	681b      	ldr	r3, [r3, #0]
 802803a:	f04f 31ff 	mov.w	r1, #4294967295
 802803e:	4618      	mov	r0, r3
 8028040:	f7ee fe2e 	bl	8016ca0 <osMutexWait>

	fm25v02_read(2*SECURITY_CONTROL_REG, &status_reg_temp_h);
 8028044:	1dfb      	adds	r3, r7, #7
 8028046:	4619      	mov	r1, r3
 8028048:	f242 1020 	movw	r0, #8480	; 0x2120
 802804c:	f7fd f9c0 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*SECURITY_CONTROL_REG+1, &status_reg_temp_l);
 8028050:	1dbb      	adds	r3, r7, #6
 8028052:	4619      	mov	r1, r3
 8028054:	f242 1021 	movw	r0, #8481	; 0x2121
 8028058:	f7fd f9ba 	bl	80253d0 <fm25v02_read>
	control_registers.security_control_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 802805c:	79fb      	ldrb	r3, [r7, #7]
 802805e:	021b      	lsls	r3, r3, #8
 8028060:	b21a      	sxth	r2, r3
 8028062:	79bb      	ldrb	r3, [r7, #6]
 8028064:	b21b      	sxth	r3, r3
 8028066:	4313      	orrs	r3, r2
 8028068:	b21b      	sxth	r3, r3
 802806a:	b29a      	uxth	r2, r3
 802806c:	4baf      	ldr	r3, [pc, #700]	; (802832c <read_control_registers+0x2fc>)
 802806e:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CONTROL_LOOP_REG, &status_reg_temp_h);
 8028070:	1dfb      	adds	r3, r7, #7
 8028072:	4619      	mov	r1, r3
 8028074:	f242 1022 	movw	r0, #8482	; 0x2122
 8028078:	f7fd f9aa 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CONTROL_LOOP_REG+1, &status_reg_temp_l);
 802807c:	1dbb      	adds	r3, r7, #6
 802807e:	4619      	mov	r1, r3
 8028080:	f242 1023 	movw	r0, #8483	; 0x2123
 8028084:	f7fd f9a4 	bl	80253d0 <fm25v02_read>
	control_registers.control_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028088:	79fb      	ldrb	r3, [r7, #7]
 802808a:	021b      	lsls	r3, r3, #8
 802808c:	b21a      	sxth	r2, r3
 802808e:	79bb      	ldrb	r3, [r7, #6]
 8028090:	b21b      	sxth	r3, r3
 8028092:	4313      	orrs	r3, r2
 8028094:	b21b      	sxth	r3, r3
 8028096:	b29a      	uxth	r2, r3
 8028098:	4ba4      	ldr	r3, [pc, #656]	; (802832c <read_control_registers+0x2fc>)
 802809a:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*FILTER_TIME_LOOP_REG, &status_reg_temp_h);
 802809c:	1dfb      	adds	r3, r7, #7
 802809e:	4619      	mov	r1, r3
 80280a0:	f242 1024 	movw	r0, #8484	; 0x2124
 80280a4:	f7fd f994 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*FILTER_TIME_LOOP_REG+1, &status_reg_temp_l);
 80280a8:	1dbb      	adds	r3, r7, #6
 80280aa:	4619      	mov	r1, r3
 80280ac:	f242 1025 	movw	r0, #8485	; 0x2125
 80280b0:	f7fd f98e 	bl	80253d0 <fm25v02_read>
	control_registers.filter_time_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80280b4:	79fb      	ldrb	r3, [r7, #7]
 80280b6:	021b      	lsls	r3, r3, #8
 80280b8:	b21a      	sxth	r2, r3
 80280ba:	79bb      	ldrb	r3, [r7, #6]
 80280bc:	b21b      	sxth	r3, r3
 80280be:	4313      	orrs	r3, r2
 80280c0:	b21b      	sxth	r3, r3
 80280c2:	b29a      	uxth	r2, r3
 80280c4:	4b99      	ldr	r3, [pc, #612]	; (802832c <read_control_registers+0x2fc>)
 80280c6:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG, &status_reg_temp_h);
 80280c8:	1dfb      	adds	r3, r7, #7
 80280ca:	4619      	mov	r1, r3
 80280cc:	f242 1026 	movw	r0, #8486	; 0x2126
 80280d0:	f7fd f97e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG+1, &status_reg_temp_l);
 80280d4:	1dbb      	adds	r3, r7, #6
 80280d6:	4619      	mov	r1, r3
 80280d8:	f242 1027 	movw	r0, #8487	; 0x2127
 80280dc:	f7fd f978 	bl	80253d0 <fm25v02_read>
	control_registers.quantity_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80280e0:	79fb      	ldrb	r3, [r7, #7]
 80280e2:	021b      	lsls	r3, r3, #8
 80280e4:	b21a      	sxth	r2, r3
 80280e6:	79bb      	ldrb	r3, [r7, #6]
 80280e8:	b21b      	sxth	r3, r3
 80280ea:	4313      	orrs	r3, r2
 80280ec:	b21b      	sxth	r3, r3
 80280ee:	b29a      	uxth	r2, r3
 80280f0:	4b8e      	ldr	r3, [pc, #568]	; (802832c <read_control_registers+0x2fc>)
 80280f2:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*TIME_FALSE_LOOP_REG, &status_reg_temp_h);
 80280f4:	1dfb      	adds	r3, r7, #7
 80280f6:	4619      	mov	r1, r3
 80280f8:	f242 1028 	movw	r0, #8488	; 0x2128
 80280fc:	f7fd f968 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_FALSE_LOOP_REG+1, &status_reg_temp_l);
 8028100:	1dbb      	adds	r3, r7, #6
 8028102:	4619      	mov	r1, r3
 8028104:	f242 1029 	movw	r0, #8489	; 0x2129
 8028108:	f7fd f962 	bl	80253d0 <fm25v02_read>
	control_registers.time_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802810c:	79fb      	ldrb	r3, [r7, #7]
 802810e:	021b      	lsls	r3, r3, #8
 8028110:	b21a      	sxth	r2, r3
 8028112:	79bb      	ldrb	r3, [r7, #6]
 8028114:	b21b      	sxth	r3, r3
 8028116:	4313      	orrs	r3, r2
 8028118:	b21b      	sxth	r3, r3
 802811a:	b29a      	uxth	r2, r3
 802811c:	4b83      	ldr	r3, [pc, #524]	; (802832c <read_control_registers+0x2fc>)
 802811e:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*ALARM_LOOP_CLEAR_REG, &status_reg_temp_h);
 8028120:	1dfb      	adds	r3, r7, #7
 8028122:	4619      	mov	r1, r3
 8028124:	f242 102a 	movw	r0, #8490	; 0x212a
 8028128:	f7fd f952 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 802812c:	1dbb      	adds	r3, r7, #6
 802812e:	4619      	mov	r1, r3
 8028130:	f242 102b 	movw	r0, #8491	; 0x212b
 8028134:	f7fd f94c 	bl	80253d0 <fm25v02_read>
	control_registers.alarm_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028138:	79fb      	ldrb	r3, [r7, #7]
 802813a:	021b      	lsls	r3, r3, #8
 802813c:	b21a      	sxth	r2, r3
 802813e:	79bb      	ldrb	r3, [r7, #6]
 8028140:	b21b      	sxth	r3, r3
 8028142:	4313      	orrs	r3, r2
 8028144:	b21b      	sxth	r3, r3
 8028146:	b29a      	uxth	r2, r3
 8028148:	4b78      	ldr	r3, [pc, #480]	; (802832c <read_control_registers+0x2fc>)
 802814a:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*FALSE_LOOP_CLEAR_REG, &status_reg_temp_h);
 802814c:	1dfb      	adds	r3, r7, #7
 802814e:	4619      	mov	r1, r3
 8028150:	f242 102c 	movw	r0, #8492	; 0x212c
 8028154:	f7fd f93c 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*FALSE_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 8028158:	1dbb      	adds	r3, r7, #6
 802815a:	4619      	mov	r1, r3
 802815c:	f242 102d 	movw	r0, #8493	; 0x212d
 8028160:	f7fd f936 	bl	80253d0 <fm25v02_read>
	control_registers.false_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028164:	79fb      	ldrb	r3, [r7, #7]
 8028166:	021b      	lsls	r3, r3, #8
 8028168:	b21a      	sxth	r2, r3
 802816a:	79bb      	ldrb	r3, [r7, #6]
 802816c:	b21b      	sxth	r3, r3
 802816e:	4313      	orrs	r3, r2
 8028170:	b21b      	sxth	r3, r3
 8028172:	b29a      	uxth	r2, r3
 8028174:	4b6d      	ldr	r3, [pc, #436]	; (802832c <read_control_registers+0x2fc>)
 8028176:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*SECURITY_TIME_MAX_REG, &status_reg_temp_h);
 8028178:	1dfb      	adds	r3, r7, #7
 802817a:	4619      	mov	r1, r3
 802817c:	f242 102e 	movw	r0, #8494	; 0x212e
 8028180:	f7fd f926 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*SECURITY_TIME_MAX_REG+1, &status_reg_temp_l);
 8028184:	1dbb      	adds	r3, r7, #6
 8028186:	4619      	mov	r1, r3
 8028188:	f242 102f 	movw	r0, #8495	; 0x212f
 802818c:	f7fd f920 	bl	80253d0 <fm25v02_read>
	control_registers.security_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028190:	79fb      	ldrb	r3, [r7, #7]
 8028192:	021b      	lsls	r3, r3, #8
 8028194:	b21a      	sxth	r2, r3
 8028196:	79bb      	ldrb	r3, [r7, #6]
 8028198:	b21b      	sxth	r3, r3
 802819a:	4313      	orrs	r3, r2
 802819c:	b21b      	sxth	r3, r3
 802819e:	b29a      	uxth	r2, r3
 80281a0:	4b62      	ldr	r3, [pc, #392]	; (802832c <read_control_registers+0x2fc>)
 80281a2:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_UPDATE_REG, &status_reg_temp_h);
 80281a4:	1dfb      	adds	r3, r7, #7
 80281a6:	4619      	mov	r1, r3
 80281a8:	f242 1030 	movw	r0, #8496	; 0x2130
 80281ac:	f7fd f910 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_UPDATE_REG+1, &status_reg_temp_l);
 80281b0:	1dbb      	adds	r3, r7, #6
 80281b2:	4619      	mov	r1, r3
 80281b4:	f242 1031 	movw	r0, #8497	; 0x2131
 80281b8:	f7fd f90a 	bl	80253d0 <fm25v02_read>
	control_registers.time_update_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80281bc:	79fb      	ldrb	r3, [r7, #7]
 80281be:	021b      	lsls	r3, r3, #8
 80281c0:	b21a      	sxth	r2, r3
 80281c2:	79bb      	ldrb	r3, [r7, #6]
 80281c4:	b21b      	sxth	r3, r3
 80281c6:	4313      	orrs	r3, r2
 80281c8:	b21b      	sxth	r3, r3
 80281ca:	b29a      	uxth	r2, r3
 80281cc:	4b57      	ldr	r3, [pc, #348]	; (802832c <read_control_registers+0x2fc>)
 80281ce:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_YEAR_REG, &status_reg_temp_h);
 80281d0:	1dfb      	adds	r3, r7, #7
 80281d2:	4619      	mov	r1, r3
 80281d4:	f242 1032 	movw	r0, #8498	; 0x2132
 80281d8:	f7fd f8fa 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_YEAR_REG+1, &status_reg_temp_l);
 80281dc:	1dbb      	adds	r3, r7, #6
 80281de:	4619      	mov	r1, r3
 80281e0:	f242 1033 	movw	r0, #8499	; 0x2133
 80281e4:	f7fd f8f4 	bl	80253d0 <fm25v02_read>
	control_registers.time_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80281e8:	79fb      	ldrb	r3, [r7, #7]
 80281ea:	021b      	lsls	r3, r3, #8
 80281ec:	b21a      	sxth	r2, r3
 80281ee:	79bb      	ldrb	r3, [r7, #6]
 80281f0:	b21b      	sxth	r3, r3
 80281f2:	4313      	orrs	r3, r2
 80281f4:	b21b      	sxth	r3, r3
 80281f6:	b29a      	uxth	r2, r3
 80281f8:	4b4c      	ldr	r3, [pc, #304]	; (802832c <read_control_registers+0x2fc>)
 80281fa:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_MONTH_REG, &status_reg_temp_h);
 80281fc:	1dfb      	adds	r3, r7, #7
 80281fe:	4619      	mov	r1, r3
 8028200:	f242 1034 	movw	r0, #8500	; 0x2134
 8028204:	f7fd f8e4 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_MONTH_REG+1, &status_reg_temp_l);
 8028208:	1dbb      	adds	r3, r7, #6
 802820a:	4619      	mov	r1, r3
 802820c:	f242 1035 	movw	r0, #8501	; 0x2135
 8028210:	f7fd f8de 	bl	80253d0 <fm25v02_read>
	control_registers.time_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028214:	79fb      	ldrb	r3, [r7, #7]
 8028216:	021b      	lsls	r3, r3, #8
 8028218:	b21a      	sxth	r2, r3
 802821a:	79bb      	ldrb	r3, [r7, #6]
 802821c:	b21b      	sxth	r3, r3
 802821e:	4313      	orrs	r3, r2
 8028220:	b21b      	sxth	r3, r3
 8028222:	b29a      	uxth	r2, r3
 8028224:	4b41      	ldr	r3, [pc, #260]	; (802832c <read_control_registers+0x2fc>)
 8028226:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_DAY_REG, &status_reg_temp_h);
 8028228:	1dfb      	adds	r3, r7, #7
 802822a:	4619      	mov	r1, r3
 802822c:	f242 1036 	movw	r0, #8502	; 0x2136
 8028230:	f7fd f8ce 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_DAY_REG+1, &status_reg_temp_l);
 8028234:	1dbb      	adds	r3, r7, #6
 8028236:	4619      	mov	r1, r3
 8028238:	f242 1037 	movw	r0, #8503	; 0x2137
 802823c:	f7fd f8c8 	bl	80253d0 <fm25v02_read>
	control_registers.time_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028240:	79fb      	ldrb	r3, [r7, #7]
 8028242:	021b      	lsls	r3, r3, #8
 8028244:	b21a      	sxth	r2, r3
 8028246:	79bb      	ldrb	r3, [r7, #6]
 8028248:	b21b      	sxth	r3, r3
 802824a:	4313      	orrs	r3, r2
 802824c:	b21b      	sxth	r3, r3
 802824e:	b29a      	uxth	r2, r3
 8028250:	4b36      	ldr	r3, [pc, #216]	; (802832c <read_control_registers+0x2fc>)
 8028252:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*TIME_HOUR_REG, &status_reg_temp_h);
 8028254:	1dfb      	adds	r3, r7, #7
 8028256:	4619      	mov	r1, r3
 8028258:	f242 1038 	movw	r0, #8504	; 0x2138
 802825c:	f7fd f8b8 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_HOUR_REG+1, &status_reg_temp_l);
 8028260:	1dbb      	adds	r3, r7, #6
 8028262:	4619      	mov	r1, r3
 8028264:	f242 1039 	movw	r0, #8505	; 0x2139
 8028268:	f7fd f8b2 	bl	80253d0 <fm25v02_read>
	control_registers.time_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802826c:	79fb      	ldrb	r3, [r7, #7]
 802826e:	021b      	lsls	r3, r3, #8
 8028270:	b21a      	sxth	r2, r3
 8028272:	79bb      	ldrb	r3, [r7, #6]
 8028274:	b21b      	sxth	r3, r3
 8028276:	4313      	orrs	r3, r2
 8028278:	b21b      	sxth	r3, r3
 802827a:	b29a      	uxth	r2, r3
 802827c:	4b2b      	ldr	r3, [pc, #172]	; (802832c <read_control_registers+0x2fc>)
 802827e:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*TIME_MINUTE_REG, &status_reg_temp_h);
 8028280:	1dfb      	adds	r3, r7, #7
 8028282:	4619      	mov	r1, r3
 8028284:	f242 103a 	movw	r0, #8506	; 0x213a
 8028288:	f7fd f8a2 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_MINUTE_REG+1, &status_reg_temp_l);
 802828c:	1dbb      	adds	r3, r7, #6
 802828e:	4619      	mov	r1, r3
 8028290:	f242 103b 	movw	r0, #8507	; 0x213b
 8028294:	f7fd f89c 	bl	80253d0 <fm25v02_read>
	control_registers.time_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028298:	79fb      	ldrb	r3, [r7, #7]
 802829a:	021b      	lsls	r3, r3, #8
 802829c:	b21a      	sxth	r2, r3
 802829e:	79bb      	ldrb	r3, [r7, #6]
 80282a0:	b21b      	sxth	r3, r3
 80282a2:	4313      	orrs	r3, r2
 80282a4:	b21b      	sxth	r3, r3
 80282a6:	b29a      	uxth	r2, r3
 80282a8:	4b20      	ldr	r3, [pc, #128]	; (802832c <read_control_registers+0x2fc>)
 80282aa:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*TIME_SECONDS_REG, &status_reg_temp_h);
 80282ac:	1dfb      	adds	r3, r7, #7
 80282ae:	4619      	mov	r1, r3
 80282b0:	f242 103c 	movw	r0, #8508	; 0x213c
 80282b4:	f7fd f88c 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_SECONDS_REG+1, &status_reg_temp_l);
 80282b8:	1dbb      	adds	r3, r7, #6
 80282ba:	4619      	mov	r1, r3
 80282bc:	f242 103d 	movw	r0, #8509	; 0x213d
 80282c0:	f7fd f886 	bl	80253d0 <fm25v02_read>
	control_registers.time_seconds_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80282c4:	79fb      	ldrb	r3, [r7, #7]
 80282c6:	021b      	lsls	r3, r3, #8
 80282c8:	b21a      	sxth	r2, r3
 80282ca:	79bb      	ldrb	r3, [r7, #6]
 80282cc:	b21b      	sxth	r3, r3
 80282ce:	4313      	orrs	r3, r2
 80282d0:	b21b      	sxth	r3, r3
 80282d2:	b29a      	uxth	r2, r3
 80282d4:	4b15      	ldr	r3, [pc, #84]	; (802832c <read_control_registers+0x2fc>)
 80282d6:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*TIME_WEEKDAY_REG, &status_reg_temp_h);
 80282d8:	1dfb      	adds	r3, r7, #7
 80282da:	4619      	mov	r1, r3
 80282dc:	f242 103e 	movw	r0, #8510	; 0x213e
 80282e0:	f7fd f876 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_WEEKDAY_REG+1, &status_reg_temp_l);
 80282e4:	1dbb      	adds	r3, r7, #6
 80282e6:	4619      	mov	r1, r3
 80282e8:	f242 103f 	movw	r0, #8511	; 0x213f
 80282ec:	f7fd f870 	bl	80253d0 <fm25v02_read>
	control_registers.time_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80282f0:	79fb      	ldrb	r3, [r7, #7]
 80282f2:	021b      	lsls	r3, r3, #8
 80282f4:	b21a      	sxth	r2, r3
 80282f6:	79bb      	ldrb	r3, [r7, #6]
 80282f8:	b21b      	sxth	r3, r3
 80282fa:	4313      	orrs	r3, r2
 80282fc:	b21b      	sxth	r3, r3
 80282fe:	b29a      	uxth	r2, r3
 8028300:	4b0a      	ldr	r3, [pc, #40]	; (802832c <read_control_registers+0x2fc>)
 8028302:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG, &status_reg_temp_h);
 8028304:	1dfb      	adds	r3, r7, #7
 8028306:	4619      	mov	r1, r3
 8028308:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 802830c:	f7fd f860 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG+1, &status_reg_temp_l);
 8028310:	1dbb      	adds	r3, r7, #6
 8028312:	4619      	mov	r1, r3
 8028314:	f242 1041 	movw	r0, #8513	; 0x2141
 8028318:	f7fd f85a 	bl	80253d0 <fm25v02_read>
	control_registers.modbus_idle_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802831c:	79fb      	ldrb	r3, [r7, #7]
 802831e:	021b      	lsls	r3, r3, #8
 8028320:	b21a      	sxth	r2, r3
 8028322:	79bb      	ldrb	r3, [r7, #6]
 8028324:	e004      	b.n	8028330 <read_control_registers+0x300>
 8028326:	bf00      	nop
 8028328:	20009a6c 	.word	0x20009a6c
 802832c:	2000a1cc 	.word	0x2000a1cc
 8028330:	b21b      	sxth	r3, r3
 8028332:	4313      	orrs	r3, r2
 8028334:	b21b      	sxth	r3, r3
 8028336:	b29a      	uxth	r2, r3
 8028338:	4bbb      	ldr	r3, [pc, #748]	; (8028628 <read_control_registers+0x5f8>)
 802833a:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*TIME_CONNECTION_TEST_REG, &status_reg_temp_h);
 802833c:	1dfb      	adds	r3, r7, #7
 802833e:	4619      	mov	r1, r3
 8028340:	f242 1042 	movw	r0, #8514	; 0x2142
 8028344:	f7fd f844 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*TIME_CONNECTION_TEST_REG+1, &status_reg_temp_l);
 8028348:	1dbb      	adds	r3, r7, #6
 802834a:	4619      	mov	r1, r3
 802834c:	f242 1043 	movw	r0, #8515	; 0x2143
 8028350:	f7fd f83e 	bl	80253d0 <fm25v02_read>
	control_registers.time_connection_test_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028354:	79fb      	ldrb	r3, [r7, #7]
 8028356:	021b      	lsls	r3, r3, #8
 8028358:	b21a      	sxth	r2, r3
 802835a:	79bb      	ldrb	r3, [r7, #6]
 802835c:	b21b      	sxth	r3, r3
 802835e:	4313      	orrs	r3, r2
 8028360:	b21b      	sxth	r3, r3
 8028362:	b29a      	uxth	r2, r3
 8028364:	4bb0      	ldr	r3, [pc, #704]	; (8028628 <read_control_registers+0x5f8>)
 8028366:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*EVENT_READ_REG, &status_reg_temp_h);
 8028368:	1dfb      	adds	r3, r7, #7
 802836a:	4619      	mov	r1, r3
 802836c:	f242 1044 	movw	r0, #8516	; 0x2144
 8028370:	f7fd f82e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*EVENT_READ_REG+1, &status_reg_temp_l);
 8028374:	1dbb      	adds	r3, r7, #6
 8028376:	4619      	mov	r1, r3
 8028378:	f242 1045 	movw	r0, #8517	; 0x2145
 802837c:	f7fd f828 	bl	80253d0 <fm25v02_read>
	control_registers.event_read_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028380:	79fb      	ldrb	r3, [r7, #7]
 8028382:	021b      	lsls	r3, r3, #8
 8028384:	b21a      	sxth	r2, r3
 8028386:	79bb      	ldrb	r3, [r7, #6]
 8028388:	b21b      	sxth	r3, r3
 802838a:	4313      	orrs	r3, r2
 802838c:	b21b      	sxth	r3, r3
 802838e:	b29a      	uxth	r2, r3
 8028390:	4ba5      	ldr	r3, [pc, #660]	; (8028628 <read_control_registers+0x5f8>)
 8028392:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG, &status_reg_temp_h);
 8028394:	1dfb      	adds	r3, r7, #7
 8028396:	4619      	mov	r1, r3
 8028398:	f242 1046 	movw	r0, #8518	; 0x2146
 802839c:	f7fd f818 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG+1, &status_reg_temp_l);
 80283a0:	1dbb      	adds	r3, r7, #6
 80283a2:	4619      	mov	r1, r3
 80283a4:	f242 1047 	movw	r0, #8519	; 0x2147
 80283a8:	f7fd f812 	bl	80253d0 <fm25v02_read>
	control_registers.event_address_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80283ac:	79fb      	ldrb	r3, [r7, #7]
 80283ae:	021b      	lsls	r3, r3, #8
 80283b0:	b21a      	sxth	r2, r3
 80283b2:	79bb      	ldrb	r3, [r7, #6]
 80283b4:	b21b      	sxth	r3, r3
 80283b6:	4313      	orrs	r3, r2
 80283b8:	b21b      	sxth	r3, r3
 80283ba:	b29a      	uxth	r2, r3
 80283bc:	4b9a      	ldr	r3, [pc, #616]	; (8028628 <read_control_registers+0x5f8>)
 80283be:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*EVENT_ADDRESS_LOW_REG, &status_reg_temp_h);
 80283c0:	1dfb      	adds	r3, r7, #7
 80283c2:	4619      	mov	r1, r3
 80283c4:	f242 1048 	movw	r0, #8520	; 0x2148
 80283c8:	f7fd f802 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_LOW_REG+1, &status_reg_temp_l);
 80283cc:	1dbb      	adds	r3, r7, #6
 80283ce:	4619      	mov	r1, r3
 80283d0:	f242 1049 	movw	r0, #8521	; 0x2149
 80283d4:	f7fc fffc 	bl	80253d0 <fm25v02_read>
	control_registers.event_address_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80283d8:	79fb      	ldrb	r3, [r7, #7]
 80283da:	021b      	lsls	r3, r3, #8
 80283dc:	b21a      	sxth	r2, r3
 80283de:	79bb      	ldrb	r3, [r7, #6]
 80283e0:	b21b      	sxth	r3, r3
 80283e2:	4313      	orrs	r3, r2
 80283e4:	b21b      	sxth	r3, r3
 80283e6:	b29a      	uxth	r2, r3
 80283e8:	4b8f      	ldr	r3, [pc, #572]	; (8028628 <read_control_registers+0x5f8>)
 80283ea:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG, &status_reg_temp_h);
 80283ec:	1dfb      	adds	r3, r7, #7
 80283ee:	4619      	mov	r1, r3
 80283f0:	f242 104a 	movw	r0, #8522	; 0x214a
 80283f4:	f7fc ffec 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG+1, &status_reg_temp_l);
 80283f8:	1dbb      	adds	r3, r7, #6
 80283fa:	4619      	mov	r1, r3
 80283fc:	f242 104b 	movw	r0, #8523	; 0x214b
 8028400:	f7fc ffe6 	bl	80253d0 <fm25v02_read>
	control_registers.modem_ring_try_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028404:	79fb      	ldrb	r3, [r7, #7]
 8028406:	021b      	lsls	r3, r3, #8
 8028408:	b21a      	sxth	r2, r3
 802840a:	79bb      	ldrb	r3, [r7, #6]
 802840c:	b21b      	sxth	r3, r3
 802840e:	4313      	orrs	r3, r2
 8028410:	b21b      	sxth	r3, r3
 8028412:	b29a      	uxth	r2, r3
 8028414:	4b84      	ldr	r3, [pc, #528]	; (8028628 <read_control_registers+0x5f8>)
 8028416:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG, &status_reg_temp_h);
 8028418:	1dfb      	adds	r3, r7, #7
 802841a:	4619      	mov	r1, r3
 802841c:	f242 104c 	movw	r0, #8524	; 0x214c
 8028420:	f7fc ffd6 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG+1, &status_reg_temp_l);
 8028424:	1dbb      	adds	r3, r7, #6
 8028426:	4619      	mov	r1, r3
 8028428:	f242 104d 	movw	r0, #8525	; 0x214d
 802842c:	f7fc ffd0 	bl	80253d0 <fm25v02_read>
	control_registers.modem_ring_pause_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028430:	79fb      	ldrb	r3, [r7, #7]
 8028432:	021b      	lsls	r3, r3, #8
 8028434:	b21a      	sxth	r2, r3
 8028436:	79bb      	ldrb	r3, [r7, #6]
 8028438:	b21b      	sxth	r3, r3
 802843a:	4313      	orrs	r3, r2
 802843c:	b21b      	sxth	r3, r3
 802843e:	b29a      	uxth	r2, r3
 8028440:	4b79      	ldr	r3, [pc, #484]	; (8028628 <read_control_registers+0x5f8>)
 8028442:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG, &status_reg_temp_h);
 8028444:	1dfb      	adds	r3, r7, #7
 8028446:	4619      	mov	r1, r3
 8028448:	f242 104e 	movw	r0, #8526	; 0x214e
 802844c:	f7fc ffc0 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG+1, &status_reg_temp_l);
 8028450:	1dbb      	adds	r3, r7, #6
 8028452:	4619      	mov	r1, r3
 8028454:	f242 104f 	movw	r0, #8527	; 0x214f
 8028458:	f7fc ffba 	bl	80253d0 <fm25v02_read>
	control_registers.modem_ring_pause2_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802845c:	79fb      	ldrb	r3, [r7, #7]
 802845e:	021b      	lsls	r3, r3, #8
 8028460:	b21a      	sxth	r2, r3
 8028462:	79bb      	ldrb	r3, [r7, #6]
 8028464:	b21b      	sxth	r3, r3
 8028466:	4313      	orrs	r3, r2
 8028468:	b21b      	sxth	r3, r3
 802846a:	b29a      	uxth	r2, r3
 802846c:	4b6e      	ldr	r3, [pc, #440]	; (8028628 <read_control_registers+0x5f8>)
 802846e:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*RING_MINUTE_TIME_REG, &status_reg_temp_h);
 8028470:	1dfb      	adds	r3, r7, #7
 8028472:	4619      	mov	r1, r3
 8028474:	f242 1050 	movw	r0, #8528	; 0x2150
 8028478:	f7fc ffaa 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*RING_MINUTE_TIME_REG+1, &status_reg_temp_l);
 802847c:	1dbb      	adds	r3, r7, #6
 802847e:	4619      	mov	r1, r3
 8028480:	f242 1051 	movw	r0, #8529	; 0x2151
 8028484:	f7fc ffa4 	bl	80253d0 <fm25v02_read>
	control_registers.ring_minute_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028488:	79fb      	ldrb	r3, [r7, #7]
 802848a:	021b      	lsls	r3, r3, #8
 802848c:	b21a      	sxth	r2, r3
 802848e:	79bb      	ldrb	r3, [r7, #6]
 8028490:	b21b      	sxth	r3, r3
 8028492:	4313      	orrs	r3, r2
 8028494:	b21b      	sxth	r3, r3
 8028496:	b29a      	uxth	r2, r3
 8028498:	4b63      	ldr	r3, [pc, #396]	; (8028628 <read_control_registers+0x5f8>)
 802849a:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*RING_HOUR_TIME_REG, &status_reg_temp_h);
 802849c:	1dfb      	adds	r3, r7, #7
 802849e:	4619      	mov	r1, r3
 80284a0:	f242 1052 	movw	r0, #8530	; 0x2152
 80284a4:	f7fc ff94 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*RING_HOUR_TIME_REG+1, &status_reg_temp_l);
 80284a8:	1dbb      	adds	r3, r7, #6
 80284aa:	4619      	mov	r1, r3
 80284ac:	f242 1053 	movw	r0, #8531	; 0x2153
 80284b0:	f7fc ff8e 	bl	80253d0 <fm25v02_read>
	control_registers.ring_hour_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80284b4:	79fb      	ldrb	r3, [r7, #7]
 80284b6:	021b      	lsls	r3, r3, #8
 80284b8:	b21a      	sxth	r2, r3
 80284ba:	79bb      	ldrb	r3, [r7, #6]
 80284bc:	b21b      	sxth	r3, r3
 80284be:	4313      	orrs	r3, r2
 80284c0:	b21b      	sxth	r3, r3
 80284c2:	b29a      	uxth	r2, r3
 80284c4:	4b58      	ldr	r3, [pc, #352]	; (8028628 <read_control_registers+0x5f8>)
 80284c6:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*ID_HIGH_REG, &status_reg_temp_h);
 80284c8:	1dfb      	adds	r3, r7, #7
 80284ca:	4619      	mov	r1, r3
 80284cc:	f242 1056 	movw	r0, #8534	; 0x2156
 80284d0:	f7fc ff7e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ID_HIGH_REG+1, &status_reg_temp_l);
 80284d4:	1dbb      	adds	r3, r7, #6
 80284d6:	4619      	mov	r1, r3
 80284d8:	f242 1057 	movw	r0, #8535	; 0x2157
 80284dc:	f7fc ff78 	bl	80253d0 <fm25v02_read>
	control_registers.id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80284e0:	79fb      	ldrb	r3, [r7, #7]
 80284e2:	021b      	lsls	r3, r3, #8
 80284e4:	b21a      	sxth	r2, r3
 80284e6:	79bb      	ldrb	r3, [r7, #6]
 80284e8:	b21b      	sxth	r3, r3
 80284ea:	4313      	orrs	r3, r2
 80284ec:	b21b      	sxth	r3, r3
 80284ee:	b29a      	uxth	r2, r3
 80284f0:	4b4d      	ldr	r3, [pc, #308]	; (8028628 <read_control_registers+0x5f8>)
 80284f2:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ID_LOW_REG, &status_reg_temp_h);
 80284f4:	1dfb      	adds	r3, r7, #7
 80284f6:	4619      	mov	r1, r3
 80284f8:	f242 1058 	movw	r0, #8536	; 0x2158
 80284fc:	f7fc ff68 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ID_LOW_REG+1, &status_reg_temp_l);
 8028500:	1dbb      	adds	r3, r7, #6
 8028502:	4619      	mov	r1, r3
 8028504:	f242 1059 	movw	r0, #8537	; 0x2159
 8028508:	f7fc ff62 	bl	80253d0 <fm25v02_read>
	control_registers.id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802850c:	79fb      	ldrb	r3, [r7, #7]
 802850e:	021b      	lsls	r3, r3, #8
 8028510:	b21a      	sxth	r2, r3
 8028512:	79bb      	ldrb	r3, [r7, #6]
 8028514:	b21b      	sxth	r3, r3
 8028516:	4313      	orrs	r3, r2
 8028518:	b21b      	sxth	r3, r3
 802851a:	b29a      	uxth	r2, r3
 802851c:	4b42      	ldr	r3, [pc, #264]	; (8028628 <read_control_registers+0x5f8>)
 802851e:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*RESET_CONTROL_REG, &status_reg_temp_h);
 8028520:	1dfb      	adds	r3, r7, #7
 8028522:	4619      	mov	r1, r3
 8028524:	f242 105a 	movw	r0, #8538	; 0x215a
 8028528:	f7fc ff52 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*RESET_CONTROL_REG+1, &status_reg_temp_l);
 802852c:	1dbb      	adds	r3, r7, #6
 802852e:	4619      	mov	r1, r3
 8028530:	f242 105b 	movw	r0, #8539	; 0x215b
 8028534:	f7fc ff4c 	bl	80253d0 <fm25v02_read>
	control_registers.reset_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028538:	79fb      	ldrb	r3, [r7, #7]
 802853a:	021b      	lsls	r3, r3, #8
 802853c:	b21a      	sxth	r2, r3
 802853e:	79bb      	ldrb	r3, [r7, #6]
 8028540:	b21b      	sxth	r3, r3
 8028542:	4313      	orrs	r3, r2
 8028544:	b21b      	sxth	r3, r3
 8028546:	b29a      	uxth	r2, r3
 8028548:	4b37      	ldr	r3, [pc, #220]	; (8028628 <read_control_registers+0x5f8>)
 802854a:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*METER_POLLING_REG, &status_reg_temp_h);
 802854c:	1dfb      	adds	r3, r7, #7
 802854e:	4619      	mov	r1, r3
 8028550:	f242 105c 	movw	r0, #8540	; 0x215c
 8028554:	f7fc ff3c 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*METER_POLLING_REG+1, &status_reg_temp_l);
 8028558:	1dbb      	adds	r3, r7, #6
 802855a:	4619      	mov	r1, r3
 802855c:	f242 105d 	movw	r0, #8541	; 0x215d
 8028560:	f7fc ff36 	bl	80253d0 <fm25v02_read>
	control_registers.meter_polling_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028564:	79fb      	ldrb	r3, [r7, #7]
 8028566:	021b      	lsls	r3, r3, #8
 8028568:	b21a      	sxth	r2, r3
 802856a:	79bb      	ldrb	r3, [r7, #6]
 802856c:	b21b      	sxth	r3, r3
 802856e:	4313      	orrs	r3, r2
 8028570:	b21b      	sxth	r3, r3
 8028572:	b29a      	uxth	r2, r3
 8028574:	4b2c      	ldr	r3, [pc, #176]	; (8028628 <read_control_registers+0x5f8>)
 8028576:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*IP_1_REG, &status_reg_temp_h);
 8028578:	1dfb      	adds	r3, r7, #7
 802857a:	4619      	mov	r1, r3
 802857c:	f242 105e 	movw	r0, #8542	; 0x215e
 8028580:	f7fc ff26 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IP_1_REG+1, &status_reg_temp_l);
 8028584:	1dbb      	adds	r3, r7, #6
 8028586:	4619      	mov	r1, r3
 8028588:	f242 105f 	movw	r0, #8543	; 0x215f
 802858c:	f7fc ff20 	bl	80253d0 <fm25v02_read>
	control_registers.ip1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028590:	79fb      	ldrb	r3, [r7, #7]
 8028592:	021b      	lsls	r3, r3, #8
 8028594:	b21a      	sxth	r2, r3
 8028596:	79bb      	ldrb	r3, [r7, #6]
 8028598:	b21b      	sxth	r3, r3
 802859a:	4313      	orrs	r3, r2
 802859c:	b21b      	sxth	r3, r3
 802859e:	b29a      	uxth	r2, r3
 80285a0:	4b21      	ldr	r3, [pc, #132]	; (8028628 <read_control_registers+0x5f8>)
 80285a2:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*IP_2_REG, &status_reg_temp_h);
 80285a4:	1dfb      	adds	r3, r7, #7
 80285a6:	4619      	mov	r1, r3
 80285a8:	f242 1060 	movw	r0, #8544	; 0x2160
 80285ac:	f7fc ff10 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IP_2_REG+1, &status_reg_temp_l);
 80285b0:	1dbb      	adds	r3, r7, #6
 80285b2:	4619      	mov	r1, r3
 80285b4:	f242 1061 	movw	r0, #8545	; 0x2161
 80285b8:	f7fc ff0a 	bl	80253d0 <fm25v02_read>
	control_registers.ip2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80285bc:	79fb      	ldrb	r3, [r7, #7]
 80285be:	021b      	lsls	r3, r3, #8
 80285c0:	b21a      	sxth	r2, r3
 80285c2:	79bb      	ldrb	r3, [r7, #6]
 80285c4:	b21b      	sxth	r3, r3
 80285c6:	4313      	orrs	r3, r2
 80285c8:	b21b      	sxth	r3, r3
 80285ca:	b29a      	uxth	r2, r3
 80285cc:	4b16      	ldr	r3, [pc, #88]	; (8028628 <read_control_registers+0x5f8>)
 80285ce:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*IP_3_REG, &status_reg_temp_h);
 80285d0:	1dfb      	adds	r3, r7, #7
 80285d2:	4619      	mov	r1, r3
 80285d4:	f242 1062 	movw	r0, #8546	; 0x2162
 80285d8:	f7fc fefa 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IP_3_REG+1, &status_reg_temp_l);
 80285dc:	1dbb      	adds	r3, r7, #6
 80285de:	4619      	mov	r1, r3
 80285e0:	f242 1063 	movw	r0, #8547	; 0x2163
 80285e4:	f7fc fef4 	bl	80253d0 <fm25v02_read>
	control_registers.ip3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80285e8:	79fb      	ldrb	r3, [r7, #7]
 80285ea:	021b      	lsls	r3, r3, #8
 80285ec:	b21a      	sxth	r2, r3
 80285ee:	79bb      	ldrb	r3, [r7, #6]
 80285f0:	b21b      	sxth	r3, r3
 80285f2:	4313      	orrs	r3, r2
 80285f4:	b21b      	sxth	r3, r3
 80285f6:	b29a      	uxth	r2, r3
 80285f8:	4b0b      	ldr	r3, [pc, #44]	; (8028628 <read_control_registers+0x5f8>)
 80285fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*IP_4_REG, &status_reg_temp_h);
 80285fe:	1dfb      	adds	r3, r7, #7
 8028600:	4619      	mov	r1, r3
 8028602:	f242 1064 	movw	r0, #8548	; 0x2164
 8028606:	f7fc fee3 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*IP_4_REG+1, &status_reg_temp_l);
 802860a:	1dbb      	adds	r3, r7, #6
 802860c:	4619      	mov	r1, r3
 802860e:	f242 1065 	movw	r0, #8549	; 0x2165
 8028612:	f7fc fedd 	bl	80253d0 <fm25v02_read>
	control_registers.ip4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028616:	79fb      	ldrb	r3, [r7, #7]
 8028618:	021b      	lsls	r3, r3, #8
 802861a:	b21a      	sxth	r2, r3
 802861c:	79bb      	ldrb	r3, [r7, #6]
 802861e:	b21b      	sxth	r3, r3
 8028620:	4313      	orrs	r3, r2
 8028622:	b21b      	sxth	r3, r3
 8028624:	e002      	b.n	802862c <read_control_registers+0x5fc>
 8028626:	bf00      	nop
 8028628:	2000a1cc 	.word	0x2000a1cc
 802862c:	b29a      	uxth	r2, r3
 802862e:	4bb2      	ldr	r3, [pc, #712]	; (80288f8 <read_control_registers+0x8c8>)
 8028630:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PORT_HIGH_REG, &status_reg_temp_h);
 8028634:	1dfb      	adds	r3, r7, #7
 8028636:	4619      	mov	r1, r3
 8028638:	f242 1066 	movw	r0, #8550	; 0x2166
 802863c:	f7fc fec8 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*PORT_HIGH_REG+1, &status_reg_temp_l);
 8028640:	1dbb      	adds	r3, r7, #6
 8028642:	4619      	mov	r1, r3
 8028644:	f242 1067 	movw	r0, #8551	; 0x2167
 8028648:	f7fc fec2 	bl	80253d0 <fm25v02_read>
	control_registers.port_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802864c:	79fb      	ldrb	r3, [r7, #7]
 802864e:	021b      	lsls	r3, r3, #8
 8028650:	b21a      	sxth	r2, r3
 8028652:	79bb      	ldrb	r3, [r7, #6]
 8028654:	b21b      	sxth	r3, r3
 8028656:	4313      	orrs	r3, r2
 8028658:	b21b      	sxth	r3, r3
 802865a:	b29a      	uxth	r2, r3
 802865c:	4ba6      	ldr	r3, [pc, #664]	; (80288f8 <read_control_registers+0x8c8>)
 802865e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PORT_LOW_REG, &status_reg_temp_h);
 8028662:	1dfb      	adds	r3, r7, #7
 8028664:	4619      	mov	r1, r3
 8028666:	f242 1068 	movw	r0, #8552	; 0x2168
 802866a:	f7fc feb1 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*PORT_LOW_REG+1, &status_reg_temp_l);
 802866e:	1dbb      	adds	r3, r7, #6
 8028670:	4619      	mov	r1, r3
 8028672:	f242 1069 	movw	r0, #8553	; 0x2169
 8028676:	f7fc feab 	bl	80253d0 <fm25v02_read>
	control_registers.port_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802867a:	79fb      	ldrb	r3, [r7, #7]
 802867c:	021b      	lsls	r3, r3, #8
 802867e:	b21a      	sxth	r2, r3
 8028680:	79bb      	ldrb	r3, [r7, #6]
 8028682:	b21b      	sxth	r3, r3
 8028684:	4313      	orrs	r3, r2
 8028686:	b21b      	sxth	r3, r3
 8028688:	b29a      	uxth	r2, r3
 802868a:	4b9b      	ldr	r3, [pc, #620]	; (80288f8 <read_control_registers+0x8c8>)
 802868c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*METER_ID_HIGH_REG, &status_reg_temp_h);
 8028690:	1dfb      	adds	r3, r7, #7
 8028692:	4619      	mov	r1, r3
 8028694:	f242 106a 	movw	r0, #8554	; 0x216a
 8028698:	f7fc fe9a 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*METER_ID_HIGH_REG+1, &status_reg_temp_l);
 802869c:	1dbb      	adds	r3, r7, #6
 802869e:	4619      	mov	r1, r3
 80286a0:	f242 106b 	movw	r0, #8555	; 0x216b
 80286a4:	f7fc fe94 	bl	80253d0 <fm25v02_read>
	control_registers.meter_id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80286a8:	79fb      	ldrb	r3, [r7, #7]
 80286aa:	021b      	lsls	r3, r3, #8
 80286ac:	b21a      	sxth	r2, r3
 80286ae:	79bb      	ldrb	r3, [r7, #6]
 80286b0:	b21b      	sxth	r3, r3
 80286b2:	4313      	orrs	r3, r2
 80286b4:	b21b      	sxth	r3, r3
 80286b6:	b29a      	uxth	r2, r3
 80286b8:	4b8f      	ldr	r3, [pc, #572]	; (80288f8 <read_control_registers+0x8c8>)
 80286ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*METER_ID_LOW_REG, &status_reg_temp_h);
 80286be:	1dfb      	adds	r3, r7, #7
 80286c0:	4619      	mov	r1, r3
 80286c2:	f242 106c 	movw	r0, #8556	; 0x216c
 80286c6:	f7fc fe83 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*METER_ID_LOW_REG+1, &status_reg_temp_l);
 80286ca:	1dbb      	adds	r3, r7, #6
 80286cc:	4619      	mov	r1, r3
 80286ce:	f242 106d 	movw	r0, #8557	; 0x216d
 80286d2:	f7fc fe7d 	bl	80253d0 <fm25v02_read>
	control_registers.meter_id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80286d6:	79fb      	ldrb	r3, [r7, #7]
 80286d8:	021b      	lsls	r3, r3, #8
 80286da:	b21a      	sxth	r2, r3
 80286dc:	79bb      	ldrb	r3, [r7, #6]
 80286de:	b21b      	sxth	r3, r3
 80286e0:	4313      	orrs	r3, r2
 80286e2:	b21b      	sxth	r3, r3
 80286e4:	b29a      	uxth	r2, r3
 80286e6:	4b84      	ldr	r3, [pc, #528]	; (80288f8 <read_control_registers+0x8c8>)
 80286e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*GPRS_CALL_REG, &status_reg_temp_h);
 80286ec:	1dfb      	adds	r3, r7, #7
 80286ee:	4619      	mov	r1, r3
 80286f0:	f242 106e 	movw	r0, #8558	; 0x216e
 80286f4:	f7fc fe6c 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*GPRS_CALL_REG+1, &status_reg_temp_l);
 80286f8:	1dbb      	adds	r3, r7, #6
 80286fa:	4619      	mov	r1, r3
 80286fc:	f242 106f 	movw	r0, #8559	; 0x216f
 8028700:	f7fc fe66 	bl	80253d0 <fm25v02_read>
	control_registers.gprs_call_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028704:	79fb      	ldrb	r3, [r7, #7]
 8028706:	021b      	lsls	r3, r3, #8
 8028708:	b21a      	sxth	r2, r3
 802870a:	79bb      	ldrb	r3, [r7, #6]
 802870c:	b21b      	sxth	r3, r3
 802870e:	4313      	orrs	r3, r2
 8028710:	b21b      	sxth	r3, r3
 8028712:	b29a      	uxth	r2, r3
 8028714:	4b78      	ldr	r3, [pc, #480]	; (80288f8 <read_control_registers+0x8c8>)
 8028716:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	fm25v02_read(2*MUTE_REG, &status_reg_temp_h);
 802871a:	1dfb      	adds	r3, r7, #7
 802871c:	4619      	mov	r1, r3
 802871e:	f242 1072 	movw	r0, #8562	; 0x2172
 8028722:	f7fc fe55 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MUTE_REG+1, &status_reg_temp_l);
 8028726:	1dbb      	adds	r3, r7, #6
 8028728:	4619      	mov	r1, r3
 802872a:	f242 1073 	movw	r0, #8563	; 0x2173
 802872e:	f7fc fe4f 	bl	80253d0 <fm25v02_read>
	control_registers.mute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028732:	79fb      	ldrb	r3, [r7, #7]
 8028734:	021b      	lsls	r3, r3, #8
 8028736:	b21a      	sxth	r2, r3
 8028738:	79bb      	ldrb	r3, [r7, #6]
 802873a:	b21b      	sxth	r3, r3
 802873c:	4313      	orrs	r3, r2
 802873e:	b21b      	sxth	r3, r3
 8028740:	b29a      	uxth	r2, r3
 8028742:	4b6d      	ldr	r3, [pc, #436]	; (80288f8 <read_control_registers+0x8c8>)
 8028744:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	fm25v02_read(2*LIGHT_CONTROL_REG, &status_reg_temp_h);
 8028748:	1dfb      	adds	r3, r7, #7
 802874a:	4619      	mov	r1, r3
 802874c:	f242 1082 	movw	r0, #8578	; 0x2182
 8028750:	f7fc fe3e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*LIGHT_CONTROL_REG+1, &status_reg_temp_l);
 8028754:	1dbb      	adds	r3, r7, #6
 8028756:	4619      	mov	r1, r3
 8028758:	f242 1083 	movw	r0, #8579	; 0x2183
 802875c:	f7fc fe38 	bl	80253d0 <fm25v02_read>
	control_registers.light_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028760:	79fb      	ldrb	r3, [r7, #7]
 8028762:	021b      	lsls	r3, r3, #8
 8028764:	b21a      	sxth	r2, r3
 8028766:	79bb      	ldrb	r3, [r7, #6]
 8028768:	b21b      	sxth	r3, r3
 802876a:	4313      	orrs	r3, r2
 802876c:	b21b      	sxth	r3, r3
 802876e:	b29a      	uxth	r2, r3
 8028770:	4b61      	ldr	r3, [pc, #388]	; (80288f8 <read_control_registers+0x8c8>)
 8028772:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	fm25v02_read(2*LIGHTING_ALARM_RESET_REG, &status_reg_temp_h);
 8028776:	1dfb      	adds	r3, r7, #7
 8028778:	4619      	mov	r1, r3
 802877a:	f242 1084 	movw	r0, #8580	; 0x2184
 802877e:	f7fc fe27 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*LIGHTING_ALARM_RESET_REG+1, &status_reg_temp_l);
 8028782:	1dbb      	adds	r3, r7, #6
 8028784:	4619      	mov	r1, r3
 8028786:	f242 1085 	movw	r0, #8581	; 0x2185
 802878a:	f7fc fe21 	bl	80253d0 <fm25v02_read>
	control_registers.lighting_alarm_reset_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802878e:	79fb      	ldrb	r3, [r7, #7]
 8028790:	021b      	lsls	r3, r3, #8
 8028792:	b21a      	sxth	r2, r3
 8028794:	79bb      	ldrb	r3, [r7, #6]
 8028796:	b21b      	sxth	r3, r3
 8028798:	4313      	orrs	r3, r2
 802879a:	b21b      	sxth	r3, r3
 802879c:	b29a      	uxth	r2, r3
 802879e:	4b56      	ldr	r3, [pc, #344]	; (80288f8 <read_control_registers+0x8c8>)
 80287a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	fm25v02_read(2*CURRENT_MEASUREMENT_ACCURACY_REG, &status_reg_temp_h);
 80287a4:	1dfb      	adds	r3, r7, #7
 80287a6:	4619      	mov	r1, r3
 80287a8:	f242 1086 	movw	r0, #8582	; 0x2186
 80287ac:	f7fc fe10 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CURRENT_MEASUREMENT_ACCURACY_REG+1, &status_reg_temp_l);
 80287b0:	1dbb      	adds	r3, r7, #6
 80287b2:	4619      	mov	r1, r3
 80287b4:	f242 1087 	movw	r0, #8583	; 0x2187
 80287b8:	f7fc fe0a 	bl	80253d0 <fm25v02_read>
	control_registers.current_measurement_accuracy_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80287bc:	79fb      	ldrb	r3, [r7, #7]
 80287be:	021b      	lsls	r3, r3, #8
 80287c0:	b21a      	sxth	r2, r3
 80287c2:	79bb      	ldrb	r3, [r7, #6]
 80287c4:	b21b      	sxth	r3, r3
 80287c6:	4313      	orrs	r3, r2
 80287c8:	b21b      	sxth	r3, r3
 80287ca:	b29a      	uxth	r2, r3
 80287cc:	4b4a      	ldr	r3, [pc, #296]	; (80288f8 <read_control_registers+0x8c8>)
 80287ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	fm25v02_read(2*MAX_CURRENT_PHASE_A, &status_reg_temp_h);
 80287d2:	1dfb      	adds	r3, r7, #7
 80287d4:	4619      	mov	r1, r3
 80287d6:	f242 1088 	movw	r0, #8584	; 0x2188
 80287da:	f7fc fdf9 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_A+1, &status_reg_temp_l);
 80287de:	1dbb      	adds	r3, r7, #6
 80287e0:	4619      	mov	r1, r3
 80287e2:	f242 1089 	movw	r0, #8585	; 0x2189
 80287e6:	f7fc fdf3 	bl	80253d0 <fm25v02_read>
	control_registers.max_current_phase_a = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80287ea:	79fb      	ldrb	r3, [r7, #7]
 80287ec:	021b      	lsls	r3, r3, #8
 80287ee:	b21a      	sxth	r2, r3
 80287f0:	79bb      	ldrb	r3, [r7, #6]
 80287f2:	b21b      	sxth	r3, r3
 80287f4:	4313      	orrs	r3, r2
 80287f6:	b21b      	sxth	r3, r3
 80287f8:	b29a      	uxth	r2, r3
 80287fa:	4b3f      	ldr	r3, [pc, #252]	; (80288f8 <read_control_registers+0x8c8>)
 80287fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	fm25v02_read(2*MAX_CURRENT_PHASE_B, &status_reg_temp_h);
 8028800:	1dfb      	adds	r3, r7, #7
 8028802:	4619      	mov	r1, r3
 8028804:	f242 108a 	movw	r0, #8586	; 0x218a
 8028808:	f7fc fde2 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_B+1, &status_reg_temp_l);
 802880c:	1dbb      	adds	r3, r7, #6
 802880e:	4619      	mov	r1, r3
 8028810:	f242 108b 	movw	r0, #8587	; 0x218b
 8028814:	f7fc fddc 	bl	80253d0 <fm25v02_read>
	control_registers.max_current_phase_b = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028818:	79fb      	ldrb	r3, [r7, #7]
 802881a:	021b      	lsls	r3, r3, #8
 802881c:	b21a      	sxth	r2, r3
 802881e:	79bb      	ldrb	r3, [r7, #6]
 8028820:	b21b      	sxth	r3, r3
 8028822:	4313      	orrs	r3, r2
 8028824:	b21b      	sxth	r3, r3
 8028826:	b29a      	uxth	r2, r3
 8028828:	4b33      	ldr	r3, [pc, #204]	; (80288f8 <read_control_registers+0x8c8>)
 802882a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	fm25v02_read(2*MAX_CURRENT_PHASE_C, &status_reg_temp_h);
 802882e:	1dfb      	adds	r3, r7, #7
 8028830:	4619      	mov	r1, r3
 8028832:	f242 108c 	movw	r0, #8588	; 0x218c
 8028836:	f7fc fdcb 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_C+1, &status_reg_temp_l);
 802883a:	1dbb      	adds	r3, r7, #6
 802883c:	4619      	mov	r1, r3
 802883e:	f242 108d 	movw	r0, #8589	; 0x218d
 8028842:	f7fc fdc5 	bl	80253d0 <fm25v02_read>
	control_registers.max_current_phase_c = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028846:	79fb      	ldrb	r3, [r7, #7]
 8028848:	021b      	lsls	r3, r3, #8
 802884a:	b21a      	sxth	r2, r3
 802884c:	79bb      	ldrb	r3, [r7, #6]
 802884e:	b21b      	sxth	r3, r3
 8028850:	4313      	orrs	r3, r2
 8028852:	b21b      	sxth	r3, r3
 8028854:	b29a      	uxth	r2, r3
 8028856:	4b28      	ldr	r3, [pc, #160]	; (80288f8 <read_control_registers+0x8c8>)
 8028858:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	fm25v02_read(2*LIGHTING_SWITCHING_REG, &status_reg_temp_h);
 802885c:	1dfb      	adds	r3, r7, #7
 802885e:	4619      	mov	r1, r3
 8028860:	f242 108e 	movw	r0, #8590	; 0x218e
 8028864:	f7fc fdb4 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*LIGHTING_SWITCHING_REG+1, &status_reg_temp_l);
 8028868:	1dbb      	adds	r3, r7, #6
 802886a:	4619      	mov	r1, r3
 802886c:	f242 108f 	movw	r0, #8591	; 0x218f
 8028870:	f7fc fdae 	bl	80253d0 <fm25v02_read>
	control_registers.lighting_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8028874:	79fb      	ldrb	r3, [r7, #7]
 8028876:	021b      	lsls	r3, r3, #8
 8028878:	b21a      	sxth	r2, r3
 802887a:	79bb      	ldrb	r3, [r7, #6]
 802887c:	b21b      	sxth	r3, r3
 802887e:	4313      	orrs	r3, r2
 8028880:	b21b      	sxth	r3, r3
 8028882:	b29a      	uxth	r2, r3
 8028884:	4b1c      	ldr	r3, [pc, #112]	; (80288f8 <read_control_registers+0x8c8>)
 8028886:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	fm25v02_read(2*ALARM_SWITCHING_REG, &status_reg_temp_h);
 802888a:	1dfb      	adds	r3, r7, #7
 802888c:	4619      	mov	r1, r3
 802888e:	f242 1090 	movw	r0, #8592	; 0x2190
 8028892:	f7fc fd9d 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ALARM_SWITCHING_REG+1, &status_reg_temp_l);
 8028896:	1dbb      	adds	r3, r7, #6
 8028898:	4619      	mov	r1, r3
 802889a:	f242 1091 	movw	r0, #8593	; 0x2191
 802889e:	f7fc fd97 	bl	80253d0 <fm25v02_read>
	control_registers.alarm_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80288a2:	79fb      	ldrb	r3, [r7, #7]
 80288a4:	021b      	lsls	r3, r3, #8
 80288a6:	b21a      	sxth	r2, r3
 80288a8:	79bb      	ldrb	r3, [r7, #6]
 80288aa:	b21b      	sxth	r3, r3
 80288ac:	4313      	orrs	r3, r2
 80288ae:	b21b      	sxth	r3, r3
 80288b0:	b29a      	uxth	r2, r3
 80288b2:	4b11      	ldr	r3, [pc, #68]	; (80288f8 <read_control_registers+0x8c8>)
 80288b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	fm25v02_read(2*ARMING_TIMELEFT, &status_reg_temp_h);
 80288b8:	1dfb      	adds	r3, r7, #7
 80288ba:	4619      	mov	r1, r3
 80288bc:	f242 1092 	movw	r0, #8594	; 0x2192
 80288c0:	f7fc fd86 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ARMING_TIMELEFT+1, &status_reg_temp_l);
 80288c4:	1dbb      	adds	r3, r7, #6
 80288c6:	4619      	mov	r1, r3
 80288c8:	f242 1093 	movw	r0, #8595	; 0x2193
 80288cc:	f7fc fd80 	bl	80253d0 <fm25v02_read>
	control_registers.arming_timeleft_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80288d0:	79fb      	ldrb	r3, [r7, #7]
 80288d2:	021b      	lsls	r3, r3, #8
 80288d4:	b21a      	sxth	r2, r3
 80288d6:	79bb      	ldrb	r3, [r7, #6]
 80288d8:	b21b      	sxth	r3, r3
 80288da:	4313      	orrs	r3, r2
 80288dc:	b21b      	sxth	r3, r3
 80288de:	b29a      	uxth	r2, r3
 80288e0:	4b05      	ldr	r3, [pc, #20]	; (80288f8 <read_control_registers+0x8c8>)
 80288e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	osMutexRelease(Fm25v02MutexHandle);
 80288e6:	4b05      	ldr	r3, [pc, #20]	; (80288fc <read_control_registers+0x8cc>)
 80288e8:	681b      	ldr	r3, [r3, #0]
 80288ea:	4618      	mov	r0, r3
 80288ec:	f7ee fa26 	bl	8016d3c <osMutexRelease>

}
 80288f0:	bf00      	nop
 80288f2:	3708      	adds	r7, #8
 80288f4:	46bd      	mov	sp, r7
 80288f6:	bd80      	pop	{r7, pc}
 80288f8:	2000a1cc 	.word	0x2000a1cc
 80288fc:	20009a6c 	.word	0x20009a6c

08028900 <read_bootloader_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти регистров бутлоадера---------------

void read_bootloader_registers(void)
{
 8028900:	b580      	push	{r7, lr}
 8028902:	b082      	sub	sp, #8
 8028904:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8028906:	4bbc      	ldr	r3, [pc, #752]	; (8028bf8 <read_bootloader_registers+0x2f8>)
 8028908:	681b      	ldr	r3, [r3, #0]
 802890a:	f04f 31ff 	mov.w	r1, #4294967295
 802890e:	4618      	mov	r0, r3
 8028910:	f7ee f9c6 	bl	8016ca0 <osMutexWait>

	fm25v02_read(2*BOOTLOADER_VERSION_REG, &status_reg_temp_h);
 8028914:	1dfb      	adds	r3, r7, #7
 8028916:	4619      	mov	r1, r3
 8028918:	f44f 7000 	mov.w	r0, #512	; 0x200
 802891c:	f7fc fd58 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*BOOTLOADER_VERSION_REG+1, &status_reg_temp_l);
 8028920:	1dbb      	adds	r3, r7, #6
 8028922:	4619      	mov	r1, r3
 8028924:	f240 2001 	movw	r0, #513	; 0x201
 8028928:	f7fc fd52 	bl	80253d0 <fm25v02_read>
	bootloader_registers.bootloader_version_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 802892c:	79fb      	ldrb	r3, [r7, #7]
 802892e:	021b      	lsls	r3, r3, #8
 8028930:	b21a      	sxth	r2, r3
 8028932:	79bb      	ldrb	r3, [r7, #6]
 8028934:	b21b      	sxth	r3, r3
 8028936:	4313      	orrs	r3, r2
 8028938:	b21b      	sxth	r3, r3
 802893a:	b29a      	uxth	r2, r3
 802893c:	4baf      	ldr	r3, [pc, #700]	; (8028bfc <read_bootloader_registers+0x2fc>)
 802893e:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 8028940:	1dfb      	adds	r3, r7, #7
 8028942:	4619      	mov	r1, r3
 8028944:	f44f 7001 	mov.w	r0, #516	; 0x204
 8028948:	f7fc fd42 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 802894c:	1dbb      	adds	r3, r7, #6
 802894e:	4619      	mov	r1, r3
 8028950:	f240 2005 	movw	r0, #517	; 0x205
 8028954:	f7fc fd3c 	bl	80253d0 <fm25v02_read>
	bootloader_registers.start_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028958:	79fb      	ldrb	r3, [r7, #7]
 802895a:	021b      	lsls	r3, r3, #8
 802895c:	b21a      	sxth	r2, r3
 802895e:	79bb      	ldrb	r3, [r7, #6]
 8028960:	b21b      	sxth	r3, r3
 8028962:	4313      	orrs	r3, r2
 8028964:	b21b      	sxth	r3, r3
 8028966:	b29a      	uxth	r2, r3
 8028968:	4ba4      	ldr	r3, [pc, #656]	; (8028bfc <read_bootloader_registers+0x2fc>)
 802896a:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 802896c:	1dfb      	adds	r3, r7, #7
 802896e:	4619      	mov	r1, r3
 8028970:	f240 2006 	movw	r0, #518	; 0x206
 8028974:	f7fc fd2c 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 8028978:	1dbb      	adds	r3, r7, #6
 802897a:	4619      	mov	r1, r3
 802897c:	f240 2007 	movw	r0, #519	; 0x207
 8028980:	f7fc fd26 	bl	80253d0 <fm25v02_read>
	bootloader_registers.start_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028984:	79fb      	ldrb	r3, [r7, #7]
 8028986:	021b      	lsls	r3, r3, #8
 8028988:	b21a      	sxth	r2, r3
 802898a:	79bb      	ldrb	r3, [r7, #6]
 802898c:	b21b      	sxth	r3, r3
 802898e:	4313      	orrs	r3, r2
 8028990:	b21b      	sxth	r3, r3
 8028992:	b29a      	uxth	r2, r3
 8028994:	4b99      	ldr	r3, [pc, #612]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028996:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 8028998:	1dfb      	adds	r3, r7, #7
 802899a:	4619      	mov	r1, r3
 802899c:	f44f 7002 	mov.w	r0, #520	; 0x208
 80289a0:	f7fc fd16 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 80289a4:	1dbb      	adds	r3, r7, #6
 80289a6:	4619      	mov	r1, r3
 80289a8:	f240 2009 	movw	r0, #521	; 0x209
 80289ac:	f7fc fd10 	bl	80253d0 <fm25v02_read>
	bootloader_registers.start_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 80289b0:	79fb      	ldrb	r3, [r7, #7]
 80289b2:	021b      	lsls	r3, r3, #8
 80289b4:	b21a      	sxth	r2, r3
 80289b6:	79bb      	ldrb	r3, [r7, #6]
 80289b8:	b21b      	sxth	r3, r3
 80289ba:	4313      	orrs	r3, r2
 80289bc:	b21b      	sxth	r3, r3
 80289be:	b29a      	uxth	r2, r3
 80289c0:	4b8e      	ldr	r3, [pc, #568]	; (8028bfc <read_bootloader_registers+0x2fc>)
 80289c2:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 80289c4:	1dfb      	adds	r3, r7, #7
 80289c6:	4619      	mov	r1, r3
 80289c8:	f240 200a 	movw	r0, #522	; 0x20a
 80289cc:	f7fc fd00 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 80289d0:	1dbb      	adds	r3, r7, #6
 80289d2:	4619      	mov	r1, r3
 80289d4:	f240 200b 	movw	r0, #523	; 0x20b
 80289d8:	f7fc fcfa 	bl	80253d0 <fm25v02_read>
	bootloader_registers.start_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 80289dc:	79fb      	ldrb	r3, [r7, #7]
 80289de:	021b      	lsls	r3, r3, #8
 80289e0:	b21a      	sxth	r2, r3
 80289e2:	79bb      	ldrb	r3, [r7, #6]
 80289e4:	b21b      	sxth	r3, r3
 80289e6:	4313      	orrs	r3, r2
 80289e8:	b21b      	sxth	r3, r3
 80289ea:	b29a      	uxth	r2, r3
 80289ec:	4b83      	ldr	r3, [pc, #524]	; (8028bfc <read_bootloader_registers+0x2fc>)
 80289ee:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 80289f0:	1dfb      	adds	r3, r7, #7
 80289f2:	4619      	mov	r1, r3
 80289f4:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80289f8:	f7fc fcea 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 80289fc:	1dbb      	adds	r3, r7, #6
 80289fe:	4619      	mov	r1, r3
 8028a00:	f240 200d 	movw	r0, #525	; 0x20d
 8028a04:	f7fc fce4 	bl	80253d0 <fm25v02_read>
	bootloader_registers.end_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028a08:	79fb      	ldrb	r3, [r7, #7]
 8028a0a:	021b      	lsls	r3, r3, #8
 8028a0c:	b21a      	sxth	r2, r3
 8028a0e:	79bb      	ldrb	r3, [r7, #6]
 8028a10:	b21b      	sxth	r3, r3
 8028a12:	4313      	orrs	r3, r2
 8028a14:	b21b      	sxth	r3, r3
 8028a16:	b29a      	uxth	r2, r3
 8028a18:	4b78      	ldr	r3, [pc, #480]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028a1a:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 8028a1c:	1dfb      	adds	r3, r7, #7
 8028a1e:	4619      	mov	r1, r3
 8028a20:	f240 200e 	movw	r0, #526	; 0x20e
 8028a24:	f7fc fcd4 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 8028a28:	1dbb      	adds	r3, r7, #6
 8028a2a:	4619      	mov	r1, r3
 8028a2c:	f240 200f 	movw	r0, #527	; 0x20f
 8028a30:	f7fc fcce 	bl	80253d0 <fm25v02_read>
	bootloader_registers.end_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028a34:	79fb      	ldrb	r3, [r7, #7]
 8028a36:	021b      	lsls	r3, r3, #8
 8028a38:	b21a      	sxth	r2, r3
 8028a3a:	79bb      	ldrb	r3, [r7, #6]
 8028a3c:	b21b      	sxth	r3, r3
 8028a3e:	4313      	orrs	r3, r2
 8028a40:	b21b      	sxth	r3, r3
 8028a42:	b29a      	uxth	r2, r3
 8028a44:	4b6d      	ldr	r3, [pc, #436]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028a46:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 8028a48:	1dfb      	adds	r3, r7, #7
 8028a4a:	4619      	mov	r1, r3
 8028a4c:	f44f 7004 	mov.w	r0, #528	; 0x210
 8028a50:	f7fc fcbe 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 8028a54:	1dbb      	adds	r3, r7, #6
 8028a56:	4619      	mov	r1, r3
 8028a58:	f240 2011 	movw	r0, #529	; 0x211
 8028a5c:	f7fc fcb8 	bl	80253d0 <fm25v02_read>
	bootloader_registers.crc_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028a60:	79fb      	ldrb	r3, [r7, #7]
 8028a62:	021b      	lsls	r3, r3, #8
 8028a64:	b21a      	sxth	r2, r3
 8028a66:	79bb      	ldrb	r3, [r7, #6]
 8028a68:	b21b      	sxth	r3, r3
 8028a6a:	4313      	orrs	r3, r2
 8028a6c:	b21b      	sxth	r3, r3
 8028a6e:	b29a      	uxth	r2, r3
 8028a70:	4b62      	ldr	r3, [pc, #392]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028a72:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CRC_FIRMWARE_LOW_REG, &status_reg_temp_h);
 8028a74:	1dfb      	adds	r3, r7, #7
 8028a76:	4619      	mov	r1, r3
 8028a78:	f240 2012 	movw	r0, #530	; 0x212
 8028a7c:	f7fc fca8 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 8028a80:	1dbb      	adds	r3, r7, #6
 8028a82:	4619      	mov	r1, r3
 8028a84:	f240 2013 	movw	r0, #531	; 0x213
 8028a88:	f7fc fca2 	bl	80253d0 <fm25v02_read>
	bootloader_registers.crc_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028a8c:	79fb      	ldrb	r3, [r7, #7]
 8028a8e:	021b      	lsls	r3, r3, #8
 8028a90:	b21a      	sxth	r2, r3
 8028a92:	79bb      	ldrb	r3, [r7, #6]
 8028a94:	b21b      	sxth	r3, r3
 8028a96:	4313      	orrs	r3, r2
 8028a98:	b21b      	sxth	r3, r3
 8028a9a:	b29a      	uxth	r2, r3
 8028a9c:	4b57      	ldr	r3, [pc, #348]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028a9e:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*JUMP_VECTOR_HIGH_REG, &status_reg_temp_h);
 8028aa0:	1dfb      	adds	r3, r7, #7
 8028aa2:	4619      	mov	r1, r3
 8028aa4:	f44f 7005 	mov.w	r0, #532	; 0x214
 8028aa8:	f7fc fc92 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_HIGH_REG+1, &status_reg_temp_l);
 8028aac:	1dbb      	adds	r3, r7, #6
 8028aae:	4619      	mov	r1, r3
 8028ab0:	f240 2015 	movw	r0, #533	; 0x215
 8028ab4:	f7fc fc8c 	bl	80253d0 <fm25v02_read>
	bootloader_registers.jump_vector_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028ab8:	79fb      	ldrb	r3, [r7, #7]
 8028aba:	021b      	lsls	r3, r3, #8
 8028abc:	b21a      	sxth	r2, r3
 8028abe:	79bb      	ldrb	r3, [r7, #6]
 8028ac0:	b21b      	sxth	r3, r3
 8028ac2:	4313      	orrs	r3, r2
 8028ac4:	b21b      	sxth	r3, r3
 8028ac6:	b29a      	uxth	r2, r3
 8028ac8:	4b4c      	ldr	r3, [pc, #304]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028aca:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*JUMP_VECTOR_2_REG, &status_reg_temp_h);
 8028acc:	1dfb      	adds	r3, r7, #7
 8028ace:	4619      	mov	r1, r3
 8028ad0:	f240 2016 	movw	r0, #534	; 0x216
 8028ad4:	f7fc fc7c 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_2_REG+1, &status_reg_temp_l);
 8028ad8:	1dbb      	adds	r3, r7, #6
 8028ada:	4619      	mov	r1, r3
 8028adc:	f240 2017 	movw	r0, #535	; 0x217
 8028ae0:	f7fc fc76 	bl	80253d0 <fm25v02_read>
	bootloader_registers.jump_vector_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028ae4:	79fb      	ldrb	r3, [r7, #7]
 8028ae6:	021b      	lsls	r3, r3, #8
 8028ae8:	b21a      	sxth	r2, r3
 8028aea:	79bb      	ldrb	r3, [r7, #6]
 8028aec:	b21b      	sxth	r3, r3
 8028aee:	4313      	orrs	r3, r2
 8028af0:	b21b      	sxth	r3, r3
 8028af2:	b29a      	uxth	r2, r3
 8028af4:	4b41      	ldr	r3, [pc, #260]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028af6:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*JUMP_VECTOR_3_REG, &status_reg_temp_h);
 8028af8:	1dfb      	adds	r3, r7, #7
 8028afa:	4619      	mov	r1, r3
 8028afc:	f44f 7006 	mov.w	r0, #536	; 0x218
 8028b00:	f7fc fc66 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_3_REG+1, &status_reg_temp_l);
 8028b04:	1dbb      	adds	r3, r7, #6
 8028b06:	4619      	mov	r1, r3
 8028b08:	f240 2019 	movw	r0, #537	; 0x219
 8028b0c:	f7fc fc60 	bl	80253d0 <fm25v02_read>
	bootloader_registers.jump_vector_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028b10:	79fb      	ldrb	r3, [r7, #7]
 8028b12:	021b      	lsls	r3, r3, #8
 8028b14:	b21a      	sxth	r2, r3
 8028b16:	79bb      	ldrb	r3, [r7, #6]
 8028b18:	b21b      	sxth	r3, r3
 8028b1a:	4313      	orrs	r3, r2
 8028b1c:	b21b      	sxth	r3, r3
 8028b1e:	b29a      	uxth	r2, r3
 8028b20:	4b36      	ldr	r3, [pc, #216]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028b22:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*JUMP_VECTOR_LOW_REG, &status_reg_temp_h);
 8028b24:	1dfb      	adds	r3, r7, #7
 8028b26:	4619      	mov	r1, r3
 8028b28:	f240 201a 	movw	r0, #538	; 0x21a
 8028b2c:	f7fc fc50 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_LOW_REG+1, &status_reg_temp_l);
 8028b30:	1dbb      	adds	r3, r7, #6
 8028b32:	4619      	mov	r1, r3
 8028b34:	f240 201b 	movw	r0, #539	; 0x21b
 8028b38:	f7fc fc4a 	bl	80253d0 <fm25v02_read>
	bootloader_registers.jump_vector_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028b3c:	79fb      	ldrb	r3, [r7, #7]
 8028b3e:	021b      	lsls	r3, r3, #8
 8028b40:	b21a      	sxth	r2, r3
 8028b42:	79bb      	ldrb	r3, [r7, #6]
 8028b44:	b21b      	sxth	r3, r3
 8028b46:	4313      	orrs	r3, r2
 8028b48:	b21b      	sxth	r3, r3
 8028b4a:	b29a      	uxth	r2, r3
 8028b4c:	4b2b      	ldr	r3, [pc, #172]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028b4e:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG, &status_reg_temp_h);
 8028b50:	1dfb      	adds	r3, r7, #7
 8028b52:	4619      	mov	r1, r3
 8028b54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8028b58:	f7fc fc3a 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG+1, &status_reg_temp_l);
 8028b5c:	1dbb      	adds	r3, r7, #6
 8028b5e:	4619      	mov	r1, r3
 8028b60:	f240 201d 	movw	r0, #541	; 0x21d
 8028b64:	f7fc fc34 	bl	80253d0 <fm25v02_read>
	bootloader_registers.firmware_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028b68:	79fb      	ldrb	r3, [r7, #7]
 8028b6a:	021b      	lsls	r3, r3, #8
 8028b6c:	b21a      	sxth	r2, r3
 8028b6e:	79bb      	ldrb	r3, [r7, #6]
 8028b70:	b21b      	sxth	r3, r3
 8028b72:	4313      	orrs	r3, r2
 8028b74:	b21b      	sxth	r3, r3
 8028b76:	b29a      	uxth	r2, r3
 8028b78:	4b20      	ldr	r3, [pc, #128]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028b7a:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*WORKING_MODE_REG, &status_reg_temp_h);
 8028b7c:	1dfb      	adds	r3, r7, #7
 8028b7e:	4619      	mov	r1, r3
 8028b80:	f240 201e 	movw	r0, #542	; 0x21e
 8028b84:	f7fc fc24 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*WORKING_MODE_REG+1, &status_reg_temp_l);
 8028b88:	1dbb      	adds	r3, r7, #6
 8028b8a:	4619      	mov	r1, r3
 8028b8c:	f240 201f 	movw	r0, #543	; 0x21f
 8028b90:	f7fc fc1e 	bl	80253d0 <fm25v02_read>
	bootloader_registers.working_mode_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028b94:	79fb      	ldrb	r3, [r7, #7]
 8028b96:	021b      	lsls	r3, r3, #8
 8028b98:	b21a      	sxth	r2, r3
 8028b9a:	79bb      	ldrb	r3, [r7, #6]
 8028b9c:	b21b      	sxth	r3, r3
 8028b9e:	4313      	orrs	r3, r2
 8028ba0:	b21b      	sxth	r3, r3
 8028ba2:	b29a      	uxth	r2, r3
 8028ba4:	4b15      	ldr	r3, [pc, #84]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028ba6:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*READY_DOWNLOAD_REG, &status_reg_temp_h);
 8028ba8:	1dfb      	adds	r3, r7, #7
 8028baa:	4619      	mov	r1, r3
 8028bac:	f44f 7008 	mov.w	r0, #544	; 0x220
 8028bb0:	f7fc fc0e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*READY_DOWNLOAD_REG+1, &status_reg_temp_l);
 8028bb4:	1dbb      	adds	r3, r7, #6
 8028bb6:	4619      	mov	r1, r3
 8028bb8:	f240 2021 	movw	r0, #545	; 0x221
 8028bbc:	f7fc fc08 	bl	80253d0 <fm25v02_read>
	bootloader_registers.ready_download_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028bc0:	79fb      	ldrb	r3, [r7, #7]
 8028bc2:	021b      	lsls	r3, r3, #8
 8028bc4:	b21a      	sxth	r2, r3
 8028bc6:	79bb      	ldrb	r3, [r7, #6]
 8028bc8:	b21b      	sxth	r3, r3
 8028bca:	4313      	orrs	r3, r2
 8028bcc:	b21b      	sxth	r3, r3
 8028bce:	b29a      	uxth	r2, r3
 8028bd0:	4b0a      	ldr	r3, [pc, #40]	; (8028bfc <read_bootloader_registers+0x2fc>)
 8028bd2:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG, &status_reg_temp_h);
 8028bd4:	1dfb      	adds	r3, r7, #7
 8028bd6:	4619      	mov	r1, r3
 8028bd8:	f240 2022 	movw	r0, #546	; 0x222
 8028bdc:	f7fc fbf8 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG+1, &status_reg_temp_l);
 8028be0:	1dbb      	adds	r3, r7, #6
 8028be2:	4619      	mov	r1, r3
 8028be4:	f240 2023 	movw	r0, #547	; 0x223
 8028be8:	f7fc fbf2 	bl	80253d0 <fm25v02_read>
	bootloader_registers.download_timeout_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028bec:	79fb      	ldrb	r3, [r7, #7]
 8028bee:	021b      	lsls	r3, r3, #8
 8028bf0:	b21a      	sxth	r2, r3
 8028bf2:	79bb      	ldrb	r3, [r7, #6]
 8028bf4:	e004      	b.n	8028c00 <read_bootloader_registers+0x300>
 8028bf6:	bf00      	nop
 8028bf8:	20009a6c 	.word	0x20009a6c
 8028bfc:	2000a0c0 	.word	0x2000a0c0
 8028c00:	b21b      	sxth	r3, r3
 8028c02:	4313      	orrs	r3, r2
 8028c04:	b21b      	sxth	r3, r3
 8028c06:	b29a      	uxth	r2, r3
 8028c08:	4bbb      	ldr	r3, [pc, #748]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028c0a:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*JUMP_ATTEMPT_REG, &status_reg_temp_h);
 8028c0c:	1dfb      	adds	r3, r7, #7
 8028c0e:	4619      	mov	r1, r3
 8028c10:	f44f 7009 	mov.w	r0, #548	; 0x224
 8028c14:	f7fc fbdc 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 8028c18:	1dbb      	adds	r3, r7, #6
 8028c1a:	4619      	mov	r1, r3
 8028c1c:	f240 2025 	movw	r0, #549	; 0x225
 8028c20:	f7fc fbd6 	bl	80253d0 <fm25v02_read>
	bootloader_registers.jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028c24:	79fb      	ldrb	r3, [r7, #7]
 8028c26:	021b      	lsls	r3, r3, #8
 8028c28:	b21a      	sxth	r2, r3
 8028c2a:	79bb      	ldrb	r3, [r7, #6]
 8028c2c:	b21b      	sxth	r3, r3
 8028c2e:	4313      	orrs	r3, r2
 8028c30:	b21b      	sxth	r3, r3
 8028c32:	b29a      	uxth	r2, r3
 8028c34:	4bb0      	ldr	r3, [pc, #704]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028c36:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &status_reg_temp_h);
 8028c38:	1dfb      	adds	r3, r7, #7
 8028c3a:	4619      	mov	r1, r3
 8028c3c:	f240 2026 	movw	r0, #550	; 0x226
 8028c40:	f7fc fbc6 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 8028c44:	1dbb      	adds	r3, r7, #6
 8028c46:	4619      	mov	r1, r3
 8028c48:	f240 2027 	movw	r0, #551	; 0x227
 8028c4c:	f7fc fbc0 	bl	80253d0 <fm25v02_read>
	bootloader_registers.max_jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028c50:	79fb      	ldrb	r3, [r7, #7]
 8028c52:	021b      	lsls	r3, r3, #8
 8028c54:	b21a      	sxth	r2, r3
 8028c56:	79bb      	ldrb	r3, [r7, #6]
 8028c58:	b21b      	sxth	r3, r3
 8028c5a:	4313      	orrs	r3, r2
 8028c5c:	b21b      	sxth	r3, r3
 8028c5e:	b29a      	uxth	r2, r3
 8028c60:	4ba5      	ldr	r3, [pc, #660]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028c62:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 8028c64:	1dfb      	adds	r3, r7, #7
 8028c66:	4619      	mov	r1, r3
 8028c68:	f44f 700a 	mov.w	r0, #552	; 0x228
 8028c6c:	f7fc fbb0 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 8028c70:	1dbb      	adds	r3, r7, #6
 8028c72:	4619      	mov	r1, r3
 8028c74:	f240 2029 	movw	r0, #553	; 0x229
 8028c78:	f7fc fbaa 	bl	80253d0 <fm25v02_read>
	bootloader_registers.end_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028c7c:	79fb      	ldrb	r3, [r7, #7]
 8028c7e:	021b      	lsls	r3, r3, #8
 8028c80:	b21a      	sxth	r2, r3
 8028c82:	79bb      	ldrb	r3, [r7, #6]
 8028c84:	b21b      	sxth	r3, r3
 8028c86:	4313      	orrs	r3, r2
 8028c88:	b21b      	sxth	r3, r3
 8028c8a:	b29a      	uxth	r2, r3
 8028c8c:	4b9a      	ldr	r3, [pc, #616]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028c8e:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 8028c90:	1dfb      	adds	r3, r7, #7
 8028c92:	4619      	mov	r1, r3
 8028c94:	f240 202a 	movw	r0, #554	; 0x22a
 8028c98:	f7fc fb9a 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 8028c9c:	1dbb      	adds	r3, r7, #6
 8028c9e:	4619      	mov	r1, r3
 8028ca0:	f240 202b 	movw	r0, #555	; 0x22b
 8028ca4:	f7fc fb94 	bl	80253d0 <fm25v02_read>
	bootloader_registers.end_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028ca8:	79fb      	ldrb	r3, [r7, #7]
 8028caa:	021b      	lsls	r3, r3, #8
 8028cac:	b21a      	sxth	r2, r3
 8028cae:	79bb      	ldrb	r3, [r7, #6]
 8028cb0:	b21b      	sxth	r3, r3
 8028cb2:	4313      	orrs	r3, r2
 8028cb4:	b21b      	sxth	r3, r3
 8028cb6:	b29a      	uxth	r2, r3
 8028cb8:	4b8f      	ldr	r3, [pc, #572]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028cba:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 8028cbc:	1dfb      	adds	r3, r7, #7
 8028cbe:	4619      	mov	r1, r3
 8028cc0:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8028cc4:	f7fc fb84 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 8028cc8:	1dbb      	adds	r3, r7, #6
 8028cca:	4619      	mov	r1, r3
 8028ccc:	f240 202d 	movw	r0, #557	; 0x22d
 8028cd0:	f7fc fb7e 	bl	80253d0 <fm25v02_read>
	bootloader_registers.address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028cd4:	79fb      	ldrb	r3, [r7, #7]
 8028cd6:	021b      	lsls	r3, r3, #8
 8028cd8:	b21a      	sxth	r2, r3
 8028cda:	79bb      	ldrb	r3, [r7, #6]
 8028cdc:	b21b      	sxth	r3, r3
 8028cde:	4313      	orrs	r3, r2
 8028ce0:	b21b      	sxth	r3, r3
 8028ce2:	b29a      	uxth	r2, r3
 8028ce4:	4b84      	ldr	r3, [pc, #528]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 8028ce8:	1dfb      	adds	r3, r7, #7
 8028cea:	4619      	mov	r1, r3
 8028cec:	f240 202e 	movw	r0, #558	; 0x22e
 8028cf0:	f7fc fb6e 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 8028cf4:	1dbb      	adds	r3, r7, #6
 8028cf6:	4619      	mov	r1, r3
 8028cf8:	f240 202f 	movw	r0, #559	; 0x22f
 8028cfc:	f7fc fb68 	bl	80253d0 <fm25v02_read>
	bootloader_registers.address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028d00:	79fb      	ldrb	r3, [r7, #7]
 8028d02:	021b      	lsls	r3, r3, #8
 8028d04:	b21a      	sxth	r2, r3
 8028d06:	79bb      	ldrb	r3, [r7, #6]
 8028d08:	b21b      	sxth	r3, r3
 8028d0a:	4313      	orrs	r3, r2
 8028d0c:	b21b      	sxth	r3, r3
 8028d0e:	b29a      	uxth	r2, r3
 8028d10:	4b79      	ldr	r3, [pc, #484]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028d12:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &status_reg_temp_h);
 8028d14:	1dfb      	adds	r3, r7, #7
 8028d16:	4619      	mov	r1, r3
 8028d18:	f240 203e 	movw	r0, #574	; 0x23e
 8028d1c:	f7fc fb58 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &status_reg_temp_l);
 8028d20:	1dbb      	adds	r3, r7, #6
 8028d22:	4619      	mov	r1, r3
 8028d24:	f240 203f 	movw	r0, #575	; 0x23f
 8028d28:	f7fc fb52 	bl	80253d0 <fm25v02_read>
	bootloader_registers.clear_page_number_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028d2c:	79fb      	ldrb	r3, [r7, #7]
 8028d2e:	021b      	lsls	r3, r3, #8
 8028d30:	b21a      	sxth	r2, r3
 8028d32:	79bb      	ldrb	r3, [r7, #6]
 8028d34:	b21b      	sxth	r3, r3
 8028d36:	4313      	orrs	r3, r2
 8028d38:	b21b      	sxth	r3, r3
 8028d3a:	b29a      	uxth	r2, r3
 8028d3c:	4b6e      	ldr	r3, [pc, #440]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028d3e:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &status_reg_temp_h);
 8028d40:	1dfb      	adds	r3, r7, #7
 8028d42:	4619      	mov	r1, r3
 8028d44:	f44f 7010 	mov.w	r0, #576	; 0x240
 8028d48:	f7fc fb42 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &status_reg_temp_l);
 8028d4c:	1dbb      	adds	r3, r7, #6
 8028d4e:	4619      	mov	r1, r3
 8028d50:	f240 2041 	movw	r0, #577	; 0x241
 8028d54:	f7fc fb3c 	bl	80253d0 <fm25v02_read>
	bootloader_registers.clear_page_on_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028d58:	79fb      	ldrb	r3, [r7, #7]
 8028d5a:	021b      	lsls	r3, r3, #8
 8028d5c:	b21a      	sxth	r2, r3
 8028d5e:	79bb      	ldrb	r3, [r7, #6]
 8028d60:	b21b      	sxth	r3, r3
 8028d62:	4313      	orrs	r3, r2
 8028d64:	b21b      	sxth	r3, r3
 8028d66:	b29a      	uxth	r2, r3
 8028d68:	4b63      	ldr	r3, [pc, #396]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028d6a:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &status_reg_temp_h);
 8028d6c:	1dfb      	adds	r3, r7, #7
 8028d6e:	4619      	mov	r1, r3
 8028d70:	f240 2042 	movw	r0, #578	; 0x242
 8028d74:	f7fc fb2c 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &status_reg_temp_l);
 8028d78:	1dbb      	adds	r3, r7, #6
 8028d7a:	4619      	mov	r1, r3
 8028d7c:	f240 2043 	movw	r0, #579	; 0x243
 8028d80:	f7fc fb26 	bl	80253d0 <fm25v02_read>
	bootloader_registers.write_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028d84:	79fb      	ldrb	r3, [r7, #7]
 8028d86:	021b      	lsls	r3, r3, #8
 8028d88:	b21a      	sxth	r2, r3
 8028d8a:	79bb      	ldrb	r3, [r7, #6]
 8028d8c:	b21b      	sxth	r3, r3
 8028d8e:	4313      	orrs	r3, r2
 8028d90:	b21b      	sxth	r3, r3
 8028d92:	b29a      	uxth	r2, r3
 8028d94:	4b58      	ldr	r3, [pc, #352]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028d96:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &status_reg_temp_h);
 8028d98:	1dfb      	adds	r3, r7, #7
 8028d9a:	4619      	mov	r1, r3
 8028d9c:	f44f 7011 	mov.w	r0, #580	; 0x244
 8028da0:	f7fc fb16 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &status_reg_temp_l);
 8028da4:	1dbb      	adds	r3, r7, #6
 8028da6:	4619      	mov	r1, r3
 8028da8:	f240 2045 	movw	r0, #581	; 0x245
 8028dac:	f7fc fb10 	bl	80253d0 <fm25v02_read>
	bootloader_registers.read_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028db0:	79fb      	ldrb	r3, [r7, #7]
 8028db2:	021b      	lsls	r3, r3, #8
 8028db4:	b21a      	sxth	r2, r3
 8028db6:	79bb      	ldrb	r3, [r7, #6]
 8028db8:	b21b      	sxth	r3, r3
 8028dba:	4313      	orrs	r3, r2
 8028dbc:	b21b      	sxth	r3, r3
 8028dbe:	b29a      	uxth	r2, r3
 8028dc0:	4b4d      	ldr	r3, [pc, #308]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028dc2:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &status_reg_temp_h);
 8028dc4:	1dfb      	adds	r3, r7, #7
 8028dc6:	4619      	mov	r1, r3
 8028dc8:	f240 2046 	movw	r0, #582	; 0x246
 8028dcc:	f7fc fb00 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &status_reg_temp_l);
 8028dd0:	1dbb      	adds	r3, r7, #6
 8028dd2:	4619      	mov	r1, r3
 8028dd4:	f240 2047 	movw	r0, #583	; 0x247
 8028dd8:	f7fc fafa 	bl	80253d0 <fm25v02_read>
	bootloader_registers.address_to_write_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028ddc:	79fb      	ldrb	r3, [r7, #7]
 8028dde:	021b      	lsls	r3, r3, #8
 8028de0:	b21a      	sxth	r2, r3
 8028de2:	79bb      	ldrb	r3, [r7, #6]
 8028de4:	b21b      	sxth	r3, r3
 8028de6:	4313      	orrs	r3, r2
 8028de8:	b21b      	sxth	r3, r3
 8028dea:	b29a      	uxth	r2, r3
 8028dec:	4b42      	ldr	r3, [pc, #264]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028dee:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &status_reg_temp_h);
 8028df0:	1dfb      	adds	r3, r7, #7
 8028df2:	4619      	mov	r1, r3
 8028df4:	f44f 7012 	mov.w	r0, #584	; 0x248
 8028df8:	f7fc faea 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &status_reg_temp_l);
 8028dfc:	1dbb      	adds	r3, r7, #6
 8028dfe:	4619      	mov	r1, r3
 8028e00:	f240 2049 	movw	r0, #585	; 0x249
 8028e04:	f7fc fae4 	bl	80253d0 <fm25v02_read>
	bootloader_registers.address_to_write_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028e08:	79fb      	ldrb	r3, [r7, #7]
 8028e0a:	021b      	lsls	r3, r3, #8
 8028e0c:	b21a      	sxth	r2, r3
 8028e0e:	79bb      	ldrb	r3, [r7, #6]
 8028e10:	b21b      	sxth	r3, r3
 8028e12:	4313      	orrs	r3, r2
 8028e14:	b21b      	sxth	r3, r3
 8028e16:	b29a      	uxth	r2, r3
 8028e18:	4b37      	ldr	r3, [pc, #220]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028e1a:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*BYTE_QUANTITY_REG, &status_reg_temp_h);
 8028e1c:	1dfb      	adds	r3, r7, #7
 8028e1e:	4619      	mov	r1, r3
 8028e20:	f240 204a 	movw	r0, #586	; 0x24a
 8028e24:	f7fc fad4 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*BYTE_QUANTITY_REG+1, &status_reg_temp_l);
 8028e28:	1dbb      	adds	r3, r7, #6
 8028e2a:	4619      	mov	r1, r3
 8028e2c:	f240 204b 	movw	r0, #587	; 0x24b
 8028e30:	f7fc face 	bl	80253d0 <fm25v02_read>
	bootloader_registers.byte_quantity_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028e34:	79fb      	ldrb	r3, [r7, #7]
 8028e36:	021b      	lsls	r3, r3, #8
 8028e38:	b21a      	sxth	r2, r3
 8028e3a:	79bb      	ldrb	r3, [r7, #6]
 8028e3c:	b21b      	sxth	r3, r3
 8028e3e:	4313      	orrs	r3, r2
 8028e40:	b21b      	sxth	r3, r3
 8028e42:	b29a      	uxth	r2, r3
 8028e44:	4b2c      	ldr	r3, [pc, #176]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028e46:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*PACKET_CRC_HIGH_REG, &status_reg_temp_h);
 8028e48:	1dfb      	adds	r3, r7, #7
 8028e4a:	4619      	mov	r1, r3
 8028e4c:	f44f 7013 	mov.w	r0, #588	; 0x24c
 8028e50:	f7fc fabe 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &status_reg_temp_l);
 8028e54:	1dbb      	adds	r3, r7, #6
 8028e56:	4619      	mov	r1, r3
 8028e58:	f240 204d 	movw	r0, #589	; 0x24d
 8028e5c:	f7fc fab8 	bl	80253d0 <fm25v02_read>
	bootloader_registers.packet_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028e60:	79fb      	ldrb	r3, [r7, #7]
 8028e62:	021b      	lsls	r3, r3, #8
 8028e64:	b21a      	sxth	r2, r3
 8028e66:	79bb      	ldrb	r3, [r7, #6]
 8028e68:	b21b      	sxth	r3, r3
 8028e6a:	4313      	orrs	r3, r2
 8028e6c:	b21b      	sxth	r3, r3
 8028e6e:	b29a      	uxth	r2, r3
 8028e70:	4b21      	ldr	r3, [pc, #132]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028e72:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*PACKET_CRC_LOW_REG, &status_reg_temp_h);
 8028e74:	1dfb      	adds	r3, r7, #7
 8028e76:	4619      	mov	r1, r3
 8028e78:	f240 204e 	movw	r0, #590	; 0x24e
 8028e7c:	f7fc faa8 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_LOW_REG+1, &status_reg_temp_l);
 8028e80:	1dbb      	adds	r3, r7, #6
 8028e82:	4619      	mov	r1, r3
 8028e84:	f240 204f 	movw	r0, #591	; 0x24f
 8028e88:	f7fc faa2 	bl	80253d0 <fm25v02_read>
	bootloader_registers.packet_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028e8c:	79fb      	ldrb	r3, [r7, #7]
 8028e8e:	021b      	lsls	r3, r3, #8
 8028e90:	b21a      	sxth	r2, r3
 8028e92:	79bb      	ldrb	r3, [r7, #6]
 8028e94:	b21b      	sxth	r3, r3
 8028e96:	4313      	orrs	r3, r2
 8028e98:	b21b      	sxth	r3, r3
 8028e9a:	b29a      	uxth	r2, r3
 8028e9c:	4b16      	ldr	r3, [pc, #88]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028e9e:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*PACKET_DATA_0_REG, &status_reg_temp_h);
 8028ea0:	1dfb      	adds	r3, r7, #7
 8028ea2:	4619      	mov	r1, r3
 8028ea4:	f44f 7014 	mov.w	r0, #592	; 0x250
 8028ea8:	f7fc fa92 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_0_REG+1, &status_reg_temp_l);
 8028eac:	1dbb      	adds	r3, r7, #6
 8028eae:	4619      	mov	r1, r3
 8028eb0:	f240 2051 	movw	r0, #593	; 0x251
 8028eb4:	f7fc fa8c 	bl	80253d0 <fm25v02_read>
	bootloader_registers.packet_data_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028eb8:	79fb      	ldrb	r3, [r7, #7]
 8028eba:	021b      	lsls	r3, r3, #8
 8028ebc:	b21a      	sxth	r2, r3
 8028ebe:	79bb      	ldrb	r3, [r7, #6]
 8028ec0:	b21b      	sxth	r3, r3
 8028ec2:	4313      	orrs	r3, r2
 8028ec4:	b21b      	sxth	r3, r3
 8028ec6:	b29a      	uxth	r2, r3
 8028ec8:	4b0b      	ldr	r3, [pc, #44]	; (8028ef8 <read_bootloader_registers+0x5f8>)
 8028eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*PACKET_DATA_1_REG, &status_reg_temp_h);
 8028ece:	1dfb      	adds	r3, r7, #7
 8028ed0:	4619      	mov	r1, r3
 8028ed2:	f240 2052 	movw	r0, #594	; 0x252
 8028ed6:	f7fc fa7b 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_1_REG+1, &status_reg_temp_l);
 8028eda:	1dbb      	adds	r3, r7, #6
 8028edc:	4619      	mov	r1, r3
 8028ede:	f240 2053 	movw	r0, #595	; 0x253
 8028ee2:	f7fc fa75 	bl	80253d0 <fm25v02_read>
	bootloader_registers.packet_data_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028ee6:	79fb      	ldrb	r3, [r7, #7]
 8028ee8:	021b      	lsls	r3, r3, #8
 8028eea:	b21a      	sxth	r2, r3
 8028eec:	79bb      	ldrb	r3, [r7, #6]
 8028eee:	b21b      	sxth	r3, r3
 8028ef0:	4313      	orrs	r3, r2
 8028ef2:	b21b      	sxth	r3, r3
 8028ef4:	e002      	b.n	8028efc <read_bootloader_registers+0x5fc>
 8028ef6:	bf00      	nop
 8028ef8:	2000a0c0 	.word	0x2000a0c0
 8028efc:	b29a      	uxth	r2, r3
 8028efe:	4b28      	ldr	r3, [pc, #160]	; (8028fa0 <read_bootloader_registers+0x6a0>)
 8028f00:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PACKET_DATA_2_REG, &status_reg_temp_h);
 8028f04:	1dfb      	adds	r3, r7, #7
 8028f06:	4619      	mov	r1, r3
 8028f08:	f44f 7015 	mov.w	r0, #596	; 0x254
 8028f0c:	f7fc fa60 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_2_REG+1, &status_reg_temp_l);
 8028f10:	1dbb      	adds	r3, r7, #6
 8028f12:	4619      	mov	r1, r3
 8028f14:	f240 2055 	movw	r0, #597	; 0x255
 8028f18:	f7fc fa5a 	bl	80253d0 <fm25v02_read>
	bootloader_registers.packet_data_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028f1c:	79fb      	ldrb	r3, [r7, #7]
 8028f1e:	021b      	lsls	r3, r3, #8
 8028f20:	b21a      	sxth	r2, r3
 8028f22:	79bb      	ldrb	r3, [r7, #6]
 8028f24:	b21b      	sxth	r3, r3
 8028f26:	4313      	orrs	r3, r2
 8028f28:	b21b      	sxth	r3, r3
 8028f2a:	b29a      	uxth	r2, r3
 8028f2c:	4b1c      	ldr	r3, [pc, #112]	; (8028fa0 <read_bootloader_registers+0x6a0>)
 8028f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PACKET_DATA_3_REG, &status_reg_temp_h);
 8028f32:	1dfb      	adds	r3, r7, #7
 8028f34:	4619      	mov	r1, r3
 8028f36:	f240 2056 	movw	r0, #598	; 0x256
 8028f3a:	f7fc fa49 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_3_REG+1, &status_reg_temp_l);
 8028f3e:	1dbb      	adds	r3, r7, #6
 8028f40:	4619      	mov	r1, r3
 8028f42:	f240 2057 	movw	r0, #599	; 0x257
 8028f46:	f7fc fa43 	bl	80253d0 <fm25v02_read>
	bootloader_registers.packet_data_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028f4a:	79fb      	ldrb	r3, [r7, #7]
 8028f4c:	021b      	lsls	r3, r3, #8
 8028f4e:	b21a      	sxth	r2, r3
 8028f50:	79bb      	ldrb	r3, [r7, #6]
 8028f52:	b21b      	sxth	r3, r3
 8028f54:	4313      	orrs	r3, r2
 8028f56:	b21b      	sxth	r3, r3
 8028f58:	b29a      	uxth	r2, r3
 8028f5a:	4b11      	ldr	r3, [pc, #68]	; (8028fa0 <read_bootloader_registers+0x6a0>)
 8028f5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*PACKET_DATA_4_REG, &status_reg_temp_h);
 8028f60:	1dfb      	adds	r3, r7, #7
 8028f62:	4619      	mov	r1, r3
 8028f64:	f44f 7016 	mov.w	r0, #600	; 0x258
 8028f68:	f7fc fa32 	bl	80253d0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_4_REG+1, &status_reg_temp_l);
 8028f6c:	1dbb      	adds	r3, r7, #6
 8028f6e:	4619      	mov	r1, r3
 8028f70:	f240 2059 	movw	r0, #601	; 0x259
 8028f74:	f7fc fa2c 	bl	80253d0 <fm25v02_read>
	bootloader_registers.packet_data_4_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8028f78:	79fb      	ldrb	r3, [r7, #7]
 8028f7a:	021b      	lsls	r3, r3, #8
 8028f7c:	b21a      	sxth	r2, r3
 8028f7e:	79bb      	ldrb	r3, [r7, #6]
 8028f80:	b21b      	sxth	r3, r3
 8028f82:	4313      	orrs	r3, r2
 8028f84:	b21b      	sxth	r3, r3
 8028f86:	b29a      	uxth	r2, r3
 8028f88:	4b05      	ldr	r3, [pc, #20]	; (8028fa0 <read_bootloader_registers+0x6a0>)
 8028f8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	osMutexRelease(Fm25v02MutexHandle);
 8028f8e:	4b05      	ldr	r3, [pc, #20]	; (8028fa4 <read_bootloader_registers+0x6a4>)
 8028f90:	681b      	ldr	r3, [r3, #0]
 8028f92:	4618      	mov	r0, r3
 8028f94:	f7ed fed2 	bl	8016d3c <osMutexRelease>

}
 8028f98:	bf00      	nop
 8028f9a:	3708      	adds	r7, #8
 8028f9c:	46bd      	mov	sp, r7
 8028f9e:	bd80      	pop	{r7, pc}
 8028fa0:	2000a0c0 	.word	0x2000a0c0
 8028fa4:	20009a6c 	.word	0x20009a6c

08028fa8 <CRC16>:



//--------------------- Процедура расчета CRC16 -------------------------------------

 unsigned int CRC16( unsigned char * pucFrame, unsigned int usLen ){
 8028fa8:	b480      	push	{r7}
 8028faa:	b085      	sub	sp, #20
 8028fac:	af00      	add	r7, sp, #0
 8028fae:	6078      	str	r0, [r7, #4]
 8028fb0:	6039      	str	r1, [r7, #0]
  unsigned char MB_Slave_ucCRCHi = 0xFF;
 8028fb2:	23ff      	movs	r3, #255	; 0xff
 8028fb4:	73fb      	strb	r3, [r7, #15]
  unsigned char MB_Slave_ucCRCLo = 0xFF;
 8028fb6:	23ff      	movs	r3, #255	; 0xff
 8028fb8:	73bb      	strb	r3, [r7, #14]
  int iIndex;
  //
  while( usLen-- ){
 8028fba:	e013      	b.n	8028fe4 <CRC16+0x3c>
    iIndex = MB_Slave_ucCRCLo ^ *( pucFrame++ );
 8028fbc:	687b      	ldr	r3, [r7, #4]
 8028fbe:	1c5a      	adds	r2, r3, #1
 8028fc0:	607a      	str	r2, [r7, #4]
 8028fc2:	781a      	ldrb	r2, [r3, #0]
 8028fc4:	7bbb      	ldrb	r3, [r7, #14]
 8028fc6:	4053      	eors	r3, r2
 8028fc8:	b2db      	uxtb	r3, r3
 8028fca:	60bb      	str	r3, [r7, #8]
    MB_Slave_ucCRCLo = MB_Slave_ucCRCHi ^ MB_Slave_aucCRCHi[iIndex];
 8028fcc:	4a0d      	ldr	r2, [pc, #52]	; (8029004 <CRC16+0x5c>)
 8028fce:	68bb      	ldr	r3, [r7, #8]
 8028fd0:	4413      	add	r3, r2
 8028fd2:	781a      	ldrb	r2, [r3, #0]
 8028fd4:	7bfb      	ldrb	r3, [r7, #15]
 8028fd6:	4053      	eors	r3, r2
 8028fd8:	73bb      	strb	r3, [r7, #14]
    MB_Slave_ucCRCHi = MB_Slave_aucCRCLo[iIndex];
 8028fda:	4a0b      	ldr	r2, [pc, #44]	; (8029008 <CRC16+0x60>)
 8028fdc:	68bb      	ldr	r3, [r7, #8]
 8028fde:	4413      	add	r3, r2
 8028fe0:	781b      	ldrb	r3, [r3, #0]
 8028fe2:	73fb      	strb	r3, [r7, #15]
  while( usLen-- ){
 8028fe4:	683b      	ldr	r3, [r7, #0]
 8028fe6:	1e5a      	subs	r2, r3, #1
 8028fe8:	603a      	str	r2, [r7, #0]
 8028fea:	2b00      	cmp	r3, #0
 8028fec:	d1e6      	bne.n	8028fbc <CRC16+0x14>
  }
  return MB_Slave_ucCRCHi << 8 | MB_Slave_ucCRCLo;
 8028fee:	7bfb      	ldrb	r3, [r7, #15]
 8028ff0:	021a      	lsls	r2, r3, #8
 8028ff2:	7bbb      	ldrb	r3, [r7, #14]
 8028ff4:	4313      	orrs	r3, r2
}
 8028ff6:	4618      	mov	r0, r3
 8028ff8:	3714      	adds	r7, #20
 8028ffa:	46bd      	mov	sp, r7
 8028ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029000:	4770      	bx	lr
 8029002:	bf00      	nop
 8029004:	0802a6b4 	.word	0x0802a6b4
 8029008:	0802a7b4 	.word	0x0802a7b4

0802900c <__errno>:
 802900c:	4b01      	ldr	r3, [pc, #4]	; (8029014 <__errno+0x8>)
 802900e:	6818      	ldr	r0, [r3, #0]
 8029010:	4770      	bx	lr
 8029012:	bf00      	nop
 8029014:	20000070 	.word	0x20000070

08029018 <std>:
 8029018:	2300      	movs	r3, #0
 802901a:	b510      	push	{r4, lr}
 802901c:	4604      	mov	r4, r0
 802901e:	e9c0 3300 	strd	r3, r3, [r0]
 8029022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029026:	6083      	str	r3, [r0, #8]
 8029028:	8181      	strh	r1, [r0, #12]
 802902a:	6643      	str	r3, [r0, #100]	; 0x64
 802902c:	81c2      	strh	r2, [r0, #14]
 802902e:	6183      	str	r3, [r0, #24]
 8029030:	4619      	mov	r1, r3
 8029032:	2208      	movs	r2, #8
 8029034:	305c      	adds	r0, #92	; 0x5c
 8029036:	f000 f91a 	bl	802926e <memset>
 802903a:	4b05      	ldr	r3, [pc, #20]	; (8029050 <std+0x38>)
 802903c:	6263      	str	r3, [r4, #36]	; 0x24
 802903e:	4b05      	ldr	r3, [pc, #20]	; (8029054 <std+0x3c>)
 8029040:	62a3      	str	r3, [r4, #40]	; 0x28
 8029042:	4b05      	ldr	r3, [pc, #20]	; (8029058 <std+0x40>)
 8029044:	62e3      	str	r3, [r4, #44]	; 0x2c
 8029046:	4b05      	ldr	r3, [pc, #20]	; (802905c <std+0x44>)
 8029048:	6224      	str	r4, [r4, #32]
 802904a:	6323      	str	r3, [r4, #48]	; 0x30
 802904c:	bd10      	pop	{r4, pc}
 802904e:	bf00      	nop
 8029050:	08029555 	.word	0x08029555
 8029054:	08029577 	.word	0x08029577
 8029058:	080295af 	.word	0x080295af
 802905c:	080295d3 	.word	0x080295d3

08029060 <_cleanup_r>:
 8029060:	4901      	ldr	r1, [pc, #4]	; (8029068 <_cleanup_r+0x8>)
 8029062:	f000 b8af 	b.w	80291c4 <_fwalk_reent>
 8029066:	bf00      	nop
 8029068:	080298d9 	.word	0x080298d9

0802906c <__sfmoreglue>:
 802906c:	b570      	push	{r4, r5, r6, lr}
 802906e:	1e4a      	subs	r2, r1, #1
 8029070:	2568      	movs	r5, #104	; 0x68
 8029072:	4355      	muls	r5, r2
 8029074:	460e      	mov	r6, r1
 8029076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802907a:	f000 f901 	bl	8029280 <_malloc_r>
 802907e:	4604      	mov	r4, r0
 8029080:	b140      	cbz	r0, 8029094 <__sfmoreglue+0x28>
 8029082:	2100      	movs	r1, #0
 8029084:	e9c0 1600 	strd	r1, r6, [r0]
 8029088:	300c      	adds	r0, #12
 802908a:	60a0      	str	r0, [r4, #8]
 802908c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8029090:	f000 f8ed 	bl	802926e <memset>
 8029094:	4620      	mov	r0, r4
 8029096:	bd70      	pop	{r4, r5, r6, pc}

08029098 <__sfp_lock_acquire>:
 8029098:	4801      	ldr	r0, [pc, #4]	; (80290a0 <__sfp_lock_acquire+0x8>)
 802909a:	f000 b8d8 	b.w	802924e <__retarget_lock_acquire_recursive>
 802909e:	bf00      	nop
 80290a0:	2000a236 	.word	0x2000a236

080290a4 <__sfp_lock_release>:
 80290a4:	4801      	ldr	r0, [pc, #4]	; (80290ac <__sfp_lock_release+0x8>)
 80290a6:	f000 b8d3 	b.w	8029250 <__retarget_lock_release_recursive>
 80290aa:	bf00      	nop
 80290ac:	2000a236 	.word	0x2000a236

080290b0 <__sinit_lock_acquire>:
 80290b0:	4801      	ldr	r0, [pc, #4]	; (80290b8 <__sinit_lock_acquire+0x8>)
 80290b2:	f000 b8cc 	b.w	802924e <__retarget_lock_acquire_recursive>
 80290b6:	bf00      	nop
 80290b8:	2000a231 	.word	0x2000a231

080290bc <__sinit_lock_release>:
 80290bc:	4801      	ldr	r0, [pc, #4]	; (80290c4 <__sinit_lock_release+0x8>)
 80290be:	f000 b8c7 	b.w	8029250 <__retarget_lock_release_recursive>
 80290c2:	bf00      	nop
 80290c4:	2000a231 	.word	0x2000a231

080290c8 <__sinit>:
 80290c8:	b510      	push	{r4, lr}
 80290ca:	4604      	mov	r4, r0
 80290cc:	f7ff fff0 	bl	80290b0 <__sinit_lock_acquire>
 80290d0:	69a3      	ldr	r3, [r4, #24]
 80290d2:	b11b      	cbz	r3, 80290dc <__sinit+0x14>
 80290d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80290d8:	f7ff bff0 	b.w	80290bc <__sinit_lock_release>
 80290dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80290e0:	6523      	str	r3, [r4, #80]	; 0x50
 80290e2:	4b13      	ldr	r3, [pc, #76]	; (8029130 <__sinit+0x68>)
 80290e4:	4a13      	ldr	r2, [pc, #76]	; (8029134 <__sinit+0x6c>)
 80290e6:	681b      	ldr	r3, [r3, #0]
 80290e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80290ea:	42a3      	cmp	r3, r4
 80290ec:	bf04      	itt	eq
 80290ee:	2301      	moveq	r3, #1
 80290f0:	61a3      	streq	r3, [r4, #24]
 80290f2:	4620      	mov	r0, r4
 80290f4:	f000 f820 	bl	8029138 <__sfp>
 80290f8:	6060      	str	r0, [r4, #4]
 80290fa:	4620      	mov	r0, r4
 80290fc:	f000 f81c 	bl	8029138 <__sfp>
 8029100:	60a0      	str	r0, [r4, #8]
 8029102:	4620      	mov	r0, r4
 8029104:	f000 f818 	bl	8029138 <__sfp>
 8029108:	2200      	movs	r2, #0
 802910a:	60e0      	str	r0, [r4, #12]
 802910c:	2104      	movs	r1, #4
 802910e:	6860      	ldr	r0, [r4, #4]
 8029110:	f7ff ff82 	bl	8029018 <std>
 8029114:	68a0      	ldr	r0, [r4, #8]
 8029116:	2201      	movs	r2, #1
 8029118:	2109      	movs	r1, #9
 802911a:	f7ff ff7d 	bl	8029018 <std>
 802911e:	68e0      	ldr	r0, [r4, #12]
 8029120:	2202      	movs	r2, #2
 8029122:	2112      	movs	r1, #18
 8029124:	f7ff ff78 	bl	8029018 <std>
 8029128:	2301      	movs	r3, #1
 802912a:	61a3      	str	r3, [r4, #24]
 802912c:	e7d2      	b.n	80290d4 <__sinit+0xc>
 802912e:	bf00      	nop
 8029130:	0802a914 	.word	0x0802a914
 8029134:	08029061 	.word	0x08029061

08029138 <__sfp>:
 8029138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802913a:	4607      	mov	r7, r0
 802913c:	f7ff ffac 	bl	8029098 <__sfp_lock_acquire>
 8029140:	4b1e      	ldr	r3, [pc, #120]	; (80291bc <__sfp+0x84>)
 8029142:	681e      	ldr	r6, [r3, #0]
 8029144:	69b3      	ldr	r3, [r6, #24]
 8029146:	b913      	cbnz	r3, 802914e <__sfp+0x16>
 8029148:	4630      	mov	r0, r6
 802914a:	f7ff ffbd 	bl	80290c8 <__sinit>
 802914e:	3648      	adds	r6, #72	; 0x48
 8029150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8029154:	3b01      	subs	r3, #1
 8029156:	d503      	bpl.n	8029160 <__sfp+0x28>
 8029158:	6833      	ldr	r3, [r6, #0]
 802915a:	b30b      	cbz	r3, 80291a0 <__sfp+0x68>
 802915c:	6836      	ldr	r6, [r6, #0]
 802915e:	e7f7      	b.n	8029150 <__sfp+0x18>
 8029160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8029164:	b9d5      	cbnz	r5, 802919c <__sfp+0x64>
 8029166:	4b16      	ldr	r3, [pc, #88]	; (80291c0 <__sfp+0x88>)
 8029168:	60e3      	str	r3, [r4, #12]
 802916a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802916e:	6665      	str	r5, [r4, #100]	; 0x64
 8029170:	f000 f86c 	bl	802924c <__retarget_lock_init_recursive>
 8029174:	f7ff ff96 	bl	80290a4 <__sfp_lock_release>
 8029178:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802917c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8029180:	6025      	str	r5, [r4, #0]
 8029182:	61a5      	str	r5, [r4, #24]
 8029184:	2208      	movs	r2, #8
 8029186:	4629      	mov	r1, r5
 8029188:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802918c:	f000 f86f 	bl	802926e <memset>
 8029190:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029194:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029198:	4620      	mov	r0, r4
 802919a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802919c:	3468      	adds	r4, #104	; 0x68
 802919e:	e7d9      	b.n	8029154 <__sfp+0x1c>
 80291a0:	2104      	movs	r1, #4
 80291a2:	4638      	mov	r0, r7
 80291a4:	f7ff ff62 	bl	802906c <__sfmoreglue>
 80291a8:	4604      	mov	r4, r0
 80291aa:	6030      	str	r0, [r6, #0]
 80291ac:	2800      	cmp	r0, #0
 80291ae:	d1d5      	bne.n	802915c <__sfp+0x24>
 80291b0:	f7ff ff78 	bl	80290a4 <__sfp_lock_release>
 80291b4:	230c      	movs	r3, #12
 80291b6:	603b      	str	r3, [r7, #0]
 80291b8:	e7ee      	b.n	8029198 <__sfp+0x60>
 80291ba:	bf00      	nop
 80291bc:	0802a914 	.word	0x0802a914
 80291c0:	ffff0001 	.word	0xffff0001

080291c4 <_fwalk_reent>:
 80291c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80291c8:	4606      	mov	r6, r0
 80291ca:	4688      	mov	r8, r1
 80291cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80291d0:	2700      	movs	r7, #0
 80291d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80291d6:	f1b9 0901 	subs.w	r9, r9, #1
 80291da:	d505      	bpl.n	80291e8 <_fwalk_reent+0x24>
 80291dc:	6824      	ldr	r4, [r4, #0]
 80291de:	2c00      	cmp	r4, #0
 80291e0:	d1f7      	bne.n	80291d2 <_fwalk_reent+0xe>
 80291e2:	4638      	mov	r0, r7
 80291e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80291e8:	89ab      	ldrh	r3, [r5, #12]
 80291ea:	2b01      	cmp	r3, #1
 80291ec:	d907      	bls.n	80291fe <_fwalk_reent+0x3a>
 80291ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80291f2:	3301      	adds	r3, #1
 80291f4:	d003      	beq.n	80291fe <_fwalk_reent+0x3a>
 80291f6:	4629      	mov	r1, r5
 80291f8:	4630      	mov	r0, r6
 80291fa:	47c0      	blx	r8
 80291fc:	4307      	orrs	r7, r0
 80291fe:	3568      	adds	r5, #104	; 0x68
 8029200:	e7e9      	b.n	80291d6 <_fwalk_reent+0x12>
	...

08029204 <__libc_init_array>:
 8029204:	b570      	push	{r4, r5, r6, lr}
 8029206:	4d0d      	ldr	r5, [pc, #52]	; (802923c <__libc_init_array+0x38>)
 8029208:	4c0d      	ldr	r4, [pc, #52]	; (8029240 <__libc_init_array+0x3c>)
 802920a:	1b64      	subs	r4, r4, r5
 802920c:	10a4      	asrs	r4, r4, #2
 802920e:	2600      	movs	r6, #0
 8029210:	42a6      	cmp	r6, r4
 8029212:	d109      	bne.n	8029228 <__libc_init_array+0x24>
 8029214:	4d0b      	ldr	r5, [pc, #44]	; (8029244 <__libc_init_array+0x40>)
 8029216:	4c0c      	ldr	r4, [pc, #48]	; (8029248 <__libc_init_array+0x44>)
 8029218:	f000 ffd8 	bl	802a1cc <_init>
 802921c:	1b64      	subs	r4, r4, r5
 802921e:	10a4      	asrs	r4, r4, #2
 8029220:	2600      	movs	r6, #0
 8029222:	42a6      	cmp	r6, r4
 8029224:	d105      	bne.n	8029232 <__libc_init_array+0x2e>
 8029226:	bd70      	pop	{r4, r5, r6, pc}
 8029228:	f855 3b04 	ldr.w	r3, [r5], #4
 802922c:	4798      	blx	r3
 802922e:	3601      	adds	r6, #1
 8029230:	e7ee      	b.n	8029210 <__libc_init_array+0xc>
 8029232:	f855 3b04 	ldr.w	r3, [r5], #4
 8029236:	4798      	blx	r3
 8029238:	3601      	adds	r6, #1
 802923a:	e7f2      	b.n	8029222 <__libc_init_array+0x1e>
 802923c:	0802a954 	.word	0x0802a954
 8029240:	0802a954 	.word	0x0802a954
 8029244:	0802a954 	.word	0x0802a954
 8029248:	0802a958 	.word	0x0802a958

0802924c <__retarget_lock_init_recursive>:
 802924c:	4770      	bx	lr

0802924e <__retarget_lock_acquire_recursive>:
 802924e:	4770      	bx	lr

08029250 <__retarget_lock_release_recursive>:
 8029250:	4770      	bx	lr

08029252 <memcpy>:
 8029252:	440a      	add	r2, r1
 8029254:	4291      	cmp	r1, r2
 8029256:	f100 33ff 	add.w	r3, r0, #4294967295
 802925a:	d100      	bne.n	802925e <memcpy+0xc>
 802925c:	4770      	bx	lr
 802925e:	b510      	push	{r4, lr}
 8029260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029268:	4291      	cmp	r1, r2
 802926a:	d1f9      	bne.n	8029260 <memcpy+0xe>
 802926c:	bd10      	pop	{r4, pc}

0802926e <memset>:
 802926e:	4402      	add	r2, r0
 8029270:	4603      	mov	r3, r0
 8029272:	4293      	cmp	r3, r2
 8029274:	d100      	bne.n	8029278 <memset+0xa>
 8029276:	4770      	bx	lr
 8029278:	f803 1b01 	strb.w	r1, [r3], #1
 802927c:	e7f9      	b.n	8029272 <memset+0x4>
	...

08029280 <_malloc_r>:
 8029280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029282:	1ccd      	adds	r5, r1, #3
 8029284:	f025 0503 	bic.w	r5, r5, #3
 8029288:	3508      	adds	r5, #8
 802928a:	2d0c      	cmp	r5, #12
 802928c:	bf38      	it	cc
 802928e:	250c      	movcc	r5, #12
 8029290:	2d00      	cmp	r5, #0
 8029292:	4606      	mov	r6, r0
 8029294:	db01      	blt.n	802929a <_malloc_r+0x1a>
 8029296:	42a9      	cmp	r1, r5
 8029298:	d903      	bls.n	80292a2 <_malloc_r+0x22>
 802929a:	230c      	movs	r3, #12
 802929c:	6033      	str	r3, [r6, #0]
 802929e:	2000      	movs	r0, #0
 80292a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80292a2:	f000 fbcb 	bl	8029a3c <__malloc_lock>
 80292a6:	4921      	ldr	r1, [pc, #132]	; (802932c <_malloc_r+0xac>)
 80292a8:	680a      	ldr	r2, [r1, #0]
 80292aa:	4614      	mov	r4, r2
 80292ac:	b99c      	cbnz	r4, 80292d6 <_malloc_r+0x56>
 80292ae:	4f20      	ldr	r7, [pc, #128]	; (8029330 <_malloc_r+0xb0>)
 80292b0:	683b      	ldr	r3, [r7, #0]
 80292b2:	b923      	cbnz	r3, 80292be <_malloc_r+0x3e>
 80292b4:	4621      	mov	r1, r4
 80292b6:	4630      	mov	r0, r6
 80292b8:	f000 f91c 	bl	80294f4 <_sbrk_r>
 80292bc:	6038      	str	r0, [r7, #0]
 80292be:	4629      	mov	r1, r5
 80292c0:	4630      	mov	r0, r6
 80292c2:	f000 f917 	bl	80294f4 <_sbrk_r>
 80292c6:	1c43      	adds	r3, r0, #1
 80292c8:	d123      	bne.n	8029312 <_malloc_r+0x92>
 80292ca:	230c      	movs	r3, #12
 80292cc:	6033      	str	r3, [r6, #0]
 80292ce:	4630      	mov	r0, r6
 80292d0:	f000 fbba 	bl	8029a48 <__malloc_unlock>
 80292d4:	e7e3      	b.n	802929e <_malloc_r+0x1e>
 80292d6:	6823      	ldr	r3, [r4, #0]
 80292d8:	1b5b      	subs	r3, r3, r5
 80292da:	d417      	bmi.n	802930c <_malloc_r+0x8c>
 80292dc:	2b0b      	cmp	r3, #11
 80292de:	d903      	bls.n	80292e8 <_malloc_r+0x68>
 80292e0:	6023      	str	r3, [r4, #0]
 80292e2:	441c      	add	r4, r3
 80292e4:	6025      	str	r5, [r4, #0]
 80292e6:	e004      	b.n	80292f2 <_malloc_r+0x72>
 80292e8:	6863      	ldr	r3, [r4, #4]
 80292ea:	42a2      	cmp	r2, r4
 80292ec:	bf0c      	ite	eq
 80292ee:	600b      	streq	r3, [r1, #0]
 80292f0:	6053      	strne	r3, [r2, #4]
 80292f2:	4630      	mov	r0, r6
 80292f4:	f000 fba8 	bl	8029a48 <__malloc_unlock>
 80292f8:	f104 000b 	add.w	r0, r4, #11
 80292fc:	1d23      	adds	r3, r4, #4
 80292fe:	f020 0007 	bic.w	r0, r0, #7
 8029302:	1ac2      	subs	r2, r0, r3
 8029304:	d0cc      	beq.n	80292a0 <_malloc_r+0x20>
 8029306:	1a1b      	subs	r3, r3, r0
 8029308:	50a3      	str	r3, [r4, r2]
 802930a:	e7c9      	b.n	80292a0 <_malloc_r+0x20>
 802930c:	4622      	mov	r2, r4
 802930e:	6864      	ldr	r4, [r4, #4]
 8029310:	e7cc      	b.n	80292ac <_malloc_r+0x2c>
 8029312:	1cc4      	adds	r4, r0, #3
 8029314:	f024 0403 	bic.w	r4, r4, #3
 8029318:	42a0      	cmp	r0, r4
 802931a:	d0e3      	beq.n	80292e4 <_malloc_r+0x64>
 802931c:	1a21      	subs	r1, r4, r0
 802931e:	4630      	mov	r0, r6
 8029320:	f000 f8e8 	bl	80294f4 <_sbrk_r>
 8029324:	3001      	adds	r0, #1
 8029326:	d1dd      	bne.n	80292e4 <_malloc_r+0x64>
 8029328:	e7cf      	b.n	80292ca <_malloc_r+0x4a>
 802932a:	bf00      	nop
 802932c:	20008008 	.word	0x20008008
 8029330:	2000800c 	.word	0x2000800c

08029334 <_puts_r>:
 8029334:	b570      	push	{r4, r5, r6, lr}
 8029336:	460e      	mov	r6, r1
 8029338:	4605      	mov	r5, r0
 802933a:	b118      	cbz	r0, 8029344 <_puts_r+0x10>
 802933c:	6983      	ldr	r3, [r0, #24]
 802933e:	b90b      	cbnz	r3, 8029344 <_puts_r+0x10>
 8029340:	f7ff fec2 	bl	80290c8 <__sinit>
 8029344:	69ab      	ldr	r3, [r5, #24]
 8029346:	68ac      	ldr	r4, [r5, #8]
 8029348:	b913      	cbnz	r3, 8029350 <_puts_r+0x1c>
 802934a:	4628      	mov	r0, r5
 802934c:	f7ff febc 	bl	80290c8 <__sinit>
 8029350:	4b2c      	ldr	r3, [pc, #176]	; (8029404 <_puts_r+0xd0>)
 8029352:	429c      	cmp	r4, r3
 8029354:	d120      	bne.n	8029398 <_puts_r+0x64>
 8029356:	686c      	ldr	r4, [r5, #4]
 8029358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802935a:	07db      	lsls	r3, r3, #31
 802935c:	d405      	bmi.n	802936a <_puts_r+0x36>
 802935e:	89a3      	ldrh	r3, [r4, #12]
 8029360:	0598      	lsls	r0, r3, #22
 8029362:	d402      	bmi.n	802936a <_puts_r+0x36>
 8029364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029366:	f7ff ff72 	bl	802924e <__retarget_lock_acquire_recursive>
 802936a:	89a3      	ldrh	r3, [r4, #12]
 802936c:	0719      	lsls	r1, r3, #28
 802936e:	d51d      	bpl.n	80293ac <_puts_r+0x78>
 8029370:	6923      	ldr	r3, [r4, #16]
 8029372:	b1db      	cbz	r3, 80293ac <_puts_r+0x78>
 8029374:	3e01      	subs	r6, #1
 8029376:	68a3      	ldr	r3, [r4, #8]
 8029378:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802937c:	3b01      	subs	r3, #1
 802937e:	60a3      	str	r3, [r4, #8]
 8029380:	bb39      	cbnz	r1, 80293d2 <_puts_r+0x9e>
 8029382:	2b00      	cmp	r3, #0
 8029384:	da38      	bge.n	80293f8 <_puts_r+0xc4>
 8029386:	4622      	mov	r2, r4
 8029388:	210a      	movs	r1, #10
 802938a:	4628      	mov	r0, r5
 802938c:	f000 f93c 	bl	8029608 <__swbuf_r>
 8029390:	3001      	adds	r0, #1
 8029392:	d011      	beq.n	80293b8 <_puts_r+0x84>
 8029394:	250a      	movs	r5, #10
 8029396:	e011      	b.n	80293bc <_puts_r+0x88>
 8029398:	4b1b      	ldr	r3, [pc, #108]	; (8029408 <_puts_r+0xd4>)
 802939a:	429c      	cmp	r4, r3
 802939c:	d101      	bne.n	80293a2 <_puts_r+0x6e>
 802939e:	68ac      	ldr	r4, [r5, #8]
 80293a0:	e7da      	b.n	8029358 <_puts_r+0x24>
 80293a2:	4b1a      	ldr	r3, [pc, #104]	; (802940c <_puts_r+0xd8>)
 80293a4:	429c      	cmp	r4, r3
 80293a6:	bf08      	it	eq
 80293a8:	68ec      	ldreq	r4, [r5, #12]
 80293aa:	e7d5      	b.n	8029358 <_puts_r+0x24>
 80293ac:	4621      	mov	r1, r4
 80293ae:	4628      	mov	r0, r5
 80293b0:	f000 f98e 	bl	80296d0 <__swsetup_r>
 80293b4:	2800      	cmp	r0, #0
 80293b6:	d0dd      	beq.n	8029374 <_puts_r+0x40>
 80293b8:	f04f 35ff 	mov.w	r5, #4294967295
 80293bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80293be:	07da      	lsls	r2, r3, #31
 80293c0:	d405      	bmi.n	80293ce <_puts_r+0x9a>
 80293c2:	89a3      	ldrh	r3, [r4, #12]
 80293c4:	059b      	lsls	r3, r3, #22
 80293c6:	d402      	bmi.n	80293ce <_puts_r+0x9a>
 80293c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80293ca:	f7ff ff41 	bl	8029250 <__retarget_lock_release_recursive>
 80293ce:	4628      	mov	r0, r5
 80293d0:	bd70      	pop	{r4, r5, r6, pc}
 80293d2:	2b00      	cmp	r3, #0
 80293d4:	da04      	bge.n	80293e0 <_puts_r+0xac>
 80293d6:	69a2      	ldr	r2, [r4, #24]
 80293d8:	429a      	cmp	r2, r3
 80293da:	dc06      	bgt.n	80293ea <_puts_r+0xb6>
 80293dc:	290a      	cmp	r1, #10
 80293de:	d004      	beq.n	80293ea <_puts_r+0xb6>
 80293e0:	6823      	ldr	r3, [r4, #0]
 80293e2:	1c5a      	adds	r2, r3, #1
 80293e4:	6022      	str	r2, [r4, #0]
 80293e6:	7019      	strb	r1, [r3, #0]
 80293e8:	e7c5      	b.n	8029376 <_puts_r+0x42>
 80293ea:	4622      	mov	r2, r4
 80293ec:	4628      	mov	r0, r5
 80293ee:	f000 f90b 	bl	8029608 <__swbuf_r>
 80293f2:	3001      	adds	r0, #1
 80293f4:	d1bf      	bne.n	8029376 <_puts_r+0x42>
 80293f6:	e7df      	b.n	80293b8 <_puts_r+0x84>
 80293f8:	6823      	ldr	r3, [r4, #0]
 80293fa:	250a      	movs	r5, #10
 80293fc:	1c5a      	adds	r2, r3, #1
 80293fe:	6022      	str	r2, [r4, #0]
 8029400:	701d      	strb	r5, [r3, #0]
 8029402:	e7db      	b.n	80293bc <_puts_r+0x88>
 8029404:	0802a8d4 	.word	0x0802a8d4
 8029408:	0802a8f4 	.word	0x0802a8f4
 802940c:	0802a8b4 	.word	0x0802a8b4

08029410 <puts>:
 8029410:	4b02      	ldr	r3, [pc, #8]	; (802941c <puts+0xc>)
 8029412:	4601      	mov	r1, r0
 8029414:	6818      	ldr	r0, [r3, #0]
 8029416:	f7ff bf8d 	b.w	8029334 <_puts_r>
 802941a:	bf00      	nop
 802941c:	20000070 	.word	0x20000070

08029420 <cleanup_glue>:
 8029420:	b538      	push	{r3, r4, r5, lr}
 8029422:	460c      	mov	r4, r1
 8029424:	6809      	ldr	r1, [r1, #0]
 8029426:	4605      	mov	r5, r0
 8029428:	b109      	cbz	r1, 802942e <cleanup_glue+0xe>
 802942a:	f7ff fff9 	bl	8029420 <cleanup_glue>
 802942e:	4621      	mov	r1, r4
 8029430:	4628      	mov	r0, r5
 8029432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029436:	f000 bb0d 	b.w	8029a54 <_free_r>
	...

0802943c <_reclaim_reent>:
 802943c:	4b2c      	ldr	r3, [pc, #176]	; (80294f0 <_reclaim_reent+0xb4>)
 802943e:	681b      	ldr	r3, [r3, #0]
 8029440:	4283      	cmp	r3, r0
 8029442:	b570      	push	{r4, r5, r6, lr}
 8029444:	4604      	mov	r4, r0
 8029446:	d051      	beq.n	80294ec <_reclaim_reent+0xb0>
 8029448:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802944a:	b143      	cbz	r3, 802945e <_reclaim_reent+0x22>
 802944c:	68db      	ldr	r3, [r3, #12]
 802944e:	2b00      	cmp	r3, #0
 8029450:	d14a      	bne.n	80294e8 <_reclaim_reent+0xac>
 8029452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029454:	6819      	ldr	r1, [r3, #0]
 8029456:	b111      	cbz	r1, 802945e <_reclaim_reent+0x22>
 8029458:	4620      	mov	r0, r4
 802945a:	f000 fafb 	bl	8029a54 <_free_r>
 802945e:	6961      	ldr	r1, [r4, #20]
 8029460:	b111      	cbz	r1, 8029468 <_reclaim_reent+0x2c>
 8029462:	4620      	mov	r0, r4
 8029464:	f000 faf6 	bl	8029a54 <_free_r>
 8029468:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802946a:	b111      	cbz	r1, 8029472 <_reclaim_reent+0x36>
 802946c:	4620      	mov	r0, r4
 802946e:	f000 faf1 	bl	8029a54 <_free_r>
 8029472:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8029474:	b111      	cbz	r1, 802947c <_reclaim_reent+0x40>
 8029476:	4620      	mov	r0, r4
 8029478:	f000 faec 	bl	8029a54 <_free_r>
 802947c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802947e:	b111      	cbz	r1, 8029486 <_reclaim_reent+0x4a>
 8029480:	4620      	mov	r0, r4
 8029482:	f000 fae7 	bl	8029a54 <_free_r>
 8029486:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029488:	b111      	cbz	r1, 8029490 <_reclaim_reent+0x54>
 802948a:	4620      	mov	r0, r4
 802948c:	f000 fae2 	bl	8029a54 <_free_r>
 8029490:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8029492:	b111      	cbz	r1, 802949a <_reclaim_reent+0x5e>
 8029494:	4620      	mov	r0, r4
 8029496:	f000 fadd 	bl	8029a54 <_free_r>
 802949a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802949c:	b111      	cbz	r1, 80294a4 <_reclaim_reent+0x68>
 802949e:	4620      	mov	r0, r4
 80294a0:	f000 fad8 	bl	8029a54 <_free_r>
 80294a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80294a6:	b111      	cbz	r1, 80294ae <_reclaim_reent+0x72>
 80294a8:	4620      	mov	r0, r4
 80294aa:	f000 fad3 	bl	8029a54 <_free_r>
 80294ae:	69a3      	ldr	r3, [r4, #24]
 80294b0:	b1e3      	cbz	r3, 80294ec <_reclaim_reent+0xb0>
 80294b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80294b4:	4620      	mov	r0, r4
 80294b6:	4798      	blx	r3
 80294b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80294ba:	b1b9      	cbz	r1, 80294ec <_reclaim_reent+0xb0>
 80294bc:	4620      	mov	r0, r4
 80294be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80294c2:	f7ff bfad 	b.w	8029420 <cleanup_glue>
 80294c6:	5949      	ldr	r1, [r1, r5]
 80294c8:	b941      	cbnz	r1, 80294dc <_reclaim_reent+0xa0>
 80294ca:	3504      	adds	r5, #4
 80294cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80294ce:	2d80      	cmp	r5, #128	; 0x80
 80294d0:	68d9      	ldr	r1, [r3, #12]
 80294d2:	d1f8      	bne.n	80294c6 <_reclaim_reent+0x8a>
 80294d4:	4620      	mov	r0, r4
 80294d6:	f000 fabd 	bl	8029a54 <_free_r>
 80294da:	e7ba      	b.n	8029452 <_reclaim_reent+0x16>
 80294dc:	680e      	ldr	r6, [r1, #0]
 80294de:	4620      	mov	r0, r4
 80294e0:	f000 fab8 	bl	8029a54 <_free_r>
 80294e4:	4631      	mov	r1, r6
 80294e6:	e7ef      	b.n	80294c8 <_reclaim_reent+0x8c>
 80294e8:	2500      	movs	r5, #0
 80294ea:	e7ef      	b.n	80294cc <_reclaim_reent+0x90>
 80294ec:	bd70      	pop	{r4, r5, r6, pc}
 80294ee:	bf00      	nop
 80294f0:	20000070 	.word	0x20000070

080294f4 <_sbrk_r>:
 80294f4:	b538      	push	{r3, r4, r5, lr}
 80294f6:	4d06      	ldr	r5, [pc, #24]	; (8029510 <_sbrk_r+0x1c>)
 80294f8:	2300      	movs	r3, #0
 80294fa:	4604      	mov	r4, r0
 80294fc:	4608      	mov	r0, r1
 80294fe:	602b      	str	r3, [r5, #0]
 8029500:	f7e8 fafc 	bl	8011afc <_sbrk>
 8029504:	1c43      	adds	r3, r0, #1
 8029506:	d102      	bne.n	802950e <_sbrk_r+0x1a>
 8029508:	682b      	ldr	r3, [r5, #0]
 802950a:	b103      	cbz	r3, 802950e <_sbrk_r+0x1a>
 802950c:	6023      	str	r3, [r4, #0]
 802950e:	bd38      	pop	{r3, r4, r5, pc}
 8029510:	2000a238 	.word	0x2000a238

08029514 <siprintf>:
 8029514:	b40e      	push	{r1, r2, r3}
 8029516:	b500      	push	{lr}
 8029518:	b09c      	sub	sp, #112	; 0x70
 802951a:	ab1d      	add	r3, sp, #116	; 0x74
 802951c:	9002      	str	r0, [sp, #8]
 802951e:	9006      	str	r0, [sp, #24]
 8029520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8029524:	4809      	ldr	r0, [pc, #36]	; (802954c <siprintf+0x38>)
 8029526:	9107      	str	r1, [sp, #28]
 8029528:	9104      	str	r1, [sp, #16]
 802952a:	4909      	ldr	r1, [pc, #36]	; (8029550 <siprintf+0x3c>)
 802952c:	f853 2b04 	ldr.w	r2, [r3], #4
 8029530:	9105      	str	r1, [sp, #20]
 8029532:	6800      	ldr	r0, [r0, #0]
 8029534:	9301      	str	r3, [sp, #4]
 8029536:	a902      	add	r1, sp, #8
 8029538:	f000 fb38 	bl	8029bac <_svfiprintf_r>
 802953c:	9b02      	ldr	r3, [sp, #8]
 802953e:	2200      	movs	r2, #0
 8029540:	701a      	strb	r2, [r3, #0]
 8029542:	b01c      	add	sp, #112	; 0x70
 8029544:	f85d eb04 	ldr.w	lr, [sp], #4
 8029548:	b003      	add	sp, #12
 802954a:	4770      	bx	lr
 802954c:	20000070 	.word	0x20000070
 8029550:	ffff0208 	.word	0xffff0208

08029554 <__sread>:
 8029554:	b510      	push	{r4, lr}
 8029556:	460c      	mov	r4, r1
 8029558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802955c:	f000 fdba 	bl	802a0d4 <_read_r>
 8029560:	2800      	cmp	r0, #0
 8029562:	bfab      	itete	ge
 8029564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8029566:	89a3      	ldrhlt	r3, [r4, #12]
 8029568:	181b      	addge	r3, r3, r0
 802956a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802956e:	bfac      	ite	ge
 8029570:	6563      	strge	r3, [r4, #84]	; 0x54
 8029572:	81a3      	strhlt	r3, [r4, #12]
 8029574:	bd10      	pop	{r4, pc}

08029576 <__swrite>:
 8029576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802957a:	461f      	mov	r7, r3
 802957c:	898b      	ldrh	r3, [r1, #12]
 802957e:	05db      	lsls	r3, r3, #23
 8029580:	4605      	mov	r5, r0
 8029582:	460c      	mov	r4, r1
 8029584:	4616      	mov	r6, r2
 8029586:	d505      	bpl.n	8029594 <__swrite+0x1e>
 8029588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802958c:	2302      	movs	r3, #2
 802958e:	2200      	movs	r2, #0
 8029590:	f000 f9de 	bl	8029950 <_lseek_r>
 8029594:	89a3      	ldrh	r3, [r4, #12]
 8029596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802959a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802959e:	81a3      	strh	r3, [r4, #12]
 80295a0:	4632      	mov	r2, r6
 80295a2:	463b      	mov	r3, r7
 80295a4:	4628      	mov	r0, r5
 80295a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80295aa:	f000 b87f 	b.w	80296ac <_write_r>

080295ae <__sseek>:
 80295ae:	b510      	push	{r4, lr}
 80295b0:	460c      	mov	r4, r1
 80295b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80295b6:	f000 f9cb 	bl	8029950 <_lseek_r>
 80295ba:	1c43      	adds	r3, r0, #1
 80295bc:	89a3      	ldrh	r3, [r4, #12]
 80295be:	bf15      	itete	ne
 80295c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80295c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80295c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80295ca:	81a3      	strheq	r3, [r4, #12]
 80295cc:	bf18      	it	ne
 80295ce:	81a3      	strhne	r3, [r4, #12]
 80295d0:	bd10      	pop	{r4, pc}

080295d2 <__sclose>:
 80295d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80295d6:	f000 b8e9 	b.w	80297ac <_close_r>

080295da <strstr>:
 80295da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80295dc:	780c      	ldrb	r4, [r1, #0]
 80295de:	b164      	cbz	r4, 80295fa <strstr+0x20>
 80295e0:	4603      	mov	r3, r0
 80295e2:	781a      	ldrb	r2, [r3, #0]
 80295e4:	4618      	mov	r0, r3
 80295e6:	1c5e      	adds	r6, r3, #1
 80295e8:	b90a      	cbnz	r2, 80295ee <strstr+0x14>
 80295ea:	4610      	mov	r0, r2
 80295ec:	e005      	b.n	80295fa <strstr+0x20>
 80295ee:	4294      	cmp	r4, r2
 80295f0:	d108      	bne.n	8029604 <strstr+0x2a>
 80295f2:	460d      	mov	r5, r1
 80295f4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80295f8:	b902      	cbnz	r2, 80295fc <strstr+0x22>
 80295fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80295fc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8029600:	4297      	cmp	r7, r2
 8029602:	d0f7      	beq.n	80295f4 <strstr+0x1a>
 8029604:	4633      	mov	r3, r6
 8029606:	e7ec      	b.n	80295e2 <strstr+0x8>

08029608 <__swbuf_r>:
 8029608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802960a:	460e      	mov	r6, r1
 802960c:	4614      	mov	r4, r2
 802960e:	4605      	mov	r5, r0
 8029610:	b118      	cbz	r0, 802961a <__swbuf_r+0x12>
 8029612:	6983      	ldr	r3, [r0, #24]
 8029614:	b90b      	cbnz	r3, 802961a <__swbuf_r+0x12>
 8029616:	f7ff fd57 	bl	80290c8 <__sinit>
 802961a:	4b21      	ldr	r3, [pc, #132]	; (80296a0 <__swbuf_r+0x98>)
 802961c:	429c      	cmp	r4, r3
 802961e:	d12b      	bne.n	8029678 <__swbuf_r+0x70>
 8029620:	686c      	ldr	r4, [r5, #4]
 8029622:	69a3      	ldr	r3, [r4, #24]
 8029624:	60a3      	str	r3, [r4, #8]
 8029626:	89a3      	ldrh	r3, [r4, #12]
 8029628:	071a      	lsls	r2, r3, #28
 802962a:	d52f      	bpl.n	802968c <__swbuf_r+0x84>
 802962c:	6923      	ldr	r3, [r4, #16]
 802962e:	b36b      	cbz	r3, 802968c <__swbuf_r+0x84>
 8029630:	6923      	ldr	r3, [r4, #16]
 8029632:	6820      	ldr	r0, [r4, #0]
 8029634:	1ac0      	subs	r0, r0, r3
 8029636:	6963      	ldr	r3, [r4, #20]
 8029638:	b2f6      	uxtb	r6, r6
 802963a:	4283      	cmp	r3, r0
 802963c:	4637      	mov	r7, r6
 802963e:	dc04      	bgt.n	802964a <__swbuf_r+0x42>
 8029640:	4621      	mov	r1, r4
 8029642:	4628      	mov	r0, r5
 8029644:	f000 f948 	bl	80298d8 <_fflush_r>
 8029648:	bb30      	cbnz	r0, 8029698 <__swbuf_r+0x90>
 802964a:	68a3      	ldr	r3, [r4, #8]
 802964c:	3b01      	subs	r3, #1
 802964e:	60a3      	str	r3, [r4, #8]
 8029650:	6823      	ldr	r3, [r4, #0]
 8029652:	1c5a      	adds	r2, r3, #1
 8029654:	6022      	str	r2, [r4, #0]
 8029656:	701e      	strb	r6, [r3, #0]
 8029658:	6963      	ldr	r3, [r4, #20]
 802965a:	3001      	adds	r0, #1
 802965c:	4283      	cmp	r3, r0
 802965e:	d004      	beq.n	802966a <__swbuf_r+0x62>
 8029660:	89a3      	ldrh	r3, [r4, #12]
 8029662:	07db      	lsls	r3, r3, #31
 8029664:	d506      	bpl.n	8029674 <__swbuf_r+0x6c>
 8029666:	2e0a      	cmp	r6, #10
 8029668:	d104      	bne.n	8029674 <__swbuf_r+0x6c>
 802966a:	4621      	mov	r1, r4
 802966c:	4628      	mov	r0, r5
 802966e:	f000 f933 	bl	80298d8 <_fflush_r>
 8029672:	b988      	cbnz	r0, 8029698 <__swbuf_r+0x90>
 8029674:	4638      	mov	r0, r7
 8029676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029678:	4b0a      	ldr	r3, [pc, #40]	; (80296a4 <__swbuf_r+0x9c>)
 802967a:	429c      	cmp	r4, r3
 802967c:	d101      	bne.n	8029682 <__swbuf_r+0x7a>
 802967e:	68ac      	ldr	r4, [r5, #8]
 8029680:	e7cf      	b.n	8029622 <__swbuf_r+0x1a>
 8029682:	4b09      	ldr	r3, [pc, #36]	; (80296a8 <__swbuf_r+0xa0>)
 8029684:	429c      	cmp	r4, r3
 8029686:	bf08      	it	eq
 8029688:	68ec      	ldreq	r4, [r5, #12]
 802968a:	e7ca      	b.n	8029622 <__swbuf_r+0x1a>
 802968c:	4621      	mov	r1, r4
 802968e:	4628      	mov	r0, r5
 8029690:	f000 f81e 	bl	80296d0 <__swsetup_r>
 8029694:	2800      	cmp	r0, #0
 8029696:	d0cb      	beq.n	8029630 <__swbuf_r+0x28>
 8029698:	f04f 37ff 	mov.w	r7, #4294967295
 802969c:	e7ea      	b.n	8029674 <__swbuf_r+0x6c>
 802969e:	bf00      	nop
 80296a0:	0802a8d4 	.word	0x0802a8d4
 80296a4:	0802a8f4 	.word	0x0802a8f4
 80296a8:	0802a8b4 	.word	0x0802a8b4

080296ac <_write_r>:
 80296ac:	b538      	push	{r3, r4, r5, lr}
 80296ae:	4d07      	ldr	r5, [pc, #28]	; (80296cc <_write_r+0x20>)
 80296b0:	4604      	mov	r4, r0
 80296b2:	4608      	mov	r0, r1
 80296b4:	4611      	mov	r1, r2
 80296b6:	2200      	movs	r2, #0
 80296b8:	602a      	str	r2, [r5, #0]
 80296ba:	461a      	mov	r2, r3
 80296bc:	f7e8 f9cd 	bl	8011a5a <_write>
 80296c0:	1c43      	adds	r3, r0, #1
 80296c2:	d102      	bne.n	80296ca <_write_r+0x1e>
 80296c4:	682b      	ldr	r3, [r5, #0]
 80296c6:	b103      	cbz	r3, 80296ca <_write_r+0x1e>
 80296c8:	6023      	str	r3, [r4, #0]
 80296ca:	bd38      	pop	{r3, r4, r5, pc}
 80296cc:	2000a238 	.word	0x2000a238

080296d0 <__swsetup_r>:
 80296d0:	4b32      	ldr	r3, [pc, #200]	; (802979c <__swsetup_r+0xcc>)
 80296d2:	b570      	push	{r4, r5, r6, lr}
 80296d4:	681d      	ldr	r5, [r3, #0]
 80296d6:	4606      	mov	r6, r0
 80296d8:	460c      	mov	r4, r1
 80296da:	b125      	cbz	r5, 80296e6 <__swsetup_r+0x16>
 80296dc:	69ab      	ldr	r3, [r5, #24]
 80296de:	b913      	cbnz	r3, 80296e6 <__swsetup_r+0x16>
 80296e0:	4628      	mov	r0, r5
 80296e2:	f7ff fcf1 	bl	80290c8 <__sinit>
 80296e6:	4b2e      	ldr	r3, [pc, #184]	; (80297a0 <__swsetup_r+0xd0>)
 80296e8:	429c      	cmp	r4, r3
 80296ea:	d10f      	bne.n	802970c <__swsetup_r+0x3c>
 80296ec:	686c      	ldr	r4, [r5, #4]
 80296ee:	89a3      	ldrh	r3, [r4, #12]
 80296f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80296f4:	0719      	lsls	r1, r3, #28
 80296f6:	d42c      	bmi.n	8029752 <__swsetup_r+0x82>
 80296f8:	06dd      	lsls	r5, r3, #27
 80296fa:	d411      	bmi.n	8029720 <__swsetup_r+0x50>
 80296fc:	2309      	movs	r3, #9
 80296fe:	6033      	str	r3, [r6, #0]
 8029700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029704:	81a3      	strh	r3, [r4, #12]
 8029706:	f04f 30ff 	mov.w	r0, #4294967295
 802970a:	e03e      	b.n	802978a <__swsetup_r+0xba>
 802970c:	4b25      	ldr	r3, [pc, #148]	; (80297a4 <__swsetup_r+0xd4>)
 802970e:	429c      	cmp	r4, r3
 8029710:	d101      	bne.n	8029716 <__swsetup_r+0x46>
 8029712:	68ac      	ldr	r4, [r5, #8]
 8029714:	e7eb      	b.n	80296ee <__swsetup_r+0x1e>
 8029716:	4b24      	ldr	r3, [pc, #144]	; (80297a8 <__swsetup_r+0xd8>)
 8029718:	429c      	cmp	r4, r3
 802971a:	bf08      	it	eq
 802971c:	68ec      	ldreq	r4, [r5, #12]
 802971e:	e7e6      	b.n	80296ee <__swsetup_r+0x1e>
 8029720:	0758      	lsls	r0, r3, #29
 8029722:	d512      	bpl.n	802974a <__swsetup_r+0x7a>
 8029724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029726:	b141      	cbz	r1, 802973a <__swsetup_r+0x6a>
 8029728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802972c:	4299      	cmp	r1, r3
 802972e:	d002      	beq.n	8029736 <__swsetup_r+0x66>
 8029730:	4630      	mov	r0, r6
 8029732:	f000 f98f 	bl	8029a54 <_free_r>
 8029736:	2300      	movs	r3, #0
 8029738:	6363      	str	r3, [r4, #52]	; 0x34
 802973a:	89a3      	ldrh	r3, [r4, #12]
 802973c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029740:	81a3      	strh	r3, [r4, #12]
 8029742:	2300      	movs	r3, #0
 8029744:	6063      	str	r3, [r4, #4]
 8029746:	6923      	ldr	r3, [r4, #16]
 8029748:	6023      	str	r3, [r4, #0]
 802974a:	89a3      	ldrh	r3, [r4, #12]
 802974c:	f043 0308 	orr.w	r3, r3, #8
 8029750:	81a3      	strh	r3, [r4, #12]
 8029752:	6923      	ldr	r3, [r4, #16]
 8029754:	b94b      	cbnz	r3, 802976a <__swsetup_r+0x9a>
 8029756:	89a3      	ldrh	r3, [r4, #12]
 8029758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802975c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029760:	d003      	beq.n	802976a <__swsetup_r+0x9a>
 8029762:	4621      	mov	r1, r4
 8029764:	4630      	mov	r0, r6
 8029766:	f000 f929 	bl	80299bc <__smakebuf_r>
 802976a:	89a0      	ldrh	r0, [r4, #12]
 802976c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029770:	f010 0301 	ands.w	r3, r0, #1
 8029774:	d00a      	beq.n	802978c <__swsetup_r+0xbc>
 8029776:	2300      	movs	r3, #0
 8029778:	60a3      	str	r3, [r4, #8]
 802977a:	6963      	ldr	r3, [r4, #20]
 802977c:	425b      	negs	r3, r3
 802977e:	61a3      	str	r3, [r4, #24]
 8029780:	6923      	ldr	r3, [r4, #16]
 8029782:	b943      	cbnz	r3, 8029796 <__swsetup_r+0xc6>
 8029784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029788:	d1ba      	bne.n	8029700 <__swsetup_r+0x30>
 802978a:	bd70      	pop	{r4, r5, r6, pc}
 802978c:	0781      	lsls	r1, r0, #30
 802978e:	bf58      	it	pl
 8029790:	6963      	ldrpl	r3, [r4, #20]
 8029792:	60a3      	str	r3, [r4, #8]
 8029794:	e7f4      	b.n	8029780 <__swsetup_r+0xb0>
 8029796:	2000      	movs	r0, #0
 8029798:	e7f7      	b.n	802978a <__swsetup_r+0xba>
 802979a:	bf00      	nop
 802979c:	20000070 	.word	0x20000070
 80297a0:	0802a8d4 	.word	0x0802a8d4
 80297a4:	0802a8f4 	.word	0x0802a8f4
 80297a8:	0802a8b4 	.word	0x0802a8b4

080297ac <_close_r>:
 80297ac:	b538      	push	{r3, r4, r5, lr}
 80297ae:	4d06      	ldr	r5, [pc, #24]	; (80297c8 <_close_r+0x1c>)
 80297b0:	2300      	movs	r3, #0
 80297b2:	4604      	mov	r4, r0
 80297b4:	4608      	mov	r0, r1
 80297b6:	602b      	str	r3, [r5, #0]
 80297b8:	f7e8 f96b 	bl	8011a92 <_close>
 80297bc:	1c43      	adds	r3, r0, #1
 80297be:	d102      	bne.n	80297c6 <_close_r+0x1a>
 80297c0:	682b      	ldr	r3, [r5, #0]
 80297c2:	b103      	cbz	r3, 80297c6 <_close_r+0x1a>
 80297c4:	6023      	str	r3, [r4, #0]
 80297c6:	bd38      	pop	{r3, r4, r5, pc}
 80297c8:	2000a238 	.word	0x2000a238

080297cc <__sflush_r>:
 80297cc:	898a      	ldrh	r2, [r1, #12]
 80297ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80297d2:	4605      	mov	r5, r0
 80297d4:	0710      	lsls	r0, r2, #28
 80297d6:	460c      	mov	r4, r1
 80297d8:	d458      	bmi.n	802988c <__sflush_r+0xc0>
 80297da:	684b      	ldr	r3, [r1, #4]
 80297dc:	2b00      	cmp	r3, #0
 80297de:	dc05      	bgt.n	80297ec <__sflush_r+0x20>
 80297e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80297e2:	2b00      	cmp	r3, #0
 80297e4:	dc02      	bgt.n	80297ec <__sflush_r+0x20>
 80297e6:	2000      	movs	r0, #0
 80297e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80297ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80297ee:	2e00      	cmp	r6, #0
 80297f0:	d0f9      	beq.n	80297e6 <__sflush_r+0x1a>
 80297f2:	2300      	movs	r3, #0
 80297f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80297f8:	682f      	ldr	r7, [r5, #0]
 80297fa:	602b      	str	r3, [r5, #0]
 80297fc:	d032      	beq.n	8029864 <__sflush_r+0x98>
 80297fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029800:	89a3      	ldrh	r3, [r4, #12]
 8029802:	075a      	lsls	r2, r3, #29
 8029804:	d505      	bpl.n	8029812 <__sflush_r+0x46>
 8029806:	6863      	ldr	r3, [r4, #4]
 8029808:	1ac0      	subs	r0, r0, r3
 802980a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802980c:	b10b      	cbz	r3, 8029812 <__sflush_r+0x46>
 802980e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029810:	1ac0      	subs	r0, r0, r3
 8029812:	2300      	movs	r3, #0
 8029814:	4602      	mov	r2, r0
 8029816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029818:	6a21      	ldr	r1, [r4, #32]
 802981a:	4628      	mov	r0, r5
 802981c:	47b0      	blx	r6
 802981e:	1c43      	adds	r3, r0, #1
 8029820:	89a3      	ldrh	r3, [r4, #12]
 8029822:	d106      	bne.n	8029832 <__sflush_r+0x66>
 8029824:	6829      	ldr	r1, [r5, #0]
 8029826:	291d      	cmp	r1, #29
 8029828:	d82c      	bhi.n	8029884 <__sflush_r+0xb8>
 802982a:	4a2a      	ldr	r2, [pc, #168]	; (80298d4 <__sflush_r+0x108>)
 802982c:	40ca      	lsrs	r2, r1
 802982e:	07d6      	lsls	r6, r2, #31
 8029830:	d528      	bpl.n	8029884 <__sflush_r+0xb8>
 8029832:	2200      	movs	r2, #0
 8029834:	6062      	str	r2, [r4, #4]
 8029836:	04d9      	lsls	r1, r3, #19
 8029838:	6922      	ldr	r2, [r4, #16]
 802983a:	6022      	str	r2, [r4, #0]
 802983c:	d504      	bpl.n	8029848 <__sflush_r+0x7c>
 802983e:	1c42      	adds	r2, r0, #1
 8029840:	d101      	bne.n	8029846 <__sflush_r+0x7a>
 8029842:	682b      	ldr	r3, [r5, #0]
 8029844:	b903      	cbnz	r3, 8029848 <__sflush_r+0x7c>
 8029846:	6560      	str	r0, [r4, #84]	; 0x54
 8029848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802984a:	602f      	str	r7, [r5, #0]
 802984c:	2900      	cmp	r1, #0
 802984e:	d0ca      	beq.n	80297e6 <__sflush_r+0x1a>
 8029850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029854:	4299      	cmp	r1, r3
 8029856:	d002      	beq.n	802985e <__sflush_r+0x92>
 8029858:	4628      	mov	r0, r5
 802985a:	f000 f8fb 	bl	8029a54 <_free_r>
 802985e:	2000      	movs	r0, #0
 8029860:	6360      	str	r0, [r4, #52]	; 0x34
 8029862:	e7c1      	b.n	80297e8 <__sflush_r+0x1c>
 8029864:	6a21      	ldr	r1, [r4, #32]
 8029866:	2301      	movs	r3, #1
 8029868:	4628      	mov	r0, r5
 802986a:	47b0      	blx	r6
 802986c:	1c41      	adds	r1, r0, #1
 802986e:	d1c7      	bne.n	8029800 <__sflush_r+0x34>
 8029870:	682b      	ldr	r3, [r5, #0]
 8029872:	2b00      	cmp	r3, #0
 8029874:	d0c4      	beq.n	8029800 <__sflush_r+0x34>
 8029876:	2b1d      	cmp	r3, #29
 8029878:	d001      	beq.n	802987e <__sflush_r+0xb2>
 802987a:	2b16      	cmp	r3, #22
 802987c:	d101      	bne.n	8029882 <__sflush_r+0xb6>
 802987e:	602f      	str	r7, [r5, #0]
 8029880:	e7b1      	b.n	80297e6 <__sflush_r+0x1a>
 8029882:	89a3      	ldrh	r3, [r4, #12]
 8029884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029888:	81a3      	strh	r3, [r4, #12]
 802988a:	e7ad      	b.n	80297e8 <__sflush_r+0x1c>
 802988c:	690f      	ldr	r7, [r1, #16]
 802988e:	2f00      	cmp	r7, #0
 8029890:	d0a9      	beq.n	80297e6 <__sflush_r+0x1a>
 8029892:	0793      	lsls	r3, r2, #30
 8029894:	680e      	ldr	r6, [r1, #0]
 8029896:	bf08      	it	eq
 8029898:	694b      	ldreq	r3, [r1, #20]
 802989a:	600f      	str	r7, [r1, #0]
 802989c:	bf18      	it	ne
 802989e:	2300      	movne	r3, #0
 80298a0:	eba6 0807 	sub.w	r8, r6, r7
 80298a4:	608b      	str	r3, [r1, #8]
 80298a6:	f1b8 0f00 	cmp.w	r8, #0
 80298aa:	dd9c      	ble.n	80297e6 <__sflush_r+0x1a>
 80298ac:	6a21      	ldr	r1, [r4, #32]
 80298ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80298b0:	4643      	mov	r3, r8
 80298b2:	463a      	mov	r2, r7
 80298b4:	4628      	mov	r0, r5
 80298b6:	47b0      	blx	r6
 80298b8:	2800      	cmp	r0, #0
 80298ba:	dc06      	bgt.n	80298ca <__sflush_r+0xfe>
 80298bc:	89a3      	ldrh	r3, [r4, #12]
 80298be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80298c2:	81a3      	strh	r3, [r4, #12]
 80298c4:	f04f 30ff 	mov.w	r0, #4294967295
 80298c8:	e78e      	b.n	80297e8 <__sflush_r+0x1c>
 80298ca:	4407      	add	r7, r0
 80298cc:	eba8 0800 	sub.w	r8, r8, r0
 80298d0:	e7e9      	b.n	80298a6 <__sflush_r+0xda>
 80298d2:	bf00      	nop
 80298d4:	20400001 	.word	0x20400001

080298d8 <_fflush_r>:
 80298d8:	b538      	push	{r3, r4, r5, lr}
 80298da:	690b      	ldr	r3, [r1, #16]
 80298dc:	4605      	mov	r5, r0
 80298de:	460c      	mov	r4, r1
 80298e0:	b913      	cbnz	r3, 80298e8 <_fflush_r+0x10>
 80298e2:	2500      	movs	r5, #0
 80298e4:	4628      	mov	r0, r5
 80298e6:	bd38      	pop	{r3, r4, r5, pc}
 80298e8:	b118      	cbz	r0, 80298f2 <_fflush_r+0x1a>
 80298ea:	6983      	ldr	r3, [r0, #24]
 80298ec:	b90b      	cbnz	r3, 80298f2 <_fflush_r+0x1a>
 80298ee:	f7ff fbeb 	bl	80290c8 <__sinit>
 80298f2:	4b14      	ldr	r3, [pc, #80]	; (8029944 <_fflush_r+0x6c>)
 80298f4:	429c      	cmp	r4, r3
 80298f6:	d11b      	bne.n	8029930 <_fflush_r+0x58>
 80298f8:	686c      	ldr	r4, [r5, #4]
 80298fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80298fe:	2b00      	cmp	r3, #0
 8029900:	d0ef      	beq.n	80298e2 <_fflush_r+0xa>
 8029902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029904:	07d0      	lsls	r0, r2, #31
 8029906:	d404      	bmi.n	8029912 <_fflush_r+0x3a>
 8029908:	0599      	lsls	r1, r3, #22
 802990a:	d402      	bmi.n	8029912 <_fflush_r+0x3a>
 802990c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802990e:	f7ff fc9e 	bl	802924e <__retarget_lock_acquire_recursive>
 8029912:	4628      	mov	r0, r5
 8029914:	4621      	mov	r1, r4
 8029916:	f7ff ff59 	bl	80297cc <__sflush_r>
 802991a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802991c:	07da      	lsls	r2, r3, #31
 802991e:	4605      	mov	r5, r0
 8029920:	d4e0      	bmi.n	80298e4 <_fflush_r+0xc>
 8029922:	89a3      	ldrh	r3, [r4, #12]
 8029924:	059b      	lsls	r3, r3, #22
 8029926:	d4dd      	bmi.n	80298e4 <_fflush_r+0xc>
 8029928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802992a:	f7ff fc91 	bl	8029250 <__retarget_lock_release_recursive>
 802992e:	e7d9      	b.n	80298e4 <_fflush_r+0xc>
 8029930:	4b05      	ldr	r3, [pc, #20]	; (8029948 <_fflush_r+0x70>)
 8029932:	429c      	cmp	r4, r3
 8029934:	d101      	bne.n	802993a <_fflush_r+0x62>
 8029936:	68ac      	ldr	r4, [r5, #8]
 8029938:	e7df      	b.n	80298fa <_fflush_r+0x22>
 802993a:	4b04      	ldr	r3, [pc, #16]	; (802994c <_fflush_r+0x74>)
 802993c:	429c      	cmp	r4, r3
 802993e:	bf08      	it	eq
 8029940:	68ec      	ldreq	r4, [r5, #12]
 8029942:	e7da      	b.n	80298fa <_fflush_r+0x22>
 8029944:	0802a8d4 	.word	0x0802a8d4
 8029948:	0802a8f4 	.word	0x0802a8f4
 802994c:	0802a8b4 	.word	0x0802a8b4

08029950 <_lseek_r>:
 8029950:	b538      	push	{r3, r4, r5, lr}
 8029952:	4d07      	ldr	r5, [pc, #28]	; (8029970 <_lseek_r+0x20>)
 8029954:	4604      	mov	r4, r0
 8029956:	4608      	mov	r0, r1
 8029958:	4611      	mov	r1, r2
 802995a:	2200      	movs	r2, #0
 802995c:	602a      	str	r2, [r5, #0]
 802995e:	461a      	mov	r2, r3
 8029960:	f7e8 f8be 	bl	8011ae0 <_lseek>
 8029964:	1c43      	adds	r3, r0, #1
 8029966:	d102      	bne.n	802996e <_lseek_r+0x1e>
 8029968:	682b      	ldr	r3, [r5, #0]
 802996a:	b103      	cbz	r3, 802996e <_lseek_r+0x1e>
 802996c:	6023      	str	r3, [r4, #0]
 802996e:	bd38      	pop	{r3, r4, r5, pc}
 8029970:	2000a238 	.word	0x2000a238

08029974 <__swhatbuf_r>:
 8029974:	b570      	push	{r4, r5, r6, lr}
 8029976:	460e      	mov	r6, r1
 8029978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802997c:	2900      	cmp	r1, #0
 802997e:	b096      	sub	sp, #88	; 0x58
 8029980:	4614      	mov	r4, r2
 8029982:	461d      	mov	r5, r3
 8029984:	da07      	bge.n	8029996 <__swhatbuf_r+0x22>
 8029986:	2300      	movs	r3, #0
 8029988:	602b      	str	r3, [r5, #0]
 802998a:	89b3      	ldrh	r3, [r6, #12]
 802998c:	061a      	lsls	r2, r3, #24
 802998e:	d410      	bmi.n	80299b2 <__swhatbuf_r+0x3e>
 8029990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029994:	e00e      	b.n	80299b4 <__swhatbuf_r+0x40>
 8029996:	466a      	mov	r2, sp
 8029998:	f000 fbae 	bl	802a0f8 <_fstat_r>
 802999c:	2800      	cmp	r0, #0
 802999e:	dbf2      	blt.n	8029986 <__swhatbuf_r+0x12>
 80299a0:	9a01      	ldr	r2, [sp, #4]
 80299a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80299a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80299aa:	425a      	negs	r2, r3
 80299ac:	415a      	adcs	r2, r3
 80299ae:	602a      	str	r2, [r5, #0]
 80299b0:	e7ee      	b.n	8029990 <__swhatbuf_r+0x1c>
 80299b2:	2340      	movs	r3, #64	; 0x40
 80299b4:	2000      	movs	r0, #0
 80299b6:	6023      	str	r3, [r4, #0]
 80299b8:	b016      	add	sp, #88	; 0x58
 80299ba:	bd70      	pop	{r4, r5, r6, pc}

080299bc <__smakebuf_r>:
 80299bc:	898b      	ldrh	r3, [r1, #12]
 80299be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80299c0:	079d      	lsls	r5, r3, #30
 80299c2:	4606      	mov	r6, r0
 80299c4:	460c      	mov	r4, r1
 80299c6:	d507      	bpl.n	80299d8 <__smakebuf_r+0x1c>
 80299c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80299cc:	6023      	str	r3, [r4, #0]
 80299ce:	6123      	str	r3, [r4, #16]
 80299d0:	2301      	movs	r3, #1
 80299d2:	6163      	str	r3, [r4, #20]
 80299d4:	b002      	add	sp, #8
 80299d6:	bd70      	pop	{r4, r5, r6, pc}
 80299d8:	ab01      	add	r3, sp, #4
 80299da:	466a      	mov	r2, sp
 80299dc:	f7ff ffca 	bl	8029974 <__swhatbuf_r>
 80299e0:	9900      	ldr	r1, [sp, #0]
 80299e2:	4605      	mov	r5, r0
 80299e4:	4630      	mov	r0, r6
 80299e6:	f7ff fc4b 	bl	8029280 <_malloc_r>
 80299ea:	b948      	cbnz	r0, 8029a00 <__smakebuf_r+0x44>
 80299ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80299f0:	059a      	lsls	r2, r3, #22
 80299f2:	d4ef      	bmi.n	80299d4 <__smakebuf_r+0x18>
 80299f4:	f023 0303 	bic.w	r3, r3, #3
 80299f8:	f043 0302 	orr.w	r3, r3, #2
 80299fc:	81a3      	strh	r3, [r4, #12]
 80299fe:	e7e3      	b.n	80299c8 <__smakebuf_r+0xc>
 8029a00:	4b0d      	ldr	r3, [pc, #52]	; (8029a38 <__smakebuf_r+0x7c>)
 8029a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8029a04:	89a3      	ldrh	r3, [r4, #12]
 8029a06:	6020      	str	r0, [r4, #0]
 8029a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029a0c:	81a3      	strh	r3, [r4, #12]
 8029a0e:	9b00      	ldr	r3, [sp, #0]
 8029a10:	6163      	str	r3, [r4, #20]
 8029a12:	9b01      	ldr	r3, [sp, #4]
 8029a14:	6120      	str	r0, [r4, #16]
 8029a16:	b15b      	cbz	r3, 8029a30 <__smakebuf_r+0x74>
 8029a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029a1c:	4630      	mov	r0, r6
 8029a1e:	f000 fb7d 	bl	802a11c <_isatty_r>
 8029a22:	b128      	cbz	r0, 8029a30 <__smakebuf_r+0x74>
 8029a24:	89a3      	ldrh	r3, [r4, #12]
 8029a26:	f023 0303 	bic.w	r3, r3, #3
 8029a2a:	f043 0301 	orr.w	r3, r3, #1
 8029a2e:	81a3      	strh	r3, [r4, #12]
 8029a30:	89a0      	ldrh	r0, [r4, #12]
 8029a32:	4305      	orrs	r5, r0
 8029a34:	81a5      	strh	r5, [r4, #12]
 8029a36:	e7cd      	b.n	80299d4 <__smakebuf_r+0x18>
 8029a38:	08029061 	.word	0x08029061

08029a3c <__malloc_lock>:
 8029a3c:	4801      	ldr	r0, [pc, #4]	; (8029a44 <__malloc_lock+0x8>)
 8029a3e:	f7ff bc06 	b.w	802924e <__retarget_lock_acquire_recursive>
 8029a42:	bf00      	nop
 8029a44:	2000a232 	.word	0x2000a232

08029a48 <__malloc_unlock>:
 8029a48:	4801      	ldr	r0, [pc, #4]	; (8029a50 <__malloc_unlock+0x8>)
 8029a4a:	f7ff bc01 	b.w	8029250 <__retarget_lock_release_recursive>
 8029a4e:	bf00      	nop
 8029a50:	2000a232 	.word	0x2000a232

08029a54 <_free_r>:
 8029a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029a56:	2900      	cmp	r1, #0
 8029a58:	d048      	beq.n	8029aec <_free_r+0x98>
 8029a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029a5e:	9001      	str	r0, [sp, #4]
 8029a60:	2b00      	cmp	r3, #0
 8029a62:	f1a1 0404 	sub.w	r4, r1, #4
 8029a66:	bfb8      	it	lt
 8029a68:	18e4      	addlt	r4, r4, r3
 8029a6a:	f7ff ffe7 	bl	8029a3c <__malloc_lock>
 8029a6e:	4a20      	ldr	r2, [pc, #128]	; (8029af0 <_free_r+0x9c>)
 8029a70:	9801      	ldr	r0, [sp, #4]
 8029a72:	6813      	ldr	r3, [r2, #0]
 8029a74:	4615      	mov	r5, r2
 8029a76:	b933      	cbnz	r3, 8029a86 <_free_r+0x32>
 8029a78:	6063      	str	r3, [r4, #4]
 8029a7a:	6014      	str	r4, [r2, #0]
 8029a7c:	b003      	add	sp, #12
 8029a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029a82:	f7ff bfe1 	b.w	8029a48 <__malloc_unlock>
 8029a86:	42a3      	cmp	r3, r4
 8029a88:	d90b      	bls.n	8029aa2 <_free_r+0x4e>
 8029a8a:	6821      	ldr	r1, [r4, #0]
 8029a8c:	1862      	adds	r2, r4, r1
 8029a8e:	4293      	cmp	r3, r2
 8029a90:	bf04      	itt	eq
 8029a92:	681a      	ldreq	r2, [r3, #0]
 8029a94:	685b      	ldreq	r3, [r3, #4]
 8029a96:	6063      	str	r3, [r4, #4]
 8029a98:	bf04      	itt	eq
 8029a9a:	1852      	addeq	r2, r2, r1
 8029a9c:	6022      	streq	r2, [r4, #0]
 8029a9e:	602c      	str	r4, [r5, #0]
 8029aa0:	e7ec      	b.n	8029a7c <_free_r+0x28>
 8029aa2:	461a      	mov	r2, r3
 8029aa4:	685b      	ldr	r3, [r3, #4]
 8029aa6:	b10b      	cbz	r3, 8029aac <_free_r+0x58>
 8029aa8:	42a3      	cmp	r3, r4
 8029aaa:	d9fa      	bls.n	8029aa2 <_free_r+0x4e>
 8029aac:	6811      	ldr	r1, [r2, #0]
 8029aae:	1855      	adds	r5, r2, r1
 8029ab0:	42a5      	cmp	r5, r4
 8029ab2:	d10b      	bne.n	8029acc <_free_r+0x78>
 8029ab4:	6824      	ldr	r4, [r4, #0]
 8029ab6:	4421      	add	r1, r4
 8029ab8:	1854      	adds	r4, r2, r1
 8029aba:	42a3      	cmp	r3, r4
 8029abc:	6011      	str	r1, [r2, #0]
 8029abe:	d1dd      	bne.n	8029a7c <_free_r+0x28>
 8029ac0:	681c      	ldr	r4, [r3, #0]
 8029ac2:	685b      	ldr	r3, [r3, #4]
 8029ac4:	6053      	str	r3, [r2, #4]
 8029ac6:	4421      	add	r1, r4
 8029ac8:	6011      	str	r1, [r2, #0]
 8029aca:	e7d7      	b.n	8029a7c <_free_r+0x28>
 8029acc:	d902      	bls.n	8029ad4 <_free_r+0x80>
 8029ace:	230c      	movs	r3, #12
 8029ad0:	6003      	str	r3, [r0, #0]
 8029ad2:	e7d3      	b.n	8029a7c <_free_r+0x28>
 8029ad4:	6825      	ldr	r5, [r4, #0]
 8029ad6:	1961      	adds	r1, r4, r5
 8029ad8:	428b      	cmp	r3, r1
 8029ada:	bf04      	itt	eq
 8029adc:	6819      	ldreq	r1, [r3, #0]
 8029ade:	685b      	ldreq	r3, [r3, #4]
 8029ae0:	6063      	str	r3, [r4, #4]
 8029ae2:	bf04      	itt	eq
 8029ae4:	1949      	addeq	r1, r1, r5
 8029ae6:	6021      	streq	r1, [r4, #0]
 8029ae8:	6054      	str	r4, [r2, #4]
 8029aea:	e7c7      	b.n	8029a7c <_free_r+0x28>
 8029aec:	b003      	add	sp, #12
 8029aee:	bd30      	pop	{r4, r5, pc}
 8029af0:	20008008 	.word	0x20008008

08029af4 <__ssputs_r>:
 8029af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029af8:	688e      	ldr	r6, [r1, #8]
 8029afa:	429e      	cmp	r6, r3
 8029afc:	4682      	mov	sl, r0
 8029afe:	460c      	mov	r4, r1
 8029b00:	4690      	mov	r8, r2
 8029b02:	461f      	mov	r7, r3
 8029b04:	d838      	bhi.n	8029b78 <__ssputs_r+0x84>
 8029b06:	898a      	ldrh	r2, [r1, #12]
 8029b08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8029b0c:	d032      	beq.n	8029b74 <__ssputs_r+0x80>
 8029b0e:	6825      	ldr	r5, [r4, #0]
 8029b10:	6909      	ldr	r1, [r1, #16]
 8029b12:	eba5 0901 	sub.w	r9, r5, r1
 8029b16:	6965      	ldr	r5, [r4, #20]
 8029b18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029b1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029b20:	3301      	adds	r3, #1
 8029b22:	444b      	add	r3, r9
 8029b24:	106d      	asrs	r5, r5, #1
 8029b26:	429d      	cmp	r5, r3
 8029b28:	bf38      	it	cc
 8029b2a:	461d      	movcc	r5, r3
 8029b2c:	0553      	lsls	r3, r2, #21
 8029b2e:	d531      	bpl.n	8029b94 <__ssputs_r+0xa0>
 8029b30:	4629      	mov	r1, r5
 8029b32:	f7ff fba5 	bl	8029280 <_malloc_r>
 8029b36:	4606      	mov	r6, r0
 8029b38:	b950      	cbnz	r0, 8029b50 <__ssputs_r+0x5c>
 8029b3a:	230c      	movs	r3, #12
 8029b3c:	f8ca 3000 	str.w	r3, [sl]
 8029b40:	89a3      	ldrh	r3, [r4, #12]
 8029b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029b46:	81a3      	strh	r3, [r4, #12]
 8029b48:	f04f 30ff 	mov.w	r0, #4294967295
 8029b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029b50:	6921      	ldr	r1, [r4, #16]
 8029b52:	464a      	mov	r2, r9
 8029b54:	f7ff fb7d 	bl	8029252 <memcpy>
 8029b58:	89a3      	ldrh	r3, [r4, #12]
 8029b5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8029b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029b62:	81a3      	strh	r3, [r4, #12]
 8029b64:	6126      	str	r6, [r4, #16]
 8029b66:	6165      	str	r5, [r4, #20]
 8029b68:	444e      	add	r6, r9
 8029b6a:	eba5 0509 	sub.w	r5, r5, r9
 8029b6e:	6026      	str	r6, [r4, #0]
 8029b70:	60a5      	str	r5, [r4, #8]
 8029b72:	463e      	mov	r6, r7
 8029b74:	42be      	cmp	r6, r7
 8029b76:	d900      	bls.n	8029b7a <__ssputs_r+0x86>
 8029b78:	463e      	mov	r6, r7
 8029b7a:	4632      	mov	r2, r6
 8029b7c:	6820      	ldr	r0, [r4, #0]
 8029b7e:	4641      	mov	r1, r8
 8029b80:	f000 fadc 	bl	802a13c <memmove>
 8029b84:	68a3      	ldr	r3, [r4, #8]
 8029b86:	6822      	ldr	r2, [r4, #0]
 8029b88:	1b9b      	subs	r3, r3, r6
 8029b8a:	4432      	add	r2, r6
 8029b8c:	60a3      	str	r3, [r4, #8]
 8029b8e:	6022      	str	r2, [r4, #0]
 8029b90:	2000      	movs	r0, #0
 8029b92:	e7db      	b.n	8029b4c <__ssputs_r+0x58>
 8029b94:	462a      	mov	r2, r5
 8029b96:	f000 faeb 	bl	802a170 <_realloc_r>
 8029b9a:	4606      	mov	r6, r0
 8029b9c:	2800      	cmp	r0, #0
 8029b9e:	d1e1      	bne.n	8029b64 <__ssputs_r+0x70>
 8029ba0:	6921      	ldr	r1, [r4, #16]
 8029ba2:	4650      	mov	r0, sl
 8029ba4:	f7ff ff56 	bl	8029a54 <_free_r>
 8029ba8:	e7c7      	b.n	8029b3a <__ssputs_r+0x46>
	...

08029bac <_svfiprintf_r>:
 8029bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029bb0:	4698      	mov	r8, r3
 8029bb2:	898b      	ldrh	r3, [r1, #12]
 8029bb4:	061b      	lsls	r3, r3, #24
 8029bb6:	b09d      	sub	sp, #116	; 0x74
 8029bb8:	4607      	mov	r7, r0
 8029bba:	460d      	mov	r5, r1
 8029bbc:	4614      	mov	r4, r2
 8029bbe:	d50e      	bpl.n	8029bde <_svfiprintf_r+0x32>
 8029bc0:	690b      	ldr	r3, [r1, #16]
 8029bc2:	b963      	cbnz	r3, 8029bde <_svfiprintf_r+0x32>
 8029bc4:	2140      	movs	r1, #64	; 0x40
 8029bc6:	f7ff fb5b 	bl	8029280 <_malloc_r>
 8029bca:	6028      	str	r0, [r5, #0]
 8029bcc:	6128      	str	r0, [r5, #16]
 8029bce:	b920      	cbnz	r0, 8029bda <_svfiprintf_r+0x2e>
 8029bd0:	230c      	movs	r3, #12
 8029bd2:	603b      	str	r3, [r7, #0]
 8029bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8029bd8:	e0d1      	b.n	8029d7e <_svfiprintf_r+0x1d2>
 8029bda:	2340      	movs	r3, #64	; 0x40
 8029bdc:	616b      	str	r3, [r5, #20]
 8029bde:	2300      	movs	r3, #0
 8029be0:	9309      	str	r3, [sp, #36]	; 0x24
 8029be2:	2320      	movs	r3, #32
 8029be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8029bec:	2330      	movs	r3, #48	; 0x30
 8029bee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8029d98 <_svfiprintf_r+0x1ec>
 8029bf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029bf6:	f04f 0901 	mov.w	r9, #1
 8029bfa:	4623      	mov	r3, r4
 8029bfc:	469a      	mov	sl, r3
 8029bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029c02:	b10a      	cbz	r2, 8029c08 <_svfiprintf_r+0x5c>
 8029c04:	2a25      	cmp	r2, #37	; 0x25
 8029c06:	d1f9      	bne.n	8029bfc <_svfiprintf_r+0x50>
 8029c08:	ebba 0b04 	subs.w	fp, sl, r4
 8029c0c:	d00b      	beq.n	8029c26 <_svfiprintf_r+0x7a>
 8029c0e:	465b      	mov	r3, fp
 8029c10:	4622      	mov	r2, r4
 8029c12:	4629      	mov	r1, r5
 8029c14:	4638      	mov	r0, r7
 8029c16:	f7ff ff6d 	bl	8029af4 <__ssputs_r>
 8029c1a:	3001      	adds	r0, #1
 8029c1c:	f000 80aa 	beq.w	8029d74 <_svfiprintf_r+0x1c8>
 8029c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029c22:	445a      	add	r2, fp
 8029c24:	9209      	str	r2, [sp, #36]	; 0x24
 8029c26:	f89a 3000 	ldrb.w	r3, [sl]
 8029c2a:	2b00      	cmp	r3, #0
 8029c2c:	f000 80a2 	beq.w	8029d74 <_svfiprintf_r+0x1c8>
 8029c30:	2300      	movs	r3, #0
 8029c32:	f04f 32ff 	mov.w	r2, #4294967295
 8029c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029c3a:	f10a 0a01 	add.w	sl, sl, #1
 8029c3e:	9304      	str	r3, [sp, #16]
 8029c40:	9307      	str	r3, [sp, #28]
 8029c42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029c46:	931a      	str	r3, [sp, #104]	; 0x68
 8029c48:	4654      	mov	r4, sl
 8029c4a:	2205      	movs	r2, #5
 8029c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029c50:	4851      	ldr	r0, [pc, #324]	; (8029d98 <_svfiprintf_r+0x1ec>)
 8029c52:	f7e6 fac5 	bl	80101e0 <memchr>
 8029c56:	9a04      	ldr	r2, [sp, #16]
 8029c58:	b9d8      	cbnz	r0, 8029c92 <_svfiprintf_r+0xe6>
 8029c5a:	06d0      	lsls	r0, r2, #27
 8029c5c:	bf44      	itt	mi
 8029c5e:	2320      	movmi	r3, #32
 8029c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029c64:	0711      	lsls	r1, r2, #28
 8029c66:	bf44      	itt	mi
 8029c68:	232b      	movmi	r3, #43	; 0x2b
 8029c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8029c72:	2b2a      	cmp	r3, #42	; 0x2a
 8029c74:	d015      	beq.n	8029ca2 <_svfiprintf_r+0xf6>
 8029c76:	9a07      	ldr	r2, [sp, #28]
 8029c78:	4654      	mov	r4, sl
 8029c7a:	2000      	movs	r0, #0
 8029c7c:	f04f 0c0a 	mov.w	ip, #10
 8029c80:	4621      	mov	r1, r4
 8029c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029c86:	3b30      	subs	r3, #48	; 0x30
 8029c88:	2b09      	cmp	r3, #9
 8029c8a:	d94e      	bls.n	8029d2a <_svfiprintf_r+0x17e>
 8029c8c:	b1b0      	cbz	r0, 8029cbc <_svfiprintf_r+0x110>
 8029c8e:	9207      	str	r2, [sp, #28]
 8029c90:	e014      	b.n	8029cbc <_svfiprintf_r+0x110>
 8029c92:	eba0 0308 	sub.w	r3, r0, r8
 8029c96:	fa09 f303 	lsl.w	r3, r9, r3
 8029c9a:	4313      	orrs	r3, r2
 8029c9c:	9304      	str	r3, [sp, #16]
 8029c9e:	46a2      	mov	sl, r4
 8029ca0:	e7d2      	b.n	8029c48 <_svfiprintf_r+0x9c>
 8029ca2:	9b03      	ldr	r3, [sp, #12]
 8029ca4:	1d19      	adds	r1, r3, #4
 8029ca6:	681b      	ldr	r3, [r3, #0]
 8029ca8:	9103      	str	r1, [sp, #12]
 8029caa:	2b00      	cmp	r3, #0
 8029cac:	bfbb      	ittet	lt
 8029cae:	425b      	neglt	r3, r3
 8029cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8029cb4:	9307      	strge	r3, [sp, #28]
 8029cb6:	9307      	strlt	r3, [sp, #28]
 8029cb8:	bfb8      	it	lt
 8029cba:	9204      	strlt	r2, [sp, #16]
 8029cbc:	7823      	ldrb	r3, [r4, #0]
 8029cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8029cc0:	d10c      	bne.n	8029cdc <_svfiprintf_r+0x130>
 8029cc2:	7863      	ldrb	r3, [r4, #1]
 8029cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8029cc6:	d135      	bne.n	8029d34 <_svfiprintf_r+0x188>
 8029cc8:	9b03      	ldr	r3, [sp, #12]
 8029cca:	1d1a      	adds	r2, r3, #4
 8029ccc:	681b      	ldr	r3, [r3, #0]
 8029cce:	9203      	str	r2, [sp, #12]
 8029cd0:	2b00      	cmp	r3, #0
 8029cd2:	bfb8      	it	lt
 8029cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8029cd8:	3402      	adds	r4, #2
 8029cda:	9305      	str	r3, [sp, #20]
 8029cdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8029da8 <_svfiprintf_r+0x1fc>
 8029ce0:	7821      	ldrb	r1, [r4, #0]
 8029ce2:	2203      	movs	r2, #3
 8029ce4:	4650      	mov	r0, sl
 8029ce6:	f7e6 fa7b 	bl	80101e0 <memchr>
 8029cea:	b140      	cbz	r0, 8029cfe <_svfiprintf_r+0x152>
 8029cec:	2340      	movs	r3, #64	; 0x40
 8029cee:	eba0 000a 	sub.w	r0, r0, sl
 8029cf2:	fa03 f000 	lsl.w	r0, r3, r0
 8029cf6:	9b04      	ldr	r3, [sp, #16]
 8029cf8:	4303      	orrs	r3, r0
 8029cfa:	3401      	adds	r4, #1
 8029cfc:	9304      	str	r3, [sp, #16]
 8029cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029d02:	4826      	ldr	r0, [pc, #152]	; (8029d9c <_svfiprintf_r+0x1f0>)
 8029d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029d08:	2206      	movs	r2, #6
 8029d0a:	f7e6 fa69 	bl	80101e0 <memchr>
 8029d0e:	2800      	cmp	r0, #0
 8029d10:	d038      	beq.n	8029d84 <_svfiprintf_r+0x1d8>
 8029d12:	4b23      	ldr	r3, [pc, #140]	; (8029da0 <_svfiprintf_r+0x1f4>)
 8029d14:	bb1b      	cbnz	r3, 8029d5e <_svfiprintf_r+0x1b2>
 8029d16:	9b03      	ldr	r3, [sp, #12]
 8029d18:	3307      	adds	r3, #7
 8029d1a:	f023 0307 	bic.w	r3, r3, #7
 8029d1e:	3308      	adds	r3, #8
 8029d20:	9303      	str	r3, [sp, #12]
 8029d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029d24:	4433      	add	r3, r6
 8029d26:	9309      	str	r3, [sp, #36]	; 0x24
 8029d28:	e767      	b.n	8029bfa <_svfiprintf_r+0x4e>
 8029d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8029d2e:	460c      	mov	r4, r1
 8029d30:	2001      	movs	r0, #1
 8029d32:	e7a5      	b.n	8029c80 <_svfiprintf_r+0xd4>
 8029d34:	2300      	movs	r3, #0
 8029d36:	3401      	adds	r4, #1
 8029d38:	9305      	str	r3, [sp, #20]
 8029d3a:	4619      	mov	r1, r3
 8029d3c:	f04f 0c0a 	mov.w	ip, #10
 8029d40:	4620      	mov	r0, r4
 8029d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029d46:	3a30      	subs	r2, #48	; 0x30
 8029d48:	2a09      	cmp	r2, #9
 8029d4a:	d903      	bls.n	8029d54 <_svfiprintf_r+0x1a8>
 8029d4c:	2b00      	cmp	r3, #0
 8029d4e:	d0c5      	beq.n	8029cdc <_svfiprintf_r+0x130>
 8029d50:	9105      	str	r1, [sp, #20]
 8029d52:	e7c3      	b.n	8029cdc <_svfiprintf_r+0x130>
 8029d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8029d58:	4604      	mov	r4, r0
 8029d5a:	2301      	movs	r3, #1
 8029d5c:	e7f0      	b.n	8029d40 <_svfiprintf_r+0x194>
 8029d5e:	ab03      	add	r3, sp, #12
 8029d60:	9300      	str	r3, [sp, #0]
 8029d62:	462a      	mov	r2, r5
 8029d64:	4b0f      	ldr	r3, [pc, #60]	; (8029da4 <_svfiprintf_r+0x1f8>)
 8029d66:	a904      	add	r1, sp, #16
 8029d68:	4638      	mov	r0, r7
 8029d6a:	f3af 8000 	nop.w
 8029d6e:	1c42      	adds	r2, r0, #1
 8029d70:	4606      	mov	r6, r0
 8029d72:	d1d6      	bne.n	8029d22 <_svfiprintf_r+0x176>
 8029d74:	89ab      	ldrh	r3, [r5, #12]
 8029d76:	065b      	lsls	r3, r3, #25
 8029d78:	f53f af2c 	bmi.w	8029bd4 <_svfiprintf_r+0x28>
 8029d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029d7e:	b01d      	add	sp, #116	; 0x74
 8029d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d84:	ab03      	add	r3, sp, #12
 8029d86:	9300      	str	r3, [sp, #0]
 8029d88:	462a      	mov	r2, r5
 8029d8a:	4b06      	ldr	r3, [pc, #24]	; (8029da4 <_svfiprintf_r+0x1f8>)
 8029d8c:	a904      	add	r1, sp, #16
 8029d8e:	4638      	mov	r0, r7
 8029d90:	f000 f87a 	bl	8029e88 <_printf_i>
 8029d94:	e7eb      	b.n	8029d6e <_svfiprintf_r+0x1c2>
 8029d96:	bf00      	nop
 8029d98:	0802a918 	.word	0x0802a918
 8029d9c:	0802a922 	.word	0x0802a922
 8029da0:	00000000 	.word	0x00000000
 8029da4:	08029af5 	.word	0x08029af5
 8029da8:	0802a91e 	.word	0x0802a91e

08029dac <_printf_common>:
 8029dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029db0:	4616      	mov	r6, r2
 8029db2:	4699      	mov	r9, r3
 8029db4:	688a      	ldr	r2, [r1, #8]
 8029db6:	690b      	ldr	r3, [r1, #16]
 8029db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029dbc:	4293      	cmp	r3, r2
 8029dbe:	bfb8      	it	lt
 8029dc0:	4613      	movlt	r3, r2
 8029dc2:	6033      	str	r3, [r6, #0]
 8029dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8029dc8:	4607      	mov	r7, r0
 8029dca:	460c      	mov	r4, r1
 8029dcc:	b10a      	cbz	r2, 8029dd2 <_printf_common+0x26>
 8029dce:	3301      	adds	r3, #1
 8029dd0:	6033      	str	r3, [r6, #0]
 8029dd2:	6823      	ldr	r3, [r4, #0]
 8029dd4:	0699      	lsls	r1, r3, #26
 8029dd6:	bf42      	ittt	mi
 8029dd8:	6833      	ldrmi	r3, [r6, #0]
 8029dda:	3302      	addmi	r3, #2
 8029ddc:	6033      	strmi	r3, [r6, #0]
 8029dde:	6825      	ldr	r5, [r4, #0]
 8029de0:	f015 0506 	ands.w	r5, r5, #6
 8029de4:	d106      	bne.n	8029df4 <_printf_common+0x48>
 8029de6:	f104 0a19 	add.w	sl, r4, #25
 8029dea:	68e3      	ldr	r3, [r4, #12]
 8029dec:	6832      	ldr	r2, [r6, #0]
 8029dee:	1a9b      	subs	r3, r3, r2
 8029df0:	42ab      	cmp	r3, r5
 8029df2:	dc26      	bgt.n	8029e42 <_printf_common+0x96>
 8029df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8029df8:	1e13      	subs	r3, r2, #0
 8029dfa:	6822      	ldr	r2, [r4, #0]
 8029dfc:	bf18      	it	ne
 8029dfe:	2301      	movne	r3, #1
 8029e00:	0692      	lsls	r2, r2, #26
 8029e02:	d42b      	bmi.n	8029e5c <_printf_common+0xb0>
 8029e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029e08:	4649      	mov	r1, r9
 8029e0a:	4638      	mov	r0, r7
 8029e0c:	47c0      	blx	r8
 8029e0e:	3001      	adds	r0, #1
 8029e10:	d01e      	beq.n	8029e50 <_printf_common+0xa4>
 8029e12:	6823      	ldr	r3, [r4, #0]
 8029e14:	68e5      	ldr	r5, [r4, #12]
 8029e16:	6832      	ldr	r2, [r6, #0]
 8029e18:	f003 0306 	and.w	r3, r3, #6
 8029e1c:	2b04      	cmp	r3, #4
 8029e1e:	bf08      	it	eq
 8029e20:	1aad      	subeq	r5, r5, r2
 8029e22:	68a3      	ldr	r3, [r4, #8]
 8029e24:	6922      	ldr	r2, [r4, #16]
 8029e26:	bf0c      	ite	eq
 8029e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029e2c:	2500      	movne	r5, #0
 8029e2e:	4293      	cmp	r3, r2
 8029e30:	bfc4      	itt	gt
 8029e32:	1a9b      	subgt	r3, r3, r2
 8029e34:	18ed      	addgt	r5, r5, r3
 8029e36:	2600      	movs	r6, #0
 8029e38:	341a      	adds	r4, #26
 8029e3a:	42b5      	cmp	r5, r6
 8029e3c:	d11a      	bne.n	8029e74 <_printf_common+0xc8>
 8029e3e:	2000      	movs	r0, #0
 8029e40:	e008      	b.n	8029e54 <_printf_common+0xa8>
 8029e42:	2301      	movs	r3, #1
 8029e44:	4652      	mov	r2, sl
 8029e46:	4649      	mov	r1, r9
 8029e48:	4638      	mov	r0, r7
 8029e4a:	47c0      	blx	r8
 8029e4c:	3001      	adds	r0, #1
 8029e4e:	d103      	bne.n	8029e58 <_printf_common+0xac>
 8029e50:	f04f 30ff 	mov.w	r0, #4294967295
 8029e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029e58:	3501      	adds	r5, #1
 8029e5a:	e7c6      	b.n	8029dea <_printf_common+0x3e>
 8029e5c:	18e1      	adds	r1, r4, r3
 8029e5e:	1c5a      	adds	r2, r3, #1
 8029e60:	2030      	movs	r0, #48	; 0x30
 8029e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029e66:	4422      	add	r2, r4
 8029e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029e70:	3302      	adds	r3, #2
 8029e72:	e7c7      	b.n	8029e04 <_printf_common+0x58>
 8029e74:	2301      	movs	r3, #1
 8029e76:	4622      	mov	r2, r4
 8029e78:	4649      	mov	r1, r9
 8029e7a:	4638      	mov	r0, r7
 8029e7c:	47c0      	blx	r8
 8029e7e:	3001      	adds	r0, #1
 8029e80:	d0e6      	beq.n	8029e50 <_printf_common+0xa4>
 8029e82:	3601      	adds	r6, #1
 8029e84:	e7d9      	b.n	8029e3a <_printf_common+0x8e>
	...

08029e88 <_printf_i>:
 8029e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029e8c:	460c      	mov	r4, r1
 8029e8e:	4691      	mov	r9, r2
 8029e90:	7e27      	ldrb	r7, [r4, #24]
 8029e92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029e94:	2f78      	cmp	r7, #120	; 0x78
 8029e96:	4680      	mov	r8, r0
 8029e98:	469a      	mov	sl, r3
 8029e9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029e9e:	d807      	bhi.n	8029eb0 <_printf_i+0x28>
 8029ea0:	2f62      	cmp	r7, #98	; 0x62
 8029ea2:	d80a      	bhi.n	8029eba <_printf_i+0x32>
 8029ea4:	2f00      	cmp	r7, #0
 8029ea6:	f000 80d8 	beq.w	802a05a <_printf_i+0x1d2>
 8029eaa:	2f58      	cmp	r7, #88	; 0x58
 8029eac:	f000 80a3 	beq.w	8029ff6 <_printf_i+0x16e>
 8029eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8029eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8029eb8:	e03a      	b.n	8029f30 <_printf_i+0xa8>
 8029eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8029ebe:	2b15      	cmp	r3, #21
 8029ec0:	d8f6      	bhi.n	8029eb0 <_printf_i+0x28>
 8029ec2:	a001      	add	r0, pc, #4	; (adr r0, 8029ec8 <_printf_i+0x40>)
 8029ec4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8029ec8:	08029f21 	.word	0x08029f21
 8029ecc:	08029f35 	.word	0x08029f35
 8029ed0:	08029eb1 	.word	0x08029eb1
 8029ed4:	08029eb1 	.word	0x08029eb1
 8029ed8:	08029eb1 	.word	0x08029eb1
 8029edc:	08029eb1 	.word	0x08029eb1
 8029ee0:	08029f35 	.word	0x08029f35
 8029ee4:	08029eb1 	.word	0x08029eb1
 8029ee8:	08029eb1 	.word	0x08029eb1
 8029eec:	08029eb1 	.word	0x08029eb1
 8029ef0:	08029eb1 	.word	0x08029eb1
 8029ef4:	0802a041 	.word	0x0802a041
 8029ef8:	08029f65 	.word	0x08029f65
 8029efc:	0802a023 	.word	0x0802a023
 8029f00:	08029eb1 	.word	0x08029eb1
 8029f04:	08029eb1 	.word	0x08029eb1
 8029f08:	0802a063 	.word	0x0802a063
 8029f0c:	08029eb1 	.word	0x08029eb1
 8029f10:	08029f65 	.word	0x08029f65
 8029f14:	08029eb1 	.word	0x08029eb1
 8029f18:	08029eb1 	.word	0x08029eb1
 8029f1c:	0802a02b 	.word	0x0802a02b
 8029f20:	680b      	ldr	r3, [r1, #0]
 8029f22:	1d1a      	adds	r2, r3, #4
 8029f24:	681b      	ldr	r3, [r3, #0]
 8029f26:	600a      	str	r2, [r1, #0]
 8029f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8029f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029f30:	2301      	movs	r3, #1
 8029f32:	e0a3      	b.n	802a07c <_printf_i+0x1f4>
 8029f34:	6825      	ldr	r5, [r4, #0]
 8029f36:	6808      	ldr	r0, [r1, #0]
 8029f38:	062e      	lsls	r6, r5, #24
 8029f3a:	f100 0304 	add.w	r3, r0, #4
 8029f3e:	d50a      	bpl.n	8029f56 <_printf_i+0xce>
 8029f40:	6805      	ldr	r5, [r0, #0]
 8029f42:	600b      	str	r3, [r1, #0]
 8029f44:	2d00      	cmp	r5, #0
 8029f46:	da03      	bge.n	8029f50 <_printf_i+0xc8>
 8029f48:	232d      	movs	r3, #45	; 0x2d
 8029f4a:	426d      	negs	r5, r5
 8029f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029f50:	485e      	ldr	r0, [pc, #376]	; (802a0cc <_printf_i+0x244>)
 8029f52:	230a      	movs	r3, #10
 8029f54:	e019      	b.n	8029f8a <_printf_i+0x102>
 8029f56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8029f5a:	6805      	ldr	r5, [r0, #0]
 8029f5c:	600b      	str	r3, [r1, #0]
 8029f5e:	bf18      	it	ne
 8029f60:	b22d      	sxthne	r5, r5
 8029f62:	e7ef      	b.n	8029f44 <_printf_i+0xbc>
 8029f64:	680b      	ldr	r3, [r1, #0]
 8029f66:	6825      	ldr	r5, [r4, #0]
 8029f68:	1d18      	adds	r0, r3, #4
 8029f6a:	6008      	str	r0, [r1, #0]
 8029f6c:	0628      	lsls	r0, r5, #24
 8029f6e:	d501      	bpl.n	8029f74 <_printf_i+0xec>
 8029f70:	681d      	ldr	r5, [r3, #0]
 8029f72:	e002      	b.n	8029f7a <_printf_i+0xf2>
 8029f74:	0669      	lsls	r1, r5, #25
 8029f76:	d5fb      	bpl.n	8029f70 <_printf_i+0xe8>
 8029f78:	881d      	ldrh	r5, [r3, #0]
 8029f7a:	4854      	ldr	r0, [pc, #336]	; (802a0cc <_printf_i+0x244>)
 8029f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8029f7e:	bf0c      	ite	eq
 8029f80:	2308      	moveq	r3, #8
 8029f82:	230a      	movne	r3, #10
 8029f84:	2100      	movs	r1, #0
 8029f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8029f8a:	6866      	ldr	r6, [r4, #4]
 8029f8c:	60a6      	str	r6, [r4, #8]
 8029f8e:	2e00      	cmp	r6, #0
 8029f90:	bfa2      	ittt	ge
 8029f92:	6821      	ldrge	r1, [r4, #0]
 8029f94:	f021 0104 	bicge.w	r1, r1, #4
 8029f98:	6021      	strge	r1, [r4, #0]
 8029f9a:	b90d      	cbnz	r5, 8029fa0 <_printf_i+0x118>
 8029f9c:	2e00      	cmp	r6, #0
 8029f9e:	d04d      	beq.n	802a03c <_printf_i+0x1b4>
 8029fa0:	4616      	mov	r6, r2
 8029fa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8029fa6:	fb03 5711 	mls	r7, r3, r1, r5
 8029faa:	5dc7      	ldrb	r7, [r0, r7]
 8029fac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8029fb0:	462f      	mov	r7, r5
 8029fb2:	42bb      	cmp	r3, r7
 8029fb4:	460d      	mov	r5, r1
 8029fb6:	d9f4      	bls.n	8029fa2 <_printf_i+0x11a>
 8029fb8:	2b08      	cmp	r3, #8
 8029fba:	d10b      	bne.n	8029fd4 <_printf_i+0x14c>
 8029fbc:	6823      	ldr	r3, [r4, #0]
 8029fbe:	07df      	lsls	r7, r3, #31
 8029fc0:	d508      	bpl.n	8029fd4 <_printf_i+0x14c>
 8029fc2:	6923      	ldr	r3, [r4, #16]
 8029fc4:	6861      	ldr	r1, [r4, #4]
 8029fc6:	4299      	cmp	r1, r3
 8029fc8:	bfde      	ittt	le
 8029fca:	2330      	movle	r3, #48	; 0x30
 8029fcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8029fd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8029fd4:	1b92      	subs	r2, r2, r6
 8029fd6:	6122      	str	r2, [r4, #16]
 8029fd8:	f8cd a000 	str.w	sl, [sp]
 8029fdc:	464b      	mov	r3, r9
 8029fde:	aa03      	add	r2, sp, #12
 8029fe0:	4621      	mov	r1, r4
 8029fe2:	4640      	mov	r0, r8
 8029fe4:	f7ff fee2 	bl	8029dac <_printf_common>
 8029fe8:	3001      	adds	r0, #1
 8029fea:	d14c      	bne.n	802a086 <_printf_i+0x1fe>
 8029fec:	f04f 30ff 	mov.w	r0, #4294967295
 8029ff0:	b004      	add	sp, #16
 8029ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029ff6:	4835      	ldr	r0, [pc, #212]	; (802a0cc <_printf_i+0x244>)
 8029ff8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8029ffc:	6823      	ldr	r3, [r4, #0]
 8029ffe:	680e      	ldr	r6, [r1, #0]
 802a000:	061f      	lsls	r7, r3, #24
 802a002:	f856 5b04 	ldr.w	r5, [r6], #4
 802a006:	600e      	str	r6, [r1, #0]
 802a008:	d514      	bpl.n	802a034 <_printf_i+0x1ac>
 802a00a:	07d9      	lsls	r1, r3, #31
 802a00c:	bf44      	itt	mi
 802a00e:	f043 0320 	orrmi.w	r3, r3, #32
 802a012:	6023      	strmi	r3, [r4, #0]
 802a014:	b91d      	cbnz	r5, 802a01e <_printf_i+0x196>
 802a016:	6823      	ldr	r3, [r4, #0]
 802a018:	f023 0320 	bic.w	r3, r3, #32
 802a01c:	6023      	str	r3, [r4, #0]
 802a01e:	2310      	movs	r3, #16
 802a020:	e7b0      	b.n	8029f84 <_printf_i+0xfc>
 802a022:	6823      	ldr	r3, [r4, #0]
 802a024:	f043 0320 	orr.w	r3, r3, #32
 802a028:	6023      	str	r3, [r4, #0]
 802a02a:	2378      	movs	r3, #120	; 0x78
 802a02c:	4828      	ldr	r0, [pc, #160]	; (802a0d0 <_printf_i+0x248>)
 802a02e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a032:	e7e3      	b.n	8029ffc <_printf_i+0x174>
 802a034:	065e      	lsls	r6, r3, #25
 802a036:	bf48      	it	mi
 802a038:	b2ad      	uxthmi	r5, r5
 802a03a:	e7e6      	b.n	802a00a <_printf_i+0x182>
 802a03c:	4616      	mov	r6, r2
 802a03e:	e7bb      	b.n	8029fb8 <_printf_i+0x130>
 802a040:	680b      	ldr	r3, [r1, #0]
 802a042:	6826      	ldr	r6, [r4, #0]
 802a044:	6960      	ldr	r0, [r4, #20]
 802a046:	1d1d      	adds	r5, r3, #4
 802a048:	600d      	str	r5, [r1, #0]
 802a04a:	0635      	lsls	r5, r6, #24
 802a04c:	681b      	ldr	r3, [r3, #0]
 802a04e:	d501      	bpl.n	802a054 <_printf_i+0x1cc>
 802a050:	6018      	str	r0, [r3, #0]
 802a052:	e002      	b.n	802a05a <_printf_i+0x1d2>
 802a054:	0671      	lsls	r1, r6, #25
 802a056:	d5fb      	bpl.n	802a050 <_printf_i+0x1c8>
 802a058:	8018      	strh	r0, [r3, #0]
 802a05a:	2300      	movs	r3, #0
 802a05c:	6123      	str	r3, [r4, #16]
 802a05e:	4616      	mov	r6, r2
 802a060:	e7ba      	b.n	8029fd8 <_printf_i+0x150>
 802a062:	680b      	ldr	r3, [r1, #0]
 802a064:	1d1a      	adds	r2, r3, #4
 802a066:	600a      	str	r2, [r1, #0]
 802a068:	681e      	ldr	r6, [r3, #0]
 802a06a:	6862      	ldr	r2, [r4, #4]
 802a06c:	2100      	movs	r1, #0
 802a06e:	4630      	mov	r0, r6
 802a070:	f7e6 f8b6 	bl	80101e0 <memchr>
 802a074:	b108      	cbz	r0, 802a07a <_printf_i+0x1f2>
 802a076:	1b80      	subs	r0, r0, r6
 802a078:	6060      	str	r0, [r4, #4]
 802a07a:	6863      	ldr	r3, [r4, #4]
 802a07c:	6123      	str	r3, [r4, #16]
 802a07e:	2300      	movs	r3, #0
 802a080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a084:	e7a8      	b.n	8029fd8 <_printf_i+0x150>
 802a086:	6923      	ldr	r3, [r4, #16]
 802a088:	4632      	mov	r2, r6
 802a08a:	4649      	mov	r1, r9
 802a08c:	4640      	mov	r0, r8
 802a08e:	47d0      	blx	sl
 802a090:	3001      	adds	r0, #1
 802a092:	d0ab      	beq.n	8029fec <_printf_i+0x164>
 802a094:	6823      	ldr	r3, [r4, #0]
 802a096:	079b      	lsls	r3, r3, #30
 802a098:	d413      	bmi.n	802a0c2 <_printf_i+0x23a>
 802a09a:	68e0      	ldr	r0, [r4, #12]
 802a09c:	9b03      	ldr	r3, [sp, #12]
 802a09e:	4298      	cmp	r0, r3
 802a0a0:	bfb8      	it	lt
 802a0a2:	4618      	movlt	r0, r3
 802a0a4:	e7a4      	b.n	8029ff0 <_printf_i+0x168>
 802a0a6:	2301      	movs	r3, #1
 802a0a8:	4632      	mov	r2, r6
 802a0aa:	4649      	mov	r1, r9
 802a0ac:	4640      	mov	r0, r8
 802a0ae:	47d0      	blx	sl
 802a0b0:	3001      	adds	r0, #1
 802a0b2:	d09b      	beq.n	8029fec <_printf_i+0x164>
 802a0b4:	3501      	adds	r5, #1
 802a0b6:	68e3      	ldr	r3, [r4, #12]
 802a0b8:	9903      	ldr	r1, [sp, #12]
 802a0ba:	1a5b      	subs	r3, r3, r1
 802a0bc:	42ab      	cmp	r3, r5
 802a0be:	dcf2      	bgt.n	802a0a6 <_printf_i+0x21e>
 802a0c0:	e7eb      	b.n	802a09a <_printf_i+0x212>
 802a0c2:	2500      	movs	r5, #0
 802a0c4:	f104 0619 	add.w	r6, r4, #25
 802a0c8:	e7f5      	b.n	802a0b6 <_printf_i+0x22e>
 802a0ca:	bf00      	nop
 802a0cc:	0802a929 	.word	0x0802a929
 802a0d0:	0802a93a 	.word	0x0802a93a

0802a0d4 <_read_r>:
 802a0d4:	b538      	push	{r3, r4, r5, lr}
 802a0d6:	4d07      	ldr	r5, [pc, #28]	; (802a0f4 <_read_r+0x20>)
 802a0d8:	4604      	mov	r4, r0
 802a0da:	4608      	mov	r0, r1
 802a0dc:	4611      	mov	r1, r2
 802a0de:	2200      	movs	r2, #0
 802a0e0:	602a      	str	r2, [r5, #0]
 802a0e2:	461a      	mov	r2, r3
 802a0e4:	f7e7 fc9c 	bl	8011a20 <_read>
 802a0e8:	1c43      	adds	r3, r0, #1
 802a0ea:	d102      	bne.n	802a0f2 <_read_r+0x1e>
 802a0ec:	682b      	ldr	r3, [r5, #0]
 802a0ee:	b103      	cbz	r3, 802a0f2 <_read_r+0x1e>
 802a0f0:	6023      	str	r3, [r4, #0]
 802a0f2:	bd38      	pop	{r3, r4, r5, pc}
 802a0f4:	2000a238 	.word	0x2000a238

0802a0f8 <_fstat_r>:
 802a0f8:	b538      	push	{r3, r4, r5, lr}
 802a0fa:	4d07      	ldr	r5, [pc, #28]	; (802a118 <_fstat_r+0x20>)
 802a0fc:	2300      	movs	r3, #0
 802a0fe:	4604      	mov	r4, r0
 802a100:	4608      	mov	r0, r1
 802a102:	4611      	mov	r1, r2
 802a104:	602b      	str	r3, [r5, #0]
 802a106:	f7e7 fcd0 	bl	8011aaa <_fstat>
 802a10a:	1c43      	adds	r3, r0, #1
 802a10c:	d102      	bne.n	802a114 <_fstat_r+0x1c>
 802a10e:	682b      	ldr	r3, [r5, #0]
 802a110:	b103      	cbz	r3, 802a114 <_fstat_r+0x1c>
 802a112:	6023      	str	r3, [r4, #0]
 802a114:	bd38      	pop	{r3, r4, r5, pc}
 802a116:	bf00      	nop
 802a118:	2000a238 	.word	0x2000a238

0802a11c <_isatty_r>:
 802a11c:	b538      	push	{r3, r4, r5, lr}
 802a11e:	4d06      	ldr	r5, [pc, #24]	; (802a138 <_isatty_r+0x1c>)
 802a120:	2300      	movs	r3, #0
 802a122:	4604      	mov	r4, r0
 802a124:	4608      	mov	r0, r1
 802a126:	602b      	str	r3, [r5, #0]
 802a128:	f7e7 fccf 	bl	8011aca <_isatty>
 802a12c:	1c43      	adds	r3, r0, #1
 802a12e:	d102      	bne.n	802a136 <_isatty_r+0x1a>
 802a130:	682b      	ldr	r3, [r5, #0]
 802a132:	b103      	cbz	r3, 802a136 <_isatty_r+0x1a>
 802a134:	6023      	str	r3, [r4, #0]
 802a136:	bd38      	pop	{r3, r4, r5, pc}
 802a138:	2000a238 	.word	0x2000a238

0802a13c <memmove>:
 802a13c:	4288      	cmp	r0, r1
 802a13e:	b510      	push	{r4, lr}
 802a140:	eb01 0402 	add.w	r4, r1, r2
 802a144:	d902      	bls.n	802a14c <memmove+0x10>
 802a146:	4284      	cmp	r4, r0
 802a148:	4623      	mov	r3, r4
 802a14a:	d807      	bhi.n	802a15c <memmove+0x20>
 802a14c:	1e43      	subs	r3, r0, #1
 802a14e:	42a1      	cmp	r1, r4
 802a150:	d008      	beq.n	802a164 <memmove+0x28>
 802a152:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a156:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a15a:	e7f8      	b.n	802a14e <memmove+0x12>
 802a15c:	4402      	add	r2, r0
 802a15e:	4601      	mov	r1, r0
 802a160:	428a      	cmp	r2, r1
 802a162:	d100      	bne.n	802a166 <memmove+0x2a>
 802a164:	bd10      	pop	{r4, pc}
 802a166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a16a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a16e:	e7f7      	b.n	802a160 <memmove+0x24>

0802a170 <_realloc_r>:
 802a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a172:	4607      	mov	r7, r0
 802a174:	4614      	mov	r4, r2
 802a176:	460e      	mov	r6, r1
 802a178:	b921      	cbnz	r1, 802a184 <_realloc_r+0x14>
 802a17a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802a17e:	4611      	mov	r1, r2
 802a180:	f7ff b87e 	b.w	8029280 <_malloc_r>
 802a184:	b922      	cbnz	r2, 802a190 <_realloc_r+0x20>
 802a186:	f7ff fc65 	bl	8029a54 <_free_r>
 802a18a:	4625      	mov	r5, r4
 802a18c:	4628      	mov	r0, r5
 802a18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a190:	f000 f814 	bl	802a1bc <_malloc_usable_size_r>
 802a194:	42a0      	cmp	r0, r4
 802a196:	d20f      	bcs.n	802a1b8 <_realloc_r+0x48>
 802a198:	4621      	mov	r1, r4
 802a19a:	4638      	mov	r0, r7
 802a19c:	f7ff f870 	bl	8029280 <_malloc_r>
 802a1a0:	4605      	mov	r5, r0
 802a1a2:	2800      	cmp	r0, #0
 802a1a4:	d0f2      	beq.n	802a18c <_realloc_r+0x1c>
 802a1a6:	4631      	mov	r1, r6
 802a1a8:	4622      	mov	r2, r4
 802a1aa:	f7ff f852 	bl	8029252 <memcpy>
 802a1ae:	4631      	mov	r1, r6
 802a1b0:	4638      	mov	r0, r7
 802a1b2:	f7ff fc4f 	bl	8029a54 <_free_r>
 802a1b6:	e7e9      	b.n	802a18c <_realloc_r+0x1c>
 802a1b8:	4635      	mov	r5, r6
 802a1ba:	e7e7      	b.n	802a18c <_realloc_r+0x1c>

0802a1bc <_malloc_usable_size_r>:
 802a1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a1c0:	1f18      	subs	r0, r3, #4
 802a1c2:	2b00      	cmp	r3, #0
 802a1c4:	bfbc      	itt	lt
 802a1c6:	580b      	ldrlt	r3, [r1, r0]
 802a1c8:	18c0      	addlt	r0, r0, r3
 802a1ca:	4770      	bx	lr

0802a1cc <_init>:
 802a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a1ce:	bf00      	nop
 802a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a1d2:	bc08      	pop	{r3}
 802a1d4:	469e      	mov	lr, r3
 802a1d6:	4770      	bx	lr

0802a1d8 <_fini>:
 802a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a1da:	bf00      	nop
 802a1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a1de:	bc08      	pop	{r3}
 802a1e0:	469e      	mov	lr, r3
 802a1e2:	4770      	bx	lr
